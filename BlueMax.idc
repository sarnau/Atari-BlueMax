//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3051-7314-20                      |
// |                       Markus Fritze, personal use                       |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("M6502", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 0);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);

	add_segm_ex(0,0XB0,0,0,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0,"ZEROPAGE");
	SegClass (0,"ZEROPAGE");
	SegDefReg(0x0,"ds",0x0);
	add_segm_ex(0XB0,0X100,0,0,0,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XB0,"VARS_ZP");
	SegClass (0XB0,"BSS");
	SegDefReg(0xB0,"ds",0x0);
	set_segm_type(0XB0,9);
	add_segm_ex(0X100,0X200,0,0,0,5,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X100,"STACK");
	SegClass (0X100,"STACK");
	SegDefReg(0x100,"ds",0x0);
	add_segm_ex(0X200,0X600,0,0,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X200,"LOWMEM");
	SegClass (0X200,"LOWMEM");
	SegDefReg(0x200,"ds",0x0);
	add_segm_ex(0X600,0X700,0,0,0,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X600,"VARS");
	SegClass (0X600,"BSS");
	SegDefReg(0x600,"ds",0x0);
	set_segm_type(0X600,9);
	add_segm_ex(0X700,0X800,0,0,0,2,ADDSEG_NOSREG);
	SegRename(0X700,"TAPE_LOADER");
	SegClass (0X700,"CODE");
	SegDefReg(0x700,"ds",0x0);
	set_segm_type(0X700,2);
	add_segm_ex(0XC00,0X519D,0X1,0,0,2,ADDSEG_NOSREG);
	SegRename(0XC00,"GAME");
	SegClass (0XC00,"CODE");
	SegDefReg(0xC00,"ds",0x1);
	set_segm_type(0XC00,2);
	add_segm_ex(0X519D,0X5C00,0,0,0,2,ADDSEG_NOSREG);
	SegRename(0X519D,"DATA");
	SegClass (0X519D,"DATA");
	SegDefReg(0x519D,"ds",0x0);
	set_segm_type(0X519D,3);
	add_segm_ex(0X5C00,0X6000,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0X5C00,"CHBASE");
	SegClass (0X5C00,"DATA");
	SegDefReg(0x5C00,"ds",0x0);
	set_segm_type(0X5C00,3);
	add_segm_ex(0X6400,0X7000,0,0,0,2,ADDSEG_NOSREG);
	SegRename(0X6400,"SCREENRAM");
	SegClass (0X6400,"BSS");
	SegDefReg(0x6400,"ds",0x0);
	set_segm_type(0X6400,9);
	add_segm_ex(0X7000,0X7800,0,0,0,2,ADDSEG_NOSREG);
	SegRename(0X7000,"PMBASE");
	SegClass (0X7000,"BSS");
	SegDefReg(0x7000,"ds",0x0);
	set_segm_type(0X7000,9);
	add_segm_ex(0XD000,0XD800,0,0,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XD000,"IO");
	SegClass (0XD000,"IO");
	SegDefReg(0xD000,"ds",0x0);
	add_segm_ex(0XD800,0X10000,0,0,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XD800,"ROM");
	SegClass (0XD800,"ROM");
	SegDefReg(0xD800,"ds",0x0);
	set_inf_attr(INF_LOW_OFF, 0x0);
	set_inf_attr(INF_HIGH_OFF, 0x10000);
}

static Enums_0(id) {

	id = add_enum(-1,"DCB_COMMANDS",0x1100000);
	add_enum_member(id,"DCB_COMMANDS_FORMAT",	0X21,	-1);
	add_enum_member(id,"DCB_COMMANDS_FORMAT_MD",	0X22,	-1);
	add_enum_member(id,"DCB_COMMANDS_INTO",	0X4E,	-1);
	add_enum_member(id,"DCB_COMMANDS_OUT",	0X4F,	-1);
	add_enum_member(id,"DCB_COMMANDS_PUT",	0X50,	-1);
	add_enum_member(id,"DCB_COMMANDS_READ",	0X52,	-1);
	add_enum_member(id,"DCB_COMMANDS_STATUS",	0X53,	-1);
	add_enum_member(id,"DCB_COMMANDS_WRITE",	0X57,	-1);
	id = add_enum(-1,"COLOR",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"COLOR_INTENSITY_0",	0,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_1",	0X1,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_2",	0X2,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_3",	0X3,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_4",	0X4,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_5",	0X5,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_6",	0X6,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_7",	0X7,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_8",	0X8,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_9",	0X9,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_10",	0XA,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_11",	0XB,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_12",	0XC,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_13",	0XD,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_14",	0XE,	0xF);
	add_enum_member(id,"COLOR_INTENSITY_15",	0XF,	0xF);
	add_enum_member(id,"COLOR_GRAY",	0,	0xF0);
	add_enum_member(id,"COLOR_GOLD",	0X10,	0xF0);
	add_enum_member(id,"COLOR_ORANGE",	0X20,	0xF0);
	add_enum_member(id,"COLOR_RED_ORANGE",	0X30,	0xF0);
	add_enum_member(id,"COLOR_RED_PINK",	0X40,	0xF0);
	add_enum_member(id,"COLOR_RED_PINK_PURPLE",	0X50,	0xF0);
	add_enum_member(id,"COLOR_PURPLE_BLUE",	0X60,	0xF0);
	add_enum_member(id,"COLOR_DARK_PURPLE",	0X70,	0xF0);
	add_enum_member(id,"COLOR_BLUE",	0X80,	0xF0);
	add_enum_member(id,"COLOR_LIGHT_BLUE",	0X90,	0xF0);
	add_enum_member(id,"COLOR_TURQUOISE",	0XA0,	0xF0);
	add_enum_member(id,"COLOR_GREEN_BLUE",	0XB0,	0xF0);
	add_enum_member(id,"COLOR_GREEN",	0XC0,	0xF0);
	add_enum_member(id,"COLOR_YELLOW_GREEN",	0XD0,	0xF0);
	add_enum_member(id,"COLOR_ORANGE_GREEN",	0XE0,	0xF0);
	add_enum_member(id,"COLOR_LIGHT_ORANGE",	0XF0,	0xF0);
	id = add_enum(-1,"AUDIO_CONTROL",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"AUDIO_CONTROL_VOL_1",	0X1,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_2",	0X2,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_3",	0X3,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_4",	0X4,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_5",	0X5,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_6",	0X6,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_7",	0X7,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_8",	0X8,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_9",	0X9,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_10",	0XA,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_11",	0XB,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_12",	0XC,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_13",	0XD,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_14",	0XE,	0xF);
	add_enum_member(id,"AUDIO_CONTROL_VOL_15",	0XF,	0xF);
	add_enum_member(id,"VOLUME_ONLY",	0X10,	0x10);
	add_enum_member(id,"AUDIO_CONTROL_DIST_0",	0X20,	0xE0);
	add_enum_member(id,"AUDIO_CONTROL_DIST_1",	0X40,	0xE0);
	add_enum_member(id,"AUDIO_CONTROL_DIST_2",	0X60,	0xE0);
	add_enum_member(id,"AUDIO_CONTROL_DIST_3",	0X80,	0xE0);
	add_enum_member(id,"AUDIO_CONTROL_DIST_4",	0XA0,	0xE0);
	add_enum_member(id,"AUDIO_CONTROL_DIST_6",	0XC0,	0xE0);
	id = add_enum(-1,"SND_FREQ",0x2200000);
	add_enum_member(id,"SND_FREQ_0",	0,	-1);
	add_enum_member(id,"SND_FREQ_1",	0X1,	-1);
	add_enum_member(id,"SND_FREQ_2",	0X2,	-1);
	add_enum_member(id,"SND_FREQ_3",	0X3,	-1);
	add_enum_member(id,"SND_FREQ_4",	0X4,	-1);
	add_enum_member(id,"SND_FREQ_5",	0X5,	-1);
	add_enum_member(id,"SND_FREQ_6",	0X6,	-1);
	add_enum_member(id,"SND_FREQ_7",	0X7,	-1);
	add_enum_member(id,"SND_FREQ_8",	0X8,	-1);
	add_enum_member(id,"SND_FREQ_9",	0X9,	-1);
	add_enum_member(id,"SND_FREQ_10",	0XA,	-1);
	add_enum_member(id,"SND_FREQ_11",	0XB,	-1);
	add_enum_member(id,"SND_FREQ_12",	0XC,	-1);
	add_enum_member(id,"SND_FREQ_13",	0XD,	-1);
	add_enum_member(id,"SND_FREQ_14",	0XE,	-1);
	add_enum_member(id,"SND_FREQ_15",	0XF,	-1);
	add_enum_member(id,"SND_FREQ_16",	0X10,	-1);
	add_enum_member(id,"SND_FREQ_17",	0X11,	-1);
	add_enum_member(id,"SND_FREQ_18",	0X12,	-1);
	add_enum_member(id,"SND_FREQ_19",	0X13,	-1);
	add_enum_member(id,"SND_FREQ_20",	0X14,	-1);
	add_enum_member(id,"SND_FREQ_21",	0X15,	-1);
	add_enum_member(id,"SND_FREQ_22",	0X16,	-1);
	add_enum_member(id,"SND_FREQ_23",	0X17,	-1);
	add_enum_member(id,"SND_FREQ_24",	0X18,	-1);
	add_enum_member(id,"SND_FREQ_25",	0X19,	-1);
	add_enum_member(id,"SND_FREQ_26",	0X1A,	-1);
	add_enum_member(id,"SND_FREQ_27",	0X1B,	-1);
	add_enum_member(id,"SND_FREQ_28",	0X1C,	-1);
	add_enum_member(id,"SND_FREQ_29",	0X1D,	-1);
	add_enum_member(id,"SND_FREQ_30",	0X1E,	-1);
	add_enum_member(id,"SND_FREQ_31",	0X1F,	-1);
	add_enum_member(id,"SND_FREQ_32",	0X20,	-1);
	add_enum_member(id,"SND_FREQ_33",	0X21,	-1);
	add_enum_member(id,"SND_FREQ_34",	0X22,	-1);
	add_enum_member(id,"SND_FREQ_35",	0X23,	-1);
	add_enum_member(id,"SND_FREQ_36",	0X24,	-1);
	add_enum_member(id,"SND_FREQ_37",	0X25,	-1);
	add_enum_member(id,"SND_FREQ_38",	0X26,	-1);
	add_enum_member(id,"SND_FREQ_39",	0X27,	-1);
	add_enum_member(id,"SND_FREQ_40",	0X28,	-1);
	add_enum_member(id,"SND_FREQ_41",	0X29,	-1);
	add_enum_member(id,"SND_FREQ_42",	0X2A,	-1);
	add_enum_member(id,"SND_FREQ_43",	0X2B,	-1);
	add_enum_member(id,"SND_FREQ_44",	0X2C,	-1);
	add_enum_member(id,"SND_FREQ_45",	0X2D,	-1);
	add_enum_member(id,"SND_FREQ_46",	0X2E,	-1);
	add_enum_member(id,"SND_FREQ_47",	0X2F,	-1);
	add_enum_member(id,"SND_FREQ_48",	0X30,	-1);
	add_enum_member(id,"SND_FREQ_49",	0X31,	-1);
	add_enum_member(id,"SND_FREQ_50",	0X32,	-1);
	add_enum_member(id,"SND_FREQ_51",	0X33,	-1);
	add_enum_member(id,"SND_FREQ_52",	0X34,	-1);
	add_enum_member(id,"SND_FREQ_53",	0X35,	-1);
	add_enum_member(id,"SND_FREQ_54",	0X36,	-1);
	add_enum_member(id,"SND_FREQ_55",	0X37,	-1);
	add_enum_member(id,"SND_FREQ_56",	0X38,	-1);
	add_enum_member(id,"SND_FREQ_57",	0X39,	-1);
	add_enum_member(id,"SND_FREQ_58",	0X3A,	-1);
	add_enum_member(id,"SND_FREQ_59",	0X3B,	-1);
	add_enum_member(id,"SND_FREQ_60",	0X3C,	-1);
	add_enum_member(id,"SND_FREQ_61",	0X3D,	-1);
	add_enum_member(id,"SND_FREQ_62",	0X3E,	-1);
	add_enum_member(id,"SND_FREQ_63",	0X3F,	-1);
	add_enum_member(id,"SND_FREQ_64",	0X40,	-1);
	add_enum_member(id,"SND_FREQ_65",	0X41,	-1);
	add_enum_member(id,"SND_FREQ_66",	0X42,	-1);
	add_enum_member(id,"SND_FREQ_67",	0X43,	-1);
	add_enum_member(id,"SND_FREQ_68",	0X44,	-1);
	add_enum_member(id,"SND_FREQ_69",	0X45,	-1);
	add_enum_member(id,"SND_FREQ_70",	0X46,	-1);
	add_enum_member(id,"SND_FREQ_71",	0X47,	-1);
	add_enum_member(id,"SND_FREQ_72",	0X48,	-1);
	add_enum_member(id,"SND_FREQ_73",	0X49,	-1);
	add_enum_member(id,"SND_FREQ_74",	0X4A,	-1);
	add_enum_member(id,"SND_FREQ_75",	0X4B,	-1);
	add_enum_member(id,"SND_FREQ_76",	0X4C,	-1);
	add_enum_member(id,"SND_FREQ_77",	0X4D,	-1);
	add_enum_member(id,"SND_FREQ_78",	0X4E,	-1);
	add_enum_member(id,"SND_FREQ_79",	0X4F,	-1);
	add_enum_member(id,"SND_FREQ_80",	0X50,	-1);
	add_enum_member(id,"SND_FREQ_81",	0X51,	-1);
	add_enum_member(id,"SND_FREQ_82",	0X52,	-1);
	add_enum_member(id,"SND_FREQ_83",	0X53,	-1);
	add_enum_member(id,"SND_FREQ_84",	0X54,	-1);
	add_enum_member(id,"SND_FREQ_85",	0X55,	-1);
	add_enum_member(id,"SND_FREQ_86",	0X56,	-1);
	add_enum_member(id,"SND_FREQ_87",	0X57,	-1);
	add_enum_member(id,"SND_FREQ_88",	0X58,	-1);
	add_enum_member(id,"SND_FREQ_89",	0X59,	-1);
	add_enum_member(id,"SND_FREQ_90",	0X5A,	-1);
	add_enum_member(id,"SND_FREQ_91",	0X5B,	-1);
	add_enum_member(id,"SND_FREQ_92",	0X5C,	-1);
	add_enum_member(id,"SND_FREQ_93",	0X5D,	-1);
	add_enum_member(id,"SND_FREQ_94",	0X5E,	-1);
	add_enum_member(id,"SND_FREQ_95",	0X5F,	-1);
	add_enum_member(id,"SND_FREQ_96",	0X60,	-1);
	add_enum_member(id,"SND_FREQ_97",	0X61,	-1);
	add_enum_member(id,"SND_FREQ_98",	0X62,	-1);
	add_enum_member(id,"SND_FREQ_99",	0X63,	-1);
	add_enum_member(id,"SND_FREQ_100",	0X64,	-1);
	add_enum_member(id,"SND_FREQ_101",	0X65,	-1);
	add_enum_member(id,"SND_FREQ_102",	0X66,	-1);
	add_enum_member(id,"SND_FREQ_103",	0X67,	-1);
	add_enum_member(id,"SND_FREQ_104",	0X68,	-1);
	add_enum_member(id,"SND_FREQ_105",	0X69,	-1);
	add_enum_member(id,"SND_FREQ_106",	0X6A,	-1);
	add_enum_member(id,"SND_FREQ_107",	0X6B,	-1);
	add_enum_member(id,"SND_FREQ_108",	0X6C,	-1);
	add_enum_member(id,"SND_FREQ_109",	0X6D,	-1);
	add_enum_member(id,"SND_FREQ_110",	0X6E,	-1);
	add_enum_member(id,"SND_FREQ_111",	0X6F,	-1);
	add_enum_member(id,"SND_FREQ_112",	0X70,	-1);
	add_enum_member(id,"SND_FREQ_113",	0X71,	-1);
	add_enum_member(id,"SND_FREQ_114",	0X72,	-1);
	add_enum_member(id,"SND_FREQ_115",	0X73,	-1);
	add_enum_member(id,"SND_FREQ_116",	0X74,	-1);
	add_enum_member(id,"SND_FREQ_117",	0X75,	-1);
	add_enum_member(id,"SND_FREQ_118",	0X76,	-1);
	add_enum_member(id,"SND_FREQ_119",	0X77,	-1);
	add_enum_member(id,"SND_FREQ_120",	0X78,	-1);
	add_enum_member(id,"SND_FREQ_121",	0X79,	-1);
	add_enum_member(id,"SND_FREQ_122",	0X7A,	-1);
	add_enum_member(id,"SND_FREQ_123",	0X7B,	-1);
	add_enum_member(id,"SND_FREQ_124",	0X7C,	-1);
	add_enum_member(id,"SND_FREQ_125",	0X7D,	-1);
	add_enum_member(id,"SND_FREQ_126",	0X7E,	-1);
	add_enum_member(id,"SND_FREQ_127",	0X7F,	-1);
	add_enum_member(id,"SND_FREQ_128",	0X80,	-1);
	add_enum_member(id,"SND_FREQ_129",	0X81,	-1);
	add_enum_member(id,"SND_FREQ_130",	0X82,	-1);
	add_enum_member(id,"SND_FREQ_131",	0X83,	-1);
	add_enum_member(id,"SND_FREQ_132",	0X84,	-1);
	add_enum_member(id,"SND_FREQ_133",	0X85,	-1);
	add_enum_member(id,"SND_FREQ_134",	0X86,	-1);
	add_enum_member(id,"SND_FREQ_135",	0X87,	-1);
	add_enum_member(id,"SND_FREQ_136",	0X88,	-1);
	add_enum_member(id,"SND_FREQ_137",	0X89,	-1);
	add_enum_member(id,"SND_FREQ_138",	0X8A,	-1);
	add_enum_member(id,"SND_FREQ_139",	0X8B,	-1);
	add_enum_member(id,"SND_FREQ_140",	0X8C,	-1);
	add_enum_member(id,"SND_FREQ_141",	0X8D,	-1);
	add_enum_member(id,"SND_FREQ_142",	0X8E,	-1);
	add_enum_member(id,"SND_FREQ_143",	0X8F,	-1);
	add_enum_member(id,"SND_FREQ_144",	0X90,	-1);
	add_enum_member(id,"SND_FREQ_145",	0X91,	-1);
	add_enum_member(id,"SND_FREQ_146",	0X92,	-1);
	add_enum_member(id,"SND_FREQ_147",	0X93,	-1);
	add_enum_member(id,"SND_FREQ_148",	0X94,	-1);
	add_enum_member(id,"SND_FREQ_149",	0X95,	-1);
	add_enum_member(id,"SND_FREQ_150",	0X96,	-1);
	add_enum_member(id,"SND_FREQ_151",	0X97,	-1);
	add_enum_member(id,"SND_FREQ_152",	0X98,	-1);
	add_enum_member(id,"SND_FREQ_153",	0X99,	-1);
	add_enum_member(id,"SND_FREQ_154",	0X9A,	-1);
	add_enum_member(id,"SND_FREQ_155",	0X9B,	-1);
	add_enum_member(id,"SND_FREQ_156",	0X9C,	-1);
	add_enum_member(id,"SND_FREQ_157",	0X9D,	-1);
	add_enum_member(id,"SND_FREQ_158",	0X9E,	-1);
	add_enum_member(id,"SND_FREQ_159",	0X9F,	-1);
	add_enum_member(id,"SND_FREQ_160",	0XA0,	-1);
	add_enum_member(id,"SND_FREQ_161",	0XA1,	-1);
	add_enum_member(id,"SND_FREQ_162",	0XA2,	-1);
	add_enum_member(id,"SND_FREQ_163",	0XA3,	-1);
	add_enum_member(id,"SND_FREQ_164",	0XA4,	-1);
	add_enum_member(id,"SND_FREQ_165",	0XA5,	-1);
	add_enum_member(id,"SND_FREQ_166",	0XA6,	-1);
	add_enum_member(id,"SND_FREQ_167",	0XA7,	-1);
	add_enum_member(id,"SND_FREQ_168",	0XA8,	-1);
	add_enum_member(id,"SND_FREQ_169",	0XA9,	-1);
	add_enum_member(id,"SND_FREQ_170",	0XAA,	-1);
	add_enum_member(id,"SND_FREQ_171",	0XAB,	-1);
	add_enum_member(id,"SND_FREQ_172",	0XAC,	-1);
	add_enum_member(id,"SND_FREQ_173",	0XAD,	-1);
	add_enum_member(id,"SND_FREQ_174",	0XAE,	-1);
	add_enum_member(id,"SND_FREQ_175",	0XAF,	-1);
	add_enum_member(id,"SND_FREQ_176",	0XB0,	-1);
	add_enum_member(id,"SND_FREQ_177",	0XB1,	-1);
	add_enum_member(id,"SND_FREQ_178",	0XB2,	-1);
	add_enum_member(id,"SND_FREQ_179",	0XB3,	-1);
	add_enum_member(id,"SND_FREQ_180",	0XB4,	-1);
	add_enum_member(id,"SND_FREQ_181",	0XB5,	-1);
	add_enum_member(id,"SND_FREQ_182",	0XB6,	-1);
	add_enum_member(id,"SND_FREQ_183",	0XB7,	-1);
	add_enum_member(id,"SND_FREQ_184",	0XB8,	-1);
	add_enum_member(id,"SND_FREQ_185",	0XB9,	-1);
	add_enum_member(id,"SND_FREQ_186",	0XBA,	-1);
	add_enum_member(id,"SND_FREQ_187",	0XBB,	-1);
	add_enum_member(id,"SND_FREQ_188",	0XBC,	-1);
	add_enum_member(id,"SND_FREQ_189",	0XBD,	-1);
	add_enum_member(id,"SND_FREQ_190",	0XBE,	-1);
	add_enum_member(id,"SND_FREQ_191",	0XBF,	-1);
	add_enum_member(id,"SND_FREQ_192",	0XC0,	-1);
	add_enum_member(id,"SND_FREQ_193",	0XC1,	-1);
	add_enum_member(id,"SND_FREQ_194",	0XC2,	-1);
	add_enum_member(id,"SND_FREQ_195",	0XC3,	-1);
	add_enum_member(id,"SND_FREQ_196",	0XC4,	-1);
	add_enum_member(id,"SND_FREQ_197",	0XC5,	-1);
	add_enum_member(id,"SND_FREQ_198",	0XC6,	-1);
	add_enum_member(id,"SND_FREQ_199",	0XC7,	-1);
	add_enum_member(id,"SND_FREQ_200",	0XC8,	-1);
	add_enum_member(id,"SND_FREQ_201",	0XC9,	-1);
	add_enum_member(id,"SND_FREQ_202",	0XCA,	-1);
	add_enum_member(id,"SND_FREQ_203",	0XCB,	-1);
	add_enum_member(id,"SND_FREQ_204",	0XCC,	-1);
	add_enum_member(id,"SND_FREQ_205",	0XCD,	-1);
	add_enum_member(id,"SND_FREQ_206",	0XCE,	-1);
	add_enum_member(id,"SND_FREQ_207",	0XCF,	-1);
	add_enum_member(id,"SND_FREQ_208",	0XD0,	-1);
	add_enum_member(id,"SND_FREQ_209",	0XD1,	-1);
	add_enum_member(id,"SND_FREQ_210",	0XD2,	-1);
	add_enum_member(id,"SND_FREQ_211",	0XD3,	-1);
	add_enum_member(id,"SND_FREQ_212",	0XD4,	-1);
	add_enum_member(id,"SND_FREQ_213",	0XD5,	-1);
	add_enum_member(id,"SND_FREQ_214",	0XD6,	-1);
	add_enum_member(id,"SND_FREQ_215",	0XD7,	-1);
	add_enum_member(id,"SND_FREQ_216",	0XD8,	-1);
	add_enum_member(id,"SND_FREQ_217",	0XD9,	-1);
	add_enum_member(id,"SND_FREQ_218",	0XDA,	-1);
	add_enum_member(id,"SND_FREQ_219",	0XDB,	-1);
	add_enum_member(id,"SND_FREQ_220",	0XDC,	-1);
	add_enum_member(id,"SND_FREQ_221",	0XDD,	-1);
	add_enum_member(id,"SND_FREQ_222",	0XDE,	-1);
	add_enum_member(id,"SND_FREQ_223",	0XDF,	-1);
	add_enum_member(id,"SND_FREQ_224",	0XE0,	-1);
	add_enum_member(id,"SND_FREQ_225",	0XE1,	-1);
	add_enum_member(id,"SND_FREQ_226",	0XE2,	-1);
	add_enum_member(id,"SND_FREQ_227",	0XE3,	-1);
	add_enum_member(id,"SND_FREQ_228",	0XE4,	-1);
	add_enum_member(id,"SND_FREQ_229",	0XE5,	-1);
	add_enum_member(id,"SND_FREQ_230",	0XE6,	-1);
	add_enum_member(id,"SND_FREQ_231",	0XE7,	-1);
	add_enum_member(id,"SND_FREQ_232",	0XE8,	-1);
	add_enum_member(id,"SND_FREQ_233",	0XE9,	-1);
	add_enum_member(id,"SND_FREQ_234",	0XEA,	-1);
	add_enum_member(id,"SND_FREQ_235",	0XEB,	-1);
	add_enum_member(id,"SND_FREQ_236",	0XEC,	-1);
	add_enum_member(id,"SND_FREQ_237",	0XED,	-1);
	add_enum_member(id,"SND_FREQ_238",	0XEE,	-1);
	add_enum_member(id,"SND_FREQ_239",	0XEF,	-1);
	add_enum_member(id,"SND_FREQ_240",	0XF0,	-1);
	add_enum_member(id,"SND_FREQ_241",	0XF1,	-1);
	add_enum_member(id,"SND_FREQ_242",	0XF2,	-1);
	add_enum_member(id,"SND_FREQ_243",	0XF3,	-1);
	add_enum_member(id,"SND_FREQ_244",	0XF4,	-1);
	add_enum_member(id,"SND_FREQ_245",	0XF5,	-1);
	add_enum_member(id,"SND_FREQ_246",	0XF6,	-1);
	add_enum_member(id,"SND_FREQ_247",	0XF7,	-1);
	add_enum_member(id,"SND_FREQ_248",	0XF8,	-1);
	add_enum_member(id,"SND_FREQ_249",	0XF9,	-1);
	add_enum_member(id,"SND_FREQ_250",	0XFA,	-1);
	add_enum_member(id,"SND_FREQ_251",	0XFB,	-1);
	add_enum_member(id,"SND_FREQ_252",	0XFC,	-1);
	add_enum_member(id,"SND_FREQ_253",	0XFD,	-1);
	add_enum_member(id,"SND_FREQ_254",	0XFE,	-1);
	add_enum_member(id,"SND_FREQ_255",	0XFF,	-1);
	id = add_enum(-1,"KEYCODE",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"KEYCODE_SPACE",	0X21,	0x3F);
	add_enum_member(id,"KEYCODE_9",	0X30,	0x3F);
	add_enum_member(id,"KEYCODE_SHIFT",	0X40,	0x40);
	add_enum_member(id,"KEYCODE_CONTROL",	0X80,	0x80);
	id = add_enum(-1,"ATASCI",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"_SPACE",	0,	0x3F);
	add_enum_member(id,"_EXCLAMATION",	0X1,	0x3F);
	add_enum_member(id,"_OPEN_BRACKET",	0X8,	0x3F);
	add_enum_member(id,"_CLOSE_BRACKET",	0X9,	0x3F);
	add_enum_member(id,"_ASTERIX",	0XA,	0x3F);
	add_enum_member(id,"_MINUS",	0XD,	0x3F);
	add_enum_member(id,"_QUESTIONMARK",	0XF,	0x3F);
	add_enum_member(id,"_0",	0X10,	0x3F);
	add_enum_member(id,"_1",	0X11,	0x3F);
	add_enum_member(id,"_2",	0X12,	0x3F);
	add_enum_member(id,"_3",	0X13,	0x3F);
	add_enum_member(id,"_4",	0X14,	0x3F);
	add_enum_member(id,"_5",	0X15,	0x3F);
	add_enum_member(id,"_6",	0X16,	0x3F);
	add_enum_member(id,"_7",	0X17,	0x3F);
	add_enum_member(id,"_8",	0X18,	0x3F);
	add_enum_member(id,"_9",	0X19,	0x3F);
	add_enum_member(id,"_COLON",	0X1A,	0x3F);
	add_enum_member(id,"_A",	0X21,	0x3F);
	add_enum_member(id,"_B",	0X22,	0x3F);
	add_enum_member(id,"_C",	0X23,	0x3F);
	add_enum_member(id,"_D",	0X24,	0x3F);
	add_enum_member(id,"_E",	0X25,	0x3F);
	add_enum_member(id,"_F",	0X26,	0x3F);
	add_enum_member(id,"_G",	0X27,	0x3F);
	add_enum_member(id,"_H",	0X28,	0x3F);
	add_enum_member(id,"_I",	0X29,	0x3F);
	add_enum_member(id,"_J",	0X2A,	0x3F);
	add_enum_member(id,"_K",	0X2B,	0x3F);
	add_enum_member(id,"_L",	0X2C,	0x3F);
	add_enum_member(id,"_M",	0X2D,	0x3F);
	add_enum_member(id,"_N",	0X2E,	0x3F);
	add_enum_member(id,"_O",	0X2F,	0x3F);
	add_enum_member(id,"_P",	0X30,	0x3F);
	add_enum_member(id,"_Q",	0X31,	0x3F);
	add_enum_member(id,"_R",	0X32,	0x3F);
	add_enum_member(id,"_S",	0X33,	0x3F);
	add_enum_member(id,"_T",	0X34,	0x3F);
	add_enum_member(id,"_U",	0X35,	0x3F);
	add_enum_member(id,"_V",	0X36,	0x3F);
	add_enum_member(id,"_W",	0X37,	0x3F);
	add_enum_member(id,"_X",	0X38,	0x3F);
	add_enum_member(id,"_Y",	0X39,	0x3F);
	add_enum_member(id,"_Z",	0X3A,	0x3F);
	add_enum_member(id,"_C_BLACK",	0,	0xC0);
	add_enum_member(id,"_C_BLUE",	0X40,	0xC0);
	add_enum_member(id,"_C_ORANGE",	0X80,	0xC0);
	add_enum_member(id,"_C_LBLUE",	0XC0,	0xC0);
	id = add_enum(-1,"SETVBV_VECTORS",0x1100000);
	add_enum_member(id,"SETVBV_CDTMV1",	0X1,	-1);
	add_enum_member(id,"SETVBV_CDTMV2",	0X2,	-1);
	add_enum_member(id,"SETVBV_CDTMV3",	0X3,	-1);
	add_enum_member(id,"SETVBV_CDTMV4",	0X4,	-1);
	add_enum_member(id,"SETVBV_CDTMV5",	0X5,	-1);
	add_enum_member(id,"SETVBV_VVBLKI",	0X6,	-1);
	add_enum_member(id,"SETVBV_VVBLKD",	0X7,	-1);
	id = add_enum(-1,"LEVEL",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"L_GRAS",	0,	0x7F);
	add_enum_member(id,"L_WATER_GRAS_A",	0X1,	0x7F);
	add_enum_member(id,"L_WATER",	0X2,	0x7F);
	add_enum_member(id,"L_CLIFF_WATER_A",	0X3,	0x7F);
	add_enum_member(id,"L_CLIFF_GRAS_A",	0X4,	0x7F);
	add_enum_member(id,"L_WATER_GRAS_B1",	0X5,	0x7F);
	add_enum_member(id,"L_WATER_GRAS_B2",	0X6,	0x7F);
	add_enum_member(id,"L_CLIFF_WATER_B1",	0X7,	0x7F);
	add_enum_member(id,"L_CLIFF_WATER_B2",	0X8,	0x7F);
	add_enum_member(id,"L_CLIFF_GRAS_B1",	0X9,	0x7F);
	add_enum_member(id,"L_CLIFF_GRAS_B2",	0XA,	0x7F);
	add_enum_member(id,"L_WATER_GRAS_C1",	0XB,	0x7F);
	add_enum_member(id,"L_WATER_GRAS_C2",	0XC,	0x7F);
	add_enum_member(id,"L_CLIFF_WATER_C",	0XD,	0x7F);
	add_enum_member(id,"L_GRAS_CLIFF_WATER_A",	0XE,	0x7F);
	add_enum_member(id,"L_GRASS_CLIFF_D",	0XF,	0x7F);
	add_enum_member(id,"L_GRAS_CLIFF_WATER_B",	0X10,	0x7F);
	add_enum_member(id,"L_RUNWAY_RIGHT_11",	0X11,	0x7F);
	add_enum_member(id,"L_RUNWAY_CENTER_12",	0X12,	0x7F);
	add_enum_member(id,"L_RUNWAY_LEFT_13",	0X13,	0x7F);
	add_enum_member(id,"L_RUNWAY_MARKER_14",	0X14,	0x7F);
	add_enum_member(id,"L_HANGAR_A",	0X15,	0x7F);
	add_enum_member(id,"L_HANGAR_B",	0X16,	0x7F);
	add_enum_member(id,"L_HANGAR_C",	0X17,	0x7F);
	add_enum_member(id,"L_HANGAR_D",	0X18,	0x7F);
	add_enum_member(id,"L_HANGAR_E",	0X19,	0x7F);
	add_enum_member(id,"L_HANGAR_F",	0X1A,	0x7F);
	add_enum_member(id,"L_HANGAR_G",	0X1B,	0x7F);
	add_enum_member(id,"L_HANGAR_H",	0X1C,	0x7F);
	add_enum_member(id,"L_HANGAR_I",	0X1D,	0x7F);
	add_enum_member(id,"L_HANGAR_J",	0X1E,	0x7F);
	add_enum_member(id,"L_HANGAR_K",	0X1F,	0x7F);
	add_enum_member(id,"L_HANGAR_L",	0X20,	0x7F);
	add_enum_member(id,"L_TREE_TOP_LEFT_A",	0X21,	0x7F);
	add_enum_member(id,"L_TREE_TOP_LEFT_B",	0X22,	0x7F);
	add_enum_member(id,"L_TREE_TOP_RIGHT_B",	0X23,	0x7F);
	add_enum_member(id,"L_TREE_TOP_RIGHT_A",	0X24,	0x7F);
	add_enum_member(id,"L_TREE_BOTTOM_LEFT_A",	0X25,	0x7F);
	add_enum_member(id,"L_TREE_BOTTOM_LEFT_B",	0X26,	0x7F);
	add_enum_member(id,"L_TREE_BOTTOM_RIGHT_A",	0X27,	0x7F);
	add_enum_member(id,"L_TREE_BOTTOM_RIGHT_B",	0X28,	0x7F);
	add_enum_member(id,"L_BRIDGE_A",	0X29,	0x7F);
	add_enum_member(id,"L_BRIDGE_B",	0X2A,	0x7F);
	add_enum_member(id,"L_BRIDGE_C",	0X2B,	0x7F);
	add_enum_member(id,"L_BRIDGE_D",	0X2C,	0x7F);
	add_enum_member(id,"L_BRIDGE_E",	0X2D,	0x7F);
	add_enum_member(id,"L_BRIDGE_F",	0X2E,	0x7F);
	add_enum_member(id,"L_BRIDGE_G",	0X2F,	0x7F);
	add_enum_member(id,"L_BRIDGE_H",	0X30,	0x7F);
	add_enum_member(id,"L_ANTI_AIRCRAFT_BATTERY_A",	0X31,	0x7F);
	add_enum_member(id,"L_BRIDGE_J",	0X32,	0x7F);
	add_enum_member(id,"L_BRIDGE_K",	0X33,	0x7F);
	add_enum_member(id,"L_BRIDGE_L",	0X34,	0x7F);
	add_enum_member(id,"L_BRIDGE_M",	0X35,	0x7F);
	add_enum_member(id,"L_BRIDGE_N",	0X36,	0x7F);
	add_enum_member(id,"L_BRIDGE_O",	0X37,	0x7F);
	add_enum_member(id,"L_BRIDGE_P",	0X38,	0x7F);
	add_enum_member(id,"L_BRIDGE_Q",	0X39,	0x7F);
	add_enum_member(id,"L_FIXED_BOAT_TOP_LEFT",	0X3A,	0x7F);
	add_enum_member(id,"L_FIXED_BOAT_TOP_RIGHT",	0X3B,	0x7F);
	add_enum_member(id,"L_FIXED_BOAT_BOTTOM_LEFT",	0X3C,	0x7F);
	add_enum_member(id,"L_FIXED_BOAT_BOTTOM_RIGHT",	0X3D,	0x7F);
	add_enum_member(id,"L_EXPLOSION_GRAS_4",	0X3E,	0x7F);
	add_enum_member(id,"L_BUILDING_ROOF_CENTER",	0X3F,	0x7F);
	add_enum_member(id,"L_EXPLOSION_GRAS_1",	0X40,	0x7F);
	add_enum_member(id,"L_EXPLOSION_GRAS_2",	0X41,	0x7F);
	add_enum_member(id,"L_EXPLOSION_GRAS_3",	0X42,	0x7F);
	add_enum_member(id,"L_EXPLOSION_WATER_1",	0X43,	0x7F);
	add_enum_member(id,"L_EXPLOSION_WATER_2",	0X44,	0x7F);
	add_enum_member(id,"L_BUILDING_WINDOW",	0X45,	0x7F);
	add_enum_member(id,"L_TANK_LEFT_A",	0X46,	0x7F);
	add_enum_member(id,"L_TANK_RIGHT_A",	0X47,	0x7F);
	add_enum_member(id,"L_GRAS_BEFORE_BUILDING",	0X48,	0x7F);
	add_enum_member(id,"L_BUILDING_ROOF_TOP_RIGHT",	0X49,	0x7F);
	add_enum_member(id,"L_BUILDING_WALL_A",	0X4A,	0x7F);
	add_enum_member(id,"L_RUNWAY_LEFT",	0X4B,	0x7F);
	add_enum_member(id,"L_ROAD_DIAG_RIGHT_B",	0X4C,	0x7F);
	add_enum_member(id,"L_ROAD_DIAG_RIGHT_A",	0X4D,	0x7F);
	add_enum_member(id,"L_ROAD_DIAG_LEFT_B",	0X4E,	0x7F);
	add_enum_member(id,"L_ROAD_E",	0X4F,	0x7F);
	add_enum_member(id,"L_RUNWAY_PLANE_TOP_RIGHT",	0X50,	0x7F);
	add_enum_member(id,"L_RUNWAY_PLANE_TOP_LEFT",	0X51,	0x7F);
	add_enum_member(id,"L_RUNWAY_PLANE_BOTTOM_RIGHT",	0X52,	0x7F);
	add_enum_member(id,"L_RUNWAY_PLANE_BOTTOM_LEFT",	0X53,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_54",	0X54,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_55",	0X55,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_56",	0X56,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_57",	0X57,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_58",	0X58,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_59",	0X59,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_B_5A",	0X5A,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_B_5B",	0X5B,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_B_C",	0X5C,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_B_5D",	0X5D,	0x7F);
	add_enum_member(id,"L_SKYSCRAPER_B_5E",	0X5E,	0x7F);
	add_enum_member(id,"L_EXPLOSION_5F",	0X5F,	0x7F);
	add_enum_member(id,"L_WATER_60",	0X60,	0x7F);
	add_enum_member(id,"L_61",	0X61,	0x7F);
	add_enum_member(id,"L_62",	0X62,	0x7F);
	add_enum_member(id,"L_63",	0X63,	0x7F);
	add_enum_member(id,"L_64",	0X64,	0x7F);
	add_enum_member(id,"L_65",	0X65,	0x7F);
	add_enum_member(id,"L_66",	0X66,	0x7F);
	add_enum_member(id,"L_67",	0X67,	0x7F);
	add_enum_member(id,"L_68",	0X68,	0x7F);
	add_enum_member(id,"L_69",	0X69,	0x7F);
	add_enum_member(id,"L_6A",	0X6A,	0x7F);
	add_enum_member(id,"L_6B",	0X6B,	0x7F);
	add_enum_member(id,"L_STREET_CAR_LEFT_COLOR_A",	0X6C,	0x7F);
	add_enum_member(id,"L_STREET_CAR_RIGHT_COLOR_A",	0X6D,	0x7F);
	add_enum_member(id,"L_STREET_CAR_LEFT_COLOR_B",	0X6E,	0x7F);
	add_enum_member(id,"L_STREET_CAR_RIGHT_COLOR_B",	0X6F,	0x7F);
	add_enum_member(id,"L_ANTI_AIRCRAFT_BATTERY_B",	0X70,	0x7F);
	add_enum_member(id,"L_TANK_LEFT_B",	0X71,	0x7F);
	add_enum_member(id,"L_TANK_RIGHT_B",	0X72,	0x7F);
	add_enum_member(id,"L_FLASHING_MARKER",	0X73,	0x7F);
	add_enum_member(id,"L_RUNWAY_RIGHT",	0X74,	0x7F);
	add_enum_member(id,"L_EXPLOSION_WATER_3",	0X75,	0x7F);
	add_enum_member(id,"L_EXPLOSION_WATER_4",	0X76,	0x7F);
	add_enum_member(id,"L_EXPLOSION_WATER_5",	0X77,	0x7F);
	add_enum_member(id,"L_EXPLOSION_WATER_6",	0X78,	0x7F);
	add_enum_member(id,"L_EXPLOSION_STREET_2",	0X79,	0x7F);
	add_enum_member(id,"L_EXPLOSION_STREET_3",	0X7A,	0x7F);
	add_enum_member(id,"L_EXPLOSION_STREET_1",	0X7B,	0x7F);
	add_enum_member(id,"L_RUNWAY_CENTER",	0X7C,	0x7F);
	add_enum_member(id,"L_ROAD_DIAG_LEFT_A",	0X7D,	0x7F);
	add_enum_member(id,"L_SOLID_WALL",	0X7E,	0x7F);
	add_enum_member(id,"L_BUILDING_ROOF_TOP_LEFT",	0X7F,	0x7F);
	add_enum_member(id,"L_C_0",	0,	0x80);
	add_enum_member(id,"L_C_1",	0X80,	0x80);
	id = add_enum(-1,"DIR_RIVER",0x1100000);
	add_enum_member(id,"DIR_RIVER_STRAIGHT",	0X1,	-1);
	add_enum_member(id,"DIR_RIVER_LEFT",	0X2,	-1);
	add_enum_member(id,"DIR_RIVER_RIGHT",	0X3,	-1);
	id = add_enum(-1,"TURN_MODE",0x1100000);
	add_enum_member(id,"TURN_MODE_OFF",	0,	-1);
	add_enum_member(id,"TURN_MODE_LEFT",	0X1,	-1);
	add_enum_member(id,"TURN_MODE_RIGHT",	0X2,	-1);
	id = add_enum(-1,"FINAL_TARGETS_STATE",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"FINAL_TARGET_1",	0X1,	0x7);
	add_enum_member(id,"FINAL_TARGET_2",	0X2,	0x7);
	add_enum_member(id,"FINAL_TARGET_3",	0X4,	0x7);
	add_enum_member(id,"FINAL_TARGET_ALL",	0X7,	0x7);
	id = add_enum(-1,"JOYSTICK",0x1100000);
	add_enum_member(id,"JOYSTICK_0",	0,	-1);
	add_enum_member(id,"JOYSTICK_1",	0X1,	-1);
	add_enum_member(id,"JOYSTICK_2",	0X2,	-1);
	add_enum_member(id,"JOYSTICK_3",	0X3,	-1);
	add_enum_member(id,"JOYSTICK_4",	0X4,	-1);
	add_enum_member(id,"JOYSTICK_DOWN_RIGHT",	0X5,	-1);
	add_enum_member(id,"JOYSTICK_UP_RIGHT",	0X6,	-1);
	add_enum_member(id,"JOYSTICK_RIGHT",	0X7,	-1);
	add_enum_member(id,"JOYSTICK_8",	0X8,	-1);
	add_enum_member(id,"JOYSTICK_DOWN_LEFT",	0X9,	-1);
	add_enum_member(id,"JOYSTICK_UP_LEFT",	0XA,	-1);
	add_enum_member(id,"JOYSTICK_LEFT",	0XB,	-1);
	add_enum_member(id,"JOYSTICK_c",	0XC,	-1);
	add_enum_member(id,"JOYSTICK_DOWN",	0XD,	-1);
	add_enum_member(id,"JOYSTICK_UP",	0XE,	-1);
	add_enum_member(id,"JOYSTICK_NOTHING",	0XF,	-1);
	id = add_enum(-1,"GAME_LEVEL",0x1100000);
	add_enum_member(id,"GAME_LEVEL_NOVICE",	0,	-1);
	add_enum_member(id,"GAME_LEVEL_INTERMEDIATE",	0X1,	-1);
	add_enum_member(id,"GAME_LEVEL_ADVANCED",	0X2,	-1);
	id = add_enum(-1,"ENEMY_BULLET_MOVEMENT_TYPES",0x1100000);
	add_enum_member(id,"ENEMY_BULLET_MOVEMENT_TYPES_LEFT",	0,	-1);
	add_enum_member(id,"ENEMY_BULLET_MOVEMENT_TYPES_LEFT2",	0X1,	-1);
	add_enum_member(id,"ENEMY_BULLET_MOVEMENT_TYPES_NOTHING",	0X2,	-1);
	add_enum_member(id,"ENEMY_BULLET_MOVEMENT_TYPES_LEFT_RANDOM",	0X3,	-1);
	add_enum_member(id,"ENEMY_BULLET_MOVEMENT_TYPES_RIGHT",	0X4,	-1);
	id = add_enum(-1,"HORIZONTAL_POSITIONS",0x2200000);
	add_enum_member(id,"PLANE_MIN_XorY_POSITION",	0X3C,	-1);
	set_enum_member_cmt(get_enum_member(id,0X3C,0,-1),"min. allowed X position for the plane",1);
	add_enum_member(id,"PLANE_MAX_X_POSITION",	0XB8,	-1);
	set_enum_member_cmt(get_enum_member(id,0XB8,0,-1),"max. allowed X position for the plane",1);
	id = add_enum(-1,"GAME_PHASE",0x2200000);
	add_enum_member(id,"GAME_PHASE_RIVER_PHASE_0",	0,	-1);
	add_enum_member(id,"GAME_PHASE_DIAGNOAL_ROAD_1",	0X1,	-1);
	add_enum_member(id,"GAME_PHASE_DIAGNOAL_ROAD_2",	0X2,	-1);
	add_enum_member(id,"GAME_PHASE_ROAD_HARD_RIGHT_3",	0X3,	-1);
	add_enum_member(id,"GAME_PHASE_4",	0X4,	-1);
	add_enum_member(id,"GAME_PHASE_5",	0X5,	-1);
	add_enum_member(id,"GAME_PHASE_6",	0X6,	-1);
	add_enum_member(id,"GAME_PHASE_7",	0X7,	-1);
	add_enum_member(id,"GAME_PHASE_8",	0X8,	-1);
	id = add_enum(-1,"EXPLOSITION_TARGET",0x2200000);
	add_enum_member(id,"EXPLOSITION_TARGET_WATER",	0,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_GRAS",	0X1,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_2",	0X2,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_BRIDGE",	0X3,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_BUILDING",	0X4,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_SKYSCRAPER",	0X5,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_EMPTY_ROAD",	0X6,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_BOAT",	0X7,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_RUNWAY_PLANE",	0X8,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_AIRPORT_HANGAR",	0X9,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_10",	0XA,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_11",	0XB,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_12",	0XC,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_13",	0XD,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_14",	0XE,	-1);
	add_enum_member(id,"EXPLOSITION_TARGET_15",	0XF,	-1);
	id = add_enum(-1,"PRIMARY_TARGET_SUBTYPE",0x2200000);
	add_enum_member(id,"PRIMARY_TARGET_SUBTYPE_0",	0,	-1);
	add_enum_member(id,"PRIMARY_TARGET_SUBTYPE_BUILDING",	0X1,	-1);
	add_enum_member(id,"PRIMARY_TARGET_SUBTYPE_SKYSCRAPER",	0X2,	-1);
	add_enum_member(id,"PRIMARY_TARGET_SUBTYPE_BRIDGE",	0X3,	-1);
	id = add_enum(-1,"UNKNOWNS_STATE",0x2200000);
	add_enum_member(id,"UNKNOWNS_STATE_0",	0,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_1",	0X1,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_2",	0X2,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_3",	0X3,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_4",	0X4,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_5",	0X5,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_6",	0X6,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_7",	0X7,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_8",	0X8,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_9",	0X9,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_10",	0XA,	-1);
	add_enum_member(id,"UNKNOWNS_STATE_11",	0XB,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("DCB_STRUCT");
	id = get_struc_id("IOCB_STRUCT");
	id = get_struc_id("HATABS_STRUCT");
	id = get_struc_id("DIFF_STRUCT");
	id = get_struc_id("CONTROL_DISPLAY");
	id = get_struc_id("CONTROL_DISPLAY_LINE_0");
	id = get_struc_id("CONTROL_DISPLAY_LINE_1");
	id = get_struc_id("CONTROL_DISPLAY_LINE_2");
	id = get_struc_id("NOTE");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"DCB_STRUCT",0);
	id = add_struc(-1,"IOCB_STRUCT",0);
	id = add_struc(-1,"HATABS_STRUCT",0);
	id = add_struc(-1,"DIFF_STRUCT",0);
	id = add_struc(-1,"CONTROL_DISPLAY",0);
	id = add_struc(-1,"CONTROL_DISPLAY_LINE_0",0);
	id = add_struc(-1,"CONTROL_DISPLAY_LINE_1",0);
	id = add_struc(-1,"CONTROL_DISPLAY_LINE_2",0);
	id = add_struc(-1,"NOTE",0);
	
	id = get_struc_id("DCB_STRUCT");
	mid = add_struc_member(id,"DDEVICE",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"DUNIT",	0X1,	0x200400,	-1,	1);
	mid = add_struc_member(id,"DCOMMAND",	0X2,	0x800400,	get_enum("DCB_COMMANDS"),	1);
	mid = add_struc_member(id,"DSTATS",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"DBUF",	0X4,	0x10500400,	0,	2,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"DTIMLO",	0X6,	0x200400,	-1,	1);
	mid = add_struc_member(id,"DBYTE",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"DSECTOR",	0XA,	0x10000400,	-1,	2);
	
	id = get_struc_id("IOCB_STRUCT");
	mid = add_struc_member(id,"ICHID",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICDNO",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICCOM",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICSTA",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICBADR",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ICPUT",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ICBLEN",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ICAX1",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICAX2",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICAX3",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICAX4",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICAX5",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ICAX6",	0XF,	0x000400,	-1,	1);
	
	id = get_struc_id("HATABS_STRUCT");
	mid = add_struc_member(id,"DEVICE",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ADR",	0X1,	0x10500400,	0,	2,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("DIFF_STRUCT");
	mid = add_struc_member(id,"wind_probability",	0,	0x000400,	-1,	1);
	set_member_cmt(id,	0,	"Wind triggered, if RANDOM < value",	1);
	mid = add_struc_member(id,"wind_minimum_duration",	0X1,	0x000400,	-1,	1);
	set_member_cmt(id,	0X1,	"Minimum duration during which wind is active",	1);
	mid = add_struc_member(id,"field_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_4",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_5",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_6",	0X6,	0x000400,	-1,	1);
	
	id = get_struc_id("CONTROL_DISPLAY_LINE_0");
	mid = add_struc_member(id,"empty_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"empty_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"empty_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"fuel_F",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"fuel_colon",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"fuel_digit_100",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"fuel_digit_10",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"fuel_digit_1",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_8",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bomb_B",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bomb_colon",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bomb_digit_10",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bomb_digit_1",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_D",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_E",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"fuel_leak",	0XF,	0x000400,	-1,	1);
	set_member_cmt(id,	0XF,	"\"F\" character",	1);
	mid = add_struc_member(id,"bomb_gear_damaged",	0X10,	0x000400,	-1,	1);
	set_member_cmt(id,	0X10,	"\"B\" character",	1);
	mid = add_struc_member(id,"decreased_maneuverability",	0X11,	0x000400,	-1,	1);
	set_member_cmt(id,	0X11,	"\"M\" character",	1);
	mid = add_struc_member(id,"machine_gun_damaged",	0X12,	0x000400,	-1,	1);
	set_member_cmt(id,	0X12,	"\"G\" character",	1);
	mid = add_struc_member(id,"field_13",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"enemy_above_warning",	0X14,	0x000400,	-1,	1);
	set_member_cmt(id,	0X14,	"red \"*\" character",	1);
	mid = add_struc_member(id,"field_15",	0X15,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_16",	0X16,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_17",	0X17,	0x000400,	-1,	1);
	
	id = get_struc_id("CONTROL_DISPLAY_LINE_1");
	mid = add_struc_member(id,"empty_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"empty_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"empty_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_4",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_5",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_6",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"speed_digit_100",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"speed_digit_10",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"speed_digit_1",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_A",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_B",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_C",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_D",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_E",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"altitude_digit_100",	0XF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"altitude_digit_10",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"altitude_digit_1",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_12",	0X12,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_13",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"enemy_plane_warning",	0X14,	0x000400,	-1,	1);
	set_member_cmt(id,	0X14,	"\"P\" character",	1);
	mid = add_struc_member(id,"wind_factor_warning",	0X15,	0x000400,	-1,	1);
	set_member_cmt(id,	0X15,	"\"W\" character",	1);
	mid = add_struc_member(id,"field_16",	0X16,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_17",	0X17,	0x000400,	-1,	1);
	
	id = get_struc_id("CONTROL_DISPLAY_LINE_2");
	mid = add_struc_member(id,"empty_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"empty_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"empty_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_4",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_5",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_6",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_7",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_8",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"score_digit_1000",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"score_digit_100",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"score_digit_10",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"score_digit_1",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_D",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_E",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_F",	0XF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_10",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"landing_flag",	0X11,	0x000400,	-1,	1);
	set_member_cmt(id,	0X11,	"\"L\" character",	1);
	mid = add_struc_member(id,"field_12",	0X12,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_13",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_14",	0X14,	0x000400,	-1,	1);
	set_member_cmt(id,	0X14,	"\"*\" character",	1);
	mid = add_struc_member(id,"field_15",	0X15,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_16",	0X16,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_17",	0X17,	0x000400,	-1,	1);
	
	id = get_struc_id("CONTROL_DISPLAY");
	mid = add_struc_member(id,"line_0",	0,	0x60000400,	get_struc_id("CONTROL_DISPLAY_LINE_0"),	24);
	mid = add_struc_member(id,"line_1",	0X18,	0x60000400,	get_struc_id("CONTROL_DISPLAY_LINE_1"),	24);
	mid = add_struc_member(id,"line_2",	0X30,	0x60000400,	get_struc_id("CONTROL_DISPLAY_LINE_2"),	24);
	
	id = get_struc_id("NOTE");
	mid = add_struc_member(id,"freq",	0,	0x800400,	get_enum("SND_FREQ"),	1);
	set_member_cmt(id,	0,	"frequency",	1);
	mid = add_struc_member(id,"dur",	0X1,	0x000400,	-1,	1);
	set_member_cmt(id,	0X1,	"duration",	1);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	patch_byte	(0X700,	0);
	patch_byte	(0X701,	0X2);
	patch_byte	(0X702,	0);
	patch_byte	(0X703,	0X7);
	patch_byte	(0X704,	0X54);
	patch_byte	(0X705,	0X7);
	patch_byte	(0X706,	0XA2);
	patch_byte	(0X707,	0X4);
	patch_byte	(0X708,	0XBD);
	patch_byte	(0X709,	0X7A);
	patch_byte	(0X70A,	0X7);
	patch_byte	(0X70B,	0X9D);
	patch_byte	(0X70C,	0XC4);
	patch_byte	(0X70D,	0X2);
	patch_byte	(0X70E,	0XCA);
	patch_byte	(0X70F,	0X10);
	patch_byte	(0X710,	0XF7);
	patch_byte	(0X711,	0XA9);
	patch_byte	(0X712,	0X8B);
	patch_byte	(0X713,	0X8D);
	patch_byte	(0X714,	0X30);
	patch_byte	(0X715,	0X2);
	patch_byte	(0X716,	0XA9);
	patch_byte	(0X717,	0X7);
	patch_byte	(0X718,	0X8D);
	patch_byte	(0X719,	0X31);
	patch_byte	(0X71A,	0X2);
	patch_byte	(0X71B,	0XA5);
	patch_byte	(0X71C,	0X14);
	patch_byte	(0X71D,	0XC5);
	patch_byte	(0X71E,	0X14);
	patch_byte	(0X71F,	0XF0);
	patch_byte	(0X720,	0XFC);
	patch_byte	(0X721,	0X20);
	patch_byte	(0X722,	0X55);
	patch_byte	(0X723,	0X7);
	patch_byte	(0X724,	0XAD);
	patch_byte	(0X725,	0X84);
	patch_byte	(0X726,	0X7);
	patch_byte	(0X727,	0X38);
	patch_byte	(0X728,	0XE9);
	patch_byte	(0X729,	0X4);
	patch_byte	(0X72A,	0X8D);
	patch_byte	(0X72B,	0X84);
	patch_byte	(0X72C,	0X7);
	patch_byte	(0X72D,	0XC9);
	patch_byte	(0X72E,	0X9);
	patch_byte	(0X72F,	0XD0);
	patch_byte	(0X730,	0XF0);
	patch_byte	(0X731,	0XA9);
	patch_byte	(0X732,	0XB);
	patch_byte	(0X733,	0X8D);
	patch_byte	(0X734,	0X84);
	patch_byte	(0X735,	0X7);
	patch_byte	(0X736,	0XA9);
	patch_byte	(0X737,	0X2);
	patch_byte	(0X738,	0X8D);
	patch_byte	(0X739,	0X88);
	patch_byte	(0X73A,	0X7);
	patch_byte	(0X73B,	0X20);
	patch_byte	(0X73C,	0X55);
	patch_byte	(0X73D,	0X7);
	patch_byte	(0X73E,	0XA9);
	patch_byte	(0X73F,	0X5);
	patch_byte	(0X740,	0XA8);
	patch_byte	(0X741,	0XAA);
	patch_byte	(0X742,	0XE9);
	patch_byte	(0X743,	0X1);
	patch_byte	(0X744,	0XD0);
	patch_byte	(0X745,	0XFC);
	patch_byte	(0X746,	0XCA);
	patch_byte	(0X747,	0XD0);
	patch_byte	(0X748,	0XF9);
	patch_byte	(0X749,	0X88);
	patch_byte	(0X74A,	0XD0);
	patch_byte	(0X74B,	0XF6);
	patch_byte	(0X74C,	0XA9);
	patch_byte	(0X74D,	0X3C);
	patch_byte	(0X74E,	0X8D);
	patch_byte	(0X74F,	0X2);
	patch_byte	(0X750,	0XD3);
	patch_byte	(0X751,	0X4C);
	patch_byte	(0X752,	0);
	patch_byte	(0X753,	0XC);
	patch_byte	(0X754,	0X60);
	patch_byte	(0X755,	0XA2);
	patch_byte	(0X756,	0XB);
	patch_byte	(0X757,	0XBD);
	patch_byte	(0X758,	0X7F);
	patch_byte	(0X759,	0X7);
	patch_byte	(0X75A,	0X9D);
	patch_byte	(0X75B,	0);
	patch_byte	(0X75C,	0X3);
	patch_byte	(0X75D,	0XCA);
	patch_byte	(0X75E,	0X10);
	patch_byte	(0X75F,	0XF7);
	patch_byte	(0X760,	0X20);
	patch_byte	(0X761,	0X59);
	patch_byte	(0X762,	0XE4);
	patch_byte	(0X763,	0X10);
	patch_byte	(0X764,	0X3);
	patch_byte	(0X765,	0X6C);
	patch_byte	(0X766,	0XFC);
	patch_byte	(0X767,	0XFF);
	patch_byte	(0X768,	0XAE);
	patch_byte	(0X769,	0XBE);
	patch_byte	(0X76A,	0X7);
	patch_byte	(0X76B,	0XCA);
	patch_byte	(0X76C,	0XE0);
	patch_byte	(0X76D,	0X8F);
	patch_byte	(0X76E,	0XD0);
	patch_byte	(0X76F,	0X5);
	patch_byte	(0X770,	0XCE);
	patch_byte	(0X771,	0XBD);
	patch_byte	(0X772,	0X7);
	patch_byte	(0X773,	0XA2);
	patch_byte	(0X774,	0X99);
	patch_byte	(0X775,	0X8E);
	patch_byte	(0X776,	0XBE);
	patch_byte	(0X777,	0X7);
	patch_byte	(0X778,	0X60);
	patch_byte	(0X779,	0X60);
	patch_byte	(0X77A,	0X8E);
	patch_byte	(0X77B,	0XCC);
	patch_byte	(0X77C,	0X1E);
	patch_byte	(0X77D,	0XCE);
	patch_byte	(0X77E,	0);
	patch_byte	(0X77F,	0X60);
	patch_byte	(0X780,	0);
	patch_byte	(0X781,	0X52);
	patch_byte	(0X782,	0X40);
	patch_byte	(0X783,	0XFD);
	patch_byte	(0X784,	0X5D);
	patch_byte	(0X785,	0X40);
	patch_byte	(0X786,	0);
	patch_byte	(0X787,	0X3);
	patch_byte	(0X788,	0X4);
	patch_byte	(0X789,	0X4);
	patch_byte	(0X78A,	0X80);
	patch_byte	(0X78B,	0X70);
	patch_byte	(0X78C,	0X70);
	patch_byte	(0X78D,	0X70);
	patch_byte	(0X78E,	0X47);
	patch_byte	(0X78F,	0X98);
	patch_byte	(0X790,	0X7);
	patch_byte	(0X791,	0X70);
	patch_byte	(0X792,	0X70);
	patch_byte	(0X793,	0X70);
	patch_byte	(0X794,	0X6);
	patch_byte	(0X795,	0X41);
	patch_byte	(0X796,	0X8B);
	patch_byte	(0X797,	0X7);
	patch_byte	(0X798,	0);
	patch_byte	(0X799,	0);
	patch_byte	(0X79A,	0X2C);
	patch_byte	(0X79B,	0X2F);
	patch_byte	(0X79C,	0X21);
	patch_byte	(0X79D,	0X24);
	patch_byte	(0X79E,	0X29);
	patch_byte	(0X79F,	0X2E);
	patch_byte	(0X7A0,	0X27);
	patch_byte	(0X7A1,	0);
	patch_byte	(0X7A2,	0X22);
	patch_byte	(0X7A3,	0X2C);
	patch_byte	(0X7A4,	0X35);
	patch_byte	(0X7A5,	0X25);
	patch_byte	(0X7A6,	0);
	patch_byte	(0X7A7,	0X2D);
	patch_byte	(0X7A8,	0X21);
	patch_byte	(0X7A9,	0X38);
	patch_byte	(0X7AA,	0);
	patch_byte	(0X7AB,	0);
	patch_byte	(0X7AC,	0X62);
	patch_byte	(0X7AD,	0X6C);
	patch_byte	(0X7AE,	0X6F);
	patch_byte	(0X7AF,	0X63);
	patch_byte	(0X7B0,	0X6B);
	patch_byte	(0X7B1,	0X73);
	patch_byte	(0X7B2,	0);
	patch_byte	(0X7B3,	0X74);
	patch_byte	(0X7B4,	0X6F);
	patch_byte	(0X7B5,	0);
	patch_byte	(0X7B6,	0X6C);
	patch_byte	(0X7B7,	0X6F);
	patch_byte	(0X7B8,	0X61);
	patch_byte	(0X7B9,	0X64);
	patch_byte	(0X7BA,	0);
	patch_byte	(0X7BB,	0X4D);
	patch_byte	(0X7BC,	0);
	patch_byte	(0X7BD,	0X92);
	patch_byte	(0X7BE,	0X92);
	patch_byte	(0X7BF,	0);
	patch_byte	(0X7C0,	0);
	patch_byte	(0X7C1,	0X4C);
	patch_byte	(0X7C2,	0);
	patch_byte	(0X7C3,	0);
	patch_byte	(0X7C4,	0);
	patch_byte	(0X7C5,	0);
	patch_byte	(0X7C6,	0);
	patch_byte	(0X7C7,	0);
	patch_byte	(0X7C8,	0);
	patch_byte	(0X7C9,	0);
	patch_byte	(0X7CA,	0);
	patch_byte	(0X7CB,	0);
	patch_byte	(0X7CC,	0);
	patch_byte	(0X7CD,	0);
	patch_byte	(0X7CE,	0);
	patch_byte	(0X7CF,	0);
	patch_byte	(0X7D0,	0);
	patch_byte	(0X7D1,	0);
	patch_byte	(0X7D2,	0);
	patch_byte	(0X7D3,	0);
	patch_byte	(0X7D4,	0);
	patch_byte	(0X7D5,	0);
	patch_byte	(0X7D6,	0);
	patch_byte	(0X7D7,	0);
	patch_byte	(0X7D8,	0);
	patch_byte	(0X7D9,	0);
	patch_byte	(0X7DA,	0);
	patch_byte	(0X7DB,	0);
	patch_byte	(0X7DC,	0);
	patch_byte	(0X7DD,	0);
	patch_byte	(0X7DE,	0);
	patch_byte	(0X7DF,	0);
	patch_byte	(0X7E0,	0);
	patch_byte	(0X7E1,	0);
	patch_byte	(0X7E2,	0);
	patch_byte	(0X7E3,	0);
	patch_byte	(0X7E4,	0);
	patch_byte	(0X7E5,	0);
	patch_byte	(0X7E6,	0);
	patch_byte	(0X7E7,	0);
	patch_byte	(0X7E8,	0);
	patch_byte	(0X7E9,	0);
	patch_byte	(0X7EA,	0);
	patch_byte	(0X7EB,	0);
	patch_byte	(0X7EC,	0);
	patch_byte	(0X7ED,	0);
	patch_byte	(0X7EE,	0);
	patch_byte	(0X7EF,	0);
	patch_byte	(0X7F0,	0);
	patch_byte	(0X7F1,	0);
	patch_byte	(0X7F2,	0);
	patch_byte	(0X7F3,	0);
	patch_byte	(0X7F4,	0);
	patch_byte	(0X7F5,	0);
	patch_byte	(0X7F6,	0);
	patch_byte	(0X7F7,	0);
	patch_byte	(0X7F8,	0);
	patch_byte	(0X7F9,	0);
	patch_byte	(0X7FA,	0);
	patch_byte	(0X7FB,	0);
	patch_byte	(0X7FC,	0);
	patch_byte	(0X7FD,	0);
	patch_byte	(0X7FE,	0);
	patch_byte	(0X7FF,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	create_byte	(0);
	make_array	(0,	0X2);
	set_cmt	(0X2,	"CASSETTE INIT LOCATION",	1);
	create_word	(x=0X2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X2,	"CASINI");
	create_byte	(0X4);
	make_array	(0X4,	0X5);
	set_cmt	(0X9,	"SUCCESSFUL BOOT FLAG",	1);
	create_byte	(0X9);
	set_name	(0X9,	"BOOT?");
	create_byte	(0XA);
	make_array	(0XA,	0X8);
	set_cmt	(0X12,	"REAL TIME CLOCK (IN 16 MSEC UNITS)",	1);
	create_byte	(0X12);
	make_array	(0X12,	0X3);
	set_name	(0X12,	"RTCLOK");
	create_byte	(0X15);
	make_array	(0X15,	0X38);
	set_cmt	(0X4D,	"ATRACT FLAG",	1);
	create_byte	(0X4D);
	set_name	(0X4D,	"ATRACT");
	create_byte	(0X4E);
	make_array	(0X4E,	0X52);
	set_cmt	(0XA0,	"Sound: Voice 1 Music Playback Note Ptr",	1);
	create_word	(x=0XA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA0,	"VV1");
	set_cmt	(0XA2,	"Sound: Voice 2 Music Playback Note Ptr",	1);
	create_word	(x=0XA2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA2,	"VV2");
	set_cmt	(0XA4,	"Sound: Voice 3 Music Playback Note Ptr",	1);
	create_word	(x=0XA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA4,	"VV3");
	set_cmt	(0XA6,	"Sound: temp addr for sound frequency calculation",	1);
	create_word	(x=0XA6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA6,	"ADR1");
	create_byte	(0XA8);
	make_array	(0XA8,	0X8);
	update_extra_cmt		(0XB0,	E_PREV + 0,	"; Zero-page variables for Blue Max");
	create_byte	(0XB0);
	set_name	(0XB0,	"TEMP_B0");
	create_byte	(0XB1);
	create_byte	(0XB2);
	create_byte	(0XB4);
	create_byte	(0XB5);
	set_name	(0XB5,	"SKYSCRAPER_TILE_OFFSET");
	create_byte	(0XB6);
	create_byte	(x=0XB7);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	set_name	(0XB7,	"CURRENT_GAME_PHASE");
	set_cmt	(0XB8,	"Length of a game phase in remaining rows",	1);
	create_byte	(0XB8);
	set_name	(0XB8,	"GAME_PHASE_ROWS");
	create_byte	(0XB9);
	create_byte	(0XBA);
	create_byte	(0XBB);
	create_byte	(0XBC);
	create_byte	(0XBD);
	set_cmt	(0XBE,	"Duration during which Wind is in effect",	1);
	create_byte	(0XBE);
	set_name	(0XBE,	"WIND_DURATION");
	create_byte	(0XBF);
	set_cmt	(0XC0,	"Enemy X position",	1);
	create_byte	(0XC0);
	set_name	(0XC0,	"ENEMY_X_POS");
	set_cmt	(0XC1,	"Enemy Y position",	1);
	create_byte	(0XC1);
	set_name	(0XC1,	"ENEMY_Y_POS");
	create_byte	(0XC2);
	create_byte	(0XC4);
	create_byte	(0XC5);
	create_word	(x=0XC7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC7,	"PREVIOUS_TILE_ROW_PTR");
	set_cmt	(0XCA,	"!=0 => counter to signal damage via flashing",	1);
	create_byte	(0XCA);
	set_name	(0XCA,	"PLANE_HIT_FLASH_COUNTER");
	create_byte	(0XCB);
	make_array	(0XCB,	0X9);
	create_word	(x=0XD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XD4,	"TEMP_ADR");
	set_cmt	(0XD7,	"JOYSTICK 0 copy",	1);
	create_byte	(0XD7);
	set_name	(0XD7,	"STICK0_COPY");
	set_cmt	(0XD8,	"0=: joystick button is pressed, !=0: button is not pressed",	1);
	create_byte	(0XD8);
	set_name	(0XD8,	"STRIG0_COPY");
	create_byte	(0XD9);
	make_array	(0XD9,	0X17);
	set_cmt	(0XF0,	"!=0 Disable generation of new map data. Reset during VBL scrolling",	1);
	create_byte	(0XF0);
	set_name	(0XF0,	"DISABLE_MAP_GENERATION");
	set_cmt	(0XF1,	"HSCROL and VSCROL shadow during gameplay",	1);
	create_byte	(0XF1);
	set_name	(0XF1,	"SCROLL_OFFSET_F1");
	set_cmt	(0XF2,	"new row to be draw. Set inside the VBL.",	1);
	create_word	(x=0XF2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XF2,	"VBL_NEXT_ROW_PTR");
	set_cmt	(0XF4,	"Horizontal Position of the Plane",	1);
	create_byte	(0XF4);
	set_name	(0XF4,	"PLANE_HORI_POS");
	set_cmt	(0XF5,	"Vertical Position of the Plane",	1);
	create_byte	(0XF5);
	set_name	(0XF5,	"PLANE_VERT_POS");
	set_cmt	(0XF6,	"Vertical Position of the Plane Shadow",	1);
	create_byte	(0XF6);
	set_name	(0XF6,	"PLANE_VERT_SHADOW_POS");
	set_cmt	(0XF7,	"Duration counter for the plane explosion",	1);
	create_byte	(0XF7);
	set_name	(0XF7,	"CRASH_EXPLOSION_COUNTER");
	create_byte	(0XF8);
	set_name	(0XF8,	"RIVER_BRIDGE_ROW");
	set_cmt	(0XF9,	"Y-Position of the current bullet from the plane",	1);
	create_byte	(0XF9);
	set_name	(0XF9,	"PLANE_BULLET_Y_POS");
	create_byte	(0XFA);
	create_word	(x=0XFB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XFB,	"CURRENT_TILE_ROW_PTR");
	create_byte	(0XFD);
	create_byte	(0XFE);
	set_cmt	(0XFF,	"Right position of the river",	1);
	create_byte	(0XFF);
	set_name	(0XFF,	"RIVER_RIGHT_X_POS");
	set_cmt	(0X100,	"PAGE 1 - STACK",	1);
	create_byte	(0X100);
	make_array	(0X100,	0X100);
	set_name	(0X100,	"STACK");
	set_cmt	(0X200,	"DISPLAY LIST NMI VECTOR",	1);
	create_word	(x=0X200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X200,	"VDSLST");
	create_byte	(0X202);
	make_array	(0X202,	0X16);
	set_cmt	(0X218,	"COUNT DOWN TIMER 1 - used for music playback",	1);
	create_word	(x=0X218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X218,	"CDTMV1");
	create_word	(x=0X21A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X21C,	"COUNT DOWN TIMER 3",	1);
	create_word	(x=0X21C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X21C,	"CDTMV3");
	create_byte	(0X21E);
	make_array	(0X21E,	0X4);
	set_cmt	(0X222,	"IMMEDIATE VERTICAL BLANK NMI VECTOR",	1);
	create_word	(x=0X222);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X222,	"VVBLKI");
	set_cmt	(0X224,	"DEFERRED VERTICAL BLANK NMI VECTOR",	1);
	create_word	(x=0X224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X224,	"VVBLKD");
	set_cmt	(0X226,	"COUNT DOWN TIMER 1 JSR ADDRESS",	1);
	create_word	(x=0X226);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X226,	"CDTMA1");
	create_byte	(0X228);
	make_array	(0X228,	0X7);
	set_cmt	(0X22F,	"SAVE DMACTL REGISTER",	1);
	create_byte	(0X22F);
	set_name	(0X22F,	"SDMCTL");
	set_cmt	(0X230,	"SAVE DISPLAY LIST LOW BYTE",	1);
	create_byte	(0X230);
	set_name	(0X230,	"SDLSTL");
	set_cmt	(0X231,	"SAVE DISPLAY LIST HI BYTE",	1);
	create_byte	(0X231);
	set_name	(0X231,	"SDLSTH");
	create_byte	(0X232);
	make_array	(0X232,	0X12);
	set_cmt	(0X244,	"COLDSTART FLAG (1=IN MIDDLE OF COLDSTART)",	1);
	create_byte	(0X244);
	set_name	(0X244,	"COLDST");
	create_byte	(0X245);
	make_array	(0X245,	0X2A);
	set_cmt	(0X26F,	"GLOBAL PRIORITY CELL",	1);
	create_byte	(0X26F);
	set_name	(0X26F,	"GPRIOR");
	create_byte	(0X270);
	make_array	(0X270,	0X8);
	set_cmt	(0X278,	"JOYSTICK 0 RAM CELL",	1);
	create_byte	(0X278);
	set_name	(0X278,	"STICK0");
	create_byte	(0X279);
	make_array	(0X279,	0XB);
	set_cmt	(0X284,	"JOYSTICK TRIGGER 0",	1);
	create_byte	(0X284);
	set_name	(0X284,	"STRIG0");
	create_byte	(0X285);
	make_array	(0X285,	0X3B);
	set_cmt	(0X2C0,	"P0 COLOR",	1);
	create_byte	(x=0X2C0);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C0,	"PCOLR0");
	set_cmt	(0X2C1,	"P1 COLOR",	1);
	create_byte	(x=0X2C1);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C1,	"PCOLR1");
	set_cmt	(0X2C2,	"P2 COLOR",	1);
	create_byte	(x=0X2C2);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C2,	"PCOLR2");
	set_cmt	(0X2C3,	"P3 COLOR",	1);
	create_byte	(x=0X2C3);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C3,	"PCOLP3");
	set_cmt	(0X2C4,	"COLOR 0",	1);
	create_byte	(x=0X2C4);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C4,	"COLOR0");
	create_byte	(x=0X2C5);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C5,	"COLOR1");
	create_byte	(x=0X2C6);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C6,	"COLOR2");
	create_byte	(x=0X2C7);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C7,	"COLOR3");
	create_byte	(x=0X2C8);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X2C8,	"COLOR4");
	create_byte	(0X2C9);
	make_array	(0X2C9,	0X2B);
	set_cmt	(0X2F4,	"CHBAS REGISTER RAM",	1);
	create_byte	(0X2F4);
	set_name	(0X2F4,	"CHBAS");
	create_byte	(0X2F5);
	make_array	(0X2F5,	0X7);
	set_cmt	(0X2FC,	"GLOBAL VARIABLE FOR KEYBOARD",	1);
	create_byte	(x=0X2FC);
	op_enum		(x,	0,	GetEnum("KEYCODE"),0);
	set_name	(0X2FC,	"CH");
	create_byte	(0X2FD);
	make_array	(0X2FD,	0X3);
	set_cmt	(0X300,	"DEVICE CONTROL BLOCK",	1);
	MakeStruct	(0X300,	"DCB_STRUCT");
	set_name	(0X300,	"DCB");
	create_byte	(0X30C);
	make_array	(0X30C,	0X2F4);
	set_cmt	(0X600,	"Direction of the river",	1);
	update_extra_cmt		(0X600,	E_PREV + 0,	"; Variables for Blue Max");
	create_byte	(x=0X600);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	set_name	(0X600,	"MAP_RIVER_DIR");
	set_cmt	(0X601,	"Length of a certain river feature to continue (straight, turn left/right)",	1);
	create_byte	(0X601);
	set_name	(0X601,	"MAP_RIVER_LENGTH");
	create_byte	(0X602);
	create_byte	(0X603);
	set_cmt	(0X604,	"VBL down counter, running countinously during the game",	1);
	create_byte	(0X604);
	set_name	(0X604,	"VBL_DOWN_COUNTER");
	set_cmt	(0X605,	"Propeller phase (typically 0-4)",	1);
	create_byte	(0X605);
	set_name	(0X605,	"PROPELLER_PHASE");
	create_byte	(0X606);
	set_cmt	(0X607,	"STICK0 copy for the TURN routine",	1);
	create_byte	(0X607);
	set_name	(0X607,	"TURN_STICK0");
	create_byte	(0X608);
	set_cmt	(0X609,	"=0 => plane can land (runway reached)",	1);
	create_byte	(0X609);
	set_name	(0X609,	"CAN_LAND_FLAG");
	set_cmt	(0X60A,	"Position of trees",	1);
	create_byte	(0X60A);
	make_array	(0X60A,	0X6);
	set_name	(0X60A,	"TREE_POS_BUF");
	create_byte	(0X610);
	set_cmt	(0X611,	"min. X position for planing trees in a row",	1);
	create_byte	(0X611);
	set_name	(0X611,	"TREE_PLANT_MIN_X");
	set_cmt	(0X612,	"max. X position for planing trees in a row",	1);
	create_byte	(0X612);
	set_name	(0X612,	"TREE_PLANT_MAX_X");
	set_cmt	(0X613,	"Runway is 45 characters long, this is an index used for drawing the correct line",	1);
	create_byte	(0X613);
	set_name	(0X613,	"RUNWAY_POS_Y_INDEX");
	create_byte	(0X614);
	make_array	(0X614,	0X2);
	set_cmt	(0X616,	"Try up to 25 times to find a position for a tree in a row",	1);
	create_byte	(0X616);
	set_name	(0X616,	"TREE_PLANT_TRY_COUNT");
	create_byte	(0X617);
	create_byte	(0X618);
	create_byte	(0X619);
	create_byte	(0X61A);
	create_byte	(0X61B);
	set_cmt	(0X61C,	"!=0 boat top row drawn, ==0 boat bottom row drawn",	1);
	create_byte	(0X61C);
	set_name	(0X61C,	"RIVER_BOAT_ROW_FLAG");
	set_cmt	(0X61D,	"how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)",	1);
	create_byte	(0X61D);
	set_name	(0X61D,	"RIVER_BOAT_NEXT_COUNTER");
	set_cmt	(0X61E,	"X-Position of the current bullet from the plane",	1);
	create_byte	(0X61E);
	set_name	(0X61E,	"PLANE_BULLET_X_POS");
	create_byte	(0X61F);
	create_byte	(0X620);
	create_byte	(0X621);
	set_name	(0X621,	"VAR_EXPLOSION_X_POS");
	create_byte	(0X622);
	set_name	(0X622,	"EXPLOSION_TILE_ANIMATION");
	create_byte	(0X623);
	create_byte	(x=0X624);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	set_name	(0X624,	"VAR_EXPLOSION_TARGET");
	create_byte	(0X625);
	make_array	(0X625,	0X5);
	set_cmt	(0X62A,	"VBL: 30Hz down counter whenever the level scrolls a pixel",	1);
	create_byte	(0X62A);
	set_name	(0X62A,	"VBL_DRAW_DOWN_COUNTER");
	create_byte	(0X62B);
	set_name	(0X62B,	"MSHIP_VAR_62B");
	create_byte	(0X62C);
	set_cmt	(0X62D,	"When enabled, this counter pulls the plane down every 40 ticks",	1);
	create_byte	(0X62D);
	set_name	(0X62D,	"GRAVITY_COUNT");
	create_byte	(0X62F);
	create_byte	(0X630);
	make_array	(0X630,	0X5);
	set_cmt	(0X635,	"Limit speed increment/decrement changes with this counter",	1);
	create_byte	(0X635);
	set_name	(0X635,	"SPEED_DELAY_COUNTER");
	create_byte	(0X636);
	create_byte	(0X637);
	create_byte	(0X638);
	create_byte	(0X639);
	create_byte	(0X63A);
	set_name	(0X63A,	"FUEL_TIMER");
	create_byte	(0X63B);
	make_array	(0X63B,	0X4);
	set_cmt	(0X63F,	"0=Demo Mode active",	1);
	create_byte	(0X63F);
	set_name	(0X63F,	"IS_DEMO_MODE");
	create_byte	(x=0X640);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	set_name	(0X640,	"VAR_UNKNOWN_STATE");
	create_byte	(0X641);
	set_name	(0X641,	"AUDC1_SHADOW");
	create_byte	(0X642);
	set_name	(0X642,	"AUDIO2_DROPSND_FREQ");
	create_byte	(0X643);
	create_byte	(0X644);
	set_name	(0X644,	"AUDIO3_SOUND_COUNTER");
	create_byte	(0X645);
	set_name	(0X645,	"AUDIO3_COUNTER_TRIGGER");
	create_byte	(0X646);
	set_name	(0X646,	"AUDIO3_CONTROL");
	create_byte	(0X647);
	set_name	(0X647,	"AUDIO3_CONTROL_COUNTER");
	set_cmt	(0X648,	"Timer for the repeating gun sound from the plane",	1);
	create_byte	(0X648);
	set_name	(0X648,	"PLANE_GUN_SOUND_TIMER");
	create_byte	(0X649);
	set_name	(0X649,	"AUDIO2_DROPSND_COUNTER");
	set_cmt	(0X64A,	"Timer 2 for the repeating gun sound from the plane",	1);
	create_byte	(0X64A);
	set_name	(0X64A,	"PLANE_GUN_SOUND_TIMER_2");
	set_cmt	(0X64B,	"Timer 3 for the repeating gun sound from the plane",	1);
	create_byte	(0X64B);
	set_name	(0X64B,	"PLANE_GUN_SOUND_TIMER_3");
	set_cmt	(0X64C,	"0=Run sound off, otherwise a count down timer for the effect",	1);
	create_byte	(0X64C);
	set_name	(0X64C,	"RUN_SOUND_COUNTER");
	create_byte	(0X64D);
	set_name	(0X64D,	"AUDIO2_DURATION_COUNTER");
	create_byte	(0X64E);
	set_name	(0X64E,	"AUDIO2_FREQ_COUNTER");
	create_byte	(0X64F);
	set_name	(0X64F,	"AUDIO2_EFFECT_COUNTER");
	create_byte	(0X650);
	create_byte	(0X651);
	set_name	(0X651,	"BUILDING_ROW_COUNTER");
	create_byte	(0X652);
	set_name	(0X652,	"BUILDING_COLOR_OFFSET");
	create_byte	(0X653);
	set_name	(0X653,	"BUILDING_X_START_POS");
	create_byte	(0X654);
	create_byte	(0X655);
	create_byte	(0X656);
	create_byte	(0X657);
	create_byte	(0X658);
	set_cmt	(0X659,	"# of working part (4): fuel, bomb, maneuverabiity, gun",	1);
	create_byte	(0X659);
	set_name	(0X659,	"WORKING_PARTS");
	create_byte	(0X65A);
	set_cmt	(0X65B,	"Right position where the runway starts",	1);
	create_byte	(0X65B);
	set_name	(0X65B,	"RUNWAY_POS_X_INDEX");
	create_byte	(0X65C);
	set_name	(0X65C,	"MISSLE_3_X_POS2");
	create_byte	(0X65D);
	create_byte	(0X65E);
	create_byte	(0X65F);
	create_byte	(0X660);
	create_byte	(0X661);
	create_byte	(0X662);
	create_byte	(0X663);
	set_name	(0X663,	"MISSLE_3_X_POS");
	create_byte	(0X664);
	create_byte	(0X666);
	create_byte	(0X667);
	create_byte	(0X668);
	create_byte	(0X669);
	set_cmt	(0X66A,	"right X position where the road starts",	1);
	create_byte	(0X66A);
	set_name	(0X66A,	"ROAD_RIGHT_X_POS");
	set_cmt	(0X66B,	"How many lines till the enemy runway will appear",	1);
	create_byte	(0X66B);
	set_name	(0X66B,	"ENEMY_RUNWAY_START");
	set_cmt	(0X66C,	"Length/current line of the enemy runway (default length=36)",	1);
	create_byte	(0X66C);
	set_name	(0X66C,	"ENEMY_RUNWAY_LENGTH");
	create_byte	(0X66D);
	set_name	(0X66D,	"ENEMY_RUNWAY_PLANE_FLAG");
	set_cmt	(0X66E,	"Background color set in the DL IRQ",	1);
	create_byte	(0X66E);
	set_name	(0X66E,	"DL_IRQ_BACKGROUND_COLOR");
	set_cmt	(0X66F,	"Duration for PCOLR2 flash (enemy got hit)",	1);
	create_byte	(0X66F);
	set_name	(0X66F,	"PCOLR2_FLASH_COUNTER");
	create_byte	(0X670);
	create_byte	(0X671);
	create_byte	(0X672);
	create_byte	(0X673);
	create_byte	(0X674);
	create_byte	(0X675);
	create_byte	(0X676);
	create_byte	(0X677);
	create_byte	(0X679);
	set_name	(0X679,	"DIRECTION_A");
	create_byte	(0X67A);
	create_byte	(0X67B);
	create_byte	(0X67C);
	create_byte	(0X67D);
	make_array	(0X67E,	0X2);
	create_byte	(0X680);
	set_name	(0X680,	"DIRECTION_B");
	create_byte	(0X681);
	make_array	(0X681,	0X3);
	create_byte	(0X684);
	create_byte	(0X685);
	create_byte	(0X686);
	create_byte	(0X687);
	make_array	(0X687,	0X3);
	create_byte	(0X68A);
	create_byte	(0X68B);
	make_array	(0X68B,	0X3);
	create_byte	(0X68E);
	create_byte	(0X68F);
	create_byte	(0X690);
	make_array	(0X691,	0X3);
	create_byte	(0X694);
	set_cmt	(0X695,	"50% chance that wind is in effect",	1);
	create_byte	(0X695);
	set_name	(0X695,	"WIND_ENABLED");
	create_byte	(x=0X696);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	set_name	(0X696,	"VAR_MISSLE_3_STATE");
	create_byte	(0X697);
	set_name	(0X697,	"MSHIP_BULLET_X_POS");
	create_byte	(0X698);
	create_byte	(0X699);
	create_byte	(0X69A);
	create_byte	(0X69B);
	set_cmt	(0X69C,	"Y position of an enemy bullet (0=none)",	1);
	create_byte	(0X69C);
	set_name	(0X69C,	"ENEMY_BULLET_Y_POS");
	set_cmt	(0X69D,	"Movement pattern (state machine) for the bullet",	1);
	create_byte	(x=0X69D);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	set_name	(0X69D,	"ENEMY_BULLET_MOVEMENT");
	set_cmt	(0X69E,	"X position of an enemy bullet (0=none)",	1);
	create_byte	(0X69E);
	set_name	(0X69E,	"ENEMY_BULLET_X_POS");
	create_byte	(0X69F);
	create_byte	(0X6A0);
	create_byte	(0X6A1);
	create_byte	(0X6A2);
	create_byte	(0X6A3);
	create_byte	(0X6A4);
	set_cmt	(0X6A5,	"0=none, 1=left, 2=right, >2=any",	1);
	create_byte	(x=0X6A5);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	set_name	(0X6A5,	"ENEMY_TURN_MODE");
	create_byte	(0X6A6);
	create_byte	(0X6A7);
	create_byte	(0X6A8);
	set_cmt	(0X6A9,	"Shadow Register for SIZEM",	1);
	create_byte	(0X6A9);
	set_name	(0X6A9,	"SIZEM_SHADOW");
	create_byte	(0X6AA);
	create_byte	(0X6AB);
	set_cmt	(0X6AC,	"Number of primary targets hit",	1);
	create_byte	(0X6AC);
	set_name	(0X6AC,	"PRIMARY_TARGETS_HIT");
	create_byte	(x=0X6AD);
	op_enum		(x,	0,	GetEnum("PRIMARY_TARGET_SUBTYPE"),0);
	set_name	(0X6AD,	"VAR_PRIMARY_TARGET_SUBTYPE");
	create_byte	(0X6AE);
	create_byte	(0X6AF);
	set_name	(0X6AF,	"AUDIO4_GUN_SND_COUNTER");
	create_byte	(0X6B0);
	create_byte	(0X6B1);
	create_word	(x=0X6B2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X6B2,	"TEMP_NEXT_ROW_PTR");
	create_word	(x=0X6B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X6B4,	"TEMP_PREVIOUS_ROW_PTR");
	create_byte	(0X6B6);
	create_byte	(0X6B7);
	set_cmt	(0X6B9,	"Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)",	1);
	create_byte	(0X6B9);
	set_name	(0X6B9,	"COLOR_FLASHING");
	create_byte	(0X6BA);
	make_array	(0X6BA,	0X4);
	set_name	(0X6BA,	"SAVED_COLOR0_3");
	set_cmt	(0X6BE,	"Quake, shake via the scroll register, timer",	1);
	create_byte	(0X6BE);
	set_name	(0X6BE,	"QUAKE_ANIMATION_COUNTER");
	create_byte	(0X6BF);
	set_name	(0X6BF,	"CAPITAL_Y_POS");
	create_byte	(0X6C1);
	create_byte	(x=0X6C2);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	set_name	(0X6C2,	"GAME_COMPLETION_MASK");
	create_byte	(0X6C3);
	create_byte	(0X6C4);
	create_byte	(0X6C5);
	create_byte	(0X6C6);
	set_cmt	(0X6C7,	"Number of required primary targets to progress (8 or 9 by random)",	1);
	create_byte	(0X6C7);
	set_name	(0X6C7,	"REQUIRED_TARGETS");
	set_cmt	(0X6C8,	"Difficulty for the level",	1);
	MakeStruct	(0X6C8,	"DIFF_STRUCT");
	set_name	(0X6C8,	"DIFF");
	create_byte	(0X6CF);
	create_byte	(0X6D0);
	make_array	(0X6D0,	0X6);
	create_byte	(0X6D6);
	create_byte	(0X6D7);
	make_array	(0X6D7,	0X4);
	create_byte	(0X6DB);
	create_byte	(0X6DC);
	set_cmt	(0X6DE,	"The boat requires 2 hits to be destroyed",	1);
	create_byte	(0X6DE);
	set_name	(0X6DE,	"RIVER_BOAT_HIT_COUNTER");
	set_cmt	(0X6DF,	"Last STRIG0 value (for debouncing)",	1);
	create_byte	(0X6DF);
	set_name	(0X6DF,	"LAST_STRIG0");
	set_cmt	(0X6E0,	"Increment with each button/trigger press",	1);
	create_byte	(0X6E0);
	set_name	(0X6E0,	"TRIGGER_COUNT");
	create_byte	(0X6E1);
	make_array	(0X6E1,	0X2);
	create_byte	(0X6E3);
	create_byte	(0X6E4);
	make_array	(0X6E4,	0X2);
	set_cmt	(0X6E6,	"Gravity? 0=No, 1=Yes",	1);
	create_byte	(0X6E6);
	set_name	(0X6E6,	"MODE_GRAVITY_FLAG");
	set_cmt	(0X6E7,	"Level: 0=Novice, 1=Intermediate, 2=Advanced",	1);
	create_byte	(x=0X6E7);
	op_enum		(x,	0,	GetEnum("GAME_LEVEL"),0);
	set_name	(0X6E7,	"MODE_LEVEL");
	set_cmt	(0X6E8,	"MENU: currently selected option",	1);
	create_byte	(0X6E8);
	set_name	(0X6E8,	"MENU_OPTION_INDEX_6E8");
	set_cmt	(0X6E9,	"Last value of CONSOL in the MENU selection",	1);
	create_byte	(0X6E9);
	set_name	(0X6E9,	"MENU_LAST_CONSOL_6E9");
	create_byte	(0X6EA);
	create_byte	(0X6EB);
	create_byte	(0X6EC);
	set_name	(0X6EC,	"AUDIO2_DROPSND_FREQ_SAVED");
	create_byte	(0X6ED);
	make_array	(0X6EE,	0X2);
	set_cmt	(0X6F0,	"Saved 2 bytes of the RTCLOK during pause",	1);
	create_byte	(0X6F0);
	make_array	(0X6F0,	0X2);
	set_name	(0X6F0,	"PAUSE_RTCLOK");
	create_byte	(0X6F2);
	set_cmt	(0X6F3,	"0:normal game play, 1=demo mode active",	1);
	create_byte	(0X6F3);
	set_name	(0X6F3,	"DEMO_IS_ACTIVE");
	set_cmt	(0X6F4,	"COLPF1 color set in the DL IRQ",	1);
	create_byte	(0X6F4);
	set_name	(0X6F4,	"DL_IRQ_COLPF1");
	set_cmt	(0X6F5,	"Demo mode: timer for joystick input",	1);
	create_byte	(0X6F5);
	set_name	(0X6F5,	"DEMO_JOY_TIMER");
	set_cmt	(0X6F6,	"Demo mode: joystick movement",	1);
	create_byte	(0X6F6);
	set_name	(0X6F6,	"DEMO_STICK0");
	create_byte	(0X6F7);
	set_cmt	(0X6F8,	"Sound flag when the plane is low to the ground",	1);
	create_byte	(0X6F8);
	set_name	(0X6F8,	"LOW_SND_FREQ");
	create_byte	(0X6F9);
	create_byte	(0X6FA);
	make_array	(0X6FA,	0X5);
	set_cmt	(0X6FF,	"Sound: Music playback is active, when != 0",	1);
	create_byte	(0X6FF);
	set_name	(0X6FF,	"SOUND_MUSIC_ACTIVE_6FF");
	set_cmt	(0X700,	"boot flag, copied to DFLAGS",	1);
	create_byte	(0X700);
	set_name	(0X700,	"BOOT_RECORD");
	set_cmt	(0X701,	"number of sectors the boot record, copied to DBSECT",	1);
	create_byte	(x=0X701);
	op_dec		(x,	0);
	op_dec		(x,	1);
	set_cmt	(0X702,	"BOOT ADRESS, copied to BOOTAD",	0);
	create_word	(x=0X702);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X704,	"BOOT INIT",	1);
	create_word	(x=0X704);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X706);
	op_dec		(x,	0);
	set_name	(0X706,	"BOOT_CONTINUE");
	create_insn	(x=0X708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X70B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X711);
	create_insn	(x=0X716);
	create_insn	(x=0X728);
	op_dec		(x,	0);
	create_insn	(x=0X72D);
	op_dec		(x,	0);
	create_insn	(x=0X73E);
	op_dec		(x,	0);
	create_insn	(x=0X742);
	op_dec		(x,	0);
	set_cmt	(0X74C,	"Stop Tape",	1);
	create_insn	(0X754);
	set_name	(0X754,	"BOOT_INIT");
	create_insn	(x=0X755);
	op_dec		(x,	0);
	set_name	(0X755,	"READ_BLOCK");
	create_insn	(x=0X757);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X75A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X765);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X768);
	create_insn	(x=0X76C);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X773);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X779);
	set_name	(0X779,	"nullsub_1");
	create_byte	(x=0X77A);
	make_array	(x,	0X5);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_name	(0X77A,	"COLOR_TABLE");
	MakeStruct	(0X77F,	"DCB_STRUCT");
	set_name	(0X77F,	"LOAD_DCB");
	update_extra_cmt		(0X78B,	E_PREV + 0,	" ");
	create_byte	(0X78B);
	set_name	(0X78B,	"DISPLAY_LIST");
	create_byte	(0X78C);
	create_byte	(0X78D);
	create_byte	(0X78E);
	create_word	(x=0X78F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X791);
	create_byte	(0X792);
	create_byte	(0X793);
	create_byte	(0X794);
	create_byte	(0X795);
	create_word	(x=0X796);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X798,	E_PREV + 0,	" ");
	create_byte	(x=0X798);
	make_array	(x,	0X28);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X798,	"TEXT_LINE");
	create_byte	(0X7C0);
	make_array	(0X7C0,	0X40);
	create_insn	(x=0XC00);
	set_name	(0XC00,	"RESET");
	create_insn	(x=0XC04);
	update_extra_cmt		(0XC08,	E_PREV + 0,	" ");
	create_insn	(x=0XC08);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0XC0D);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0XC12);
	op_dec		(x,	0);
	create_insn	(x=0XC14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC17);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC34);
	op_dec		(x,	0);
	create_insn	(x=0XC36);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XC39,	"Print title copyright to screen",	1);
	create_insn	(x=0XC39);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XC42,	"START");
	set_cmt	(0XC4B,	"Display List: 6 VBLANK",	1);
	update_extra_cmt		(0XC4B,	E_PREV + 0,	" ");
	set_cmt	(0XC53,	"Display List: LMS <adr> VSCROL HSCROL MODE 4",	1);
	update_extra_cmt		(0XC53,	E_PREV + 0,	" ");
	create_insn	(x=0XC55);
	op_dec		(x,	0);
	create_insn	(x=0XC57);
	create_insn	(x=0XC5F);
	create_insn	(x=0XC63);
	create_insn	(x=0XC67);
	op_dec		(x,	0);
	create_insn	(x=0XC69);
	op_bin		(x,	0);
	set_cmt	(0XC6C,	"each line has 65 bytes RAM",	1);
	create_insn	(x=0XC6C);
	op_dec		(x,	0);
	create_insn	(x=0XC6E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC77);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XC81,	"Display List: DLI 1 BLANK (trigger an interrupt)",	1);
	update_extra_cmt		(0XC81,	E_PREV + 0,	" ");
	create_insn	(x=0XC83);
	set_cmt	(0XC86,	"Display List: LMS <adr> HSCROL MODE 4",	1);
	create_insn	(x=0XC88);
	set_cmt	(0XC8B,	"Display List: 3 BLANK",	1);
	create_insn	(x=0XC8D);
	set_cmt	(0XC90,	"Display List: LMS <adr> MODE 6",	1);
	create_insn	(x=0XC92);
	update_extra_cmt		(0XC95,	E_PREV + 0,	" ");
	create_insn	(x=0XC9A);
	create_insn	(x=0XC9C);
	create_insn	(x=0XC9F);
	create_insn	(x=0XCA3);
	create_insn	(x=0XCA5);
	create_insn	(x=0XCA8);
	create_insn	(x=0XCAA);
	set_cmt	(0XCAD,	"Display List: MODE 6",	1);
	create_insn	(x=0XCAF);
	create_insn	(x=0XCB2);
	set_cmt	(0XCB5,	"Display List: JVB <adr>",	1);
	create_insn	(x=0XCB7);
	create_insn	(x=0XCBA);
	create_insn	(x=0XCBC);
	create_insn	(x=0XCC2);
	create_insn	(x=0XCC4);
	update_extra_cmt		(0XCCA,	E_PREV + 0,	" ");
	create_insn	(x=0XCCA);
	set_cmt	(0XCCC,	"Select the playfield font",	1);
	create_insn	(x=0XCCF);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0XCD6);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0XCDB);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0XCE8);
	create_insn	(x=0XCED);
	create_insn	(x=0XCF2);
	create_insn	(x=0XCF7);
	create_insn	(x=0XCFC);
	create_insn	(x=0XD01);
	create_insn	(x=0XD0C);
	op_dec		(x,	0);
	create_insn	(x=0XD0E);
	op_dec		(x,	0);
	create_insn	(x=0XD10);
	create_insn	(x=0XD20);
	op_dec		(x,	0);
	create_insn	(x=0XD27);
	op_dec		(x,	0);
	create_insn	(x=0XD48);
	op_dec		(x,	0);
	create_insn	(x=0XD50);
	op_dec		(x,	0);
	create_insn	(x=0XD52);
	create_insn	(x=0XD55);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XD6D);
	op_dec		(x,	0);
	create_insn	(x=0XD7E);
	op_dec		(x,	0);
	create_insn	(x=0XD83);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0XE03);
	op_dec		(x,	0);
	create_insn	(x=0XE0D);
	op_dec		(x,	0);
	create_insn	(x=0XE12);
	op_dec		(x,	0);
	create_insn	(x=0XE1A);
	set_cmt	(0XE1F,	"Enable Player Graphics and Missile Graphics",	1);
	create_insn	(x=0XE1F);
	op_bin		(x,	0);
	create_insn	(x=0XE24);
	op_dec		(x,	0);
	create_insn	(x=0XE2E);
	op_dec		(x,	0);
	set_cmt	(0XE3B,	"PRIO = Players first, then Playfield",	1);
	create_insn	(x=0XE44);
	op_dec		(x,	0);
	create_insn	(x=0XE54);
	op_dec		(x,	0);
	create_insn	(x=0XE67);
	op_dec		(x,	0);
	create_insn	(x=0XE6C);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	create_insn	(x=0XE7A);
	create_insn	(x=0XE7F);
	create_insn	(x=0XE84);
	op_dec		(x,	0);
	set_name	(0XE8B,	"EA");
	create_insn	(0XE8E);
	set_name	(0XE8E,	"EB");
	create_insn	(x=0XE9B);
	create_insn	(x=0XEA0);
	create_insn	(x=0XEA9);
	op_dec		(x,	0);
	create_insn	(x=0XEAD);
	op_dec		(x,	0);
	update_extra_cmt		(0XEB9,	E_PREV + 0,	" ");
	create_insn	(x=0XEBE);
	op_enum		(x,	0,	GetEnum("GAME_LEVEL"),0);
	set_cmt	(0XEC2,	"Setup level: advanced",	1);
	create_insn	(x=0XEC2);
	op_dec		(x,	0);
	create_insn	(x=0XEC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XEC7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XED0);
	op_dec		(x,	0);
	set_cmt	(0XED8,	"Setup level: novice",	1);
	create_insn	(x=0XED8);
	op_dec		(x,	0);
	create_insn	(x=0XEDA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XEDD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XEE6,	"Setup level: intermediate",	1);
	create_insn	(x=0XEE6);
	op_dec		(x,	0);
	create_insn	(x=0XEE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XEEB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XEF1);
	op_dec		(x,	0);
	set_cmt	(0XF07,	"Wait for the title music to be done",	1);
	create_insn	(x=0XF09);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0XF0E);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0XF1D);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0XF25);
	op_dec		(x,	0);
	create_insn	(x=0XF43);
	op_enum		(x,	0,	GetEnum("SETVBV_VECTORS"),0);
	set_name	(0XF43,	"MZ");
	create_insn	(x=0XF45);
	create_insn	(x=0XF47);
	create_insn	(x=0XF54);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0XF68);
	op_dec		(x,	0);
	update_extra_cmt		(0XF7C,	E_PREV + 0,	" ");
	create_insn	(x=0XF84);
	op_dec		(x,	0);
	create_insn	(x=0XF93);
	op_dec		(x,	0);
	set_name	(0XF97,	".9");
	create_insn	(0XF9A);
	create_insn	(x=0XF9D);
	op_dec		(x,	0);
	create_insn	(x=0XFA5);
	op_dec		(x,	0);
	update_extra_cmt		(0XFAD,	E_PREV + 0,	" ");
	create_insn	(x=0XFB0);
	op_bin		(x,	0);
	create_insn	(x=0XFB2);
	op_dec		(x,	0);
	create_insn	(x=0XFB7);
	op_dec		(x,	0);
	create_insn	(x=0XFBF);
	op_dec		(x,	0);
	create_insn	(x=0XFC7);
	op_dec		(x,	0);
	create_insn	(x=0XFD8);
	op_bin		(x,	0);
	create_insn	(0XFE4);
	set_name	(0XFE4,	"SRT");
	create_insn	(0X101F);
	set_name	(0X101F,	"COMMON");
	create_insn	(0X1049);
	set_cmt	(0X1099,	"=> Return",	1);
	create_insn	(x=0X109A);
	op_bin		(x,	0);
	set_name	(0X109A,	"TIMER");
	create_insn	(x=0X109F);
	op_dec		(x,	0);
	create_insn	(x=0X10A1);
	op_dec		(x,	0);
	create_insn	(x=0X10B1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X10B1,	"VBIR__DEFERRED_VBL_DRAW");
	set_cmt	(0X10BD,	"Scrolling happens at 30Hz",	1);
	create_insn	(0X10BD);
	create_insn	(x=0X10CA);
	op_dec		(x,	0);
	create_insn	(0X10D8);
	set_name	(0X10D8,	"J");
	create_insn	(x=0X10E0);
	op_dec		(x,	0);
	create_insn	(x=0X10E7);
	op_bin		(x,	0);
	create_insn	(x=0X10EC);
	op_dec		(x,	0);
	create_insn	(x=0X10F0);
	op_dec		(x,	0);
	update_extra_cmt		(0X10FB,	E_PREV + 0,	" ");
	create_insn	(x=0X10FF);
	op_dec		(x,	0);
	create_insn	(x=0X1107);
	op_dec		(x,	0);
	create_insn	(x=0X1113);
	op_dec		(x,	0);
	create_insn	(x=0X111F);
	op_dec		(x,	0);
	create_insn	(x=0X1123);
	op_dec		(x,	0);
	create_insn	(x=0X1125);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1129);
	op_dec		(x,	0);
	create_insn	(x=0X112B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X112E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1131);
	op_dec		(x,	0);
	create_insn	(x=0X1133);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X113F);
	op_dec		(x,	0);
	create_insn	(x=0X1147);
	op_dec		(x,	0);
	set_name	(0X1158,	"EE__JMP_PATCH");
	create_insn	(0X115B);
	set_name	(0X115B,	"DRAW");
	create_insn	(x=0X1160);
	op_dec		(x,	0);
	create_insn	(x=0X1162);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_cmt	(0X1164,	"Fill whole line with gras",	1);
	create_insn	(x=0X1164);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1169,	"AY");
	create_insn	(x=0X116C);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	create_insn	(x=0X1170);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	set_name	(0X1174,	"AQ");
	create_insn	(0X1177);
	create_insn	(0X117A);
	create_insn	(x=0X117D);
	op_dec		(x,	0);
	create_insn	(x=0X117F);
	op_dec		(x,	0);
	create_insn	(x=0X1184);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	create_insn	(0X118C);
	create_insn	(x=0X1195);
	op_dec		(x,	0);
	create_insn	(x=0X1197);
	op_dec		(x,	0);
	create_insn	(x=0X119C);
	op_dec		(x,	0);
	create_insn	(x=0X11A4);
	op_dec		(x,	0);
	create_insn	(x=0X11A8);
	op_dec		(x,	0);
	set_cmt	(0X11BA,	"50/50 chance for the river to turn left/right",	1);
	create_insn	(0X11BA);
	set_cmt	(0X11C0,	"River should turn left",	1);
	create_insn	(x=0X11C0);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	set_cmt	(0X11C8,	"River should turn right",	1);
	create_insn	(x=0X11C8);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	create_insn	(0X11D9);
	create_insn	(0X11E1);
	create_insn	(x=0X11E3);
	op_dec		(x,	0);
	create_insn	(x=0X11E7);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X11E9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X11EE);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X11F0);
	op_dec		(x,	0);
	create_insn	(x=0X11F2);
	op_dec		(x,	0);
	create_insn	(x=0X11F6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X11FE);
	op_dec		(x,	0);
	create_insn	(x=0X1202);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1209);
	op_dec		(x,	0);
	create_insn	(x=0X1212);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1217);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1219);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X121E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1222);
	op_dec		(x,	0);
	create_insn	(0X1228);
	create_insn	(0X1230);
	create_insn	(x=0X123F);
	op_dec		(x,	0);
	create_insn	(x=0X1243);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1245);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X124A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X124C);
	op_dec		(x,	0);
	create_insn	(x=0X124E);
	op_dec		(x,	0);
	create_insn	(x=0X1252);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X125A);
	op_dec		(x,	0);
	create_insn	(x=0X1265);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1267);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X126D);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X126F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1272);
	op_dec		(x,	0);
	create_insn	(0X127A);
	create_insn	(x=0X127C);
	op_dec		(x,	0);
	create_insn	(x=0X1280);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1282);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1287);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1289);
	op_dec		(x,	0);
	create_insn	(x=0X128B);
	op_dec		(x,	0);
	create_insn	(x=0X128F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1297);
	op_dec		(x,	0);
	create_insn	(x=0X129B);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X129D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X12A2);
	op_dec		(x,	0);
	create_insn	(x=0X12AD);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X12AF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X12BA);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X12BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X12BE,	"=> Return",	1);
	create_insn	(0X12BF);
	create_insn	(0X12CC);
	create_insn	(x=0X12DC);
	op_dec		(x,	0);
	create_insn	(x=0X12E4);
	op_dec		(x,	0);
	create_insn	(x=0X12E8);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X12EA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X12EF);
	op_dec		(x,	0);
	create_insn	(x=0X12F3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X12F5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X12FA);
	op_dec		(x,	0);
	create_insn	(x=0X12FC);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X12FE);
	op_dec		(x,	0);
	create_insn	(x=0X1302);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X130A);
	op_dec		(x,	0);
	create_insn	(x=0X130E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1310);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1315);
	op_dec		(x,	0);
	create_insn	(x=0X1319);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X131B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1320);
	op_dec		(x,	0);
	create_insn	(x=0X132B);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X132D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X133B);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X133D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1342);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1344);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1347);
	set_name	(0X1347,	"DRP1");
	create_insn	(x=0X134B);
	op_bin		(x,	0);
	create_insn	(x=0X134D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1351);
	op_bin		(x,	0);
	create_insn	(x=0X1353);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1357);
	op_bin		(x,	0);
	create_insn	(x=0X1359);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X135D);
	op_bin		(x,	0);
	create_insn	(x=0X135F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1363);
	op_dec		(x,	0);
	set_name	(0X1363,	"SHDW_SUB");
	create_insn	(x=0X1367);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X136A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X136F);
	op_dec		(x,	0);
	create_insn	(0X1374);
	set_name	(0X1374,	"PROP");
	create_insn	(x=0X137E);
	op_dec		(x,	0);
	create_insn	(x=0X1385);
	op_dec		(x,	0);
	create_insn	(x=0X1389);
	op_dec		(x,	0);
	create_insn	(0X138E);
	create_insn	(x=0X1390);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X1394);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X1398);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X139C);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X13A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13A3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X13AB);
	create_insn	(x=0X13AD);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X13B1);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X13B5);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X13B9);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X13BD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13C8);
	op_dec		(x,	0);
	create_insn	(x=0X13CA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13CD);
	op_bin		(x,	0);
	create_insn	(x=0X13CF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13D2);
	op_bin		(x,	0);
	create_insn	(x=0X13D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13D8);
	op_bin		(x,	0);
	create_insn	(x=0X13DA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13DD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13E0);
	op_bin		(x,	0);
	create_insn	(x=0X13E2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13E6);
	op_bin		(x,	0);
	create_insn	(x=0X13E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13EB);
	op_bin		(x,	0);
	create_insn	(x=0X13ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13F0);
	op_bin		(x,	0);
	create_insn	(x=0X13F2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13F6);
	op_bin		(x,	0);
	create_insn	(x=0X13F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X13FB);
	op_bin		(x,	0);
	create_insn	(x=0X13FD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1400);
	op_bin		(x,	0);
	create_insn	(x=0X1402);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1406);
	set_name	(0X1406,	"PAUSE");
	create_insn	(x=0X1409);
	op_enum		(x,	0,	GetEnum("KEYCODE"),0);
	create_insn	(x=0X140E);
	op_enum		(x,	0,	GetEnum("SETVBV_VECTORS"),0);
	create_insn	(x=0X1410);
	create_insn	(x=0X1412);
	set_cmt	(0X1435,	"Wait for Space to be pressed again",	1);
	create_insn	(x=0X1435);
	op_enum		(x,	0,	GetEnum("KEYCODE"),0);
	update_extra_cmt		(0X1439,	E_PREV + 0,	" ");
	create_insn	(x=0X1443);
	op_enum		(x,	0,	GetEnum("SETVBV_VECTORS"),0);
	create_insn	(x=0X1445);
	create_insn	(x=0X1447);
	create_insn	(0X1455);
	set_name	(0X1455,	"CKCOL");
	create_insn	(0X145A);
	create_insn	(x=0X145D);
	op_bin		(x,	0);
	create_insn	(x=0X1461);
	op_bin		(x,	0);
	create_insn	(x=0X1465);
	op_bin		(x,	0);
	create_insn	(x=0X1469);
	op_bin		(x,	0);
	set_cmt	(0X146D,	"=> Return",	1);
	create_insn	(0X146E);
	create_insn	(x=0X1471);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X1493);
	set_name	(0X1493,	"JOYST");
	create_insn	(0X14A2);
	create_insn	(x=0X14A9);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X14AD);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X14B1);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X14B5);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X14BE);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X14C2);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(0X14C9);
	create_insn	(0X14CC);
	create_insn	(0X14CF);
	create_insn	(0X14D2);
	create_insn	(0X14D5);
	create_insn	(0X14D8);
	set_name	(0X14D8,	"KK");
	set_name	(0X14DB,	"DN");
	create_insn	(x=0X14E2);
	op_dec		(x,	0);
	create_insn	(x=0X14E8);
	op_dec		(x,	0);
	create_insn	(x=0X14EA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X14ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X14F6);
	op_dec		(x,	0);
	create_insn	(x=0X14F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X14FB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1503,	"Plane crashed into the ground",	1);
	create_insn	(0X1503);
	create_insn	(0X1506);
	set_name	(0X1506,	"UP");
	create_insn	(x=0X1508);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	create_insn	(x=0X150C);
	op_dec		(x,	0);
	create_insn	(x=0X150F);
	op_dec		(x,	0);
	create_insn	(x=0X1511);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1514);
	create_insn	(x=0X1525);
	op_dec		(x,	0);
	set_cmt	(0X152C,	"=> Return",	1);
	create_insn	(0X152D);
	set_name	(0X152D,	"CE");
	create_insn	(x=0X152F);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	create_insn	(x=0X153F);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	create_insn	(x=0X1544);
	op_dec		(x,	0);
	set_name	(0X1544,	"CH__");
	create_insn	(x=0X1548);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X154B);
	create_insn	(0X1559);
	set_name	(0X1559,	"CD");
	create_insn	(x=0X155B);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	set_name	(0X1569,	"CA");
	create_insn	(x=0X156B);
	op_dec		(x,	0);
	create_insn	(x=0X1570);
	op_dec		(x,	0);
	set_name	(0X1570,	"CB");
	create_insn	(x=0X1572);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1575);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1588);
	create_insn	(0X158C);
	set_cmt	(0X1597,	"=> Return",	1);
	create_insn	(x=0X1598);
	op_dec		(x,	0);
	create_insn	(x=0X159F);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	create_insn	(x=0X15A5);
	op_dec		(x,	0);
	create_insn	(0X15B6);
	create_insn	(x=0X15B8);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	set_cmt	(0X15BC,	"=> Return",	1);
	create_insn	(0X15BD);
	create_insn	(x=0X15BF);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	set_cmt	(0X15D0,	"Move Plane right, if possible",	1);
	create_insn	(0X15D0);
	create_insn	(x=0X15D2);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	set_cmt	(0X15E1,	"Move Plane left, if possible",	1);
	create_insn	(0X15E1);
	create_insn	(x=0X15E3);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	create_insn	(0X15F2);
	set_name	(0X15F2,	"SHCOL");
	create_insn	(x=0X15F7);
	op_dec		(x,	0);
	create_insn	(x=0X15FB);
	op_dec		(x,	0);
	create_insn	(x=0X1600);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X1607);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X160C);
	op_bin		(x,	0);
	create_insn	(x=0X160E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1611);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1614);
	op_bin		(x,	0);
	create_insn	(x=0X1616);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1619);
	op_bin		(x,	0);
	create_insn	(x=0X161B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X161E,	"=> Return",	1);
	create_insn	(x=0X161F);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X1626);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X162E);
	set_name	(0X162E,	"CK");
	create_insn	(x=0X1630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1639);
	op_dec		(x,	0);
	create_insn	(x=0X163D);
	op_bin		(x,	0);
	create_insn	(x=0X163F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1642);
	op_bin		(x,	0);
	create_insn	(x=0X1644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1647);
	set_name	(0X1647,	"DRP0");
	create_insn	(x=0X164B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X164E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1656);
	set_name	(0X1656,	"TURN");
	set_cmt	(0X165D,	"=> joystick direction has not changed",	1);
	create_insn	(0X165E);
	create_insn	(x=0X1661);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X1665);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X1669);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X166D);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	set_cmt	(0X1674,	"Joystick was moved in allowed direction",	1);
	create_insn	(0X1674);
	set_cmt	(0X1679,	"Is the plane already too close to the ground?",	1);
	create_insn	(x=0X1679);
	op_dec		(x,	0);
	set_cmt	(0X167B,	"=> no",	1);
	create_insn	(0X1680);
	create_insn	(x=0X1683);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X1687);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	update_extra_cmt		(0X168B,	E_PREV + 0,	" ");
	update_extra_cmt		(0X168B,	E_PREV + 1,	"; Set plane image to turn left");
	create_insn	(x=0X168B);
	op_dec		(x,	0);
	create_insn	(x=0X168F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1692);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X169C,	E_PREV + 0,	" ");
	update_extra_cmt		(0X169C,	E_PREV + 1,	"; Set plane image to turn right");
	create_insn	(x=0X169C);
	op_dec		(x,	0);
	create_insn	(x=0X16A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X16A3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X16AE,	"Shadow too far away?",	1);
	create_insn	(x=0X16AE);
	op_dec		(x,	0);
	create_insn	(x=0X16B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X16B9);
	op_bin		(x,	0);
	create_insn	(x=0X16BB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X16BE);
	op_bin		(x,	0);
	create_insn	(x=0X16C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X16C3,	"=> Return",	1);
	set_cmt	(0X16C4,	"Plane was crashed",	1);
	create_insn	(0X16C4);
	set_name	(0X16C4,	"CRASH");
	set_cmt	(0X16C7,	"avoid an underflow for the altitude",	1);
	create_insn	(x=0X16C7);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X16CE);
	op_dec		(x,	0);
	create_insn	(x=0X16D0);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X16D5);
	op_bin		(x,	0);
	create_insn	(x=0X16D8);
	op_dec		(x,	0);
	create_insn	(x=0X16E5);
	op_enum		(x,	0,	GetEnum("SETVBV_VECTORS"),0);
	create_insn	(x=0X16E7);
	create_insn	(x=0X16E9);
	create_insn	(x=0X16FA);
	op_dec		(x,	0);
	create_insn	(x=0X16FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X16FF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X171E);
	create_insn	(x=0X1721);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1737);
	op_dec		(x,	0);
	create_insn	(x=0X173C);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1747);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1759);
	op_dec		(x,	0);
	create_insn	(x=0X175D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1760);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1763);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1770);
	op_dec		(x,	0);
	update_extra_cmt		(0X178D,	E_PREV + 0,	" ");
	create_insn	(x=0X178D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X179D);
	op_dec		(x,	0);
	create_insn	(x=0X17AB);
	op_dec		(x,	0);
	create_insn	(x=0X17BE);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X17C5);
	op_bin		(x,	0);
	create_insn	(x=0X17CC);
	op_dec		(x,	0);
	create_insn	(x=0X17DA);
	op_dec		(x,	0);
	create_insn	(0X17EF);
	set_name	(0X17EF,	"DRTR__DRAW_TREE");
	set_cmt	(0X17F4,	"6 trees per row",	1);
	create_insn	(x=0X17F4);
	op_dec		(x,	0);
	create_insn	(x=0X17F8);
	create_insn	(x=0X17FD);
	op_dec		(x,	0);
	create_insn	(x=0X17FF);
	set_cmt	(0X1802,	"Set random top-right part of a tree at Y",	1);
	update_extra_cmt		(0X1802,	E_PREV + 0,	" ");
	create_insn	(x=0X1808);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X180A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X180F);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1811);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1813,	"Set random top-left part of a tree at Y-1",	1);
	create_insn	(x=0X181A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X181C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1821);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1823);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1826,	"=> next tree",	1);
	update_extra_cmt		(0X1828,	E_PREV + 0,	" ");
	create_insn	(x=0X182C);
	op_dec		(x,	0);
	create_insn	(x=0X1833);
	op_dec		(x,	0);
	create_insn	(x=0X1838);
	op_dec		(x,	0);
	set_cmt	(0X183C,	"=> Return",	1);
	create_insn	(0X183D);
	create_insn	(x=0X1841);
	op_dec		(x,	0);
	create_insn	(x=0X1847);
	op_dec		(x,	0);
	create_insn	(x=0X184B);
	op_dec		(x,	0);
	update_extra_cmt		(0X1850,	E_PREV + 0,	" ");
	create_insn	(x=0X1850);
	op_dec		(x,	0);
	set_cmt	(0X1855,	"search for next spot for a tree",	1);
	create_insn	(x=0X185D);
	op_dec		(x,	0);
	set_cmt	(0X185F,	"too large for the line?",	1);
	create_insn	(x=0X185F);
	op_dec		(x,	0);
	set_cmt	(0X1861,	"=> yes, next",	1);
	set_cmt	(0X1870,	"Found a position A",	1);
	create_insn	(0X1870);
	create_insn	(x=0X1871);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1873);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1878,	"require 3 tiles of gras to use that area",	1);
	create_insn	(x=0X1878);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X187D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1881,	"Set random bottom-right part of a tree at Y",	1);
	update_extra_cmt		(0X1881,	E_PREV + 0,	" ");
	create_insn	(x=0X1887);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1889);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X188E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1892,	"Set random bottom-left part of a tree at Y-1",	1);
	create_insn	(x=0X1899);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X189B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X18A0);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X18A2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X18A5);
	create_insn	(x=0X18AC);
	op_dec		(x,	0);
	set_name	(0X18AC,	"DG");
	create_insn	(x=0X18B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X18B3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X18BB);
	set_name	(0X18BB,	"CRSH");
	create_insn	(0X18D1);
	create_insn	(x=0X18E2);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X18E7);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X18EF);
	set_name	(0X18EF,	"SK");
	set_cmt	(0X18F7,	"=> Return",	1);
	create_insn	(0X18F8);
	set_name	(0X18F8,	"DRBT__DRAW_BOAT");
	create_insn	(0X18FD);
	create_insn	(0X190B);
	create_insn	(x=0X190D);
	op_dec		(x,	0);
	create_insn	(x=0X1913);
	op_dec		(x,	0);
	create_insn	(x=0X1917);
	op_dec		(x,	0);
	create_insn	(x=0X191B);
	op_dec		(x,	0);
	create_insn	(0X1921);
	set_cmt	(0X1924,	"Ship is near the right riverbank",	1);
	create_insn	(x=0X1924);
	op_dec		(x,	0);
	create_insn	(x=0X1928);
	op_dec		(x,	0);
	create_insn	(x=0X192D);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X192F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1932);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1934);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X193F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1941,	"Draw 2nd row of the river boat (the top one)",	1);
	create_insn	(x=0X1941);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1943);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1946);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1948);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X194A);
	op_dec		(x,	0);
	update_extra_cmt		(0X194F,	E_PREV + 0,	" ");
	create_insn	(x=0X1952);
	op_dec		(x,	0);
	create_insn	(x=0X1954);
	op_dec		(x,	0);
	create_insn	(x=0X1959);
	op_dec		(x,	0);
	create_insn	(0X195F);
	set_name	(0X195F,	"TRIG__TRIGGER_MACHINE_GUN");
	set_cmt	(0X1965,	"=> button is not pressed",	1);
	set_cmt	(0X196A,	"=> gun is not damaged",	1);
	set_cmt	(0X1971,	"1/32 chance (3%) for the gun to still work",	1);
	set_cmt	(0X1973,	"=> Return",	1);
	create_insn	(0X1974);
	create_insn	(x=0X1991);
	op_bin		(x,	0);
	create_insn	(x=0X1993);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X199A);
	op_dec		(x,	0);
	create_insn	(x=0X19A1);
	op_dec		(x,	0);
	create_insn	(x=0X19B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X19BB);
	op_bin		(x,	0);
	create_insn	(x=0X19BD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X19C4);
	op_dec		(x,	0);
	set_name	(0X19C4,	"HG");
	create_insn	(x=0X19C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X19CB);
	op_dec		(x,	0);
	create_insn	(0X19D1);
	set_name	(0X19D1,	"BOMB");
	set_cmt	(0X19DB,	"=> button is not pressed",	1);
	set_cmt	(0X19E9,	"=> Return",	1);
	create_insn	(0X19EA);
	create_insn	(0X19ED);
	create_insn	(x=0X1A02);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1A09);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1A13);
	create_insn	(x=0X1A17);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X1A1F);
	set_name	(0X1A1F,	"PC");
	create_insn	(x=0X1A2C);
	op_dec		(x,	0);
	create_insn	(x=0X1A32);
	op_dec		(x,	0);
	create_insn	(x=0X1A37);
	op_dec		(x,	0);
	create_insn	(x=0X1A3C);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0X1A44);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X1A49);
	op_dec		(x,	0);
	create_insn	(0X1A51);
	create_insn	(x=0X1A56);
	op_bin		(x,	0);
	set_name	(0X1A56,	"AFU");
	create_insn	(x=0X1A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1A5E);
	op_bin		(x,	0);
	create_insn	(x=0X1A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1A69);
	op_bin		(x,	0);
	create_insn	(x=0X1A6B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1A6E);
	op_bin		(x,	0);
	create_insn	(x=0X1A73);
	op_bin		(x,	0);
	create_insn	(x=0X1A75);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1A78);
	op_bin		(x,	0);
	create_insn	(x=0X1A7A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1A84);
	set_name	(0X1A87,	"HL");
	create_insn	(x=0X1A8D);
	op_dec		(x,	0);
	set_name	(0X1A8D,	"AFP");
	create_insn	(x=0X1A98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1A9B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1A9E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1AA9);
	op_dec		(x,	0);
	create_insn	(x=0X1AB8);
	op_dec		(x,	0);
	set_cmt	(0X1ABF,	"=> Return",	1);
	create_insn	(0X1AC0);
	set_name	(0X1AC0,	"XPLSN");
	create_insn	(0X1AC5);
	create_insn	(0X1AC8);
	set_name	(0X1AD3,	"ADB");
	update_extra_cmt		(0X1ADB,	E_PREV + 0,	" ");
	create_insn	(x=0X1ADB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1AE1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1AE7);
	create_insn	(x=0X1AED);
	update_extra_cmt		(0X1AF3,	E_PREV + 0,	" ");
	create_insn	(x=0X1AF3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1AF5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1AF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1AFA);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1AFE);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B02);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B06);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B0A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B0E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B12);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B16);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B1A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B1E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B22);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B24);
	op_dec		(x,	0);
	create_insn	(x=0X1B26);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B2A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1B2E);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	set_name	(0X1B2E,	"U3");
	create_insn	(x=0X1B33);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X1B33,	"HY");
	create_insn	(x=0X1B35);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1B37);
	op_dec		(x,	0);
	set_name	(0X1B37,	"Z7");
	create_insn	(x=0X1B3E);
	op_dec		(x,	0);
	create_insn	(x=0X1B42);
	op_dec		(x,	0);
	set_name	(0X1B44,	"DT");
	create_insn	(x=0X1B47);
	op_dec		(x,	0);
	set_name	(0X1B47,	"AFE");
	create_insn	(x=0X1B49);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X1B4E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X1B4E,	"HW");
	create_insn	(x=0X1B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1B52);
	op_dec		(x,	0);
	create_insn	(x=0X1B57);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	set_name	(0X1B57,	"Y8");
	set_cmt	(0X1B5C,	"Trigger explosion sound effect",	1);
	create_insn	(x=0X1B5C);
	op_dec		(x,	0);
	set_name	(0X1B5C,	"SL");
	create_insn	(x=0X1B64);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X1B6C);
	op_dec		(x,	0);
	create_insn	(0X1B72);
	set_name	(0X1B72,	"HT");
	create_insn	(x=0X1B74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1B7A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1B82);
	set_name	(0X1B82,	"AFD");
	create_insn	(0X1B85);
	set_name	(0X1B85,	"HU");
	create_insn	(x=0X1B8B);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	set_name	(0X1B8B,	"HX");
	create_insn	(0X1B93);
	set_name	(0X1B93,	"ID");
	create_insn	(x=0X1BA0);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BA4);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BA8);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BAC);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BB0);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BB4);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BB8);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BBC);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BBE);
	op_dec		(x,	0);
	create_insn	(x=0X1BC0);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	set_cmt	(0X1BC4,	"2x1 gras explosion",	1);
	create_insn	(0X1BCF);
	create_insn	(0X1BD2);
	create_insn	(0X1BD5);
	create_insn	(0X1BD8);
	create_insn	(0X1BDB);
	create_insn	(0X1BDE);
	create_insn	(0X1BE1);
	create_insn	(0X1BE4);
	create_insn	(0X1BE7);
	create_insn	(x=0X1BEA);
	op_dec		(x,	0);
	create_insn	(x=0X1BEF);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1BF1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1BF6);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1BFD);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1BFF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1C01,	"=> Return",	1);
	create_insn	(x=0X1C02);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C09);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X1C10);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C12);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1C15);
	set_name	(0X1C15,	"HR");
	create_insn	(x=0X1C16);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C18);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(0X1C1D);
	create_insn	(0X1C20);
	set_name	(0X1C20,	"HV");
	create_insn	(x=0X1C23);
	op_dec		(x,	0);
	create_insn	(x=0X1C2F);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C31);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C34);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C36);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C39);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C3B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1C3E);
	set_name	(0X1C3E,	"V8");
	create_insn	(x=0X1C46);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C4A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C4D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C52);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C55);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C57);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1C59,	"=> Return",	1);
	set_name	(0X1C59,	".2");
	create_insn	(x=0X1C5A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C5E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C61);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C66);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1C69);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1C6B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1C6E);
	set_name	(0X1C6E,	"QUAKE");
	set_cmt	(0X1C7E,	"=> Return",	1);
	create_insn	(0X1C7F);
	set_name	(0X1C7F,	"DRP23");
	create_insn	(x=0X1C81);
	op_dec		(x,	0);
	create_insn	(x=0X1C8B);
	op_dec		(x,	0);
	create_insn	(x=0X1C8E);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X1C92);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X1C96);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	set_cmt	(0X1C9A,	"=> Return",	1);
	create_insn	(0X1C9B);
	create_insn	(0X1C9E);
	create_insn	(0X1CA1);
	create_insn	(0X1CA4);
	create_insn	(x=0X1CAA);
	op_dec		(x,	0);
	create_insn	(x=0X1CB2);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X1CBF);
	create_insn	(x=0X1CC8);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X1CD5);
	op_dec		(x,	0);
	create_insn	(x=0X1CE1);
	create_insn	(x=0X1CE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1CE7);
	create_insn	(x=0X1CEA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1CF1);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(0X1CF7);
	create_insn	(x=0X1CFC);
	op_dec		(x,	0);
	create_insn	(x=0X1D08);
	create_insn	(x=0X1D0B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1D0E);
	create_insn	(x=0X1D11);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1D18);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X1D1E);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X1D29);
	create_insn	(x=0X1D2B);
	op_dec		(x,	0);
	create_insn	(x=0X1D2F);
	op_dec		(x,	0);
	set_name	(0X1D2F,	"JG");
	create_insn	(x=0X1D33);
	create_insn	(x=0X1D36);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1D3D);
	op_dec		(x,	0);
	create_insn	(0X1D42);
	set_name	(0X1D42,	"JN");
	create_insn	(x=0X1D49);
	op_dec		(x,	0);
	create_insn	(x=0X1D4D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1D53);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1D56);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1D62);
	set_name	(0X1D62,	"JE");
	create_insn	(x=0X1D64);
	op_dec		(x,	0);
	create_insn	(0X1D6B);
	set_cmt	(0X1D78,	"Truck driving left/right",	1);
	create_insn	(0X1D78);
	create_insn	(x=0X1D7B);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X1D83);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X1D90);
	op_dec		(x,	0);
	create_insn	(x=0X1D9C);
	create_insn	(x=0X1D9F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1DA2);
	create_insn	(x=0X1DA5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1DAC);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(0X1DB2);
	create_insn	(x=0X1DB7);
	op_dec		(x,	0);
	create_insn	(x=0X1DC1);
	op_dec		(x,	0);
	create_insn	(x=0X1DC3);
	create_insn	(x=0X1DC6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1DC9);
	create_insn	(x=0X1DCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1DD3);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(0X1DD9);
	set_name	(0X1DD9,	"COLP02");
	set_cmt	(0X1DDC,	"Collision with the player? (White color only)",	1);
	create_insn	(x=0X1DDC);
	op_bin		(x,	0);
	create_insn	(x=0X1DDE);
	op_bin		(x,	0);
	create_insn	(0X1DE6);
	create_insn	(x=0X1DF6);
	op_dec		(x,	0);
	create_insn	(0X1E02);
	set_name	(0X1E02,	"ALT__ALTITUDE_DISPLAY_FIXUP");
	create_insn	(x=0X1E05);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1E09);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1E0E);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1E19);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1E1E);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1E23);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X1E29);
	create_insn	(x=0X1E2A);
	op_dec		(x,	0);
	create_insn	(x=0X1E35);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1E3A);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1E3F);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X1E45);
	set_name	(0X1E45,	"DRBR__DRAW_BRIDGE");
	set_cmt	(0X1E49,	"=> Return",	1);
	create_insn	(0X1E4A);
	set_name	(0X1E4E,	"LV");
	create_insn	(x=0X1E50);
	op_dec		(x,	0);
	create_insn	(x=0X1E54);
	op_dec		(x,	0);
	create_insn	(x=0X1E5B);
	op_enum		(x,	0,	GetEnum("DIR_RIVER"),0);
	create_insn	(x=0X1E60);
	op_dec		(x,	0);
	create_insn	(x=0X1E66);
	op_dec		(x,	0);
	create_insn	(0X1E6C);
	create_insn	(x=0X1E75);
	op_dec		(x,	0);
	create_insn	(x=0X1E81);
	op_dec		(x,	0);
	create_insn	(x=0X1E85);
	op_dec		(x,	0);
	create_insn	(x=0X1E89);
	op_dec		(x,	0);
	create_insn	(x=0X1E8D);
	op_dec		(x,	0);
	create_insn	(x=0X1E91);
	op_dec		(x,	0);
	create_insn	(x=0X1E95);
	op_dec		(x,	0);
	create_insn	(x=0X1E99);
	op_dec		(x,	0);
	create_insn	(0X1E9F);
	create_insn	(0X1EA2);
	create_insn	(0X1EA5);
	create_insn	(x=0X1EA8);
	op_dec		(x,	0);
	create_insn	(x=0X1EAC);
	op_dec		(x,	0);
	create_insn	(x=0X1EB4);
	op_dec		(x,	0);
	create_insn	(x=0X1EB6);
	op_dec		(x,	0);
	create_insn	(x=0X1EBC);
	op_dec		(x,	0);
	create_insn	(x=0X1EC0);
	op_enum		(x,	0,	GetEnum("PRIMARY_TARGET_SUBTYPE"),0);
	create_insn	(x=0X1EC5);
	op_dec		(x,	0);
	set_cmt	(0X1ECF,	"=> Return",	1);
	create_insn	(0X1ECF);
	create_insn	(0X1ED0);
	create_insn	(x=0X1ED2);
	op_dec		(x,	0);
	create_insn	(x=0X1ED4);
	create_insn	(x=0X1ED7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1EE2);
	op_dec		(x,	0);
	create_insn	(0X1EE4);
	set_name	(0X1EE4,	"A2");
	create_insn	(x=0X1EEC);
	op_dec		(x,	0);
	create_insn	(x=0X1EF1);
	op_dec		(x,	0);
	create_insn	(0X1EF7);
	create_insn	(x=0X1EFD);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1EFF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F0B);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F0D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F10);
	op_dec		(x,	0);
	create_insn	(x=0X1F17);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F19);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F1C);
	op_dec		(x,	0);
	create_insn	(x=0X1F25);
	create_insn	(x=0X1F28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F34);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F36);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F42);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F4C);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F4E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1F53,	"=> Return",	1);
	create_insn	(0X1F54);
	create_insn	(x=0X1F5A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F5F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F62);
	op_dec		(x,	0);
	create_insn	(x=0X1F69);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F6B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F6E);
	op_dec		(x,	0);
	create_insn	(x=0X1F74);
	op_dec		(x,	0);
	create_insn	(x=0X1F77);
	create_insn	(x=0X1F7A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F88);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F8A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1F92);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1F99,	"=> Return",	1);
	create_insn	(x=0X1F9A);
	op_dec		(x,	0);
	create_insn	(x=0X1F9C);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1F9E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1FA6);
	op_dec		(x,	0);
	create_insn	(x=0X1FA8);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X1FAA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1FB1);
	create_insn	(x=0X1FBC);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X1FC4);
	op_dec		(x,	0);
	create_insn	(0X1FCB);
	set_name	(0X1FCB,	"RND7");
	create_insn	(x=0X1FCE);
	op_dec		(x,	0);
	create_insn	(x=0X1FD0);
	op_dec		(x,	0);
	create_insn	(0X1FD4);
	set_name	(0X1FD4,	"SPD__SPEED_CHANGE");
	create_insn	(x=0X1FDC);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X1FE3);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1FE7);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1FEE);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X1FF5);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X1FF9,	"=> Return",	1);
	set_cmt	(0X1FFA,	"Increment speed by 1, if not already 300",	1);
	create_insn	(0X1FFA);
	set_cmt	(0X1FFD,	"Speed already 300?",	1);
	create_insn	(x=0X1FFD);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X2001,	"Increment speed by 1 with little delay",	1);
	set_name	(0X2001,	"KM");
	create_insn	(x=0X2006);
	op_dec		(x,	0);
	set_cmt	(0X200B,	"Increment speed by 1",	1);
	create_insn	(x=0X2011);
	create_insn	(x=0X2016);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2021);
	create_insn	(x=0X2026);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X2035,	"Decrement speed by 1 with little delay",	1);
	create_insn	(0X2035);
	set_name	(0X2035,	"KN");
	create_insn	(x=0X203A);
	op_dec		(x,	0);
	set_cmt	(0X203F,	"Decrement speed by 1",	1);
	set_name	(0X203F,	"MM");
	create_insn	(x=0X2045);
	create_insn	(x=0X204A);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2055);
	create_insn	(x=0X205A);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X2063);
	set_name	(0X2063,	"GRAV__APPLY_GRAVITY");
	set_cmt	(0X2075,	"=> Return",	1);
	create_insn	(0X2076);
	create_insn	(x=0X207B);
	op_dec		(x,	0);
	create_insn	(0X2083);
	set_name	(0X2083,	"PLFWD");
	create_insn	(x=0X2085);
	op_dec		(x,	0);
	create_insn	(x=0X208C);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X2090);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X2094);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X2098);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(0X209F);
	create_insn	(0X20A2);
	create_insn	(x=0X20A6);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X20B0);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X20B8);
	op_bin		(x,	0);
	create_insn	(x=0X20BA);
	op_dec		(x,	0);
	update_extra_cmt		(0X20C4,	E_PREV + 0,	" ");
	create_insn	(x=0X20C4);
	op_dec		(x,	0);
	create_insn	(x=0X20CA);
	op_dec		(x,	0);
	create_insn	(x=0X20CC);
	create_insn	(x=0X20CF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X20DC);
	op_bin		(x,	0);
	create_insn	(x=0X20E0);
	op_dec		(x,	0);
	create_insn	(x=0X20E6);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	set_name	(0X20E6,	"KV");
	create_insn	(x=0X20EB);
	op_dec		(x,	0);
	set_cmt	(0X20EF,	"=> Return",	1);
	set_name	(0X20EF,	"LM");
	create_insn	(0X20F0);
	set_name	(0X20F0,	"LF");
	create_insn	(x=0X20FE);
	op_dec		(x,	0);
	create_insn	(x=0X2102);
	op_dec		(x,	0);
	set_name	(0X2102,	"UZ");
	create_insn	(x=0X2104);
	op_dec		(x,	0);
	create_insn	(x=0X2106);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2109);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2113);
	set_name	(0X2113,	"LG");
	create_insn	(x=0X2115);
	op_dec		(x,	0);
	create_insn	(0X2123);
	create_insn	(x=0X2126);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	create_insn	(x=0X212A);
	op_dec		(x,	0);
	create_insn	(x=0X212C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X212F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2132);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2135);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X214A);
	op_dec		(x,	0);
	create_insn	(x=0X2152);
	op_dec		(x,	0);
	create_insn	(x=0X2156);
	op_dec		(x,	0);
	create_insn	(x=0X215D);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X216A);
	op_dec		(x,	0);
	create_insn	(x=0X216C);
	create_insn	(x=0X216F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2179);
	op_dec		(x,	0);
	create_insn	(x=0X217B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X217E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2188);
	update_extra_cmt		(0X218D,	E_PREV + 0,	" ");
	create_insn	(x=0X2192);
	op_bin		(x,	0);
	create_insn	(x=0X2194);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2197);
	op_bin		(x,	0);
	create_insn	(x=0X2199);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X219C);
	op_bin		(x,	0);
	create_insn	(x=0X219E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X21A1);
	op_dec		(x,	0);
	create_insn	(x=0X21A3);
	create_insn	(x=0X21A6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X21AF);
	op_dec		(x,	0);
	create_insn	(x=0X21B6);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	create_insn	(x=0X21BA);
	op_dec		(x,	0);
	create_insn	(x=0X21BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X21BF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X21CA,	"LP");
	create_insn	(x=0X21CD);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	set_cmt	(0X21DB,	"=> Return",	1);
	create_insn	(x=0X21DC);
	op_bin		(x,	0);
	set_name	(0X21DC,	"LD");
	create_insn	(x=0X21DE);
	op_dec		(x,	0);
	create_insn	(x=0X21E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X21ED);
	create_insn	(0X21F2);
	create_insn	(0X21FB);
	create_insn	(x=0X21FE);
	op_dec		(x,	0);
	create_insn	(x=0X2205);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X220E);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X2217);
	set_name	(0X2217,	"KMKZ");
	create_insn	(x=0X221C);
	op_dec		(x,	0);
	create_insn	(x=0X2224);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X223B);
	create_insn	(x=0X2245);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X2249);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	set_cmt	(0X2250,	"=> Return",	1);
	set_name	(0X2250,	"NF");
	create_insn	(0X2251);
	create_insn	(0X2255);
	set_name	(0X2255,	"FUEL");
	create_insn	(x=0X2261);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	set_cmt	(0X2265,	"A leak doubles the speed of using fuel",	1);
	set_cmt	(0X226D,	"=> Return",	1);
	create_insn	(x=0X226E);
	op_dec		(x,	0);
	create_insn	(x=0X2279);
	create_insn	(0X227E);
	create_insn	(x=0X2281);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2288);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X228F);
	op_dec		(x,	0);
	create_insn	(x=0X2299);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X22A4);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X22A9);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X22B2);
	set_name	(0X22B2,	"REFUEL");
	create_insn	(x=0X22B5);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X22BF);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X22C7);
	op_dec		(x,	0);
	create_insn	(x=0X22CB);
	op_dec		(x,	0);
	create_insn	(x=0X22E1);
	op_dec		(x,	0);
	create_insn	(x=0X22EB);
	op_dec		(x,	0);
	create_insn	(x=0X22EF);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0X22F4);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X22FC);
	create_insn	(x=0X2308);
	op_dec		(x,	0);
	create_insn	(x=0X230F);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X232E);
	op_dec		(x,	0);
	create_insn	(0X2338);
	create_insn	(x=0X233E);
	op_dec		(x,	0);
	create_insn	(0X234B);
	create_insn	(x=0X234E);
	op_dec		(x,	0);
	create_insn	(x=0X2353);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X235E);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2363);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X236E);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2373);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X237C);
	set_name	(0X237C,	"SPDL");
	create_insn	(x=0X237F);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2386);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X238D);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X2392);
	create_insn	(0X2395);
	create_insn	(0X2398);
	set_name	(0X2398,	"STOPL");
	create_insn	(x=0X239B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X23A2);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X23A9);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	update_extra_cmt		(0X23AD,	E_PREV + 0,	" ");
	create_insn	(x=0X23AD);
	op_enum		(x,	0,	GetEnum("SETVBV_VECTORS"),0);
	create_insn	(x=0X23AF);
	create_insn	(x=0X23B1);
	create_insn	(x=0X23BD);
	op_dec		(x,	0);
	create_insn	(x=0X23C5);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X23DC);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X23E7);
	op_dec		(x,	0);
	create_insn	(0X23EF);
	set_name	(0X23F2,	".3");
	set_cmt	(0X23FA,	"=> endless loop. It is exited via the subroutine",	1);
	create_insn	(0X23FD);
	create_insn	(0X2400);
	set_name	(0X2400,	"CKLAND");
	create_insn	(0X2406);
	set_cmt	(0X2408,	"=> button is pressed!",	1);
	create_insn	(x=0X240B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X2434);
	set_cmt	(0X2439,	"plane low enough to land?",	1);
	create_insn	(x=0X2439);
	op_dec		(x,	0);
	update_extra_cmt		(0X243D,	E_PREV + 0,	" ");
	create_insn	(x=0X243D);
	op_dec		(x,	0);
	set_cmt	(0X2442,	"Color back to BLACK",	1);
	update_extra_cmt		(0X2450,	E_PREV + 0,	" ");
	set_cmt	(0X2453,	"Player hit the playfield",	1);
	create_insn	(x=0X2453);
	op_bin		(x,	0);
	create_insn	(0X245A);
	set_cmt	(0X245D,	"Color back to BLACK",	1);
	create_insn	(0X2478);
	create_insn	(x=0X2487);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X2491);
	set_name	(0X2491,	"TAKOF__TAKEOFF_LOOP");
	create_insn	(x=0X24B2);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X24BC);
	create_insn	(x=0X24C7);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X24DA);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(0X24E6);
	create_insn	(x=0X24E9);
	op_bin		(x,	0);
	create_insn	(0X24F0);
	create_insn	(x=0X24F3);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X24F8);
	set_name	(0X24F8,	"XSND");
	create_insn	(x=0X2500);
	op_dec		(x,	0);
	create_insn	(x=0X2505);
	op_dec		(x,	0);
	create_insn	(x=0X2518);
	op_dec		(x,	0);
	create_insn	(x=0X2521);
	op_dec		(x,	0);
	set_cmt	(0X252F,	"=> Exit",	1);
	create_insn	(x=0X2532);
	op_dec		(x,	0);
	set_cmt	(0X2537,	"=> Exit",	1);
	create_insn	(0X253A);
	set_name	(0X253A,	"XXX");
	create_insn	(x=0X2543);
	op_dec		(x,	0);
	create_insn	(0X254C);
	set_name	(0X254C,	"DRPSND");
	create_insn	(x=0X2561);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	set_cmt	(0X2566,	"=> Return",	1);
	create_insn	(0X2567);
	set_name	(0X2567,	"GUNSND");
	create_insn	(x=0X2575);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0X257A);
	op_dec		(x,	0);
	create_insn	(x=0X257E);
	op_dec		(x,	0);
	create_insn	(x=0X258B);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	set_cmt	(0X2590,	"=> Return",	1);
	create_insn	(x=0X2591);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X2597);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X25A0);
	create_insn	(0X25A9);
	set_name	(0X25A9,	"ROAR");
	create_insn	(x=0X25AE);
	op_dec		(x,	0);
	create_insn	(x=0X25B5);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X25BC);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X25C2);
	set_name	(0X25C2,	"PO");
	create_insn	(0X25CC);
	set_cmt	(0X25D5,	"=> Return",	1);
	create_insn	(0X25D6);
	create_insn	(x=0X25D9);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X25E7);
	op_dec		(x,	0);
	set_name	(0X25E7,	"WARN");
	create_insn	(x=0X25F0);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X25F6);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X25F6,	"INCBMB");
	create_insn	(x=0X25FB);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	update_extra_cmt		(0X2611,	E_PREV + 0,	" ");
	create_insn	(x=0X2614);
	op_dec		(x,	0);
	create_insn	(x=0X261C);
	op_dec		(x,	0);
	update_extra_cmt		(0X2620,	E_PREV + 0,	" ");
	create_insn	(x=0X2623);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X262D);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2631);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X263C);
	set_cmt	(0X263F,	"=> Return",	1);
	create_insn	(0X2640);
	set_name	(0X2640,	"RUNSND");
	create_insn	(x=0X2650);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	set_cmt	(0X2655,	"=> Return",	1);
	set_name	(0X2655,	"QE");
	create_insn	(x=0X2656);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0X265B);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X2661);
	set_name	(0X2661,	"PLBCK");
	create_insn	(x=0X267D);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	set_cmt	(0X2684,	"=> Return",	1);
	create_insn	(0X2685);
	set_name	(0X2685,	"L6");
	create_insn	(x=0X2688);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X268C);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X2690);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X2694);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(0X269B);
	create_insn	(0X269E);
	create_insn	(0X26AA);
	set_name	(0X26AA,	"OB");
	update_extra_cmt		(0X26B7,	E_PREV + 0,	" ");
	create_insn	(x=0X26BC);
	op_dec		(x,	0);
	create_insn	(x=0X26C7);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X26D0);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(0X26DD);
	create_insn	(0X26E0);
	set_cmt	(0X26EC,	"=> Return",	1);
	create_insn	(0X26ED);
	create_insn	(x=0X26F0);
	op_dec		(x,	0);
	create_insn	(x=0X26F7);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2700);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2709);
	op_dec		(x,	0);
	set_name	(0X2709,	"OG");
	create_insn	(x=0X270F);
	op_dec		(x,	0);
	create_insn	(x=0X2711);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2714);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X271B);
	op_bin		(x,	0);
	create_insn	(x=0X2720);
	op_bin		(x,	0);
	create_insn	(x=0X2725);
	op_bin		(x,	0);
	create_insn	(x=0X2731);
	op_dec		(x,	0);
	create_insn	(x=0X274A);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X2752);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X2758);
	create_insn	(x=0X2762);
	op_dec		(x,	0);
	create_insn	(x=0X2764);
	create_insn	(x=0X2767);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2770);
	op_dec		(x,	0);
	create_insn	(x=0X2780);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	create_insn	(x=0X2786);
	op_dec		(x,	0);
	create_insn	(x=0X278A);
	op_bin		(x,	0);
	create_insn	(x=0X278C);
	op_dec		(x,	0);
	create_insn	(x=0X278E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2791);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27A1);
	op_dec		(x,	0);
	create_insn	(x=0X27A3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27A6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27A9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27BD);
	op_dec		(x,	0);
	create_insn	(x=0X27BF);
	op_dec		(x,	0);
	create_insn	(x=0X27C3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27C6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27D3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X27DF);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X27E5);
	op_dec		(x,	0);
	create_insn	(x=0X27E9);
	op_bin		(x,	0);
	set_name	(0X27E9,	"K0");
	create_insn	(x=0X27EB);
	op_dec		(x,	0);
	create_insn	(x=0X27ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X27F7);
	create_insn	(x=0X27F9);
	op_dec		(x,	0);
	create_insn	(0X2807);
	create_insn	(x=0X280A);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	create_insn	(x=0X280E);
	op_dec		(x,	0);
	create_insn	(x=0X2810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2813);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X281F);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	set_cmt	(0X282D,	"=> Return",	1);
	create_insn	(0X282E);
	set_name	(0X282E,	"SPLASH");
	create_insn	(x=0X283C);
	op_dec		(x,	0);
	create_insn	(x=0X2840);
	op_dec		(x,	0);
	create_insn	(x=0X2842);
	op_dec		(x,	0);
	create_insn	(x=0X2844);
	op_dec		(x,	0);
	create_insn	(0X2852);
	create_insn	(0X2858);
	set_cmt	(0X2861,	"=> Return",	1);
	create_insn	(0X2862);
	set_name	(0X2862,	"DRTNK");
	create_insn	(0X2867);
	create_insn	(0X2870);
	create_insn	(x=0X2878);
	op_dec		(x,	0);
	create_insn	(x=0X287C);
	op_dec		(x,	0);
	create_insn	(0X2882);
	create_insn	(x=0X2884);
	op_dec		(x,	0);
	create_insn	(x=0X288A);
	op_dec		(x,	0);
	create_insn	(x=0X288E);
	op_dec		(x,	0);
	create_insn	(0X2894);
	create_insn	(x=0X2896);
	op_dec		(x,	0);
	create_insn	(x=0X289A);
	op_dec		(x,	0);
	create_insn	(x=0X28A0);
	op_dec		(x,	0);
	set_name	(0X28A0,	"QS");
	create_insn	(x=0X28A5);
	op_dec		(x,	0);
	create_insn	(x=0X28B6);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(0X28BC);
	set_name	(0X28BC,	"QN");
	set_name	(0X28BE,	"TT");
	create_insn	(x=0X28C8);
	op_dec		(x,	0);
	create_insn	(x=0X28CC);
	op_dec		(x,	0);
	create_insn	(x=0X28D0);
	op_dec		(x,	0);
	update_extra_cmt		(0X28D4,	E_PREV + 0,	" ");
	create_insn	(x=0X28D9);
	op_dec		(x,	0);
	set_cmt	(0X28DD,	"up ro 6 tanks in front of the building",	1);
	create_insn	(x=0X28DD);
	op_dec		(x,	0);
	create_insn	(x=0X28E6);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X28E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X28EB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X28ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X28F2);
	create_insn	(x=0X28F3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X28F5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X28FB);
	create_insn	(0X28FE);
	create_insn	(x=0X2901);
	op_dec		(x,	0);
	set_cmt	(0X290C,	"Build a base row of the building",	1);
	create_insn	(0X290C);
	create_insn	(x=0X2914);
	op_dec		(x,	0);
	create_insn	(x=0X2916);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X291C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2923);
	op_dec		(x,	0);
	create_insn	(x=0X2927);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X292D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X292F,	E_PREV + 0,	" ");
	create_insn	(x=0X292F);
	op_dec		(x,	0);
	create_insn	(x=0X2937);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_cmt	(0X293C,	"anti-aircraft gun to the left of the building",	1);
	create_insn	(x=0X293D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2940);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2946);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X2949,	"Build a center row of the building",	1);
	create_insn	(0X2949);
	set_cmt	(0X2950,	"Building create roof",	1);
	create_insn	(0X2950);
	create_insn	(x=0X2954);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2956);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2959);
	op_dec		(x,	0);
	create_insn	(x=0X295B);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X295D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2963);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2969);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2978);
	op_dec		(x,	0);
	create_insn	(x=0X297F);
	op_dec		(x,	0);
	create_insn	(x=0X2983);
	op_enum		(x,	0,	GetEnum("PRIMARY_TARGET_SUBTYPE"),0);
	create_insn	(x=0X2988);
	op_dec		(x,	0);
	create_insn	(x=0X298E);
	op_dec		(x,	0);
	set_cmt	(0X2993,	"=> Return",	1);
	create_insn	(0X2993);
	create_insn	(0X2994);
	set_name	(0X2994,	"COLM20");
	create_insn	(x=0X2997);
	op_bin		(x,	0);
	create_insn	(x=0X2999);
	op_bin		(x,	0);
	set_cmt	(0X299D,	"=> Return",	1);
	create_insn	(0X299E);
	set_name	(0X29B4,	"DAMAGE");
	set_name	(0X29B7,	"SV");
	create_insn	(x=0X29BC);
	op_dec		(x,	0);
	create_insn	(x=0X29C1);
	op_dec		(x,	0);
	create_insn	(x=0X29C5);
	op_dec		(x,	0);
	set_cmt	(0X29CF,	"Disable demo mode, when plane is completely damaged – to allow it to crash",	1);
	set_cmt	(0X29DB,	"Damage a random part in the plane",	1);
	create_insn	(0X29DB);
	create_insn	(x=0X29E1);
	op_dec		(x,	0);
	create_insn	(x=0X29E5);
	op_dec		(x,	0);
	create_insn	(x=0X29E9);
	op_dec		(x,	0);
	create_insn	(x=0X29F2);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X29F8);
	create_insn	(x=0X29FD);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X2A03);
	create_insn	(x=0X2A08);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X2A0E);
	create_insn	(x=0X2A13);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X2A19);
	set_name	(0X2A19,	"TRIGB");
	create_insn	(x=0X2A26);
	op_dec		(x,	0);
	create_insn	(x=0X2A35);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X2A3C);
	op_dec		(x,	0);
	create_insn	(x=0X2A4B);
	op_bin		(x,	0);
	create_insn	(x=0X2A4D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X2A53,	"=> Return",	1);
	set_name	(0X2A53,	"RM");
	create_insn	(x=0X2A54);
	op_dec		(x,	0);
	create_insn	(x=0X2A56);
	op_dec		(x,	0);
	create_insn	(x=0X2A5B);
	op_dec		(x,	0);
	create_insn	(x=0X2A60);
	op_dec		(x,	0);
	create_insn	(x=0X2A68);
	op_bin		(x,	0);
	create_insn	(x=0X2A6A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2A73);
	op_bin		(x,	0);
	create_insn	(x=0X2A75);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2A7C);
	op_bin		(x,	0);
	set_name	(0X2A7C,	"RO");
	create_insn	(x=0X2A81);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2A84);
	op_dec		(x,	0);
	set_cmt	(0X2A89,	"=> Return",	1);
	set_name	(0X2A89,	"SG");
	create_insn	(0X2A8A);
	set_name	(0X2A8A,	"TRIGF");
	create_insn	(x=0X2A9F);
	op_dec		(x,	0);
	create_insn	(x=0X2AA9);
	op_dec		(x,	0);
	create_insn	(x=0X2AAF);
	op_dec		(x,	0);
	create_insn	(x=0X2AB6);
	op_dec		(x,	0);
	create_insn	(x=0X2ABB);
	op_dec		(x,	0);
	create_insn	(x=0X2ABD);
	op_dec		(x,	0);
	create_insn	(x=0X2AC3);
	op_bin		(x,	0);
	create_insn	(x=0X2AC5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2ACF);
	set_name	(0X2ACF,	"BRGPOS");
	create_insn	(x=0X2AD5);
	op_dec		(x,	0);
	create_insn	(0X2ADB);
	create_insn	(0X2AE4);
	create_insn	(x=0X2AEA);
	op_dec		(x,	0);
	set_cmt	(0X2AFA,	"=> Return",	1);
	set_name	(0X2AFA,	"SP");
	create_insn	(0X2AFB);
	set_name	(0X2AFB,	"FBRGN");
	create_insn	(x=0X2B0A);
	op_dec		(x,	0);
	create_insn	(x=0X2B0E);
	op_dec		(x,	0);
	create_insn	(x=0X2B12);
	op_dec		(x,	0);
	create_insn	(x=0X2B19);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	set_name	(0X2B19,	"ZZ");
	set_name	(0X2B1B,	"A1");
	set_cmt	(0X2B1E,	"Set missile 3 X position",	1);
	set_name	(0X2B1E,	"SX");
	create_insn	(x=0X2B27);
	op_bin		(x,	0);
	create_insn	(x=0X2B29);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2B2C);
	create_insn	(x=0X2B32);
	op_dec		(x,	0);
	create_insn	(x=0X2B34);
	op_dec		(x,	0);
	create_insn	(x=0X2B39);
	op_dec		(x,	0);
	create_insn	(0X2B3F);
	create_insn	(x=0X2B47);
	op_dec		(x,	0);
	create_insn	(0X2B4F);
	set_name	(0X2B4F,	"SM");
	create_insn	(x=0X2B54);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X2B67);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X2B6B);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(0X2B75);
	create_insn	(x=0X2B8A);
	op_dec		(x,	0);
	create_insn	(x=0X2B8C);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X2B91);
	op_dec		(x,	0);
	create_insn	(x=0X2B96);
	op_bin		(x,	0);
	create_insn	(x=0X2B98);
	set_name	(0X2B98,	"D3");
	create_insn	(x=0X2B9B);
	create_insn	(x=0X2B9F);
	create_insn	(x=0X2BA2);
	create_insn	(x=0X2BA6);
	op_bin		(x,	0);
	create_insn	(x=0X2BA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2BAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2BB3);
	op_bin		(x,	0);
	create_insn	(x=0X2BB5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2BB8);
	create_insn	(x=0X2BBF);
	op_bin		(x,	0);
	set_name	(0X2BBF,	"SR");
	create_insn	(x=0X2BC1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2BC4);
	create_insn	(x=0X2BCA);
	create_insn	(x=0X2BCD);
	create_insn	(x=0X2BD0);
	create_insn	(x=0X2BD3);
	op_bin		(x,	0);
	create_insn	(0X2BDF);
	create_insn	(x=0X2BF0);
	op_bin		(x,	0);
	create_insn	(0X2BFC);
	set_name	(0X2BFC,	"COLM30");
	create_insn	(x=0X2BFF);
	op_bin		(x,	0);
	create_insn	(x=0X2C03);
	op_bin		(x,	0);
	set_cmt	(0X2C0E,	"=> Return",	1);
	create_insn	(0X2C0F);
	create_insn	(x=0X2C23);
	op_dec		(x,	0);
	create_insn	(x=0X2C2B);
	op_dec		(x,	0);
	create_insn	(x=0X2C2F);
	op_dec		(x,	0);
	create_insn	(x=0X2C36);
	op_dec		(x,	0);
	create_insn	(x=0X2C38);
	op_dec		(x,	0);
	create_insn	(0X2C3E);
	set_name	(0X2C3E,	"ENRUN");
	set_cmt	(0X2C46,	"=> Return",	1);
	create_insn	(0X2C47);
	set_cmt	(0X2C4A,	"first row of the runway appearing?",	1);
	create_insn	(x=0X2C4A);
	op_dec		(x,	0);
	set_cmt	(0X2C50,	"not before level 3",	1);
	create_insn	(x=0X2C50);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X2C5C);
	op_dec		(x,	0);
	create_insn	(x=0X2C63);
	op_dec		(x,	0);
	create_insn	(x=0X2C67);
	op_dec		(x,	0);
	create_insn	(0X2C6F);
	create_insn	(x=0X2C72);
	op_dec		(x,	0);
	create_insn	(x=0X2C7C);
	op_dec		(x,	0);
	create_insn	(x=0X2C7F);
	op_dec		(x,	0);
	create_insn	(x=0X2C82);
	create_insn	(x=0X2C85);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X2C8A,	E_PREV + 0,	" ");
	create_insn	(x=0X2C90);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2C92);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2C95);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2C97);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2C99);
	op_dec		(x,	0);
	create_insn	(0X2CA1);
	create_insn	(x=0X2CA4);
	op_dec		(x,	0);
	create_insn	(x=0X2CA8);
	op_dec		(x,	0);
	update_extra_cmt		(0X2CAC,	E_PREV + 0,	" ");
	create_insn	(x=0X2CAF);
	op_dec		(x,	0);
	set_cmt	(0X2CB1,	"12.5% chance of a plane",	1);
	create_insn	(x=0X2CB4);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2CB6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2CB9);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2CBB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2CC4);
	op_dec		(x,	0);
	create_insn	(x=0X2CCA);
	op_dec		(x,	0);
	create_insn	(x=0X2CCE);
	op_dec		(x,	0);
	create_insn	(x=0X2CD2);
	op_dec		(x,	0);
	create_insn	(x=0X2CD6);
	op_dec		(x,	0);
	create_insn	(x=0X2CDA);
	op_dec		(x,	0);
	create_insn	(x=0X2CDE);
	op_dec		(x,	0);
	create_insn	(x=0X2CE2);
	op_dec		(x,	0);
	create_insn	(x=0X2CE6);
	op_dec		(x,	0);
	create_insn	(x=0X2CEA);
	op_dec		(x,	0);
	set_cmt	(0X2CEF,	"Draw HNGR1 - first row of the hangar",	1);
	create_insn	(x=0X2CEF);
	op_dec		(x,	0);
	set_name	(0X2CEF,	"UE");
	create_insn	(x=0X2CF1);
	create_insn	(x=0X2CF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X2CFB,	"Draw HNGR2 - second row of the hangar",	1);
	create_insn	(x=0X2CFB);
	op_dec		(x,	0);
	set_name	(0X2CFB,	"UF");
	create_insn	(x=0X2CFD);
	create_insn	(x=0X2D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X2D07,	"Draw HNGR3 - center part",	1);
	create_insn	(x=0X2D07);
	op_dec		(x,	0);
	set_name	(0X2D07,	"UG");
	create_insn	(x=0X2D09);
	create_insn	(x=0X2D0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X2D13,	"Draw HNGR3 - second to last row",	1);
	create_insn	(x=0X2D13);
	op_dec		(x,	0);
	set_name	(0X2D13,	"UH");
	set_cmt	(0X2D19,	"Draw HNGR5 - last row",	1);
	create_insn	(x=0X2D19);
	op_dec		(x,	0);
	set_name	(0X2D19,	"UI");
	create_insn	(x=0X2D1D);
	create_insn	(x=0X2D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X2D26,	"=> Return",	1);
	set_name	(0X2D26,	"R0");
	set_cmt	(0X2D27,	"Add Anti-Aircraft-Battery",	1);
	create_insn	(0X2D27);
	create_insn	(x=0X2D2B);
	op_dec		(x,	0);
	create_insn	(x=0X2D34);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2D39);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2D3B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2D3D);
	op_dec		(x,	0);
	create_insn	(0X2D4C);
	create_insn	(0X2D4F);
	set_name	(0X2D4F,	"AREA");
	create_insn	(x=0X2D51);
	op_dec		(x,	0);
	create_insn	(x=0X2D55);
	op_dec		(x,	0);
	create_insn	(x=0X2D62);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X2D66);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	set_cmt	(0X2D76,	"=> Return",	1);
	create_insn	(x=0X2D77);
	op_dec		(x,	0);
	create_insn	(0X2D83);
	create_insn	(0X2D8B);
	set_name	(0X2D8B,	"CLEAR");
	create_insn	(x=0X2D8F);
	op_dec		(x,	0);
	create_insn	(x=0X2D93);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X2D97);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X2D9B);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2DA0);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X2DA2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2DA8);
	set_name	(0X2DA8,	"DROAD");
	set_cmt	(0X2DB0,	"=> Return",	1);
	set_name	(0X2DB0,	"TN");
	create_insn	(0X2DB1);
	create_insn	(x=0X2DB9);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X2DC3);
	op_dec		(x,	0);
	create_insn	(x=0X2DCB);
	create_insn	(x=0X2DCE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2DD8);
	create_insn	(x=0X2DD9);
	op_dec		(x,	0);
	create_insn	(x=0X2DDC);
	create_insn	(x=0X2DDF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2DEE);
	set_name	(0X2DEE,	"TNKC");
	create_insn	(0X2DF7);
	create_insn	(x=0X2DFE);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(0X2E05);
	create_insn	(0X2E0B);
	set_name	(0X2E0B,	"CITY");
	create_insn	(0X2E42);
	set_name	(0X2E42,	"ASTRSK");
	create_insn	(x=0X2E45);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X2E49);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X2E56,	"=> Return",	1);
	create_insn	(0X2E57);
	create_insn	(x=0X2E5B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X2E5B,	"AEL");
	create_insn	(0X2E66);
	set_name	(0X2E66,	"LINE");
	create_insn	(x=0X2E78);
	op_dec		(x,	0);
	update_extra_cmt		(0X2E7C,	E_PREV + 0,	" ");
	create_insn	(x=0X2E7C);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X2E84,	"at same altitude as enemy plane - can now be destroyed",	1);
	create_insn	(x=0X2E84);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	update_extra_cmt		(0X2E89,	E_PREV + 0,	" ");
	create_insn	(x=0X2E8B);
	op_dec		(x,	0);
	create_insn	(x=0X2E8F);
	op_dec		(x,	0);
	create_insn	(x=0X2E9F);
	op_dec		(x,	0);
	create_insn	(x=0X2EA3);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0X2EA8);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X2EAE);
	create_insn	(x=0X2EB1);
	op_dec		(x,	0);
	set_name	(0X2EB1,	"UO");
	set_name	(0X2EB9,	"F6");
	create_insn	(x=0X2EBE);
	op_dec		(x,	0);
	create_insn	(x=0X2EC0);
	op_dec		(x,	0);
	create_insn	(0X2EC4);
	set_name	(0X2EC4,	"COLM02");
	set_cmt	(0X2EC7,	"Is the enemy plane at the same altitude as the player plane?",	1);
	create_insn	(x=0X2EC7);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X2EC9,	"=> Yes",	1);
	set_cmt	(0X2ECB,	"=> Return",	1);
	set_name	(0X2ECB,	"UU");
	set_cmt	(0X2ECC,	"No bullet flying?",	1);
	create_insn	(0X2ECC);
	update_extra_cmt		(0X2ED0,	E_PREV + 0,	" ");
	set_cmt	(0X2ED3,	"Player bullet collision with an enemy?",	1);
	create_insn	(x=0X2ED3);
	op_bin		(x,	0);
	set_cmt	(0X2ED5,	"no collision?",	1);
	create_insn	(x=0X2ED5);
	op_bin		(x,	0);
	update_extra_cmt		(0X2ED9,	E_PREV + 0,	" ");
	set_cmt	(0X2EDC,	"Is the target a primary one?",	1);
	create_insn	(x=0X2EDC);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X2EE0);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X2EE2,	"=> regular target",	1);
	set_cmt	(0X2EEA,	"+200 extra points for a primary target",	1);
	update_extra_cmt		(0X2EF3,	E_PREV + 0,	" ");
	create_insn	(x=0X2EF5);
	op_dec		(x,	0);
	update_extra_cmt		(0X2F02,	E_PREV + 0,	" ");
	create_insn	(x=0X2F02);
	op_dec		(x,	0);
	create_insn	(x=0X2F08);
	op_dec		(x,	0);
	create_insn	(x=0X2F0A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2F14);
	op_dec		(x,	0);
	create_insn	(x=0X2F27);
	op_dec		(x,	0);
	create_insn	(x=0X2F29);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X2F2E);
	set_name	(0X2F2E,	"XP2");
	create_insn	(0X2F33);
	create_insn	(x=0X2F3B);
	op_dec		(x,	0);
	create_insn	(x=0X2F3F);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X2F44);
	create_insn	(x=0X2F49);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X2F4E);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X2F55);
	op_dec		(x,	0);
	create_insn	(x=0X2F5B);
	op_dec		(x,	0);
	create_insn	(x=0X2F5D);
	op_dec		(x,	0);
	create_insn	(x=0X2F5F);
	op_dec		(x,	0);
	create_insn	(x=0X2F61);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2F64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2F67);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X2F6A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2F79);
	create_insn	(x=0X2F7E);
	op_dec		(x,	0);
	create_insn	(0X2F85);
	set_name	(0X2F85,	"VDSLST_ROUTINE");
	create_insn	(x=0X2F88);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X2F96);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X2FA1);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X2FAA);
	set_name	(0X2FAA,	"BLDG");
	create_insn	(x=0X2FB1);
	op_dec		(x,	0);
	set_cmt	(0X2FB5,	"=> Return",	1);
	create_insn	(0X2FB6);
	create_insn	(x=0X2FBD);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X2FC4);
	op_dec		(x,	0);
	create_insn	(x=0X2FC6);
	op_dec		(x,	0);
	create_insn	(x=0X2FD4);
	op_dec		(x,	0);
	create_insn	(x=0X2FD6);
	op_dec		(x,	0);
	create_insn	(x=0X2FD8);
	op_dec		(x,	0);
	create_insn	(x=0X2FDB);
	op_dec		(x,	0);
	create_insn	(x=0X2FE2);
	op_dec		(x,	0);
	create_insn	(0X2FEA);
	create_insn	(0X2FED);
	create_insn	(x=0X2FF0);
	op_dec		(x,	0);
	create_insn	(x=0X2FF5);
	op_dec		(x,	0);
	create_insn	(x=0X3004);
	op_dec		(x,	0);
	create_insn	(x=0X3007);
	op_dec		(x,	0);
	update_extra_cmt		(0X300C,	E_PREV + 0,	" ");
	create_insn	(0X301F);
	create_insn	(x=0X3021);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X302B);
	op_dec		(x,	0);
	create_insn	(x=0X3030);
	op_dec		(x,	0);
	create_insn	(x=0X3034);
	op_dec		(x,	0);
	create_insn	(0X3048);
	create_insn	(x=0X3054);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3059);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3066);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3069);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X306E);
	create_insn	(x=0X3071);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3076);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X307F);
	op_dec		(x,	0);
	create_insn	(x=0X3083);
	op_dec		(x,	0);
	create_insn	(x=0X3090);
	op_dec		(x,	0);
	create_insn	(x=0X3092);
	op_dec		(x,	0);
	create_insn	(0X309A);
	create_insn	(x=0X309B);
	op_dec		(x,	0);
	create_insn	(x=0X309D);
	op_dec		(x,	0);
	create_insn	(x=0X30A9);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X30AE);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X30B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X30BC);
	create_insn	(0X30BF);
	create_insn	(x=0X30C3);
	op_dec		(x,	0);
	create_insn	(x=0X30C6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X30CC);
	create_insn	(x=0X30DB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X30E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X30EA);
	create_insn	(x=0X30F6);
	op_dec		(x,	0);
	create_insn	(x=0X30FE);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3103);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3109);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X310E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3115);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3117);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X311D);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X311F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3122);
	op_dec		(x,	0);
	create_insn	(x=0X312C);
	op_bin		(x,	0);
	create_insn	(x=0X312E);
	op_dec		(x,	0);
	create_insn	(x=0X3134);
	op_dec		(x,	0);
	create_insn	(x=0X3138);
	op_enum		(x,	0,	GetEnum("PRIMARY_TARGET_SUBTYPE"),0);
	create_insn	(x=0X313D);
	op_dec		(x,	0);
	create_insn	(x=0X3143);
	op_dec		(x,	0);
	set_cmt	(0X3148,	"=> Return",	1);
	create_insn	(0X3148);
	create_insn	(0X3149);
	create_insn	(x=0X314F);
	op_dec		(x,	0);
	create_insn	(x=0X3153);
	op_dec		(x,	0);
	create_insn	(x=0X3157);
	op_dec		(x,	0);
	set_cmt	(0X3166,	"Game phase: 6",	1);
	create_insn	(0X3166);
	create_insn	(x=0X3169);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X316D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X318B,	"Game phase: 7",	1);
	create_insn	(0X318B);
	set_cmt	(0X318E,	"Game phase: 8",	1);
	create_insn	(0X318E);
	create_insn	(0X3191);
	create_insn	(0X3196);
	create_insn	(0X319B);
	set_name	(0X319B,	"B7");
	set_cmt	(0X319D,	"end of this phase reached? => advance to next one!",	1);
	create_insn	(0X31A2);
	update_extra_cmt		(0X31A7,	E_PREV + 0,	" ");
	create_insn	(x=0X31AB);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X31AF);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X31B3);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X31B7);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X31BB);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X31BF);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X31C3);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	update_extra_cmt		(0X31C7,	E_PREV + 0,	"");
	update_extra_cmt		(0X31C7,	E_PREV + 1,	"; Game phase: 0 or 1");
	create_insn	(x=0X31CA);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X31D7);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X31E2);
	op_dec		(x,	0);
	set_cmt	(0X31E4,	"Length: 64-127 rows",	1);
	create_insn	(x=0X31E4);
	op_dec		(x,	0);
	create_insn	(x=0X31E8);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X31F1,	"Game phase: 2",	1);
	create_insn	(x=0X31F1);
	op_dec		(x,	0);
	set_cmt	(0X31F6,	"Game phase: 3",	1);
	create_insn	(0X31F6);
	create_insn	(x=0X31FB);
	op_dec		(x,	0);
	create_insn	(x=0X3218);
	op_dec		(x,	0);
	set_cmt	(0X321D,	"Game phase: 4",	1);
	create_insn	(x=0X321D);
	op_dec		(x,	0);
	set_cmt	(0X3226,	"phase is 24 rows long",	1);
	create_insn	(x=0X3226);
	op_dec		(x,	0);
	set_cmt	(0X322B,	"Game phase: 5",	1);
	create_insn	(x=0X322B);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3233);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	update_extra_cmt		(0X3238,	E_PREV + 0,	" ");
	set_cmt	(0X3244,	"Set new anti-airgraft gun battery graphics at character $31",	1);
	update_extra_cmt		(0X3244,	E_PREV + 0,	" ");
	create_insn	(x=0X3244);
	op_dec		(x,	0);
	create_insn	(x=0X3246);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3249);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X3252,	"Game phase: 6",	1);
	create_insn	(x=0X3252);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X325A);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	update_extra_cmt		(0X3262,	E_PREV + 0,	" ");
	create_insn	(x=0X3265);
	op_dec		(x,	0);
	set_cmt	(0X3267,	"Length: 64-95 rows",	1);
	create_insn	(x=0X3267);
	op_dec		(x,	0);
	set_cmt	(0X326C,	"Game phase: 7",	1);
	create_insn	(x=0X326C);
	op_dec		(x,	0);
	set_cmt	(0X3271,	"Game phase: 8",	1);
	create_insn	(x=0X3271);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3279);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	update_extra_cmt		(0X3281,	E_PREV + 0,	" ");
	create_insn	(0X3289);
	set_name	(0X3289,	"WIND");
	create_insn	(0X328E);
	create_insn	(x=0X329D);
	op_bin		(x,	0);
	create_insn	(x=0X329F);
	op_dec		(x,	0);
	create_insn	(x=0X32A6);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X32B1);
	op_dec		(x,	0);
	create_insn	(0X32B7);
	set_cmt	(0X32BA,	"=> Return",	1);
	create_insn	(0X32BB);
	create_insn	(x=0X32BF);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X32C5);
	create_insn	(x=0X32CC);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	create_insn	(0X32DA);
	create_insn	(x=0X32DC);
	op_enum		(x,	0,	GetEnum("HORIZONTAL_POSITIONS"),0);
	create_insn	(0X32E6);
	set_name	(0X32E6,	"BLDGL");
	create_insn	(x=0X32E8);
	op_dec		(x,	0);
	create_insn	(x=0X32EC);
	op_dec		(x,	0);
	set_cmt	(0X32F0,	"=> Return",	1);
	create_insn	(0X32F1);
	create_insn	(x=0X32F7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X32FB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X32FE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3304);
	op_dec		(x,	0);
	create_insn	(x=0X3306);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X330A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X330D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3313);
	op_dec		(x,	0);
	create_insn	(x=0X3315);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3318);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X331B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3329);
	op_dec		(x,	0);
	create_insn	(x=0X332B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X332D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3331);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3334);
	op_dec		(x,	0);
	create_insn	(x=0X3338);
	op_dec		(x,	0);
	create_insn	(x=0X333A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X333D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3341);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3345);
	op_dec		(x,	0);
	create_insn	(x=0X3349);
	op_dec		(x,	0);
	create_insn	(x=0X334B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X334E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3352);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3356);
	op_dec		(x,	0);
	create_insn	(x=0X335B);
	op_dec		(x,	0);
	set_name	(0X335B,	"SHBNE");
	create_insn	(x=0X335D);
	op_bin		(x,	0);
	create_insn	(x=0X3361);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3369);
	set_name	(0X3369,	"PRIOR__");
	create_insn	(x=0X3370);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X3377);
	op_bin		(x,	0);
	create_insn	(x=0X3387);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X338E);
	op_bin		(x,	0);
	create_insn	(x=0X3392);
	op_dec		(x,	0);
	set_cmt	(0X3397,	"PRIO = Players first, then Playfield",	1);
	set_cmt	(0X339F,	"=> Return",	1);
	create_insn	(0X33A0);
	create_insn	(x=0X33A9);
	op_dec		(x,	0);
	create_insn	(x=0X33AD);
	op_dec		(x,	0);
	set_cmt	(0X33B6,	"PRIO = Playfield first, then Players",	1);
	create_insn	(x=0X33BA);
	op_dec		(x,	0);
	create_insn	(x=0X33C5);
	op_dec		(x,	0);
	create_insn	(0X33D9);
	set_cmt	(0X33DE,	"PRIO = Players first, then Playfield",	1);
	create_insn	(0X33E2);
	set_name	(0X33E2,	"BLDGC");
	create_insn	(x=0X33E4);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X33E8);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	set_cmt	(0X33EC,	"=> Return",	1);
	create_insn	(0X33ED);
	create_insn	(0X33F1);
	set_name	(0X33F1,	"ZE");
	create_insn	(0X33FA);
	create_insn	(x=0X341C);
	op_dec		(x,	0);
	create_insn	(0X3422);
	create_insn	(x=0X3428);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X342F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3440);
	set_name	(0X3440,	"YI");
	create_insn	(x=0X3443);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X344B);
	op_dec		(x,	0);
	create_insn	(x=0X3451);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X3457);
	op_dec		(x,	0);
	create_insn	(x=0X345B);
	op_dec		(x,	0);
	set_cmt	(0X3463,	"=> Return",	1);
	create_insn	(0X3464);
	create_insn	(0X3467);
	create_insn	(0X3472);
	create_insn	(x=0X3473);
	op_dec		(x,	0);
	create_insn	(x=0X3477);
	op_dec		(x,	0);
	create_insn	(x=0X347D);
	op_dec		(x,	0);
	create_insn	(x=0X3481);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3487);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X348D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3496);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X349E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X34A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X34A3);
	create_insn	(x=0X34B1);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X34B6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X34B9);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X34C6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X34C9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X34D9);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X34E1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X34EE);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X34F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X34FB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X34FB,	"XYZ");
	create_insn	(x=0X3502);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3509);
	set_name	(0X3509,	"END");
	create_insn	(x=0X3542);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(0X3555);
	create_insn	(0X3560);
	create_insn	(0X3577);
	create_insn	(0X3582);
	create_insn	(0X358D);
	create_insn	(0X3598);
	set_name	(0X3598,	"B77");
	create_insn	(0X35A6);
	set_name	(0X35A6,	"FBTGN");
	create_insn	(x=0X35A8);
	op_dec		(x,	0);
	create_insn	(0X35AD);
	set_name	(0X35AD,	"A3");
	set_name	(0X35B5,	"G3");
	create_insn	(x=0X35BD);
	op_dec		(x,	0);
	create_insn	(x=0X35C1);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X35C6);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X35D1);
	op_dec		(x,	0);
	create_insn	(x=0X35D5);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X35DA);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(0X35DF);
	create_insn	(0X35E2);
	set_name	(0X35E2,	"CKFGN");
	create_insn	(x=0X35EF);
	op_dec		(x,	0);
	create_insn	(x=0X35F3);
	op_dec		(x,	0);
	create_insn	(0X35F8);
	create_insn	(0X35FB);
	set_name	(0X35FB,	"B3");
	create_insn	(x=0X3603);
	op_dec		(x,	0);
	create_insn	(x=0X3608);
	op_dec		(x,	0);
	create_insn	(0X360E);
	set_name	(0X360E,	"M2GPOS");
	create_insn	(x=0X3614);
	op_dec		(x,	0);
	create_insn	(0X361A);
	create_insn	(0X3623);
	create_insn	(x=0X3629);
	op_dec		(x,	0);
	create_insn	(x=0X3630);
	op_dec		(x,	0);
	set_cmt	(0X3640,	"=> Return",	1);
	create_insn	(0X3641);
	set_name	(0X3641,	"CKFM2");
	create_insn	(x=0X3645);
	op_dec		(x,	0);
	create_insn	(x=0X3649);
	op_dec		(x,	0);
	create_insn	(x=0X3655);
	op_dec		(x,	0);
	create_insn	(x=0X3659);
	op_dec		(x,	0);
	create_insn	(x=0X3664);
	op_dec		(x,	0);
	create_insn	(x=0X3668);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X366D,	"=> Return",	1);
	create_insn	(0X366E);
	create_insn	(0X3671);
	set_name	(0X3671,	"FM2GN");
	update_extra_cmt		(0X3676,	E_PREV + 0,	" ");
	create_insn	(x=0X367B);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X367F);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X3683);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(0X3688);
	create_insn	(x=0X3690);
	op_dec		(x,	0);
	create_insn	(x=0X3694);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X3699);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	set_name	(0X369B,	"C5");
	create_insn	(x=0X36A4);
	op_dec		(x,	0);
	create_insn	(x=0X36A8);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	create_insn	(x=0X36AD);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(0X36B2);
	create_insn	(x=0X36BB);
	op_bin		(x,	0);
	create_insn	(x=0X36BD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X36C0);
	create_insn	(x=0X36C6);
	op_bin		(x,	0);
	create_insn	(x=0X36C8);
	op_dec		(x,	0);
	create_insn	(x=0X36CD);
	op_dec		(x,	0);
	create_insn	(0X36D3);
	create_insn	(x=0X36D8);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X36EB);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(x=0X36EF);
	op_enum		(x,	0,	GetEnum("ENEMY_BULLET_MOVEMENT_TYPES"),0);
	create_insn	(0X36F9);
	create_insn	(x=0X370E);
	op_dec		(x,	0);
	create_insn	(x=0X3710);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X3715);
	op_dec		(x,	0);
	create_insn	(x=0X371A);
	op_bin		(x,	0);
	create_insn	(x=0X371C);
	op_bin		(x,	0);
	create_insn	(x=0X371F);
	op_bin		(x,	0);
	create_insn	(x=0X3721);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3725);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X372C);
	op_bin		(x,	0);
	create_insn	(x=0X372E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3731);
	create_insn	(x=0X3738);
	op_dec		(x,	0);
	set_name	(0X3738,	"D4");
	create_insn	(x=0X373A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X373D);
	create_insn	(x=0X3743);
	create_insn	(x=0X3746);
	create_insn	(x=0X3749);
	create_insn	(x=0X374C);
	op_bin		(x,	0);
	create_insn	(0X3758);
	set_name	(0X3758,	"D0");
	create_insn	(x=0X3769);
	op_bin		(x,	0);
	create_insn	(0X3775);
	set_name	(0X3775,	"CLG20");
	create_insn	(x=0X3778);
	op_bin		(x,	0);
	create_insn	(x=0X377C);
	op_bin		(x,	0);
	set_cmt	(0X3787,	" => Return",	1);
	create_insn	(0X3788);
	create_insn	(x=0X378A);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X378E);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(0X37A1);
	create_insn	(0X37AF);
	set_name	(0X37AF,	"FTNKGN");
	create_insn	(x=0X37B1);
	op_dec		(x,	0);
	create_insn	(0X37B6);
	create_insn	(0X37B9);
	set_name	(0X37B9,	"B5");
	create_insn	(0X37CA);
	create_insn	(x=0X37CC);
	op_dec		(x,	0);
	create_insn	(x=0X37D3);
	op_dec		(x,	0);
	create_insn	(0X37E1);
	set_name	(0X37E3,	"H3");
	create_insn	(0X37EB);
	set_name	(0X37EB,	"DRUN__DRAW_RUNWAY");
	create_insn	(0X37F0);
	create_insn	(x=0X3802);
	op_dec		(x,	0);
	create_insn	(x=0X3809);
	op_dec		(x,	0);
	set_cmt	(0X381A,	"=> Return",	1);
	create_insn	(0X381B);
	create_insn	(x=0X3824);
	op_dec		(x,	0);
	create_insn	(x=0X382D);
	op_dec		(x,	0);
	create_insn	(x=0X3834);
	op_dec		(x,	0);
	create_insn	(x=0X3838);
	op_dec		(x,	0);
	create_insn	(x=0X383C);
	op_dec		(x,	0);
	create_insn	(x=0X3840);
	op_dec		(x,	0);
	set_cmt	(0X3845,	"set to 0",	1);
	create_insn	(x=0X3848);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X385B);
	op_dec		(x,	0);
	create_insn	(x=0X3863);
	op_dec		(x,	0);
	create_insn	(x=0X386A);
	op_dec		(x,	0);
	create_insn	(x=0X386F);
	op_dec		(x,	0);
	create_insn	(x=0X3873);
	op_dec		(x,	0);
	create_insn	(x=0X3877);
	op_dec		(x,	0);
	create_insn	(x=0X3886);
	op_dec		(x,	0);
	create_insn	(x=0X388A);
	op_dec		(x,	0);
	create_insn	(x=0X3892);
	op_dec		(x,	0);
	create_insn	(0X389D);
	set_name	(0X389D,	"MB");
	create_insn	(0X38A5);
	update_extra_cmt		(0X38A8,	E_PREV + 0,	" ");
	create_insn	(x=0X38AB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X38AD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X38B0);
	op_dec		(x,	0);
	create_insn	(x=0X38B5);
	op_dec		(x,	0);
	create_insn	(x=0X38B9);
	op_dec		(x,	0);
	create_insn	(x=0X38BD);
	op_dec		(x,	0);
	create_insn	(x=0X38C1);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(0X38C6);
	create_insn	(x=0X38C8);
	op_dec		(x,	0);
	create_insn	(x=0X38CC);
	op_dec		(x,	0);
	set_cmt	(0X38D1,	"Draw a horizontal runway marker line",	1);
	create_insn	(x=0X38D1);
	op_dec		(x,	0);
	create_insn	(x=0X38D5);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X38D7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X38DD);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X38DF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X38E2,	E_PREV + 0,	" ");
	create_insn	(x=0X38E5);
	op_dec		(x,	0);
	create_insn	(x=0X38E9);
	op_dec		(x,	0);
	create_insn	(x=0X38ED);
	op_dec		(x,	0);
	create_insn	(x=0X38F1);
	op_dec		(x,	0);
	create_insn	(x=0X38F5);
	op_dec		(x,	0);
	create_insn	(x=0X38F9);
	op_dec		(x,	0);
	create_insn	(x=0X38FD);
	op_dec		(x,	0);
	create_insn	(x=0X3901);
	op_dec		(x,	0);
	create_insn	(x=0X3905);
	op_dec		(x,	0);
	set_cmt	(0X390A,	"Start hangar creation",	1);
	create_insn	(x=0X390A);
	op_dec		(x,	0);
	set_cmt	(0X3911,	"Draw HNGR1",	1);
	create_insn	(x=0X3911);
	op_dec		(x,	0);
	set_cmt	(0X391B,	"Draw HNGR2",	1);
	create_insn	(0X391B);
	set_cmt	(0X391E,	"Draw HNGR3 A",	1);
	create_insn	(0X391E);
	set_cmt	(0X3921,	"Draw HNGR3 B",	1);
	create_insn	(0X3921);
	set_cmt	(0X3924,	"Draw HNGR5",	1);
	create_insn	(0X3924);
	create_insn	(x=0X3927);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X3930,	"set to 1",	1);
	create_insn	(0X3934);
	set_name	(0X3934,	"COLRDM__COLOR_DAMAGE");
	create_insn	(0X3939);
	create_insn	(x=0X393D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X3942,	"Hit by enemy gun or anti-aircraft",	1);
	create_insn	(x=0X3942);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X3948);
	set_name	(0X3948,	"FTURN");
	set_cmt	(0X3954,	"=> Return",	1);
	create_insn	(0X3955);
	create_insn	(x=0X3957);
	op_dec		(x,	0);
	create_insn	(x=0X395B);
	op_dec		(x,	0);
	create_insn	(x=0X3962);
	op_dec		(x,	0);
	create_insn	(x=0X396B);
	create_insn	(x=0X396E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3977);
	op_bin		(x,	0);
	create_insn	(x=0X3979);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X397D);
	create_insn	(x=0X3980);
	create_insn	(x=0X3983);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X398C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X398F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3992);
	op_bin		(x,	0);
	create_insn	(x=0X3994);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3998);
	create_insn	(x=0X399A);
	op_dec		(x,	0);
	create_insn	(x=0X399E);
	op_dec		(x,	0);
	create_insn	(x=0X39A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39A3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39A6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39A9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39B4);
	op_dec		(x,	0);
	create_insn	(x=0X39B6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39B9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39C7);
	op_dec		(x,	0);
	create_insn	(x=0X39CB);
	op_bin		(x,	0);
	create_insn	(x=0X39CD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39D0);
	op_bin		(x,	0);
	create_insn	(x=0X39D2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39D6);
	op_bin		(x,	0);
	create_insn	(x=0X39D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39DB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X39DF);
	create_insn	(x=0X39E2);
	op_dec		(x,	0);
	create_insn	(x=0X39E6);
	op_bin		(x,	0);
	create_insn	(x=0X39E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39EB);
	op_bin		(x,	0);
	create_insn	(x=0X39ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39F0);
	op_bin		(x,	0);
	create_insn	(x=0X39F2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39F6);
	op_bin		(x,	0);
	create_insn	(x=0X39F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X39FB);
	op_bin		(x,	0);
	create_insn	(x=0X39FD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A00);
	op_bin		(x,	0);
	create_insn	(x=0X3A02);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3A06);
	set_name	(0X3A06,	"BTURN");
	set_cmt	(0X3A15,	"=> Return",	1);
	create_insn	(0X3A16);
	create_insn	(x=0X3A18);
	op_dec		(x,	0);
	create_insn	(x=0X3A1C);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	create_insn	(x=0X3A21);
	op_dec		(x,	0);
	create_insn	(x=0X3A29);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X3A29,	"K5");
	create_insn	(x=0X3A2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A36);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X3A36,	"K4");
	create_insn	(x=0X3A39);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A45);
	op_bin		(x,	0);
	create_insn	(x=0X3A47);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A4A);
	op_bin		(x,	0);
	create_insn	(x=0X3A4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3A50);
	create_insn	(x=0X3A52);
	op_dec		(x,	0);
	create_insn	(x=0X3A59);
	op_dec		(x,	0);
	create_insn	(x=0X3A5D);
	op_bin		(x,	0);
	create_insn	(x=0X3A5F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A62);
	op_bin		(x,	0);
	create_insn	(x=0X3A64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A67);
	op_bin		(x,	0);
	create_insn	(x=0X3A69);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A6D);
	op_bin		(x,	0);
	create_insn	(x=0X3A6F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A72);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A75);
	op_bin		(x,	0);
	create_insn	(x=0X3A77);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3A7B);
	create_insn	(x=0X3A7E);
	op_dec		(x,	0);
	create_insn	(x=0X3A82);
	op_bin		(x,	0);
	create_insn	(x=0X3A84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A87);
	op_bin		(x,	0);
	create_insn	(x=0X3A89);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A8C);
	op_bin		(x,	0);
	create_insn	(x=0X3A8E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A92);
	op_bin		(x,	0);
	create_insn	(x=0X3A94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A97);
	op_bin		(x,	0);
	create_insn	(x=0X3A99);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3A9C);
	op_bin		(x,	0);
	create_insn	(x=0X3A9E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3AA2);
	set_name	(0X3AA2,	"DRCAR");
	create_insn	(x=0X3AA5);
	op_bin		(x,	0);
	set_cmt	(0X3AA9,	"=> Return",	1);
	create_insn	(0X3AAA);
	set_cmt	(0X3AAE,	"x-4 => car is centered on the road",	1);
	create_insn	(x=0X3AB3);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X3AB9);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X3AC3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3AC5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3AC8);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3ACA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3ACD);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3ACF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3AD2);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3AD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3AD7);
	set_name	(0X3AD7,	"SHIP");
	create_insn	(x=0X3ADB);
	op_dec		(x,	0);
	create_insn	(0X3AE0);
	create_insn	(x=0X3AE9);
	op_dec		(x,	0);
	create_insn	(x=0X3AED);
	op_dec		(x,	0);
	create_insn	(x=0X3AF3);
	op_dec		(x,	0);
	create_insn	(x=0X3AF7);
	op_dec		(x,	0);
	create_insn	(x=0X3AFF);
	op_dec		(x,	0);
	create_insn	(x=0X3B09);
	op_dec		(x,	0);
	create_insn	(x=0X3B0F);
	op_dec		(x,	0);
	create_insn	(x=0X3B11);
	create_insn	(x=0X3B14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3B17);
	create_insn	(x=0X3B1A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3B25);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3B2F);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X3B43);
	set_cmt	(0X3B46,	"=> Return",	1);
	create_insn	(0X3B47);
	create_insn	(x=0X3B5B);
	op_dec		(x,	0);
	create_insn	(x=0X3B5F);
	op_dec		(x,	0);
	create_insn	(x=0X3B61);
	op_bin		(x,	0);
	create_insn	(x=0X3B63);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3B66);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3B70);
	create_insn	(0X3B7C);
	create_insn	(x=0X3B85);
	op_dec		(x,	0);
	set_name	(0X3B85,	"MVSHP");
	create_insn	(x=0X3B87);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3B8A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3B8D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3BA6);
	set_name	(0X3BA6,	"FSHGN");
	set_cmt	(0X3BAB,	"=> Return",	1);
	create_insn	(0X3BAC);
	create_insn	(x=0X3BAE);
	op_dec		(x,	0);
	create_insn	(x=0X3BB2);
	op_dec		(x,	0);
	create_insn	(x=0X3BB7);
	op_dec		(x,	0);
	create_insn	(x=0X3BBD);
	op_dec		(x,	0);
	create_insn	(0X3BC5);
	set_name	(0X3BC5,	"TNK");
	create_insn	(0X3BCA);
	create_insn	(x=0X3BD3);
	op_dec		(x,	0);
	set_name	(0X3BD3,	"E2");
	create_insn	(0X3BD9);
	create_insn	(x=0X3BED);
	op_dec		(x,	0);
	create_insn	(x=0X3BF1);
	op_dec		(x,	0);
	set_name	(0X3BF5,	"F1");
	create_insn	(x=0X3BF8);
	op_dec		(x,	0);
	create_insn	(x=0X3C02);
	op_dec		(x,	0);
	create_insn	(x=0X3C10);
	op_dec		(x,	0);
	create_insn	(0X3C16);
	set_name	(0X3C16,	"E3");
	create_insn	(x=0X3C26);
	op_dec		(x,	0);
	create_insn	(x=0X3C3C);
	op_dec		(x,	0);
	create_insn	(x=0X3C3E);
	op_dec		(x,	0);
	create_insn	(x=0X3C41);
	op_dec		(x,	0);
	create_insn	(x=0X3C43);
	op_dec		(x,	0);
	create_insn	(0X3C48);
	create_insn	(x=0X3C4D);
	op_dec		(x,	0);
	create_insn	(x=0X3C55);
	op_dec		(x,	0);
	create_insn	(x=0X3C57);
	op_dec		(x,	0);
	create_insn	(0X3C5C);
	create_insn	(0X3C68);
	create_insn	(x=0X3C6C);
	op_dec		(x,	0);
	create_insn	(0X3C73);
	create_insn	(x=0X3C75);
	op_dec		(x,	0);
	create_insn	(x=0X3C7A);
	op_dec		(x,	0);
	create_insn	(x=0X3C7C);
	op_dec		(x,	0);
	create_insn	(0X3C81);
	create_insn	(x=0X3C82);
	op_dec		(x,	0);
	create_insn	(x=0X3C84);
	op_dec		(x,	0);
	create_insn	(x=0X3C8A);
	op_dec		(x,	0);
	create_insn	(x=0X3C8C);
	op_dec		(x,	0);
	create_insn	(x=0X3C92);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3C94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3C96);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3C9B);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3C9D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3CA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3CAD);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(0X3CB2);
	create_insn	(x=0X3CB3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3CB5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3CBB);
	set_name	(0X3CBB,	"TNKC1");
	create_insn	(0X3CC4);
	create_insn	(x=0X3CCB);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X3CD2);
	op_dec		(x,	0);
	create_insn	(x=0X3CD8);
	op_dec		(x,	0);
	create_insn	(0X3CDF);
	create_insn	(0X3CE2);
	create_insn	(0X3CE5);
	set_name	(0X3CE5,	"AKA");
	create_insn	(x=0X3CE7);
	op_dec		(x,	0);
	create_insn	(x=0X3CEB);
	op_dec		(x,	0);
	set_cmt	(0X3CF1,	"=> Return",	1);
	create_insn	(0X3CF2);
	set_name	(0X3CF2,	"TRGTP2");
	create_insn	(x=0X3CF5);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3CF9);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X3CFE);
	create_insn	(x=0X3D07);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3D0C);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X3D12);
	set_name	(0X3D12,	"UPXP");
	create_insn	(0X3D1D);
	set_name	(0X3D1D,	"DNXP");
	create_insn	(x=0X3D20);
	op_dec		(x,	0);
	create_insn	(x=0X3D2F);
	op_dec		(x,	0);
	create_insn	(0X3D34);
	set_name	(0X3D34,	"Y7__HIT_RW_PLANE_TR");
	set_name	(0X3D37,	"Y9__HIT_RW_PLANE_TL");
	create_insn	(0X3D3D);
	set_name	(0X3D3D,	"Z0__HIT_RW_PLANE_BR");
	set_name	(0X3D40,	"Z1__HIT_RW_PLANE_BL");
	create_insn	(x=0X3D45);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(0X3D53);
	set_name	(0X3D53,	"X8__HIT_BOAT_TR");
	set_cmt	(0X3D56,	"HIT: fixed boat top-left",	1);
	set_name	(0X3D56,	"X9__HIT_BOAT_TL");
	set_cmt	(0X3D5C,	"HIT: fixed boat bottom-right",	1);
	create_insn	(0X3D5C);
	set_name	(0X3D5C,	"Y0__HIT_BOAT_BR");
	set_cmt	(0X3D5F,	"HIT: fixed boat bottom-left",	1);
	set_name	(0X3D5F,	"Y1__HIT_BOAT_BL");
	create_insn	(x=0X3D6A);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X3D72);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	set_name	(0X3D72,	"X5");
	create_insn	(x=0X3D7A);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X3D86);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X3D86,	"CKCHAR");
	set_cmt	(0X3D88,	"HIT: runway plane top-right",	1);
	create_insn	(x=0X3D8A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_cmt	(0X3D8C,	"HIT: runway plane top-left",	1);
	create_insn	(x=0X3D8E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_cmt	(0X3D90,	"HIT: runway plane bottom-right",	1);
	create_insn	(x=0X3D92);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_cmt	(0X3D94,	"HIT: runway plane bottom-left",	1);
	create_insn	(x=0X3D96);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3D9A);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3D9E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3DA2);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X3DA4);
	op_dec		(x,	0);
	update_extra_cmt		(0X3DA6,	E_PREV + 0,	" ");
	create_insn	(x=0X3DA6);
	op_dec		(x,	0);
	create_insn	(x=0X3DA8);
	create_insn	(x=0X3DB0);
	op_dec		(x,	0);
	create_insn	(x=0X3DB2);
	create_insn	(x=0X3DBA);
	op_dec		(x,	0);
	create_insn	(x=0X3DBC);
	create_insn	(x=0X3DC4);
	op_dec		(x,	0);
	create_insn	(x=0X3DC6);
	create_insn	(x=0X3DCE);
	op_dec		(x,	0);
	create_insn	(x=0X3DD0);
	create_insn	(0X3DDB);
	create_insn	(x=0X3DDE);
	op_enum		(x,	0,	GetEnum("PRIMARY_TARGET_SUBTYPE"),0);
	create_insn	(x=0X3DF3);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(0X3DFB);
	create_insn	(x=0X3DFE);
	op_enum		(x,	0,	GetEnum("PRIMARY_TARGET_SUBTYPE"),0);
	create_insn	(x=0X3E13);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(0X3E1B);
	create_insn	(x=0X3E1E);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X3E26);
	op_enum		(x,	0,	GetEnum("PRIMARY_TARGET_SUBTYPE"),0);
	create_insn	(0X3E46);
	create_insn	(0X3E4C);
	set_name	(0X3E4C,	"XSHP");
	create_insn	(0X3E51);
	create_insn	(x=0X3E5E);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3E63);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3E6A);
	op_dec		(x,	0);
	create_insn	(0X3E79);
	create_insn	(x=0X3E7D);
	op_dec		(x,	0);
	create_insn	(x=0X3E7F);
	op_bin		(x,	0);
	create_insn	(x=0X3E81);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3E8D);
	set_name	(0X3E8D,	"BMBSHP");
	create_insn	(x=0X3E8F);
	op_dec		(x,	0);
	create_insn	(x=0X3E96);
	op_bin		(x,	0);
	update_extra_cmt		(0X3E9A,	E_PREV + 0,	" ");
	create_insn	(x=0X3E9A);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	set_cmt	(0X3EA2,	"Set enemy to explosion graphics",	1);
	set_name	(0X3EA2,	"Z6");
	create_insn	(x=0X3EA4);
	op_dec		(x,	0);
	create_insn	(x=0X3EA6);
	create_insn	(x=0X3EA9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3EAC);
	op_bin		(x,	0);
	create_insn	(x=0X3EAE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X3EB5,	E_PREV + 0,	" ");
	create_insn	(x=0X3EB5);
	op_dec		(x,	0);
	create_insn	(0X3EC6);
	set_name	(0X3EC6,	"XP23");
	update_extra_cmt		(0X3ECA,	E_PREV + 0,	" ");
	create_insn	(x=0X3ECC);
	op_dec		(x,	0);
	set_cmt	(0X3ED3,	"Enemy collision with player?",	1);
	create_insn	(x=0X3ED3);
	op_bin		(x,	0);
	set_cmt	(0X3EDA,	"Enemy collision with player?",	1);
	create_insn	(x=0X3EDA);
	op_bin		(x,	0);
	set_cmt	(0X3EDE,	"=> Return",	1);
	set_cmt	(0X3EDF,	"Player and enemy collision",	1);
	create_insn	(x=0X3EDF);
	op_dec		(x,	0);
	set_name	(0X3EDF,	"R6");
	create_insn	(x=0X3EE3);
	create_insn	(x=0X3EE6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3EEB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X3EF4,	"X is ==0",	1);
	create_insn	(x=0X3EF9);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3EFD);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3F01);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X3F05,	"Primary target hit",	1);
	create_insn	(x=0X3F0E);
	op_dec		(x,	0);
	create_insn	(x=0X3F16);
	op_dec		(x,	0);
	create_insn	(x=0X3F18);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X3F1D);
	create_insn	(x=0X3F2A);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3F2F);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X3F36);
	op_dec		(x,	0);
	create_insn	(x=0X3F43);
	op_dec		(x,	0);
	create_insn	(x=0X3F45);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3F48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X3F5D);
	create_insn	(0X3F64);
	set_name	(0X3F64,	"GNSGHT");
	create_insn	(x=0X3F6E);
	op_dec		(x,	0);
	create_insn	(x=0X3F70);
	create_insn	(x=0X3F73);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X3F7A);
	op_dec		(x,	0);
	create_insn	(0X3F81);
	set_name	(0X3F81,	"TRGT");
	create_insn	(x=0X3F83);
	op_dec		(x,	0);
	create_insn	(x=0X3F87);
	op_dec		(x,	0);
	create_insn	(0X3F90);
	create_insn	(0X3F93);
	create_insn	(x=0X3FA9);
	op_dec		(x,	0);
	create_insn	(x=0X3FB6);
	op_dec		(x,	0);
	create_insn	(0X3FC5);
	create_insn	(x=0X3FCF);
	op_dec		(x,	0);
	create_insn	(x=0X3FD5);
	op_dec		(x,	0);
	create_insn	(x=0X3FD9);
	op_dec		(x,	0);
	set_cmt	(0X3FDD,	"=> Return",	1);
	create_insn	(0X3FDE);
	create_insn	(x=0X3FE3);
	op_dec		(x,	0);
	create_insn	(x=0X3FEF);
	op_dec		(x,	0);
	create_insn	(x=0X3FF5);
	op_dec		(x,	0);
	create_insn	(x=0X3FF9);
	op_dec		(x,	0);
	create_insn	(0X4000);
	create_insn	(x=0X4004);
	op_dec		(x,	0);
	create_insn	(x=0X4008);
	op_dec		(x,	0);
	create_insn	(0X4011);
	create_insn	(x=0X4014);
	op_dec		(x,	0);
	set_name	(0X4018,	"U2");
	create_insn	(x=0X401A);
	op_dec		(x,	0);
	create_insn	(x=0X401C);
	op_bin		(x,	0);
	create_insn	(x=0X401E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402A,	"=> Return",	1);
	set_name	(0X402A,	"O8");
	create_insn	(0X402B);
	set_name	(0X402B,	"O5");
	create_insn	(x=0X4031);
	op_dec		(x,	0);
	create_insn	(x=0X4033);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4036);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X404F);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4055);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X405B);
	set_name	(0X405B,	"FIX");
	create_insn	(x=0X4063);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X4069);
	create_insn	(0X4072);
	create_insn	(0X407B);
	create_insn	(0X407F);
	set_name	(0X407F,	"TRACK");
	create_insn	(x=0X4082);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	set_cmt	(0X4086,	"=> Return",	1);
	create_insn	(0X4087);
	create_insn	(x=0X4091);
	op_enum		(x,	0,	GetEnum("TURN_MODE"),0);
	create_insn	(x=0X4098);
	op_dec		(x,	0);
	create_insn	(0X40B7);
	create_insn	(0X40BA);
	set_name	(0X40BA,	"CPTL");
	create_insn	(x=0X40BC);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X40C0);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	set_cmt	(0X40C4,	"=> Return",	1);
	create_insn	(0X40C5);
	create_insn	(x=0X40CF);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	update_extra_cmt		(0X40D3,	E_PREV + 0,	" ");
	create_insn	(x=0X40D8);
	op_dec		(x,	0);
	create_insn	(x=0X40DC);
	op_dec		(x,	0);
	create_insn	(x=0X40E0);
	op_dec		(x,	0);
	create_insn	(x=0X40E4);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X40E8);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X40ED);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X40F1);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X40F6);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X40FA);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X40FF);
	op_bin		(x,	0);
	create_insn	(x=0X4107);
	op_dec		(x,	0);
	create_insn	(x=0X4111);
	op_dec		(x,	0);
	create_insn	(x=0X4113);
	create_insn	(x=0X4116);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4119);
	create_insn	(x=0X411C);
	create_insn	(x=0X4123);
	op_dec		(x,	0);
	set_cmt	(0X412D,	"=> Return",	1);
	create_insn	(0X412E);
	create_insn	(x=0X4134);
	op_dec		(x,	0);
	create_insn	(x=0X413D);
	op_dec		(x,	0);
	create_insn	(x=0X414E);
	op_bin		(x,	0);
	create_insn	(x=0X4150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4153);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4156);
	op_dec		(x,	0);
	create_insn	(x=0X4158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X415B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X415E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4161);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4175);
	op_dec		(x,	0);
	create_insn	(0X4180);
	set_name	(0X4180,	"S10__SCORE_ADD_10");
	create_insn	(x=0X4186);
	create_insn	(x=0X418B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X4190);
	set_name	(0X4190,	"S100__SCORE_ADD_100");
	create_insn	(x=0X4196);
	create_insn	(x=0X419B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X41A0,	"S1000__SCORE_ADD_1000");
	create_insn	(x=0X41A6);
	create_insn	(x=0X41AB);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X41B5);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X41BE);
	set_name	(0X41BE,	"S500__SCORE_ADD_500");
	create_insn	(x=0X41C4);
	create_insn	(0X41CC);
	create_insn	(x=0X41CD);
	op_dec		(x,	0);
	create_insn	(0X41D5);
	set_name	(0X41D5,	"S50__SCORE_ADD_50");
	create_insn	(x=0X41D9);
	op_dec		(x,	0);
	create_insn	(x=0X41DB);
	create_insn	(0X41E3);
	set_name	(0X41E3,	"Z8");
	create_insn	(x=0X41E4);
	op_dec		(x,	0);
	create_insn	(0X41EC);
	set_name	(0X41EC,	"S30__SCORE_ADD_30");
	create_insn	(x=0X41F0);
	op_dec		(x,	0);
	create_insn	(x=0X41F2);
	create_insn	(0X41FA);
	set_name	(0X41FA,	"SHP23");
	create_insn	(x=0X41FE);
	op_dec		(x,	0);
	create_insn	(0X4203);
	set_cmt	(0X4206,	"Player bullet collision with an enemy?",	1);
	create_insn	(x=0X4206);
	op_bin		(x,	0);
	set_cmt	(0X420A,	"=> Return",	1);
	create_insn	(0X420B);
	create_insn	(x=0X4212);
	op_dec		(x,	0);
	create_insn	(0X4219);
	create_insn	(0X4221);
	set_name	(0X4221,	"P0SHP");
	set_cmt	(0X4224,	"Collisition with the enemy? (Player 2/3)",	1);
	create_insn	(x=0X4224);
	op_bin		(x,	0);
	create_insn	(0X4229);
	set_cmt	(0X422D,	"too close to the ground?",	1);
	create_insn	(x=0X422D);
	op_dec		(x,	0);
	create_insn	(0X4232);
	create_insn	(0X423D);
	set_name	(0X423D,	"XFLSH");
	create_insn	(0X4243);
	create_insn	(x=0X424D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4252);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X425D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4262);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4268);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X426D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X4273,	"Restore previously saved color palette",	1);
	create_insn	(x=0X4273);
	op_dec		(x,	0);
	create_insn	(x=0X4275);
	create_insn	(x=0X4278);
	create_insn	(0X427F);
	set_name	(0X427F,	"ABA");
	create_insn	(x=0X4284);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4289);
	op_dec		(x,	0);
	create_insn	(x=0X428E);
	op_dec		(x,	0);
	create_insn	(x=0X4290);
	create_insn	(x=0X4293);
	set_cmt	(0X4299,	"=> Return",	1);
	create_insn	(0X429A);
	set_name	(0X429A,	"W1");
	create_insn	(x=0X42A0);
	op_dec		(x,	0);
	set_name	(0X42A0,	"Z3");
	create_insn	(x=0X42A2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X42AA,	E_PREV + 0,	" ");
	create_insn	(x=0X42AF);
	op_dec		(x,	0);
	create_insn	(x=0X42B3);
	op_dec		(x,	0);
	create_insn	(x=0X42B7);
	op_dec		(x,	0);
	create_insn	(x=0X42B9);
	create_insn	(x=0X42C2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X42CB);
	op_dec		(x,	0);
	create_insn	(x=0X42CF);
	op_dec		(x,	0);
	create_insn	(x=0X42D6);
	op_dec		(x,	0);
	create_insn	(x=0X42DD);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(0X42E7);
	create_insn	(x=0X42E9);
	op_dec		(x,	0);
	set_cmt	(0X42F6,	"=> Return",	1);
	create_insn	(0X42F7);
	create_insn	(x=0X42FC);
	op_dec		(x,	0);
	create_insn	(x=0X4303);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X430B);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4311);
	op_dec		(x,	0);
	set_cmt	(0X4321,	"Hit a minor target (+30 points)",	1);
	create_insn	(0X4321);
	create_insn	(x=0X432A);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(0X4334);
	set_name	(0X4334,	"FLSH");
	create_insn	(0X433D);
	create_insn	(x=0X4347);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X434F);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X4358);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X435A,	"mission complete! – and land and receive award",	1);
	create_insn	(x=0X435D);
	op_dec		(x,	0);
	create_insn	(0X4363);
	create_insn	(x=0X4366);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X436A);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4377);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X437C);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(0X4382);
	set_name	(0X4382,	"Y6");
	create_insn	(x=0X4385);
	op_dec		(x,	0);
	create_insn	(x=0X438E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4393);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4395);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X439A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X439D);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X439F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43A2);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X43A7);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_cmt	(0X43AC,	"2x1 street explosion",	1);
	create_insn	(0X43AC);
	set_name	(0X43AC,	"X7");
	create_insn	(x=0X43B4);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X43B6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43B9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43BC);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X43BE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43C1);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X43C3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X43C6,	"2x2 runway tile explosion",	1);
	create_insn	(0X43C6);
	set_name	(0X43C6,	"W6");
	create_insn	(x=0X43CE);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X43D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43D3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43DB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X43DE);
	create_insn	(x=0X43DF);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X43E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43E6);
	op_dec		(x,	0);
	create_insn	(x=0X43E9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43EE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X43F2);
	op_dec		(x,	0);
	create_insn	(x=0X43F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X43F7);
	set_name	(0X43F7,	"CPBT");
	set_cmt	(0X43F9,	"previous row no longer visible?",	1);
	create_insn	(x=0X43F9);
	op_dec		(x,	0);
	set_cmt	(0X43FE,	"then leave the subroutine above",	1);
	set_cmt	(0X43FF,	"=> Return",	1);
	create_insn	(0X4400);
	create_insn	(x=0X4406);
	op_dec		(x,	0);
	create_insn	(x=0X440A);
	op_dec		(x,	0);
	create_insn	(x=0X440F);
	op_dec		(x,	0);
	create_insn	(x=0X4414);
	op_dec		(x,	0);
	create_insn	(x=0X441C);
	op_dec		(x,	0);
	create_insn	(x=0X441F);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4421);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4425);
	op_dec		(x,	0);
	create_insn	(x=0X442E);
	op_dec		(x,	0);
	create_insn	(x=0X4431);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4433);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4436);
	op_dec		(x,	0);
	create_insn	(0X443B);
	set_name	(0X443B,	"COLCPTL");
	set_cmt	(0X443E,	"Collisition with the enemy? (Player 2/3)",	1);
	create_insn	(x=0X443E);
	op_bin		(x,	0);
	set_cmt	(0X4442,	"=> Return",	1);
	create_insn	(0X4443);
	create_insn	(x=0X4447);
	op_dec		(x,	0);
	create_insn	(0X4451);
	set_name	(0X4451,	"LOW");
	set_cmt	(0X4456,	"Flashing yellow = flying too low - a crash is imminent!",	1);
	create_insn	(x=0X4456);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X445A,	"strafing altitude",	1);
	create_insn	(x=0X445A);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4463);
	op_dec		(x,	0);
	set_cmt	(0X4465,	"24-29 => strafing altitude",	1);
	create_insn	(x=0X4467);
	op_dec		(x,	0);
	create_insn	(x=0X446B);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X4470);
	create_insn	(x=0X4475);
	op_dec		(x,	0);
	set_cmt	(0X447D,	"strafing altitude",	1);
	create_insn	(x=0X447D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X4482,	"=> Return",	1);
	create_insn	(0X4483);
	create_insn	(x=0X4493);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4497);
	op_dec		(x,	0);
	create_insn	(x=0X449C);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0X44A4);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	set_cmt	(0X44A9,	"Flashing yellow = flying too low - a crash is imminent!",	1);
	create_insn	(x=0X44A9);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X44AD);
	op_dec		(x,	0);
	create_insn	(0X44B4);
	set_name	(0X44B4,	"SHBT");
	create_insn	(x=0X44B8);
	op_dec		(x,	0);
	set_cmt	(0X44BC,	"=> Return",	1);
	create_insn	(0X44BD);
	create_insn	(x=0X44C9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X44CB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44CF);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44D3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44D5);
	op_dec		(x,	0);
	create_insn	(x=0X44D7);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44D9);
	op_dec		(x,	0);
	create_insn	(x=0X44DB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44DF);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44E3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44E7);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44EB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44EF);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X44F9);
	op_dec		(x,	0);
	create_insn	(x=0X44FE);
	create_insn	(x=0X4503);
	create_insn	(x=0X450E);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(x=0X4516);
	op_bin		(x,	0);
	create_insn	(x=0X4519);
	op_dec		(x,	0);
	create_insn	(x=0X4525);
	op_enum		(x,	0,	GetEnum("EXPLOSITION_TARGET"),0);
	create_insn	(0X452A);
	set_name	(0X452A,	"ADP");
	create_insn	(x=0X4530);
	op_dec		(x,	0);
	create_insn	(0X4544);
	set_name	(0X4544,	"ADA");
	create_insn	(x=0X4547);
	op_dec		(x,	0);
	create_insn	(x=0X454C);
	op_dec		(x,	0);
	create_insn	(x=0X4552);
	op_dec		(x,	0);
	create_insn	(x=0X455E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4563);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4569);
	set_name	(0X4569,	"CKSC");
	create_insn	(x=0X456C);
	op_enum		(x,	0,	GetEnum("GAME_LEVEL"),0);
	update_extra_cmt		(0X4570,	E_PREV + 0,	" ");
	create_insn	(x=0X4573);
	op_dec		(x,	0);
	create_insn	(x=0X4583);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X458B);
	op_dec		(x,	0);
	create_insn	(x=0X458F);
	op_dec		(x,	0);
	create_insn	(x=0X4593);
	op_dec		(x,	0);
	create_insn	(x=0X4597);
	op_dec		(x,	0);
	create_insn	(x=0X459B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X459E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X45A4,	"=> Return",	1);
	create_insn	(0X45A5);
	create_insn	(x=0X45A9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X45AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X45B3);
	create_insn	(x=0X45B7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X45BA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X45C1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X45C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X45CB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X45CE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X45D5);
	set_name	(0X45D5,	"XCPTL");
	create_insn	(0X45DE);
	create_insn	(x=0X45E8);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X45ED);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X45F9);
	op_dec		(x,	0);
	create_insn	(x=0X4600);
	op_dec		(x,	0);
	create_insn	(x=0X4604);
	op_bin		(x,	0);
	create_insn	(x=0X4609);
	op_dec		(x,	0);
	create_insn	(x=0X4610);
	op_dec		(x,	0);
	create_insn	(x=0X4614);
	op_bin		(x,	0);
	set_cmt	(0X461C,	"=> Return",	1);
	create_insn	(0X461D);
	set_name	(0X461D,	"BMCPTL");
	create_insn	(x=0X461F);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X4623);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	set_cmt	(0X4627,	"=> Return",	1);
	create_insn	(0X4628);
	create_insn	(x=0X462B);
	op_bin		(x,	0);
	update_extra_cmt		(0X462F,	E_PREV + 0,	" ");
	create_insn	(x=0X4635);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4639);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X463D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4641);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X4646);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X464B);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	update_extra_cmt		(0X4650,	E_PREV + 0,	" ");
	create_insn	(x=0X4653);
	op_dec		(x,	0);
	create_insn	(x=0X4658);
	op_bin		(x,	0);
	create_insn	(x=0X465A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X465D);
	create_insn	(x=0X4660);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X4667,	E_PREV + 0,	" ");
	create_insn	(x=0X466A);
	op_dec		(x,	0);
	create_insn	(x=0X4675);
	op_dec		(x,	0);
	create_insn	(x=0X467A);
	op_dec		(x,	0);
	create_insn	(x=0X467C);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X4681);
	op_dec		(x,	0);
	set_name	(0X4681,	"ACL");
	create_insn	(x=0X4691);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X469B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46A5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X46A5,	"ABV");
	create_insn	(x=0X46A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46AB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46AE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46B1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46B7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46BA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46BD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46C4);
	op_dec		(x,	0);
	set_name	(0X46C4,	"DFBLDG");
	create_insn	(x=0X46C6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46C9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46CF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46D2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46D5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46DB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46DE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46E1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46E7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46EA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46F6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46F9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X46FF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4706);
	op_dec		(x,	0);
	set_name	(0X4706,	"ABB");
	create_insn	(x=0X4716);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X472A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X472A,	"ABK");
	create_insn	(x=0X472D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4733);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4736);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4739);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X473C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4740);
	op_dec		(x,	0);
	set_name	(0X4740,	"DFTNK");
	create_insn	(x=0X4742);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4745);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X474B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X474E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4751);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4754);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4757);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X475A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X475D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4760);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4763);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4766);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4769);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4770);
	set_name	(0X4770,	"XSHIP");
	create_insn	(0X4775);
	create_insn	(x=0X477C);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4780);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X4786);
	set_name	(0X4786,	"PBMB");
	create_insn	(x=0X4788);
	op_dec		(x,	0);
	create_insn	(x=0X478C);
	op_dec		(x,	0);
	set_cmt	(0X4790,	"=> Return",	1);
	create_insn	(0X4791);
	create_insn	(x=0X4797);
	create_insn	(x=0X47AB);
	op_dec		(x,	0);
	create_insn	(x=0X47B0);
	op_dec		(x,	0);
	create_insn	(x=0X47B5);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X47C4);
	op_dec		(x,	0);
	create_insn	(x=0X47C8);
	op_dec		(x,	0);
	create_insn	(x=0X47D5);
	op_dec		(x,	0);
	create_insn	(x=0X47DF);
	op_dec		(x,	0);
	create_insn	(x=0X47F4);
	op_dec		(x,	0);
	create_insn	(x=0X47F9);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X4813);
	create_insn	(0X4819);
	set_name	(0X4819,	"BMBR");
	create_insn	(x=0X4829);
	create_insn	(x=0X4832);
	op_dec		(x,	0);
	create_insn	(0X4838);
	create_insn	(x=0X483A);
	op_dec		(x,	0);
	create_insn	(x=0X4841);
	op_enum		(x,	0,	GetEnum("UNKNOWNS_STATE"),0);
	create_insn	(x=0X4848);
	op_dec		(x,	0);
	set_cmt	(0X4853,	"=> Return",	1);
	create_insn	(0X4854);
	create_insn	(x=0X485B);
	op_dec		(x,	0);
	create_insn	(x=0X4863);
	op_dec		(x,	0);
	create_insn	(x=0X4867);
	op_dec		(x,	0);
	create_insn	(x=0X4869);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X486C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X486E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4875);
	op_dec		(x,	0);
	create_insn	(x=0X487C);
	op_dec		(x,	0);
	create_insn	(x=0X487F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4882);
	op_dec		(x,	0);
	create_insn	(0X4887);
	create_insn	(x=0X488A);
	create_insn	(x=0X4892);
	op_dec		(x,	0);
	create_insn	(x=0X489B);
	op_dec		(x,	0);
	set_cmt	(0X48B1,	"=> Return",	1);
	create_insn	(0X48B2);
	create_insn	(x=0X48B5);
	op_bin		(x,	0);
	create_insn	(0X48BE);
	create_insn	(0X48C1);
	set_name	(0X48C1,	"CDRP");
	create_insn	(0X48C7);
	create_insn	(x=0X48CA);
	op_dec		(x,	0);
	create_insn	(x=0X48D1);
	op_dec		(x,	0);
	set_name	(0X48D1,	"AFF");
	create_insn	(0X48DC);
	set_name	(0X48DC,	"XI");
	create_insn	(x=0X48E3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X48E8);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X48EA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X48ED);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X48F0);
	set_name	(0X48F0,	"AFB");
	set_cmt	(0X48F4,	"=> Return",	1);
	create_insn	(0X48F5);
	create_insn	(x=0X48F8);
	op_dec		(x,	0);
	create_insn	(x=0X48FC);
	op_dec		(x,	0);
	create_insn	(x=0X4900);
	op_dec		(x,	0);
	create_insn	(x=0X4908);
	op_dec		(x,	0);
	create_insn	(x=0X4910);
	op_dec		(x,	0);
	create_insn	(0X4916);
	set_name	(0X4916,	"AEI");
	create_insn	(x=0X491D);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4922);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4924);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4927);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X492A);
	op_dec		(x,	0);
	set_name	(0X492A,	"Z5");
	create_insn	(x=0X4939);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4943);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X494D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X494D,	"ADR");
	create_insn	(x=0X4950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4953);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4956);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4959);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X495C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X495F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4962);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4965);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X496B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X496E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4971);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4975);
	op_dec		(x,	0);
	set_name	(0X4975,	"DFHNGR");
	create_insn	(x=0X4977);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X497A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4980);
	op_dec		(x,	0);
	create_insn	(x=0X4982);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4985);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X498C);
	set_name	(0X498C,	"TRIGC__TRIGGER_COUNT");
	set_cmt	(0X4994,	"=> Return",	1);
	create_insn	(0X4995);
	create_insn	(x=0X49A1);
	op_dec		(x,	0);
	set_name	(0X49A1,	"DFGN");
	create_insn	(x=0X49A3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X49A6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X49AD);
	set_name	(0X49AD,	"CTYGN");
	create_insn	(x=0X49B3);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X49B9);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	set_cmt	(0X49BD,	"=> Return",	1);
	create_insn	(0X49BE);
	create_insn	(x=0X49C0);
	op_dec		(x,	0);
	create_insn	(x=0X49C4);
	op_dec		(x,	0);
	create_insn	(x=0X49C6);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X49C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X49CA);
	op_dec		(x,	0);
	create_insn	(0X49CF);
	create_insn	(x=0X49D1);
	op_dec		(x,	0);
	create_insn	(x=0X49D5);
	op_dec		(x,	0);
	create_insn	(x=0X49D9);
	op_dec		(x,	0);
	create_insn	(x=0X49DD);
	op_dec		(x,	0);
	create_insn	(x=0X49E1);
	op_dec		(x,	0);
	create_insn	(x=0X49E5);
	op_dec		(x,	0);
	create_insn	(x=0X49E9);
	op_dec		(x,	0);
	create_insn	(x=0X49EE);
	op_dec		(x,	0);
	create_insn	(x=0X49F0);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X49F2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X49F4);
	op_dec		(x,	0);
	create_insn	(0X49F9);
	create_insn	(0X49FC);
	set_name	(0X49FC,	"GUNC");
	create_insn	(x=0X49FE);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	create_insn	(x=0X4A02);
	op_enum		(x,	0,	GetEnum("GAME_PHASE"),0);
	set_cmt	(0X4A06,	"=> Return",	1);
	create_insn	(0X4A07);
	create_insn	(x=0X4A0D);
	op_dec		(x,	0);
	create_insn	(x=0X4A11);
	op_dec		(x,	0);
	create_insn	(x=0X4A15);
	op_dec		(x,	0);
	create_insn	(x=0X4A20);
	op_dec		(x,	0);
	create_insn	(x=0X4A25);
	op_dec		(x,	0);
	create_insn	(x=0X4A2D);
	op_dec		(x,	0);
	create_insn	(x=0X4A30);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4A32);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4A36);
	op_dec		(x,	0);
	create_insn	(x=0X4A3F);
	op_dec		(x,	0);
	create_insn	(x=0X4A42);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4A44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4A47);
	op_dec		(x,	0);
	create_insn	(0X4A4C);
	create_insn	(x=0X4A4F);
	op_bin		(x,	0);
	create_insn	(0X4A61);
	create_insn	(x=0X4A64);
	op_dec		(x,	0);
	create_insn	(x=0X4A66);
	op_dec		(x,	0);
	create_insn	(x=0X4A69);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4A6B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4A6E);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4A70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4A73);
	set_name	(0X4A73,	"GGNSND");
	create_insn	(0X4A79);
	create_insn	(x=0X4A81);
	op_dec		(x,	0);
	create_insn	(x=0X4A89);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X4A8E);
	op_enum		(x,	0,	GetEnum("SND_FREQ"),0);
	create_insn	(x=0X4A94);
	op_enum		(x,	0,	GetEnum("AUDIO_CONTROL"),0);
	create_insn	(x=0X4A9C);
	op_dec		(x,	0);
	create_insn	(0X4AA2);
	set_name	(0X4AA2,	"TKOSPD__INCREMENT_SPEED");
	create_insn	(x=0X4AA8);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4AAC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4AB7);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4ABB);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X4AC7,	"=> Return",	1);
	create_insn	(0X4AC8);
	set_name	(0X4AC8,	"DLIR1__DLIST_DURING_MENU");
	create_insn	(x=0X4AC9);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(0X4AD3);
	set_name	(0X4AD3,	"CLCSC__READ_SCORE_VALUE");
	set_cmt	(0X4AD7,	"Tenth-digit of the screen",	1);
	create_insn	(x=0X4AD7);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X4ADE,	"Hundreds-digit of the screen",	1);
	create_insn	(x=0X4ADE);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X4AEF,	"Thousands-digit of the screen",	1);
	create_insn	(x=0X4AF1);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4AF3);
	op_dec		(x,	0);
	create_insn	(x=0X4AF5);
	op_dec		(x,	0);
	create_insn	(0X4AFA);
	create_insn	(x=0X4AFD);
	op_dec		(x,	0);
	set_cmt	(0X4B01,	"=> Return",	1);
	create_insn	(0X4B02);
	create_insn	(x=0X4B05);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(x=0X4B0C);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	create_insn	(0X4B12);
	set_name	(0X4B12,	"RNK__DISPLAY_RANK");
	create_insn	(x=0X4B15);
	op_dec		(x,	0);
	create_insn	(x=0X4B17);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4B1A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4B4C);
	op_dec		(x,	0);
	create_insn	(x=0X4B50);
	op_dec		(x,	0);
	create_insn	(x=0X4B59);
	op_dec		(x,	0);
	create_insn	(x=0X4B5D);
	op_dec		(x,	0);
	create_insn	(x=0X4B61);
	op_dec		(x,	0);
	create_insn	(x=0X4B65);
	op_dec		(x,	0);
	create_insn	(x=0X4B71);
	op_dec		(x,	0);
	create_insn	(x=0X4B75);
	op_dec		(x,	0);
	create_insn	(x=0X4B7E);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X4B84);
	create_insn	(x=0X4B8F);
	op_enum		(x,	0,	GetEnum("GAME_LEVEL"),0);
	create_insn	(x=0X4B93);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4B9A);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BA1);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BA5);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BA9);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BAD);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BB1);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BB5);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BB9);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BBD);
	op_dec		(x,	0);
	set_name	(0X4BBD,	"BLMX__PRINT_BLUE_MAX");
	create_insn	(x=0X4BBF);
	create_insn	(x=0X4BC2);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4BCA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4BCD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4BD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4BD4);
	op_dec		(x,	0);
	set_name	(0X4BD4,	"BLUE__PRINT_RANK_CLASS");
	create_insn	(x=0X4BD6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4BD9);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4BDB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4BE2);
	op_dec		(x,	0);
	set_name	(0X4BE2,	"SQLD__PRINT_SQUADRON_LEADER");
	create_insn	(x=0X4BE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4BE7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4BEE);
	set_name	(0X4BEE,	"AFH__ERASE_RANK_DISPLAY");
	create_insn	(x=0X4BF0);
	op_dec		(x,	0);
	create_insn	(x=0X4BF2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4BFC);
	set_name	(0X4BFC,	"RNKX__PRINT_RANK_CLASS");
	create_insn	(x=0X4BFF);
	op_dec		(x,	0);
	create_insn	(x=0X4C01);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4C05);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4C07);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X4C0D,	E_PREV + 0,	" ");
	set_cmt	(0X4C12,	"More than 20 points?",	1);
	create_insn	(x=0X4C1B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4C20);
	op_dec		(x,	0);
	create_insn	(x=0X4C22);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4C25);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4C2C);
	set_cmt	(0X4C36,	"Score = Score + (level * 4) + (gravity * 8)",	1);
	create_insn	(0X4C43);
	create_insn	(x=0X4C46);
	op_enum		(x,	0,	GetEnum("FINAL_TARGETS_STATE"),0);
	create_insn	(x=0X4C4A);
	op_dec		(x,	0);
	create_insn	(x=0X4C4E);
	op_dec		(x,	0);
	create_insn	(x=0X4C52);
	op_dec		(x,	0);
	create_insn	(x=0X4C56);
	op_dec		(x,	0);
	create_insn	(x=0X4C5A);
	op_dec		(x,	0);
	create_insn	(x=0X4C5E);
	op_dec		(x,	0);
	create_insn	(x=0X4C62);
	op_dec		(x,	0);
	set_cmt	(0X4C8C,	"Print \"AIR CADET\" to screen",	1);
	create_insn	(x=0X4C8E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4C91);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4C98,	"Print \"RUNWAY SWEEPER\" to screen",	1);
	create_insn	(x=0X4C98);
	op_dec		(x,	0);
	create_insn	(x=0X4C9A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4C9D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4CA4,	"Print \"FLYING TIGER\" to screen",	1);
	create_insn	(x=0X4CA4);
	op_dec		(x,	0);
	set_name	(0X4CA4,	"FTG");
	create_insn	(x=0X4CA6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4CA9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4CB0);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X4CB0,	"RD1__PRINT_1");
	create_insn	(x=0X4CB4);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X4CB4,	"RD2__PRINT_2");
	create_insn	(x=0X4CB8);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X4CB8,	"RD3__PRINT_3");
	create_insn	(x=0X4CBC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X4CBC,	"RD4__PRINT_4");
	set_name	(0X4CBE,	"BAA");
	create_insn	(x=0X4CC2);
	set_name	(0X4CC2,	"CLRPM__CLEAR_PMGRAPHICS");
	create_insn	(x=0X4CC6);
	create_insn	(x=0X4CD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4CDB);
	op_enum		(x,	0,	GetEnum("SETVBV_VECTORS"),0);
	set_name	(0X4CDB,	"XSCRL__RESET_VBL");
	create_insn	(x=0X4CDD);
	create_insn	(x=0X4CDF);
	create_insn	(0X4CEA);
	set_name	(0X4CEA,	"QUIET__STOP_ALL_SOUNDS");
	create_insn	(0X4CF9);
	set_name	(0X4CF9,	"CNSL__CONSOLE");
	create_insn	(x=0X4CFC);
	op_bin		(x,	0);
	create_insn	(x=0X4D00);
	op_bin		(x,	0);
	set_cmt	(0X4D05,	"START key pressed",	1);
	create_insn	(0X4D05);
	create_insn	(x=0X4D12);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X4D1A,	"OPTION key pressed",	1);
	create_insn	(0X4D1A);
	set_cmt	(0X4D2A,	"Select the ROM font",	1);
	create_insn	(x=0X4D35);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4D3A);
	create_insn	(x=0X4D3D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4D43);
	op_dec		(x,	0);
	create_insn	(x=0X4D45);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4D4E);
	create_insn	(x=0X4D53);
	create_insn	(x=0X4D58);
	create_insn	(x=0X4D60);
	create_insn	(x=0X4D68);
	create_insn	(x=0X4D6D);
	create_insn	(x=0X4D72);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4D77);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4D7C);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	create_insn	(x=0X4D81);
	op_dec		(x,	0);
	create_insn	(x=0X4D83);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4D86);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X4D91,	E_PREV + 0,	" ");
	create_insn	(x=0X4D91);
	op_dec		(x,	0);
	create_insn	(x=0X4D98);
	op_enum		(x,	0,	GetEnum("GAME_LEVEL"),0);
	create_insn	(x=0X4D9F);
	op_bin		(x,	0);
	create_insn	(0X4DA2);
	create_insn	(0X4DA8);
	create_insn	(x=0X4DAB);
	op_dec		(x,	0);
	create_insn	(x=0X4DB0);
	op_dec		(x,	0);
	create_insn	(x=0X4DB7);
	op_bin		(x,	0);
	create_insn	(0X4DBA);
	create_insn	(x=0X4DBD);
	op_dec		(x,	0);
	create_insn	(x=0X4DCA);
	op_bin		(x,	0);
	create_insn	(x=0X4DCD);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X4DD5,	"Endless menu selection loop. Exit via stack cleanup and JMP",	1);
	create_insn	(x=0X4DD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4DD8,	"NOV__PRINT_NOVICE");
	create_insn	(x=0X4DDB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4DE2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4DE2,	"VET__PRINT_ADVANCED");
	create_insn	(x=0X4DE5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4DEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4DEC,	"INT__PRINT_INTERMEDIATE");
	create_insn	(x=0X4DEF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4DF6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4DF6,	"NOR__PRINT_NORMAL");
	create_insn	(x=0X4DF9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4E00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4E00,	"RVS__PRINT_REVERSED_CTRL");
	create_insn	(x=0X4E03);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4E0A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4E0A,	"NGRV__PRINT_NO_GRAVITY");
	create_insn	(x=0X4E0D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4E14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4E14,	"GRV__PRINT_GRAVITY");
	create_insn	(x=0X4E17);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4E1E);
	set_name	(0X4E1E,	"MENU__CHECK_KEYS");
	create_insn	(0X4E27);
	create_insn	(x=0X4E2A);
	op_bin		(x,	0);
	create_insn	(x=0X4E2E);
	op_bin		(x,	0);
	create_insn	(x=0X4E32);
	op_bin		(x,	0);
	set_cmt	(0X4E37,	"START key pressed",	1);
	create_insn	(0X4E37);
	set_cmt	(0X4E38,	"Pop return addresses from stack",	1);
	create_insn	(x=0X4E40);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X4E48,	"OPTION key pressed",	1);
	create_insn	(0X4E48);
	create_insn	(x=0X4E59);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X4E5F);
	create_insn	(x=0X4E62);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4E67);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(0X4E6D);
	create_insn	(x=0X4E70);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	create_insn	(x=0X4E75);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X4E7B,	"SELECT key pressed",	1);
	create_insn	(0X4E7B);
	create_insn	(0X4E91);
	set_cmt	(0X4E97,	"Option 0 was selected",	1);
	create_insn	(x=0X4E97);
	op_dec		(x,	0);
	create_insn	(x=0X4E9E);
	op_enum		(x,	0,	GetEnum("GAME_LEVEL"),0);
	create_insn	(x=0X4EA2);
	op_dec		(x,	0);
	create_insn	(0X4EAA);
	create_insn	(0X4EB0);
	set_cmt	(0X4EB6,	"Option 1 was selected",	1);
	create_insn	(x=0X4EB6);
	op_dec		(x,	0);
	create_insn	(x=0X4EBB);
	op_bin		(x,	0);
	create_insn	(x=0X4EC4);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(0X4ECB);
	create_insn	(0X4ECE);
	set_name	(0X4ECE,	"DEMO__DEMO_TRIGGER");
	create_insn	(x=0X4ED9);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X4EE0,	"=> Return",	1);
	set_cmt	(0X4EE1,	"button is not prssed",	1);
	create_insn	(x=0X4EE1);
	op_dec		(x,	0);
	create_insn	(0X4EE6);
	set_name	(0X4EE6,	"DBMB__DEMO_BOMB_RELEASE");
	set_cmt	(0X4EEA,	"button is not prssed",	1);
	create_insn	(x=0X4EEA);
	op_dec		(x,	0);
	create_insn	(0X4EEF);
	create_insn	(x=0X4EF2);
	op_bin		(x,	0);
	create_insn	(x=0X4EF6);
	op_bin		(x,	0);
	set_cmt	(0X4EFF,	"button is pressed",	1);
	create_insn	(x=0X4EFF);
	op_dec		(x,	0);
	set_cmt	(0X4F04,	"button is pressed",	1);
	create_insn	(x=0X4F04);
	op_dec		(x,	0);
	set_cmt	(0X4F0B,	"button is not pressed, if color is BLACK",	1);
	create_insn	(0X4F0F);
	set_name	(0X4F0F,	"DJOY__DEMO_JOYSTICK_INPUT");
	create_insn	(x=0X4F1B);
	op_dec		(x,	0);
	create_insn	(0X4F23);
	create_insn	(x=0X4F26);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X4F36);
	op_dec		(x,	0);
	create_insn	(x=0X4F3F);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(0X4F47);
	create_insn	(0X4F4D);
	create_insn	(x=0X4F50);
	op_bin		(x,	0);
	create_insn	(x=0X4F54);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X4F5A);
	op_bin		(x,	0);
	create_insn	(x=0X4F5C);
	op_dec		(x,	0);
	create_insn	(x=0X4F64);
	op_bin		(x,	0);
	create_insn	(x=0X4F66);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(x=0X4F6A);
	op_enum		(x,	0,	GetEnum("JOYSTICK"),0);
	create_insn	(0X4F74);
	set_name	(0X4F74,	"DFLSH__DEMO_FLASH_BLUEMAX");
	create_insn	(x=0X4F7B);
	op_bin		(x,	0);
	create_insn	(x=0X4F7D);
	op_enum		(x,	0,	GetEnum("COLOR"),0);
	set_cmt	(0X4F82,	"=> Return",	1);
	create_insn	(0X4F83);
	set_name	(0X4F83,	"DTKOF__DEMO_TAKE_OFF");
	set_cmt	(0X4F8E,	"Speed 1xx reached?",	1);
	create_insn	(x=0X4F8E);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X4F97,	"=> Return",	1);
	create_insn	(x=0X4F98);
	op_dec		(x,	0);
	set_name	(0X4F98,	"PLAY.IT");
	create_insn	(x=0X4F9A);
	op_dec		(x,	0);
	create_insn	(x=0X4F9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4F9F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4FA5);
	create_insn	(x=0X4FA9);
	create_insn	(x=0X4FAD);
	create_insn	(x=0X4FB1);
	create_insn	(x=0X4FB5);
	create_insn	(x=0X4FB9);
	create_insn	(x=0X4FBD);
	create_insn	(x=0X4FC2);
	create_insn	(x=0X4FC7);
	op_dec		(x,	0);
	create_insn	(0X4FD1);
	set_name	(0X4FD1,	".1__SOUND_TIMER_IRQ");
	create_insn	(x=0X4FD6);
	op_dec		(x,	0);
	create_insn	(x=0X4FDB);
	op_dec		(x,	0);
	create_insn	(x=0X4FE3);
	op_dec		(x,	0);
	create_insn	(x=0X4FE5);
	op_dec		(x,	0);
	create_insn	(x=0X4FE7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4FFF);
	set_name	(0X4FFF,	"PLAY.NOTE");
	set_cmt	(0X5004,	"DO VOICE 0",	1);
	update_extra_cmt		(0X500C,	E_PREV + 0,	" ");
	create_insn	(x=0X500C);
	op_dec		(x,	0);
	create_insn	(x=0X5011);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X5013);
	op_dec		(x,	0);
	create_insn	(x=0X5017);
	op_dec		(x,	0);
	create_insn	(0X501F);
	set_cmt	(0X5028,	"VOLUME1",	1);
	create_insn	(x=0X5028);
	op_bin		(x,	0);
	create_insn	(x=0X5031);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X5035);
	op_bin		(x,	0);
	create_insn	(x=0X5037);
	op_dec		(x,	0);
	create_insn	(x=0X5045);
	op_dec		(x,	0);
	create_insn	(x=0X504B);
	op_dec		(x,	0);
	create_insn	(x=0X5052);
	op_dec		(x,	0);
	create_insn	(x=0X505E);
	op_bin		(x,	0);
	create_insn	(x=0X5078);
	op_dec		(x,	0);
	create_insn	(x=0X507D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X507F);
	op_dec		(x,	0);
	create_insn	(x=0X5083);
	op_dec		(x,	0);
	create_insn	(x=0X5085);
	op_dec		(x,	0);
	create_insn	(0X508B);
	set_cmt	(0X5094,	"VOLUME2",	1);
	create_insn	(x=0X5094);
	op_bin		(x,	0);
	create_insn	(x=0X509D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X50A1);
	op_bin		(x,	0);
	create_insn	(x=0X50A3);
	op_dec		(x,	0);
	create_insn	(x=0X50B1);
	op_dec		(x,	0);
	create_insn	(x=0X50B7);
	op_dec		(x,	0);
	create_insn	(x=0X50BE);
	op_dec		(x,	0);
	create_insn	(x=0X50E2);
	op_dec		(x,	0);
	create_insn	(x=0X50E7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X50E9);
	op_dec		(x,	0);
	create_insn	(x=0X50ED);
	op_dec		(x,	0);
	create_insn	(0X50F5);
	set_cmt	(0X50FE,	"VOLUME3",	1);
	create_insn	(x=0X50FE);
	op_bin		(x,	0);
	create_insn	(x=0X5107);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X510B);
	op_bin		(x,	0);
	create_insn	(x=0X510D);
	op_dec		(x,	0);
	create_insn	(x=0X511B);
	op_dec		(x,	0);
	create_insn	(x=0X5121);
	op_dec		(x,	0);
	create_insn	(x=0X5128);
	op_dec		(x,	0);
	set_cmt	(0X513F,	"=> Return",	1);
	create_insn	(0X5140);
	set_name	(0X5140,	"MULT");
	create_insn	(x=0X5146);
	op_dec		(x,	0);
	set_cmt	(0X5151,	"=> Return",	1);
	create_insn	(0X5152);
	set_name	(0X5152,	"GET.AUDF");
	create_insn	(x=0X5153);
	op_bin		(x,	0);
	create_insn	(x=0X5155);
	op_dec		(x,	0);
	create_insn	(x=0X515A);
	create_insn	(x=0X515E);
	create_insn	(x=0X5160);
	op_dec		(x,	0);
	create_insn	(x=0X516B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X5175);
	op_dec		(x,	0);
	create_insn	(x=0X5179);
	op_dec		(x,	0);
	create_insn	(x=0X517B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X5183);
	op_dec		(x,	0);
	create_insn	(0X518D);
	create_insn	(x=0X518E);
	op_dec		(x,	0);
	create_insn	(x=0X5192);
	op_dec		(x,	0);
	set_name	(0X5192,	"STOP.SN");
	create_insn	(x=0X5194);
	op_dec		(x,	0);
	create_insn	(x=0X5196);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	update_extra_cmt		(0X519D,	E_PREV + 0,	"; Pre-initialized data and variables of the game");
	create_byte	(0X519D);
	make_array	(0X519D,	0X49);
	set_name	(0X519D,	"NOTE.TABLE");
	create_byte	(0X51E6);
	make_array	(0X51E6,	0X7);
	set_name	(0X51E6,	"OCTAVE.OFFSET");
	update_extra_cmt		(0X51ED,	E_PREV + 0,	"; Garbage data (leftover from the assembler) from here on:");
	create_byte	(0X51ED);
	make_array	(0X51ED,	0X93);
	update_extra_cmt		(0X5280,	E_PREV + 0,	"; The following data contain variables, but are uninitialized");
	create_byte	(0X5280);
	make_array	(0X5280,	0X45);
	set_name	(0X5280,	"DL");
	create_word	(x=0X52C5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X52C5,	"BOTSCREN");
	create_byte	(0X52C7);
	make_array	(0X52C7,	0XA);
	set_name	(0X52C7,	"DL_plus_71");
	set_cmt	(0X52D1,	"First byte of the screen level memory",	1);
	create_word	(0X52D1);
	set_name	(0X52D1,	"TOP");
	set_cmt	(0X52D3,	"Last byte of the screen level memory",	1);
	create_word	(0X52D3);
	set_name	(0X52D3,	"BOTM");
	create_word	(0X52D5);
	set_name	(0X52D5,	"BUF");
	set_cmt	(0X52D7,	"regular plane (0-9), contrast color (10-12), contrast color (13-15)",	1);
	update_extra_cmt		(0X52D7,	E_PREV + 0,	"; From here on are initialized data:");
	create_byte	(x=0X52D7);
	make_array	(x,	0X10);
	op_bin		(x,	0);
	set_name	(0X52D7,	"P0IMAGE");
	set_cmt	(0X52E7,	"plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)",	1);
	create_byte	(x=0X52E7);
	make_array	(x,	0X1C);
	op_bin		(x,	0);
	set_name	(0X52E7,	"P1IMAGE");
	set_cmt	(0X5303,	"car driving right",	1);
	create_byte	(x=0X5303);
	make_array	(x,	0X5);
	op_bin		(x,	0);
	set_name	(0X5303,	"CARRT");
	set_cmt	(0X5308,	"car driving left",	1);
	create_byte	(x=0X5308);
	make_array	(x,	0X5);
	op_bin		(x,	0);
	set_name	(0X5308,	"CARLT");
	set_cmt	(0X530D,	"car tyres driving right",	1);
	create_byte	(x=0X530D);
	make_array	(x,	0X5);
	op_bin		(x,	0);
	set_name	(0X530D,	"TYRRT");
	set_cmt	(0X5312,	"car tyres driving left",	1);
	create_byte	(x=0X5312);
	make_array	(x,	0X5);
	op_bin		(x,	0);
	set_name	(0X5312,	"TYRLT");
	set_cmt	(0X5317,	"truck driving right",	1);
	create_byte	(x=0X5317);
	make_array	(x,	0X6);
	op_bin		(x,	0);
	set_name	(0X5317,	"TRRT");
	set_cmt	(0X531D,	"truck tyres driving right",	1);
	create_byte	(x=0X531D);
	make_array	(x,	0X6);
	op_bin		(x,	0);
	set_name	(0X531D,	"TYRTRR");
	set_cmt	(0X5323,	"truck driving left",	1);
	create_byte	(x=0X5323);
	make_array	(x,	0X6);
	op_bin		(x,	0);
	set_name	(0X5323,	"TRLT");
	set_cmt	(0X5329,	"truck tyres driving left",	1);
	create_byte	(x=0X5329);
	make_array	(x,	0X6);
	op_bin		(x,	0);
	set_name	(0X5329,	"TYRTRL");
	set_cmt	(0X532F,	"enemy plane shadow flying towards player",	1);
	create_byte	(x=0X532F);
	make_array	(x,	0XA);
	op_bin		(x,	0);
	set_name	(0X532F,	"SHDW");
	set_cmt	(0X5339,	"enemy plane flying towards player",	1);
	create_byte	(x=0X5339);
	make_array	(x,	0XA);
	op_bin		(x,	0);
	set_name	(0X5339,	"PLANE1");
	set_cmt	(0X5343,	"enemy plane propeller animations (0-3 and 4-7)",	1);
	create_byte	(x=0X5343);
	make_array	(x,	0X8);
	op_bin		(x,	0);
	set_name	(0X5343,	"PROPIM");
	update_extra_cmt		(0X534B,	E_PREV + 0,	" ");
	create_byte	(x=0X534B);
	make_array	(x,	0X19);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X534B,	"BR1");
	create_byte	(x=0X5364);
	make_array	(x,	0X15);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X5364,	"BR2");
	create_byte	(x=0X5379);
	make_array	(x,	0X15);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X5379,	"BR3");
	set_cmt	(0X538E,	"plane explosion",	1);
	update_extra_cmt		(0X538E,	E_PREV + 0,	" ");
	create_byte	(x=0X538E);
	make_array	(x,	0XD);
	op_bin		(x,	0);
	set_name	(0X538E,	"XPL1IM");
	update_extra_cmt		(0X539B,	E_PREV + 0,	" ");
	create_byte	(x=0X539B);
	make_array	(x,	0X7);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X539B,	"ROADR");
	create_byte	(x=0X53A2);
	make_array	(x,	0X5);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X53A2,	"ROADS");
	create_byte	(x=0X53A7);
	make_array	(x,	0X5);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X53A7,	"HNGR1");
	create_byte	(x=0X53AC);
	make_array	(x,	0X6);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X53AC,	"HNGR2");
	create_byte	(x=0X53B2);
	make_array	(x,	0X6);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X53B2,	"HNGR3");
	create_byte	(x=0X53B8);
	make_array	(x,	0X4);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X53B8,	"HNGR5");
	set_cmt	(0X53BC,	"Enemy runway",	1);
	create_byte	(x=0X53BC);
	make_array	(x,	0XB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X53BC,	"ENRNIM");
	set_cmt	(0X53C7,	"moving ship",	1);
	update_extra_cmt		(0X53C7,	E_PREV + 0,	" ");
	create_byte	(x=0X53C7);
	make_array	(x,	0XC);
	op_bin		(x,	0);
	set_name	(0X53C7,	"SHPIM");
	set_cmt	(0X53D3,	"moving ship black highlight color",	1);
	create_byte	(x=0X53D3);
	make_array	(x,	0XC);
	op_bin		(x,	0);
	set_name	(0X53D3,	"SHPIM1");
	set_cmt	(0X53DF,	"Initial Control Display",	1);
	update_extra_cmt		(0X53DF,	E_PREV + 0,	" ");
	create_byte	(x=0X53DF);
	make_array	(x,	0XF);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X53DF,	"DSPLY");
	set_cmt	(0X53EE,	"8 zero bytes (used for initialization)",	1);
	create_byte	(x=0X53EE);
	make_array	(x,	0X8);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X53EE,	"ABR");
	create_byte	(x=0X53F6);
	make_array	(x,	0X2B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_cmt	(0X5421,	"enemy plane turning right",	1);
	update_extra_cmt		(0X5421,	E_PREV + 0,	" ");
	create_byte	(x=0X5421);
	make_array	(x,	0XA);
	op_bin		(x,	0);
	set_name	(0X5421,	"FTR");
	set_cmt	(0X542B,	"enemy plane turning left",	1);
	create_byte	(x=0X542B);
	make_array	(x,	0XB);
	op_bin		(x,	0);
	set_name	(0X542B,	"FTL");
	set_cmt	(0X5436,	"red-white flashing bullseye target",	1);
	create_byte	(x=0X5436);
	make_array	(x,	0X9);
	op_bin		(x,	0);
	set_name	(0X5436,	"GNST");
	create_byte	(x=0X543F);
	make_array	(x,	0XA);
	op_bin		(x,	0);
	set_name	(0X543F,	"XCRIM");
	set_cmt	(0X5449,	"moving ship explosion",	1);
	create_byte	(x=0X5449);
	make_array	(x,	0XD);
	op_bin		(x,	0);
	set_name	(0X5449,	"XSHPIM");
	set_cmt	(0X5456,	"Targets: building",	1);
	update_extra_cmt		(0X5456,	E_PREV + 0,	" ");
	create_byte	(x=0X5456);
	make_array	(x,	0XA);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X5456,	"AAA");
	set_cmt	(0X5460,	"Targets: skyscraper",	1);
	create_byte	(x=0X5460);
	make_array	(x,	0XE);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X5460,	"AAB");
	set_cmt	(0X546E,	"Targets: lower parts of a bridge",	1);
	create_byte	(x=0X546E);
	make_array	(x,	0X7);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X546E,	"AAC");
	set_cmt	(0X5475,	"Targets: upper parts of a bridge",	1);
	create_byte	(x=0X5475);
	make_array	(x,	0X3);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X5475,	"AAD");
	set_cmt	(0X5478,	"Targets: roads",	1);
	create_byte	(x=0X5478);
	make_array	(x,	0X8);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X5478,	"AAE");
	set_cmt	(0X5480,	"Targets: all parts of a hangar",	1);
	create_byte	(x=0X5480);
	make_array	(x,	0XD);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X5480,	"AAF");
	set_cmt	(0X548D,	"Targets: all cars, tanks, ait-aircraft battery on the playfield",	1);
	create_byte	(x=0X548D);
	make_array	(x,	0XB);
	op_enum		(x,	0,	GetEnum("LEVEL"),0);
	set_name	(0X548D,	"AAG");
	set_cmt	(0X5498,	"final targets (main color)",	1);
	update_extra_cmt		(0X5498,	E_PREV + 0,	" ");
	create_byte	(x=0X5498);
	make_array	(x,	0XD);
	op_bin		(x,	0);
	set_name	(0X5498,	"AAH");
	set_cmt	(0X54A5,	"final targets (black color)",	1);
	create_byte	(x=0X54A5);
	make_array	(x,	0XD);
	op_bin		(x,	0);
	set_name	(0X54A5,	"AAI");
	set_cmt	(0X54B2,	"Tile: explosion 1 on gras",	1);
	update_extra_cmt		(0X54B2,	E_PREV + 0,	" ");
	create_byte	(0X54B2);
	make_array	(0X54B2,	0X8);
	set_name	(0X54B2,	"ABC");
	set_cmt	(0X54BA,	"Tile: explosion 2 on gras",	1);
	create_byte	(0X54BA);
	make_array	(0X54BA,	0X8);
	set_name	(0X54BA,	"ABD");
	set_cmt	(0X54C2,	"Tile: building wall/window",	1);
	create_byte	(0X54C2);
	make_array	(0X54C2,	0X8);
	set_name	(0X54C2,	"ABL");
	set_cmt	(0X54CA,	"Tile: building",	1);
	create_byte	(0X54CA);
	make_array	(0X54CA,	0X8);
	set_name	(0X54CA,	"ABN");
	set_cmt	(0X54D2,	"Tile: building",	1);
	create_byte	(0X54D2);
	make_array	(0X54D2,	0X8);
	set_name	(0X54D2,	"ABO");
	set_cmt	(0X54DA,	"Tile: building roof",	1);
	create_byte	(0X54DA);
	make_array	(0X54DA,	0X8);
	set_name	(0X54DA,	"ABP");
	set_cmt	(0X54E2,	"Tile: building",	1);
	create_byte	(0X54E2);
	make_array	(0X54E2,	0X8);
	set_name	(0X54E2,	"ABT");
	set_cmt	(0X54EA,	"Tile: target",	1);
	create_byte	(0X54EA);
	make_array	(0X54EA,	0X8);
	set_name	(0X54EA,	"ACJ");
	set_cmt	(0X54F2,	"explosion off the final targets",	1);
	update_extra_cmt		(0X54F2,	E_PREV + 0,	" ");
	create_byte	(x=0X54F2);
	make_array	(x,	0X12);
	op_bin		(x,	0);
	set_name	(0X54F2,	"XCPTLIM");
	set_cmt	(0X5504,	"Novice level variables",	1);
	update_extra_cmt		(0X5504,	E_PREV + 0,	" ");
	MakeStruct	(0X5504,	"DIFF_STRUCT");
	set_name	(0X5504,	"EAS0");
	create_byte	(0X550B);
	MakeStruct	(0X550C,	"DIFF_STRUCT");
	set_name	(0X550C,	"EAS2");
	MakeStruct	(0X5513,	"DIFF_STRUCT");
	set_name	(0X5513,	"EAS4");
	set_cmt	(0X551A,	"Intermediate level variables",	1);
	MakeStruct	(0X551A,	"DIFF_STRUCT");
	set_name	(0X551A,	"EAS6");
	MakeStruct	(0X5521,	"DIFF_STRUCT");
	set_name	(0X5521,	"EAS8");
	set_cmt	(0X5528,	"Advanced level variables",	1);
	MakeStruct	(0X5528,	"DIFF_STRUCT");
	set_name	(0X5528,	"EAS9");
	set_cmt	(0X552F,	"Standard anti-aircraft gun battery. Used to restore after the final city anti-aircraft gun battery was used as  character $31.",	1);
	update_extra_cmt		(0X552F,	E_PREV + 0,	" ");
	create_byte	(0X552F);
	make_array	(0X552F,	0X8);
	set_name	(0X552F,	"ADI");
	set_cmt	(0X5537,	"Final city anti-aircraft gun battery. Replaces character $31 (standard anti-aircraft gun battery)",	1);
	create_byte	(0X5537);
	make_array	(0X5537,	0X8);
	set_name	(0X5537,	"ADJ");
	set_cmt	(0X553F,	"Display List for the menu",	1);
	update_extra_cmt		(0X553F,	E_PREV + 0,	" ");
	create_byte	(0X553F);
	set_name	(0X553F,	"OPTIM");
	create_byte	(0X5540);
	create_word	(0X5541);
	create_byte	(0X5543);
	create_byte	(0X5544);
	create_byte	(0X5545);
	create_byte	(0X5546);
	create_byte	(0X5547);
	create_byte	(0X5548);
	create_byte	(0X5549);
	create_byte	(0X554A);
	create_byte	(0X554B);
	create_byte	(0X554C);
	create_byte	(0X554D);
	create_byte	(0X554E);
	create_byte	(0X554F);
	set_cmt	(0X5550,	"\"NOVICE      \"",	1);
	update_extra_cmt		(0X5550,	E_PREV + 0,	" ");
	create_byte	(x=0X5550);
	make_array	(x,	0XC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X5550,	"NOVI");
	set_cmt	(0X555C,	"\"ADVANCED    \"",	1);
	create_byte	(x=0X555C);
	make_array	(x,	0XC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X555C,	"VETI");
	set_cmt	(0X5568,	"\"NORMAL CTRL \"",	1);
	create_byte	(x=0X5568);
	make_array	(x,	0XC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X5568,	"NORI");
	set_cmt	(0X5574,	"\"REVERSE CTRL\"",	1);
	create_byte	(x=0X5574);
	make_array	(x,	0XC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X5574,	"RVSI");
	set_cmt	(0X5580,	"\"NO GRAVITY   \"",	1);
	create_byte	(x=0X5580);
	make_array	(x,	0XD);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X5580,	"NGRVI");
	set_cmt	(0X558D,	"\"INTERMEDIATE\"",	1);
	create_byte	(x=0X558D);
	make_array	(x,	0XC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X558D,	"INTI");
	set_cmt	(0X5599,	"\"RANK: CLASS\"",	1);
	create_byte	(x=0X5599);
	make_array	(x,	0XB);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X5599,	"RNKI");
	set_cmt	(0X55A4,	"\"BLUE MAX\" / \"  BY BOB POLIN\" / \"    (C)SYNSOFT 1983\"",	1);
	create_byte	(x=0X55A4);
	make_array	(x,	0X3B);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X55A4,	"DEMI");
	set_cmt	(0X55DF,	"\"OPTIONS\"",	1);
	create_byte	(x=0X55DF);
	make_array	(x,	0X7);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X55DF,	"OPTI");
	set_cmt	(0X55E6,	"\"KAMIKAZE TRAINEE\"",	1);
	create_byte	(x=0X55E6);
	make_array	(x,	0X10);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X55E6,	"KMKZI");
	set_cmt	(0X55F6,	"\"RUNWAY SWEEPER\"",	1);
	create_byte	(x=0X55F6);
	make_array	(x,	0XE);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X55F6,	"RSWI");
	set_cmt	(0X5604,	"\"AIR CADET\"",	1);
	create_byte	(x=0X5604);
	make_array	(x,	0X9);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X5604,	"ACDI");
	set_cmt	(0X560D,	"\"FLYING TIGER\"",	1);
	create_byte	(x=0X560D);
	make_array	(x,	0XC);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X560D,	"FTGI");
	set_cmt	(0X5619,	"\"SQUADRON LEADER\"",	1);
	create_byte	(x=0X5619);
	make_array	(x,	0XF);
	op_enum		(x,	0,	GetEnum("ATASCI"),0);
	set_name	(0X5619,	"SQLDI");
	set_cmt	(0X5628,	"Backup of the hangar font characters",	1);
	update_extra_cmt		(0X5628,	E_PREV + 0,	"");
	update_extra_cmt		(0X5628,	E_PREV + 1,	"; from here on, we again have unitialized variables");
	create_byte	(0X5628);
	make_array	(0X5628,	0X148);
	set_name	(0X5628,	"AEG");
	set_cmt	(0X5770,	"Note Status Channel 1-3",	1);
	update_extra_cmt		(0X5770,	E_PREV + 0,	" ");
	create_byte	(0X5770);
	make_array	(0X5770,	0X3);
	set_name	(0X5770,	"V.STAT");
	set_cmt	(0X5773,	"Duration Voice 1",	1);
	create_byte	(0X5773);
	set_name	(0X5773,	"DUR1");
	set_cmt	(0X5774,	"Duration Voice 2",	1);
	create_byte	(0X5774);
	set_name	(0X5774,	"DUR2");
	set_cmt	(0X5775,	"Duration Voice 3",	1);
	create_byte	(0X5775);
	set_name	(0X5775,	"DUR3");
	set_cmt	(0X5776,	"Volume Voice 1",	1);
	create_byte	(0X5776);
	set_name	(0X5776,	"VOL1");
	set_cmt	(0X5777,	"Volume Voice 2",	1);
	create_byte	(0X5777);
	set_name	(0X5777,	"VOL2");
	set_cmt	(0X5778,	"Volume Voice 3",	1);
	create_byte	(0X5778);
	set_name	(0X5778,	"VOL3");
	create_byte	(0X5779);
	make_array	(0X5779,	0X3);
	set_name	(0X5779,	"TIE");
	set_cmt	(0X577C,	"Playback tempo",	1);
	create_byte	(0X577C);
	set_name	(0X577C,	"TEMP0");
	create_byte	(0X577D);
	make_array	(0X577D,	0X3);
	update_extra_cmt		(0X5780,	E_PREV + 0,	"");
	update_extra_cmt		(0X5780,	E_PREV + 1,	"; this is the 3-channel game title music");
	MakeStruct	(0X5780,	"NOTE");
	make_array	(0X5780,	0X65);
	set_name	(0X5780,	"VOICE_1");
	MakeStruct	(0X584B,	"NOTE");
	make_array	(0X584B,	0X58);
	set_name	(0X584B,	"VOICE_2");
	MakeStruct	(0X58FC,	"NOTE");
	make_array	(0X58FC,	0X6B);
	set_name	(0X58FC,	"VOICE_3");
	update_extra_cmt		(0X59D3,	E_PREV + 0,	"");
	update_extra_cmt		(0X59D3,	E_PREV + 1,	"; This is garabage data generated by leftover data in the memory during the assembly phase:");
	create_byte	(0X59D3);
	make_array	(0X59D3,	0X22D);
	update_extra_cmt		(0X5C00,	E_PREV + 0,	"*");
	update_extra_cmt		(0X5C00,	E_PREV + 1,	"*");
	update_extra_cmt		(0X5C00,	E_PREV + 2,	"* RAM FONT WITH THE LEVEL CHARACTERS");
	update_extra_cmt		(0X5C00,	E_PREV + 3,	"*");
	update_extra_cmt		(0X5C00,	E_PREV + 4,	"* ");
	create_byte	(0X5C00);
	make_array	(0X5C00,	0X8);
	set_name	(0X5C00,	"__CHBAS");
	set_cmt	(0X5C08,	"$01: Water (top), Grass",	1);
	create_byte	(0X5C08);
	make_array	(0X5C08,	0X8);
	set_name	(0X5C08,	"ACG");
	set_cmt	(0X5C10,	"$02: Water",	1);
	create_byte	(0X5C10);
	make_array	(0X5C10,	0X80);
	set_name	(0X5C10,	"ACH");
	set_cmt	(0X5C90,	"$12: Runway, Road",	1);
	create_byte	(0X5C90);
	make_array	(0X5C90,	0X18);
	set_name	(0X5C90,	"ABJ");
	set_cmt	(0X5CA8,	"$15: Hangar (A)",	1);
	create_byte	(0X5CA8);
	make_array	(0X5CA8,	0X8);
	set_name	(0X5CA8,	"ADS");
	set_cmt	(0X5CB0,	"$16: Hangar (B)",	1);
	create_byte	(0X5CB0);
	make_array	(0X5CB0,	0X8);
	set_name	(0X5CB0,	"ADT");
	set_cmt	(0X5CB8,	"$17: Hangar (C)",	1);
	create_byte	(0X5CB8);
	make_array	(0X5CB8,	0X8);
	set_name	(0X5CB8,	"ADU");
	set_cmt	(0X5CC0,	"$18: Hangar (D)",	1);
	create_byte	(0X5CC0);
	make_array	(0X5CC0,	0X8);
	set_name	(0X5CC0,	"ADV");
	set_cmt	(0X5CC8,	"$19: Hangar (E)",	1);
	create_byte	(0X5CC8);
	make_array	(0X5CC8,	0X8);
	set_name	(0X5CC8,	"ADW");
	set_cmt	(0X5CD0,	"$1A: Hangar (F)",	1);
	create_byte	(0X5CD0);
	make_array	(0X5CD0,	0X8);
	set_name	(0X5CD0,	"ADX");
	set_cmt	(0X5CD8,	"$1B: Hangar (G)",	1);
	create_byte	(0X5CD8);
	make_array	(0X5CD8,	0X8);
	set_name	(0X5CD8,	"ADY");
	set_cmt	(0X5CE0,	"$1C: Hangar (H)",	1);
	create_byte	(0X5CE0);
	make_array	(0X5CE0,	0X8);
	set_name	(0X5CE0,	"AEE");
	set_cmt	(0X5CE8,	"$1D: Hangar (I)",	1);
	create_byte	(0X5CE8);
	make_array	(0X5CE8,	0X8);
	set_name	(0X5CE8,	"ADZ");
	set_cmt	(0X5CF0,	"$1E: Hangar (J)",	1);
	create_byte	(0X5CF0);
	make_array	(0X5CF0,	0X8);
	set_name	(0X5CF0,	"AEA");
	set_cmt	(0X5CF8,	"$1F: Hangar (K)",	1);
	create_byte	(0X5CF8);
	make_array	(0X5CF8,	0X8);
	set_name	(0X5CF8,	"AEB");
	set_cmt	(0X5D00,	"$20: Hangar (L)",	1);
	create_byte	(0X5D00);
	make_array	(0X5D00,	0X88);
	set_name	(0X5D00,	"AEC");
	set_cmt	(0X5D88,	"$31: Anti-Aircraft Battery",	1);
	create_byte	(0X5D88);
	make_array	(0X5D88,	0X8);
	set_name	(0X5D88,	"ADK");
	create_byte	(0X5D90);
	make_array	(0X5D90,	0X68);
	set_cmt	(0X5DF8,	"$3F: Black tile",	1);
	create_byte	(0X5DF8);
	make_array	(0X5DF8,	0X8);
	set_name	(0X5DF8,	"ABQ");
	create_byte	(0X5E00);
	make_array	(0X5E00,	0X28);
	set_cmt	(0X5E28,	"$45:",	1);
	create_byte	(0X5E28);
	make_array	(0X5E28,	0X8);
	set_name	(0X5E28,	"ABE");
	create_byte	(0X5E30);
	make_array	(0X5E30,	0X18);
	set_cmt	(0X5E48,	"$49:",	1);
	create_byte	(0X5E48);
	make_array	(0X5E48,	0X8);
	set_name	(0X5E48,	"ABH");
	set_cmt	(0X5E50,	"$4A:",	1);
	create_byte	(0X5E50);
	make_array	(0X5E50,	0X28);
	set_name	(0X5E50,	"ABI");
	set_cmt	(0X5E78,	"$4F:",	1);
	create_byte	(0X5E78);
	make_array	(0X5E78,	0X28);
	set_name	(0X5E78,	"ABG");
	set_cmt	(0X5EA0,	"$54:",	1);
	create_byte	(0X5EA0);
	make_array	(0X5EA0,	0X8);
	set_name	(0X5EA0,	"ABW");
	set_cmt	(0X5EA8,	"$55:",	1);
	create_byte	(0X5EA8);
	make_array	(0X5EA8,	0X8);
	set_name	(0X5EA8,	"ACC");
	set_cmt	(0X5EB0,	"$56:",	1);
	create_byte	(0X5EB0);
	make_array	(0X5EB0,	0X8);
	set_name	(0X5EB0,	"ABX");
	set_cmt	(0X5EB8,	"$57:",	1);
	create_byte	(0X5EB8);
	make_array	(0X5EB8,	0X8);
	set_name	(0X5EB8,	"ACE");
	set_cmt	(0X5EC0,	"$58:",	1);
	create_byte	(0X5EC0);
	make_array	(0X5EC0,	0X8);
	set_name	(0X5EC0,	"ABY");
	set_cmt	(0X5EC8,	"$59:",	1);
	create_byte	(0X5EC8);
	make_array	(0X5EC8,	0X8);
	set_name	(0X5EC8,	"ACD");
	set_cmt	(0X5ED0,	"$5A:",	1);
	create_byte	(0X5ED0);
	make_array	(0X5ED0,	0X10);
	set_name	(0X5ED0,	"ABZ");
	set_cmt	(0X5EE0,	"$5C:",	1);
	create_byte	(0X5EE0);
	make_array	(0X5EE0,	0X8);
	set_name	(0X5EE0,	"ACA");
	set_cmt	(0X5EE8,	"$5D:",	1);
	create_byte	(0X5EE8);
	make_array	(0X5EE8,	0X8);
	set_name	(0X5EE8,	"ACF");
	set_cmt	(0X5EF0,	"$5E:",	1);
	create_byte	(0X5EF0);
	make_array	(0X5EF0,	0X18);
	set_name	(0X5EF0,	"ACB");
	set_cmt	(0X5F08,	"$60:",	1);
	create_byte	(0X5F08);
	make_array	(0X5F08,	0X10);
	set_name	(0X5F08,	"ACI");
	set_cmt	(0X5F18,	"$62:",	1);
	create_byte	(0X5F18);
	make_array	(0X5F18,	0XD0);
	set_name	(0X5F18,	"AEF");
	set_cmt	(0X5FE8,	"$7D:",	1);
	create_byte	(0X5FE8);
	make_array	(0X5FE8,	0X8);
	set_name	(0X5FE8,	"ABM");
	set_cmt	(0X5FF0,	"$7E: Hangar (M) Black",	1);
	create_byte	(0X5FF0);
	make_array	(0X5FF0,	0X8);
	set_name	(0X5FF0,	"AED");
	set_cmt	(0X5FF8,	"$7F:",	1);
	create_byte	(0X5FF8);
	make_array	(0X5FF8,	0X8);
	set_name	(0X5FF8,	"ABS");
	set_cmt	(0X6400,	"Screen memory",	1);
	update_extra_cmt		(0X6400,	E_PREV + 0,	"ANTIC screen memory");
	create_byte	(0X6400);
	make_array	(0X6400,	0X41);
	set_name	(0X6400,	"SC");
	create_byte	(0X6441);
	make_array	(0X6441,	0X41);
	create_byte	(0X6482);
	make_array	(0X6482,	0X41);
	create_byte	(0X64C3);
	make_array	(0X64C3,	0X41);
	create_byte	(0X6504);
	make_array	(0X6504,	0X41);
	create_byte	(0X6545);
	make_array	(0X6545,	0X41);
	create_byte	(0X6586);
	make_array	(0X6586,	0X41);
	create_byte	(0X65C7);
	make_array	(0X65C7,	0X41);
	create_byte	(0X6608);
	make_array	(0X6608,	0X41);
	create_byte	(0X6649);
	make_array	(0X6649,	0X41);
	create_byte	(0X668A);
	make_array	(0X668A,	0X41);
	create_byte	(0X66CB);
	make_array	(0X66CB,	0X41);
	create_byte	(0X670C);
	make_array	(0X670C,	0X41);
	create_byte	(0X674D);
	make_array	(0X674D,	0X41);
	create_byte	(0X678E);
	make_array	(0X678E,	0X41);
	create_byte	(0X67CF);
	make_array	(0X67CF,	0X41);
	create_byte	(0X6810);
	make_array	(0X6810,	0X41);
	create_byte	(0X6851);
	make_array	(0X6851,	0X41);
	create_byte	(0X6892);
	make_array	(0X6892,	0X41);
	create_byte	(0X68D3);
	make_array	(0X68D3,	0X41);
	create_byte	(0X6914);
	make_array	(0X6914,	0X41);
	create_byte	(0X6955);
	make_array	(0X6955,	0X41);
	create_byte	(0X6996);
	make_array	(0X6996,	0X41);
	create_byte	(0X69D7);
	make_array	(0X69D7,	0X41);
	create_byte	(0X6A18);
	make_array	(0X6A18,	0X2E);
	set_name	(0X6A18,	"SC_TOP_PLAYSCREEN");
	MakeStruct	(0X6A46,	"CONTROL_DISPLAY");
	set_name	(0X6A46,	"SC_STATUS_LINE");
	create_byte	(0X6A8E);
	make_array	(0X6A8E,	0X2);
	create_byte	(0X6A90);
	make_array	(0X6A90,	0X48);
	set_name	(0X6A90,	"SC_STATUS_TITLE");
	create_byte	(0X6AD8);
	make_array	(0X6AD8,	0X528);
	update_extra_cmt		(0X7000,	E_PREV + 0,	"; PMBASE with ANTIC player missle graphics");
	create_byte	(0X7000);
	make_array	(0X7000,	0X300);
	set_name	(0X7000,	"PMBASE_");
	create_byte	(0X7300);
	make_array	(0X7300,	0X100);
	set_name	(0X7300,	"MISSLE");
	set_cmt	(0X7400,	"Player Plane (WHITE parts)",	1);
	create_byte	(0X7400);
	make_array	(0X7400,	0X100);
	set_name	(0X7400,	"P0");
	set_cmt	(0X7500,	"Player Plane (BLACK parts)",	1);
	create_byte	(0X7500);
	make_array	(0X7500,	0X100);
	set_name	(0X7500,	"P1");
	set_cmt	(0X7600,	"Enemy (first color)",	1);
	create_byte	(0X7600);
	make_array	(0X7600,	0X100);
	set_name	(0X7600,	"P2");
	set_cmt	(0X7700,	"Enemy (second color)",	1);
	create_byte	(0X7700);
	make_array	(0X7700,	0X100);
	set_name	(0X7700,	"P3");
	set_cmt	(0XD000,	"Player Plane (Horizontal Position – first color)",	1);
	create_byte	(0XD000);
	set_name	(0XD000,	"HPOSP0");
	set_cmt	(0XD001,	"Player Plane (Horizontal Position – second color)",	1);
	create_byte	(0XD001);
	set_name	(0XD001,	"HPOSP1");
	set_cmt	(0XD002,	"Enemy (Horizontal Position – first color)",	1);
	create_byte	(0XD002);
	set_name	(0XD002,	"HPOSP2");
	set_cmt	(0XD003,	"Enemy (Horizontal Position – second color)",	1);
	create_byte	(0XD003);
	set_name	(0XD003,	"HPOSP3");
	set_cmt	(0XD004,	"Player Machine Gun Bullet (Horizontal Position)",	1);
	create_byte	(0XD004);
	set_name	(0XD004,	"P0PF_HPOSM0");
	set_cmt	(0XD005,	"Missile 1 Horizontal Position / Player 1 to Playfield Collision",	1);
	create_byte	(0XD005);
	set_name	(0XD005,	"P1PF_HPOSM1");
	set_cmt	(0XD006,	"Missile 2 Horizontal Position / Player 2 to Playfield Collision",	1);
	create_byte	(0XD006);
	set_name	(0XD006,	"P2PF_HPOSM2");
	set_cmt	(0XD007,	"Missile 3 Horizontal Position / Player 3 to Playfield Collision",	1);
	create_byte	(0XD007);
	set_name	(0XD007,	"P3PF_HPOSM3");
	set_cmt	(0XD008,	"Missle to Player 0 Collision",	1);
	create_byte	(0XD008);
	set_name	(0XD008,	"M0PL");
	set_cmt	(0XD009,	"Missle to Player 1 Collision",	1);
	create_byte	(0XD009);
	set_name	(0XD009,	"M1PL");
	set_cmt	(0XD00A,	"Missle to Player 2 Collision / Player 2 Size",	1);
	create_byte	(0XD00A);
	set_name	(0XD00A,	"M2PL_SIZEP2");
	set_cmt	(0XD00B,	"Missle to Player 3 Collision / Player 3 Size",	1);
	create_byte	(0XD00B);
	set_name	(0XD00B,	"M3PL_SIZEP3");
	set_cmt	(0XD00C,	"Missle Size",	1);
	create_byte	(0XD00C);
	set_name	(0XD00C,	"SIZEM");
	set_cmt	(0XD00D,	"Player Graphics Register 0",	1);
	create_byte	(0XD00D);
	set_name	(0XD00D,	"P1PL");
	set_cmt	(0XD00E,	"Player Graphics Register 1",	1);
	create_byte	(0XD00E);
	set_name	(0XD00E,	"P2PL");
	set_cmt	(0XD012,	"Player-Missle Color 0",	1);
	set_cmt	(0XD013,	"Player-Missle Color 1",	1);
	set_cmt	(0XD014,	"Player-Missle Color 2",	1);
	set_cmt	(0XD015,	"Player-Missle Color 3",	1);
	set_cmt	(0XD016,	"Playfield Color 0",	1);
	create_byte	(0XD016);
	set_cmt	(0XD017,	"Playfield Color 1",	1);
	create_byte	(0XD017);
	set_name	(0XD017,	"COLPF1");
	set_cmt	(0XD018,	"Playfield Color 2",	1);
	create_byte	(0XD018);
	set_name	(0XD018,	"COLPF2");
	set_cmt	(0XD019,	"Playfield Color 3",	1);
	create_byte	(0XD019);
	set_name	(0XD019,	"COLPF3");
	set_cmt	(0XD01A,	"Background Color",	1);
	create_byte	(0XD01A);
	set_name	(0XD01A,	"COLBK");
	create_byte	(0XD01B);
	make_array	(0XD01B,	0X2);
	set_cmt	(0XD01D,	"Graphics Control Register",	1);
	create_byte	(0XD01D);
	set_name	(0XD01D,	"GRACTL");
	set_cmt	(0XD01E,	"write to HITCLR clears all of the collision registers.",	1);
	create_byte	(0XD01E);
	set_name	(0XD01E,	"HITCLR");
	set_cmt	(0XD01F,	"Console Switch Port",	1);
	create_byte	(0XD01F);
	set_name	(0XD01F,	"CONSOL");
	make_array	(0XD020,	0X1E0);
	set_cmt	(0XD200,	"Audio 1 Frequency Register",	1);
	create_byte	(0XD200);
	set_name	(0XD200,	"AUDF1");
	set_cmt	(0XD201,	"Audio 1 Channel Control Register",	1);
	create_byte	(0XD201);
	set_name	(0XD201,	"AUDC1");
	set_cmt	(0XD202,	"Audio 2 Frequency Register",	1);
	create_byte	(0XD202);
	set_name	(0XD202,	"AUDF2");
	set_cmt	(0XD203,	"Audio 2 Channel Control Register",	1);
	create_byte	(0XD203);
	set_name	(0XD203,	"AUDC2");
	set_cmt	(0XD204,	"Audio 3 Frequency Register",	1);
	create_byte	(0XD204);
	set_name	(0XD204,	"AUDF3");
	set_cmt	(0XD205,	"Audio 3 Channel Control Register",	1);
	create_byte	(0XD205);
	set_name	(0XD205,	"AUDC3");
	set_cmt	(0XD206,	"Audio 4 Frequency Register",	1);
	create_byte	(0XD206);
	set_name	(0XD206,	"AUDF4");
	set_cmt	(0XD207,	"Audio 4 Channel Control Register",	1);
	create_byte	(0XD207);
	set_name	(0XD207,	"AUDC4");
	set_cmt	(0XD208,	"Audio Control Register",	1);
	create_byte	(0XD208);
	set_name	(0XD208,	"AUDCTL");
	create_byte	(0XD209);
	set_cmt	(0XD20A,	"Random Number Generator",	1);
	create_byte	(0XD20A);
	set_name	(0XD20A,	"RANDOM");
	create_byte	(0XD20B);
	make_array	(0XD20B,	0X4);
	set_cmt	(0XD20F,	"Serial Port control Register",	1);
	create_byte	(0XD20F);
	set_name	(0XD20F,	"SKSTAT");
	create_byte	(0XD210);
	make_array	(0XD210,	0XF2);
	set_cmt	(0XD302,	"Port A Control Register",	1);
	create_byte	(0XD302);
	set_name	(0XD302,	"PACTL");
	create_byte	(0XD303);
	make_array	(0XD303,	0X101);
	set_cmt	(0XD404,	"Horizontal Scroll Register",	1);
	create_byte	(0XD404);
	set_name	(0XD404,	"HSCROL");
	set_cmt	(0XD405,	"Vertical Scroll Register",	1);
	create_byte	(0XD405);
	set_name	(0XD405,	"VSCROL");
	set_cmt	(0XD407,	"Player-Missile Address Base Register",	1);
	create_byte	(0XD407);
	set_name	(0XD407,	"PMBASE");
	set_cmt	(0XD409,	"Character Address Base Register",	1);
	create_byte	(0XD409);
	set_name	(0XD409,	"CHBASE");
	set_cmt	(0XD40A,	"Wait for Horizontal Blank Synchronisation",	1);
	create_byte	(0XD40A);
	set_name	(0XD40A,	"WSYNC");
	create_byte	(0XD40B);
	make_array	(0XD40B,	0X3);
	set_cmt	(0XD40E,	"$80: DL IRQ enabled, $40: VBL IRQ enabled",	1);
	create_byte	(0XD40E);
	set_name	(0XD40E,	"NMIEN");
	create_byte	(0XD40F);
	make_array	(0XD410,	0X3F0);
	create_byte	(0XD800);
	make_array	(0XD800,	0XC00);
	set_cmt	(0XE400,	"EDITOR",	1);
	create_byte	(0XE400);
	make_array	(0XE400,	0X10);
	set_name	(0XE400,	"EDITRV");
	set_cmt	(0XE410,	"TELEVISION SCREEN",	1);
	create_byte	(0XE410);
	make_array	(0XE410,	0X10);
	set_name	(0XE410,	"SCRENV");
	set_cmt	(0XE420,	"KEYBOARD",	1);
	create_byte	(0XE420);
	make_array	(0XE420,	0X10);
	set_name	(0XE420,	"KEYBDV");
	set_cmt	(0XE430,	"PRINTER",	1);
	create_byte	(0XE430);
	make_array	(0XE430,	0X10);
	set_name	(0XE430,	"PRINTV");
	set_cmt	(0XE440,	"CASSETTE",	1);
	create_byte	(0XE440);
	make_array	(0XE440,	0X10);
	set_name	(0XE440,	"CASETV");
	set_cmt	(0XE450,	"DISK INITIALIZATION",	1);
	create_byte	(0XE450);
	make_array	(0XE450,	0X3);
	set_name	(0XE450,	"DISKIW");
	set_cmt	(0XE453,	"DISK INTERFACE",	1);
	create_byte	(0XE453);
	make_array	(0XE453,	0X3);
	set_name	(0XE453,	"DSKINV");
	set_cmt	(0XE456,	"CENTRAL INPUT OUTPUT ROUTINE",	1);
	create_byte	(0XE456);
	make_array	(0XE456,	0X3);
	set_name	(0XE456,	"CIOV");
	set_cmt	(0XE459,	"SERIAL INPUT OUTPUT ROUTINE",	1);
	create_byte	(0XE459);
	make_array	(0XE459,	0X3);
	set_name	(0XE459,	"SIOV");
	set_cmt	(0XE45C,	"SET SYSTEM TIMERS ROUTINE",	1);
	create_byte	(0XE45C);
	make_array	(0XE45C,	0X3);
	set_name	(0XE45C,	"SETVBV");
	set_cmt	(0XE45F,	"SYSTEM VERTICAL BLANK CALCULATIONS",	1);
	create_byte	(0XE45F);
	make_array	(0XE45F,	0X3);
	set_name	(0XE45F,	"SYSVBV");
	set_cmt	(0XE462,	"EXIT VERTICAL BLANK CALCULATIONS",	1);
	create_byte	(0XE462);
	make_array	(0XE462,	0X3);
	set_name	(0XE462,	"XITVBV");
	set_cmt	(0XE465,	"SERIAL, INPUT OUTPUT INITIALIZATION",	1);
	create_byte	(0XE465);
	make_array	(0XE465,	0X3);
	set_name	(0XE465,	"SIOINV");
	set_cmt	(0XE468,	"SEND ENABLE ROUTINE",	1);
	create_byte	(0XE468);
	make_array	(0XE468,	0X3);
	set_name	(0XE468,	"SENDEV");
	set_cmt	(0XE46B,	"INTERRUPT HANDLER INITIALIZATION",	1);
	create_byte	(0XE46B);
	make_array	(0XE46B,	0X3);
	set_name	(0XE46B,	"INTINV");
	set_cmt	(0XE46E,	"CENTRAL INPUT OUTPUT INITIALIZATION",	1);
	create_byte	(0XE46E);
	make_array	(0XE46E,	0X3);
	set_name	(0XE46E,	"CIOINV");
	set_cmt	(0XE471,	"BLACKBOARD MODE",	1);
	create_byte	(0XE471);
	make_array	(0XE471,	0X3);
	set_name	(0XE471,	"BLKBDV");
	set_cmt	(0XE474,	"WARM START ENTRY POINT",	1);
	create_byte	(0XE474);
	make_array	(0XE474,	0X3);
	set_name	(0XE474,	"WARMSV");
	set_cmt	(0XE477,	"COLD START ENTRY POINT",	1);
	create_byte	(0XE477);
	make_array	(0XE477,	0X3);
	set_name	(0XE477,	"COLDSV");
	set_cmt	(0XE47A,	"CASSETTE READ BLOCK ENTRY POINT VECTOR",	1);
	create_byte	(0XE47A);
	make_array	(0XE47A,	0X3);
	set_name	(0XE47A,	"RBLOKV");
	set_cmt	(0XE47D,	"CASSETTE OPEN FOR INPUT VECTOR",	1);
	create_byte	(0XE47D);
	make_array	(0XE47D,	0X3);
	set_name	(0XE47D,	"CSOPIV");
	create_byte	(0XE480);
	make_array	(0XE480,	0X1B7C);
	create_word	(x=0XFFFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XFFFC,	"BRK");
	create_word	(x=0XFFFE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
}

static Functions_0(void) {

	add_func    (0X706,0X754);
	set_func_flags(0X706,0x1000);
	set_func_cmt(0X706,	"BOOT CONTINUE", 1);
	set_name(0X708, "_COLOR_INIT", SN_LOCAL);
	set_name(0X71D, "_SYNC", SN_LOCAL);
	set_name(0X721, "_READ_LOOP", SN_LOCAL);
	set_name(0X742, "_TIMER_LOOP", SN_LOCAL);
	add_func    (0X754,0X755);
	set_func_flags(0X754,0x1000);
	add_func    (0X755,0X779);
	set_func_flags(0X755,0x1000);
	add_func    (0X779,0X77A);
	set_func_flags(0X779,0x1040);
	add_func    (0XC00,0XE8E);
	set_func_flags(0XC00,0x1000);
	set_name(0XC14, "X0", SN_LOCAL);
	set_name(0XC57, "A_", SN_LOCAL);
	set_name(0XC69, "B", SN_LOCAL);
	set_name(0XCA3, "AFZ", SN_LOCAL);
	set_name(0XCAA, "AGA", SN_LOCAL);
	set_name(0XD10, "EU", SN_LOCAL);
	set_name(0XD52, "L5", SN_LOCAL);
	add_func    (0XE8E,0XFE4);
	set_func_flags(0XE8E,0x1000);
	set_name(0XEC4, ".5", SN_LOCAL);
	set_name(0XED8, ".2", SN_LOCAL);
	set_name(0XEDA, ".1", SN_LOCAL);
	set_name(0XEE6, ".6", SN_LOCAL);
	set_name(0XEE8, ".7", SN_LOCAL);
	set_name(0XEF6, ".3", SN_LOCAL);
	set_name(0XEFE, "AFY", SN_LOCAL);
	set_name(0XF09, "AFX", SN_LOCAL);
	set_name(0XF27, "CW", SN_LOCAL);
	set_name(0XF71, ".1_0", SN_LOCAL);
	set_name(0XF90, ".18", SN_LOCAL);
	set_name(0XF9A, "V0", SN_LOCAL);
	set_name(0XF9D, "ZN", SN_LOCAL);
	add_func    (0XFE4,0X101F);
	set_func_flags(0XFE4,0x1000);
	add_func    (0X101F,0X109A);
	set_func_flags(0X101F,0x1000);
	set_name(0X1049, "NQ", SN_LOCAL);
	set_name(0X104C, "NR", SN_LOCAL);
	set_name(0X1099, ".9", SN_LOCAL);
	add_func    (0X109A,0X10B1);
	set_func_flags(0X109A,0x1000);
	set_func_cmt(0X109A,	"Wait for Timer 3. Sync gameplay to 60Hz", 1);
	set_name(0X10AB, "L", SN_LOCAL);
	add_func    (0X10B1,0X115B);
	set_func_flags(0X10B1,0x1000);
	set_func_cmt(0X10B1,	"Deferred VBL: scroll the playfield and play sound", 1);
	set_name(0X10BD, "SCROL", SN_LOCAL);
	set_name(0X10C5, "JR", SN_LOCAL);
	set_name(0X10EC, "GN", SN_LOCAL);
	set_name(0X1125, "K", SN_LOCAL);
	add_func    (0X115B,0X1347);
	set_func_flags(0X115B,0x1000);
	set_func_cmt(0X115B,	"Draw river/gras on the map", 1);
	set_name(0X1160, "M", SN_LOCAL);
	set_name(0X1164, "N", SN_LOCAL);
	set_name(0X1177, "AR", SN_LOCAL);
	set_name(0X117A, "RND", SN_LOCAL);
	set_name(0X118C, "AX", SN_LOCAL);
	set_name(0X11BA, "EC", SN_LOCAL);
	set_name(0X11C0, "BA", SN_LOCAL);
	set_name(0X11C8, "AV", SN_LOCAL);
	set_name(0X11D9, "STRGHT", SN_LOCAL);
	set_name(0X11E1, "P", SN_LOCAL);
	set_name(0X11EB, "AF", SN_LOCAL);
	set_name(0X11F2, "Q", SN_LOCAL);
	set_name(0X11F8, "AG", SN_LOCAL);
	set_name(0X1206, "AH", SN_LOCAL);
	set_name(0X1217, "BN", SN_LOCAL);
	set_name(0X1222, "U", SN_LOCAL);
	set_name(0X1228, "LFT", SN_LOCAL);
	set_name(0X1230, "R", SN_LOCAL);
	set_name(0X1247, "AL", SN_LOCAL);
	set_name(0X124E, "X_", SN_LOCAL);
	set_name(0X1254, "AM", SN_LOCAL);
	set_name(0X1269, "V", SN_LOCAL);
	set_name(0X126D, "AZ", SN_LOCAL);
	set_name(0X1272, "W", SN_LOCAL);
	set_name(0X127A, "S", SN_LOCAL);
	set_name(0X1284, "BB", SN_LOCAL);
	set_name(0X128B, "T", SN_LOCAL);
	set_name(0X1291, "AJ", SN_LOCAL);
	set_name(0X129F, "AK", SN_LOCAL);
	set_name(0X12BA, "Y_", SN_LOCAL);
	set_name(0X12BE, "TL", SN_LOCAL);
	set_name(0X12BF, "RGHT", SN_LOCAL);
	set_name(0X12CC, "Z", SN_LOCAL);
	set_name(0X12E4, "AA", SN_LOCAL);
	set_name(0X12EC, "AB", SN_LOCAL);
	set_name(0X12F7, "AC", SN_LOCAL);
	set_name(0X12FE, "AD", SN_LOCAL);
	set_name(0X1304, "AE", SN_LOCAL);
	set_name(0X1312, "AN", SN_LOCAL);
	set_name(0X131D, "AO", SN_LOCAL);
	set_name(0X1337, "AI", SN_LOCAL);
	set_name(0X133B, "AP", SN_LOCAL);
	add_func    (0X1347,0X1363);
	set_func_flags(0X1347,0x1000);
	add_func    (0X1363,0X1374);
	set_func_flags(0X1363,0x1000);
	set_func_cmt(0X1363,	"Copy Plane Shadow into P1", 1);
	add_func    (0X1374,0X1406);
	set_func_flags(0X1374,0x1000);
	set_func_cmt(0X1374,	"Update the propeller graphics for rotation", 1);
	set_name(0X137E, "BG", SN_LOCAL);
	set_name(0X138E, "BE", SN_LOCAL);
	set_name(0X13A0, "BT", SN_LOCAL);
	set_name(0X13AB, "BF", SN_LOCAL);
	set_name(0X13BD, "BU", SN_LOCAL);
	set_name(0X13C8, "BP", SN_LOCAL);
	set_name(0X13D8, "BQ", SN_LOCAL);
	set_name(0X13E6, "BR", SN_LOCAL);
	set_name(0X13F6, "BS", SN_LOCAL);
	add_func    (0X1406,0X1455);
	set_func_flags(0X1406,0x1000);
	set_func_cmt(0X1406,	"Check if 'SPACE' for Pause was pressed and pause the game.", 1);
	set_name(0X140E, "IF", SN_LOCAL);
	set_name(0X1429, "IG", SN_LOCAL);
	add_func    (0X1455,0X1493);
	set_func_flags(0X1455,0x1000);
	set_func_cmt(0X1455,	"Check collision?!?", 1);
	set_name(0X145A, "L2", SN_LOCAL);
	set_name(0X146D, "IJ", SN_LOCAL);
	set_name(0X146E, "L3", SN_LOCAL);
	set_name(0X1475, "IL", SN_LOCAL);
	set_name(0X1484, ".1", SN_LOCAL);
	add_func    (0X1493,0X14D8);
	set_func_flags(0X1493,0x1000);
	set_name(0X14A2, "SE", SN_LOCAL);
	set_name(0X14C9, "PI", SN_LOCAL);
	set_name(0X14CC, "PJ", SN_LOCAL);
	set_name(0X14CF, "PM", SN_LOCAL);
	set_name(0X14D2, "CF", SN_LOCAL);
	set_name(0X14D5, "CO", SN_LOCAL);
	set_name(0X158C, "PN", SN_LOCAL);
	set_name(0X1592, "BACK", SN_LOCAL);
	set_name(0X1597, "CN", SN_LOCAL);
	set_name(0X1598, "CM", SN_LOCAL);
	set_name(0X15B6, "FRWD", SN_LOCAL);
	set_name(0X15BC, "CQ", SN_LOCAL);
	set_name(0X15BD, "CP", SN_LOCAL);
	set_name(0X15D0, "PK", SN_LOCAL);
	set_name(0X15E1, "PL", SN_LOCAL);
	add_func    (0X14D8,0X1506);
	set_func_flags(0X14D8,0x1000);
	set_func_cmt(0X14D8,	"Move Plane down, if possible", 1);
	set_name(0X14EA, "G", SN_LOCAL);
	set_name(0X14F8, "H", SN_LOCAL);
	set_name(0X1503, "E", SN_LOCAL);
	add_func    (0X1506,0X150F);
	set_func_flags(0X1506,0x1000);
	set_func_cmt(0X1506,	"Move Plane up, if possible", 1);
	add_func    (0X152D,0X1559);
	set_func_flags(0X152D,0x1000);
	set_name(0X150F, "BY", SN_LOCAL);
	set_name(0X1511, "O", SN_LOCAL);
	set_name(0X152C, "I", SN_LOCAL);
	set_name(0X153D, "CG", SN_LOCAL);
	set_name(0X1548, "CI", SN_LOCAL);
	add_func    (0X1559,0X158C);
	set_func_flags(0X1559,0x1000);
	set_name(0X1572, "CC", SN_LOCAL);
	set_name(0X1588, "MO", SN_LOCAL);
	add_func    (0X15F2,0X1647);
	set_func_flags(0X15F2,0x1000);
	set_frame_size(0X15F2, 0, 0, 0);
	set_name(0X1600, "CR", SN_LOCAL);
	set_name(0X161E, "FFF", SN_LOCAL);
	set_name(0X161F, "CS__", SN_LOCAL);
	add_func    (0X1647,0X1656);
	set_func_flags(0X1647,0x1000);
	set_func_cmt(0X1647,	"Update the primary plane graphics at the current vertical position (not the shadow or alternative color)", 1);
	set_name(0X164B, "BH", SN_LOCAL);
	add_func    (0X1656,0X17EF);
	set_func_flags(0X1656,0x1000);
	set_func_cmt(0X1656,	"Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.", 1);
	set_name(0X165E, "BC", SN_LOCAL);
	set_name(0X1674, "BJ", SN_LOCAL);
	set_name(0X1680, "DU", SN_LOCAL);
	set_name(0X168F, "BL", SN_LOCAL);
	set_name(0X169C, "BK", SN_LOCAL);
	set_name(0X16A0, "BO", SN_LOCAL);
	set_name(0X16AA, "CJ", SN_LOCAL);
	set_name(0X16C3, "ZM", SN_LOCAL);
	set_name(0X16F8, ".4", SN_LOCAL);
	set_name(0X16FC, ".3", SN_LOCAL);
	set_name(0X171E, ".20", SN_LOCAL);
	set_name(0X173C, ".2", SN_LOCAL);
	set_name(0X1759, "AFQ", SN_LOCAL);
	set_name(0X175D, ".10", SN_LOCAL);
	set_name(0X1774, ".11", SN_LOCAL);
	set_name(0X17A4, ".30", SN_LOCAL);
	set_name(0X17AF, ".15", SN_LOCAL);
	set_name(0X17CC, ".6", SN_LOCAL);
	set_name(0X17D1, ".8", SN_LOCAL);
	set_name(0X17D7, ".7", SN_LOCAL);
	set_name(0X17E0, ".86", SN_LOCAL);
	add_func    (0X17EF,0X18AC);
	set_func_flags(0X17EF,0x1000);
	set_func_cmt(0X17EF,	"Draw trees into the map. Needs to be the last draw function to be called.", 1);
	set_name(0X17F4, "EN", SN_LOCAL);
	set_name(0X17F8, "EO", SN_LOCAL);
	set_name(0X180F, "EQ", SN_LOCAL);
	set_name(0X1813, "ER", SN_LOCAL);
	set_name(0X1821, "ES", SN_LOCAL);
	set_name(0X1825, "EP", SN_LOCAL);
	set_name(0X1830, "EL", SN_LOCAL);
	set_name(0X183C, "FH", SN_LOCAL);
	set_name(0X183D, "EM", SN_LOCAL);
	set_name(0X184D, "ET", SN_LOCAL);
	set_name(0X1855, "EF", SN_LOCAL);
	set_name(0X1870, "EG", SN_LOCAL);
	set_name(0X188E, "EH", SN_LOCAL);
	set_name(0X1892, "EI", SN_LOCAL);
	set_name(0X18A0, "EJ", SN_LOCAL);
	set_name(0X18A4, "EK", SN_LOCAL);
	add_func    (0X18AC,0X18BB);
	set_func_flags(0X18AC,0x1000);
	set_name(0X18B0, ".1", SN_LOCAL);
	add_func    (0X18BB,0X18EF);
	set_func_flags(0X18BB,0x1000);
	set_name(0X18D1, ".1", SN_LOCAL);
	set_name(0X18DC, ".2", SN_LOCAL);
	set_name(0X18E7, ".3", SN_LOCAL);
	set_name(0X18E9, ".4", SN_LOCAL);
	add_func    (0X18EF,0X18F8);
	set_func_flags(0X18EF,0x1000);
	set_name(0X18F7, ".1", SN_LOCAL);
	add_func    (0X18F8,0X195F);
	set_func_flags(0X18F8,0x1000);
	set_func_cmt(0X18F8,	"Draw a ship onto the map", 1);
	set_name(0X18FD, "GV", SN_LOCAL);
	set_name(0X190B, "GX", SN_LOCAL);
	set_name(0X1921, "GY", SN_LOCAL);
	set_name(0X1941, "HB", SN_LOCAL);
	add_func    (0X195F,0X19C4);
	set_func_flags(0X195F,0x1000);
	set_func_cmt(0X195F,	"Trigger machine gun", 1);
	set_name(0X1973, "HH", SN_LOCAL);
	set_name(0X1974, "HF", SN_LOCAL);
	set_name(0X199A, "HE", SN_LOCAL);
	set_name(0X19B5, "OA", SN_LOCAL);
	add_func    (0X19C4,0X19D1);
	set_func_flags(0X19C4,0x1000);
	set_func_cmt(0X19C4,	"Remove plane bullet", 1);
	add_func    (0X19D1,0X1A1F);
	set_func_flags(0X19D1,0x1000);
	set_func_cmt(0X19D1,	"Trigger bomb drop", 1);
	set_name(0X19E9, "HK", SN_LOCAL);
	set_name(0X19EA, "HI", SN_LOCAL);
	set_name(0X19ED, "HJ", SN_LOCAL);
	set_name(0X19F8, ".1", SN_LOCAL);
	set_name(0X1A0D, "PB", SN_LOCAL);
	set_name(0X1A51, "TJ", SN_LOCAL);
	set_name(0X1A73, ".1_0", SN_LOCAL);
	set_name(0X1A7A, ".2", SN_LOCAL);
	set_name(0X1A84, "AFV", SN_LOCAL);
	add_func    (0X1A1F,0X1A51);
	set_func_flags(0X1A1F,0x1000);
	add_func    (0X1A8D,0X1AC0);
	set_func_flags(0X1A8D,0x1000);
	set_func_cmt(0X1A8D,	"Remove all missles, bullets, etc. – reset variables related to this", 1);
	set_name(0X1ABF, ".9", SN_LOCAL);
	add_func    (0X1AC0,0X1B57);
	set_func_flags(0X1AC0,0x1000);
	set_name(0X1AC5, "HN", SN_LOCAL);
	set_name(0X1AC8, "HM", SN_LOCAL);
	add_func    (0X1B57,0X1B72);
	set_func_flags(0X1B57,0x1000);
	set_func_cmt(0X1B57,	"Trigger explosion in water with sound", 1);
	add_func    (0X1B72,0X1B82);
	set_func_flags(0X1B72,0x1000);
	add_func    (0X1B82,0X1B85);
	set_func_flags(0X1B82,0x1080);
	add_func    (0X1B85,0X1B93);
	set_func_flags(0X1B85,0x1000);
	add_func    (0X1B93,0X1C15);
	set_func_flags(0X1B93,0x200);
	set_name(0X1BCF, "ABF", SN_LOCAL);
	set_name(0X1BD2, "V7", SN_LOCAL);
	set_name(0X1BD5, "W5", SN_LOCAL);
	set_name(0X1BD8, "X6", SN_LOCAL);
	set_name(0X1BDB, "Y5", SN_LOCAL);
	set_name(0X1BDE, "Z4", SN_LOCAL);
	set_name(0X1BE1, "ACK", SN_LOCAL);
	set_name(0X1BE4, "AEH", SN_LOCAL);
	set_name(0X1BE7, "BD", SN_LOCAL);
	set_name(0X1BEA, "HQ", SN_LOCAL);
	set_name(0X1BEF, "HO", SN_LOCAL);
	set_name(0X1C01, "HZ", SN_LOCAL);
	set_name(0X1C02, "HP", SN_LOCAL);
	add_func    (0X1C15,0X1C20);
	set_func_flags(0X1C15,0x1000);
	set_func_cmt(0X1C15,	"Stop bombing, if cliff edge would be hit => return", 1);
	set_name(0X1C1D, "HS", SN_LOCAL);
	add_func    (0X1C20,0X1C3E);
	set_func_flags(0X1C20,0x1000);
	set_func_cmt(0X1C20,	"Explosition in the water", 1);
	set_name(0X1C2F, "IA", SN_LOCAL);
	set_name(0X1C34, "IB", SN_LOCAL);
	set_name(0X1C39, "IC", SN_LOCAL);
	add_func    (0X1C3E,0X1C6E);
	set_func_flags(0X1C3E,0x1000);
	set_func_cmt(0X1C3E,	"2x2 water explosion", 1);
	set_name(0X1C5A, ".1", SN_LOCAL);
	add_func    (0X1C6E,0X1C7F);
	set_func_flags(0X1C6E,0x1000);
	set_func_cmt(0X1C6E,	"Quake, if enabled, shake the screen via HSCROL.", 1);
	set_name(0X1C7E, ".1", SN_LOCAL);
	add_func    (0X1C7F,0X1DD9);
	set_func_flags(0X1C7F,0x1000);
	set_func_cmt(0X1C7F,	"Draw Car or Truck driving left/right", 1);
	set_frame_size(0X1C7F, 0, 0, 0);
	set_name(0X1C9A, "IR", SN_LOCAL);
	set_name(0X1C9B, "JW", SN_LOCAL);
	set_name(0X1C9E, "IP", SN_LOCAL);
	set_name(0X1CA1, "IQ", SN_LOCAL);
	set_name(0X1CA4, "IO", SN_LOCAL);
	set_name(0X1CAA, "IS", SN_LOCAL);
	set_name(0X1CBF, "P8", SN_LOCAL);
	set_name(0X1CD0, "IY", SN_LOCAL);
	set_name(0X1CE1, "IV", SN_LOCAL);
	set_name(0X1CF7, "IU", SN_LOCAL);
	set_name(0X1D08, "IW", SN_LOCAL);
	set_name(0X1D1E, "IT", SN_LOCAL);
	set_name(0X1D23, "P9", SN_LOCAL);
	set_name(0X1D29, "IZ", SN_LOCAL);
	set_name(0X1D33, "JB", SN_LOCAL);
	set_name(0X1D49, "JC", SN_LOCAL);
	set_name(0X1D4D, "JD", SN_LOCAL);
	set_name(0X1D6B, "JF", SN_LOCAL);
	set_name(0X1D78, "KC", SN_LOCAL);
	set_name(0X1D83, "JX", SN_LOCAL);
	set_name(0X1D88, "JY", SN_LOCAL);
	set_name(0X1D9C, "KA", SN_LOCAL);
	set_name(0X1DB2, "JZ", SN_LOCAL);
	set_name(0X1DC3, "KB", SN_LOCAL);
	add_func    (0X1DD9,0X1E02);
	set_func_flags(0X1DD9,0x1000);
	set_name(0X1DE2, "AT", SN_LOCAL);
	set_name(0X1DE6, "AS", SN_LOCAL);
	add_func    (0X1E02,0X1E45);
	set_func_flags(0X1E02,0x1000);
	set_func_cmt(0X1E02,	"Fixup Altitude display to make sure that all digits are correct. This can be necessary, because the last digit can over/underflow when in/decremented somewhere else.", 1);
	set_name(0X1E0E, "KG", SN_LOCAL);
	set_name(0X1E1E, "KH", SN_LOCAL);
	set_name(0X1E29, "KI", SN_LOCAL);
	set_name(0X1E3A, "KJ", SN_LOCAL);
	add_func    (0X1E45,0X1EE4);
	set_func_flags(0X1E45,0x1000);
	set_func_cmt(0X1E45,	"Draw a bridge over water", 1);
	set_name(0X1E49, "GQ", SN_LOCAL);
	set_name(0X1E4A, "FJ", SN_LOCAL);
	set_name(0X1E60, "FL", SN_LOCAL);
	set_name(0X1E66, "FM", SN_LOCAL);
	set_name(0X1E6C, "FN", SN_LOCAL);
	set_name(0X1E7B, "GU", SN_LOCAL);
	set_name(0X1E9F, "FP", SN_LOCAL);
	set_name(0X1EA2, "JI", SN_LOCAL);
	set_name(0X1EA5, "FO", SN_LOCAL);
	set_name(0X1EA8, "GL", SN_LOCAL);
	set_name(0X1ECF, "LX", SN_LOCAL);
	set_name(0X1ED0, "FS", SN_LOCAL);
	set_name(0X1ED4, "FT", SN_LOCAL);
	set_name(0X1EF7, "FR", SN_LOCAL);
	set_name(0X1EFF, "FW", SN_LOCAL);
	set_name(0X1F0D, "FY", SN_LOCAL);
	set_name(0X1F19, "FZ", SN_LOCAL);
	set_name(0X1F20, "FX", SN_LOCAL);
	set_name(0X1F25, "GA", SN_LOCAL);
	set_name(0X1F36, "GB", SN_LOCAL);
	set_name(0X1F44, "GC", SN_LOCAL);
	set_name(0X1F4E, "GE", SN_LOCAL);
	set_name(0X1F53, "GD", SN_LOCAL);
	set_name(0X1F54, "FQ", SN_LOCAL);
	set_name(0X1F5F, "GF", SN_LOCAL);
	set_name(0X1F6B, "GG", SN_LOCAL);
	set_name(0X1F72, "GR", SN_LOCAL);
	set_name(0X1F76, "GH", SN_LOCAL);
	set_name(0X1F8A, "GJ", SN_LOCAL);
	set_name(0X1F94, "GK", SN_LOCAL);
	set_name(0X1F99, "GI", SN_LOCAL);
	set_name(0X1F9A, "GS", SN_LOCAL);
	set_name(0X1F9E, "GT", SN_LOCAL);
	set_name(0X1FAA, "T4", SN_LOCAL);
	set_name(0X1FB1, "JH", SN_LOCAL);
	add_func    (0X1EE4,0X1EF7);
	set_func_flags(0X1EE4,0x1000);
	add_func    (0X1FCB,0X1FD4);
	set_func_flags(0X1FCB,0x1000);
	set_func_cmt(0X1FCB,	"Return random number 3 or 7 into register X", 1);
	add_func    (0X1FD4,0X2063);
	set_func_flags(0X1FD4,0x1000);
	set_func_cmt(0X1FD4,	"Change the speed of the plane up/down based on the joystick", 1);
	set_name(0X1FE0, "PD", SN_LOCAL);
	set_name(0X1FF9, "KO", SN_LOCAL);
	set_name(0X1FFA, "KL", SN_LOCAL);
	set_name(0X200B, "KT", SN_LOCAL);
	set_name(0X2016, "KP", SN_LOCAL);
	set_name(0X2026, "KQ", SN_LOCAL);
	set_name(0X204A, "KR", SN_LOCAL);
	set_name(0X205A, "KS", SN_LOCAL);
	add_func    (0X2063,0X2083);
	set_func_flags(0X2063,0x1000);
	set_func_cmt(0X2063,	"When enabled, apply gravity to the plane", 1);
	set_name(0X2075, "FK", SN_LOCAL);
	set_name(0X2076, "HD", SN_LOCAL);
	add_func    (0X2083,0X20E6);
	set_func_flags(0X2083,0x1000);
	set_name(0X209F, "KW", SN_LOCAL);
	set_name(0X20A2, "KD", SN_LOCAL);
	set_name(0X20B0, "P4", SN_LOCAL);
	set_name(0X20B5, "P5", SN_LOCAL);
	set_name(0X20CC, "KU", SN_LOCAL);
	set_name(0X2188, "LN", SN_LOCAL);
	set_name(0X21ED, "LQ", SN_LOCAL);
	add_func    (0X20E6,0X20F0);
	set_func_flags(0X20E6,0x1000);
	add_func    (0X20F0,0X2102);
	set_func_flags(0X20F0,0x200);
	add_func    (0X2102,0X2113);
	set_func_flags(0X2102,0x1000);
	set_name(0X2106, "LH", SN_LOCAL);
	add_func    (0X21DC,0X21ED);
	set_func_flags(0X21DC,0x1000);
	set_name(0X21E0, "LE", SN_LOCAL);
	add_func    (0X2217,0X2255);
	set_func_flags(0X2217,0x1000);
	set_name(0X222B, "PP", SN_LOCAL);
	set_name(0X2235, "NC", SN_LOCAL);
	set_name(0X223B, "NE", SN_LOCAL);
	add_func    (0X2255,0X22B2);
	set_func_flags(0X2255,0x1000);
	set_func_cmt(0X2255,	"Use fuel, update the display as well", 1);
	set_name(0X2265, "SD", SN_LOCAL);
	set_name(0X2268, "MP", SN_LOCAL);
	set_name(0X226D, "NP", SN_LOCAL);
	set_name(0X226E, "MQ", SN_LOCAL);
	set_name(0X227E, "MR", SN_LOCAL);
	set_name(0X2299, "MS", SN_LOCAL);
	set_name(0X22A9, "MT", SN_LOCAL);
	add_func    (0X22B2,0X237C);
	set_func_flags(0X22B2,0x1000);
	set_name(0X22BC, "MV", SN_LOCAL);
	set_name(0X22C4, "SB", SN_LOCAL);
	set_name(0X22CF, "SA", SN_LOCAL);
	set_name(0X22FC, "N8", SN_LOCAL);
	set_name(0X2308, "ADO", SN_LOCAL);
	set_name(0X230D, "N4", SN_LOCAL);
	set_name(0X2319, "NA", SN_LOCAL);
	set_name(0X2335, ".1", SN_LOCAL);
	set_name(0X2338, "MU", SN_LOCAL);
	set_name(0X234B, "AGB", SN_LOCAL);
	set_name(0X234E, "MW", SN_LOCAL);
	set_name(0X2363, "MX", SN_LOCAL);
	set_name(0X2373, "MY", SN_LOCAL);
	add_func    (0X237C,0X2395);
	set_func_flags(0X237C,0x1000);
	set_func_cmt(0X237C,	"Decrement speed, except if we are at 100", 1);
	set_name(0X2392, "MH", SN_LOCAL);
	add_func    (0X2398,0X2400);
	set_func_flags(0X2398,0x1000);
	set_func_cmt(0X2398,	"Decrement speed till we hit 000 (= we landed)", 1);
	set_name(0X2395, "ML", SN_LOCAL);
	set_name(0X23CB, ".2", SN_LOCAL);
	set_name(0X23EF, ".35", SN_LOCAL);
	set_name(0X23F7, ".69", SN_LOCAL);
	set_name(0X23FD, ".1", SN_LOCAL);
	set_name(0X2478, "GROUND", SN_LOCAL);
	add_func    (0X2400,0X2478);
	set_func_flags(0X2400,0x1000);
	set_func_cmt(0X2400,	"Check if the player wants to land the plane while being over the runway", 1);
	set_name(0X2406, "MF", SN_LOCAL);
	set_name(0X240B, "MG", SN_LOCAL);
	set_name(0X2413, "LAND", SN_LOCAL);
	set_name(0X2434, "MK", SN_LOCAL);
	set_name(0X245A, "MJ", SN_LOCAL);
	add_func    (0X2491,0X24F8);
	set_func_flags(0X2491,0x1000);
	set_func_cmt(0X2491,	"Loop to manage takeoff", 1);
	set_name(0X24BC, ".8", SN_LOCAL);
	set_name(0X24D4, ".1", SN_LOCAL);
	set_name(0X24E3, "DK", SN_LOCAL);
	set_name(0X24E6, "DI", SN_LOCAL);
	set_name(0X24F0, "DJ", SN_LOCAL);
	add_func    (0X24F8,0X253A);
	set_func_flags(0X24F8,0x1000);
	set_func_cmt(0X24F8,	"Deferred interrupt for sound", 1);
	set_name(0X252F, "PV", SN_LOCAL);
	set_name(0X2532, "PY", SN_LOCAL);
	add_func    (0X253A,0X254C);
	set_func_flags(0X253A,0x1000);
	set_func_cmt(0X253A,	"Start Audio 3 sound effect", 1);
	add_func    (0X254C,0X2567);
	set_func_flags(0X254C,0x1000);
	set_func_cmt(0X254C,	"Bomb drop sound", 1);
	set_name(0X2566, ".1", SN_LOCAL);
	add_func    (0X2567,0X25A9);
	set_func_flags(0X2567,0x1000);
	set_func_cmt(0X2567,	"Gun sound from the plane", 1);
	set_name(0X2590, "QA", SN_LOCAL);
	set_name(0X2591, "QB", SN_LOCAL);
	set_name(0X2597, "QC", SN_LOCAL);
	set_name(0X25A0, "QD", SN_LOCAL);
	add_func    (0X25A9,0X25C2);
	set_func_flags(0X25A9,0x1000);
	set_name(0X25CC, "PS", SN_LOCAL);
	set_name(0X25D5, "PQ", SN_LOCAL);
	set_name(0X25D6, "PR", SN_LOCAL);
	add_func    (0X25C2,0X25CC);
	set_func_flags(0X25C2,0x1000);
	add_func    (0X25E7,0X25F6);
	set_func_flags(0X25E7,0x1000);
	add_func    (0X25F6,0X2640);
	set_func_flags(0X25F6,0x1000);
	set_func_cmt(0X25F6,	"Increment/Reload bombs during refuel", 1);
	set_name(0X2602, "PF", SN_LOCAL);
	set_name(0X263C, "ADN", SN_LOCAL);
	set_name(0X263F, "PG", SN_LOCAL);
	add_func    (0X2640,0X2661);
	set_func_flags(0X2640,0x1000);
	set_frame_size(0X2640, 0, 0, 0);
	set_name(0X2656, "QG", SN_LOCAL);
	set_name(0X265D, "QF", SN_LOCAL);
	add_func    (0X2661,0X2685);
	set_func_flags(0X2661,0x1000);
	set_name(0X2684, ".1", SN_LOCAL);
	add_func    (0X2685,0X2709);
	set_func_flags(0X2685,0x1000);
	set_name(0X269B, "OI", SN_LOCAL);
	set_name(0X269E, "OJ", SN_LOCAL);
	set_name(0X26DD, "OY", SN_LOCAL);
	set_name(0X26E0, "OD", SN_LOCAL);
	set_name(0X26EC, "OC", SN_LOCAL);
	set_name(0X26ED, "OE", SN_LOCAL);
	set_name(0X2700, "OF", SN_LOCAL);
	set_name(0X2758, "OW", SN_LOCAL);
	set_name(0X2764, "OK", SN_LOCAL);
	set_name(0X276E, "OX", SN_LOCAL);
	set_name(0X2784, ".1", SN_LOCAL);
	set_name(0X278C, "K1", SN_LOCAL);
	set_name(0X278E, "OM", SN_LOCAL);
	set_name(0X27A1, "OL", SN_LOCAL);
	set_name(0X27A3, "ON", SN_LOCAL);
	set_name(0X27C3, "OO", SN_LOCAL);
	set_name(0X27D0, "OP", SN_LOCAL);
	set_name(0X27DA, "OQ", SN_LOCAL);
	set_name(0X27E3, "OR", SN_LOCAL);
	set_name(0X27F7, "OS", SN_LOCAL);
	set_name(0X2807, "J9", SN_LOCAL);
	set_name(0X2810, "OU", SN_LOCAL);
	set_name(0X281C, "OV", SN_LOCAL);
	set_name(0X282D, "K8", SN_LOCAL);
	add_func    (0X2709,0X2758);
	set_func_flags(0X2709,0x1000);
	set_name(0X2711, "OH", SN_LOCAL);
	set_name(0X2752, "Q3", SN_LOCAL);
	add_func    (0X27E9,0X27F7);
	set_func_flags(0X27E9,0x1000);
	set_name(0X27ED, "OT", SN_LOCAL);
	add_func    (0X282E,0X2862);
	set_func_flags(0X282E,0x1000);
	set_func_cmt(0X282E,	"Splash sound effect on channel 2", 1);
	set_name(0X284B, "QK", SN_LOCAL);
	set_name(0X2852, "QJ", SN_LOCAL);
	set_name(0X2858, "QI", SN_LOCAL);
	set_name(0X2861, "QH", SN_LOCAL);
	add_func    (0X2862,0X28A0);
	set_func_flags(0X2862,0x1000);
	set_name(0X2867, "QL", SN_LOCAL);
	set_name(0X2870, "QM", SN_LOCAL);
	set_name(0X2882, "QQ", SN_LOCAL);
	set_name(0X2894, "QR", SN_LOCAL);
	add_func    (0X28A0,0X28BC);
	set_func_flags(0X28A0,0x1000);
	set_name(0X28B6, "QT", SN_LOCAL);
	add_func    (0X28BC,0X2994);
	set_func_flags(0X28BC,0x1000);
	set_func_cmt(0X28BC,	"construct a 5x2 building wit up to 6 tanks in front of it and an anti-aircraft gun", 1);
	set_name(0X28DD, "WE", SN_LOCAL);
	set_name(0X28DF, "QW", SN_LOCAL);
	set_name(0X28F2, "QU", SN_LOCAL);
	set_name(0X28F7, "QV", SN_LOCAL);
	set_name(0X28FB, "RB__BUILDING_ROW_1", SN_LOCAL);
	set_name(0X28FE, "RE__BUILDING_ROW_0", SN_LOCAL);
	set_name(0X2901, "QX__BUILDING_ROW_3", SN_LOCAL);
	set_name(0X290C, "QY__BUILDING_ROW_2", SN_LOCAL);
	set_name(0X2914, "RD", SN_LOCAL);
	set_name(0X291C, "QZ", SN_LOCAL);
	set_name(0X2940, "RA", SN_LOCAL);
	set_name(0X2949, "RC", SN_LOCAL);
	set_name(0X2950, "RF", SN_LOCAL);
	set_name(0X295D, "RG", SN_LOCAL);
	set_name(0X2973, "WF", SN_LOCAL);
	set_name(0X2993, "Q0", SN_LOCAL);
	add_func    (0X2994,0X2A19);
	set_func_flags(0X2994,0x1000);
	set_name(0X299D, "RU", SN_LOCAL);
	set_name(0X299E, "RS", SN_LOCAL);
	set_name(0X29DB, "RV", SN_LOCAL);
	set_name(0X29DE, "RZ", SN_LOCAL);
	set_name(0X29F8, "RW", SN_LOCAL);
	set_name(0X2A03, "RX", SN_LOCAL);
	set_name(0X2A0E, "RY", SN_LOCAL);
	add_func    (0X2A19,0X2A48);
	set_func_flags(0X2A19,0x1000);
	set_name(0X2A54, "RR", SN_LOCAL);
	add_func    (0X2A7C,0X2A8A);
	set_func_flags(0X2A7C,0x1000);
	add_func    (0X2A8A,0X2ACF);
	set_func_flags(0X2A8A,0x1000);
	set_name(0X2A48, "RN", SN_LOCAL);
	set_name(0X2A70, "RP", SN_LOCAL);
	add_func    (0X2ACF,0X2AFB);
	set_func_flags(0X2ACF,0x1000);
	add_func    (0X2AFB,0X2B19);
	set_func_flags(0X2AFB,0);
	set_func_cmt(0X2AFB,	"Fire Gun", 1);
	set_name(0X2B16, "ZW", SN_LOCAL);
	set_name(0X2B3F, "SY", SN_LOCAL);
	set_name(0X2B45, "TA", SN_LOCAL);
	add_func    (0X2B19,0X2B3F);
	set_func_flags(0X2B19,0x1000);
	set_frame_size(0X2B19, 0, 0, 0);
	add_func    (0X2BBF,0X2BDF);
	set_func_flags(0X2BBF,0x1000);
	add_func    (0X2BFC,0X2C23);
	set_func_flags(0X2BFC,0x1000);
	set_name(0X2C0E, "SU", SN_LOCAL);
	set_name(0X2C0F, "ST", SN_LOCAL);
	add_func    (0X2C3E,0X2D4F);
	set_func_flags(0X2C3E,0x1000);
	set_func_cmt(0X2C3E,	"Draw the enemy runway, when visible", 1);
	set_name(0X2C23, "TY", SN_LOCAL);
	set_name(0X2C33, "WI", SN_LOCAL);
	set_name(0X2C46, "XE", SN_LOCAL);
	set_name(0X2C47, "TX", SN_LOCAL);
	set_name(0X2C54, "WX", SN_LOCAL);
	set_name(0X2C63, "UD", SN_LOCAL);
	set_name(0X2C6F, "TZ", SN_LOCAL);
	set_name(0X2C78, "WH", SN_LOCAL);
	set_name(0X2C81, "UA", SN_LOCAL);
	set_name(0X2CA1, "UB", SN_LOCAL);
	set_name(0X2CC0, "UC", SN_LOCAL);
	set_name(0X2CF1, "UJ", SN_LOCAL);
	set_name(0X2CFD, "UK", SN_LOCAL);
	set_name(0X2D09, "UM", SN_LOCAL);
	set_name(0X2D1D, "UN", SN_LOCAL);
	set_name(0X2D27, "H0", SN_LOCAL);
	set_name(0X2D39, "H1", SN_LOCAL);
	set_name(0X2D3B, "H2", SN_LOCAL);
	set_name(0X2D4C, "H4", SN_LOCAL);
	add_func    (0X2D4F,0X2D8B);
	set_func_flags(0X2D4F,0x1000);
	set_name(0X2D59, "TC", SN_LOCAL);
	set_name(0X2D6A, "WW", SN_LOCAL);
	set_name(0X2D76, "TU", SN_LOCAL);
	set_name(0X2D77, "TD", SN_LOCAL);
	set_name(0X2D83, "TE", SN_LOCAL);
	set_name(0X2D88, "TF", SN_LOCAL);
	add_func    (0X2D8B,0X2DA8);
	set_func_flags(0X2D8B,0x1000);
	set_func_cmt(0X2D8B,	"Clear one row of playfield with default character", 1);
	set_name(0X2DA0, "XD", SN_LOCAL);
	set_name(0X2DA2, "TG", SN_LOCAL);
	add_func    (0X2DA8,0X2DEE);
	set_func_flags(0X2DA8,0x1000);
	set_name(0X2DB1, "TM", SN_LOCAL);
	set_name(0X2DC3, "TR", SN_LOCAL);
	set_name(0X2DD0, "TP", SN_LOCAL);
	set_name(0X2DD4, "TQ", SN_LOCAL);
	set_name(0X2DD8, "TO", SN_LOCAL);
	set_name(0X2DDB, "TS", SN_LOCAL);
	add_func    (0X2DEE,0X2E0B);
	set_func_flags(0X2DEE,0x1000);
	set_name(0X2DF7, "TV", SN_LOCAL);
	set_name(0X2E05, "TW", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	set_name(0X2E05, "", SN_LOCAL);
	add_func    (0X2E0B,0X2E42);
	set_func_flags(0X2E0B,0x1000);
	set_name(0X2E2B, ".7", SN_LOCAL);
	add_func    (0X2E42,0X2E5B);
	set_func_flags(0X2E42,0x1000);
	set_name(0X2E56, ".4", SN_LOCAL);
	set_name(0X2E57, ".1", SN_LOCAL);
	add_func    (0X2E5B,0X2E66);
	set_func_flags(0X2E5B,0x1000);
	add_func    (0X2E66,0X2EB1);
	set_func_flags(0X2E66,0x1000);
	set_func_cmt(0X2E66,	"Check line of sight: enemy plane at the same altitude?", 1);
	set_name(0X2E94, ".5", SN_LOCAL);
	set_name(0X2EAE, ".1", SN_LOCAL);
	add_func    (0X2EB1,0X2EC4);
	set_func_flags(0X2EB1,0x1000);
	add_func    (0X2EC4,0X2F2E);
	set_func_flags(0X2EC4,0x1000);
	set_func_cmt(0X2EC4,	"If Player is at the same altitude as the enemey plane, check if that one got hit", 1);
	set_name(0X2ECC, "UT", SN_LOCAL);
	set_name(0X2EE4, "V4", SN_LOCAL);
	set_name(0X2EED, "U6", SN_LOCAL);
	set_name(0X2EFF, ".1", SN_LOCAL);
	set_name(0X2F0A, "VB", SN_LOCAL);
	add_func    (0X2F2E,0X2F85);
	set_func_flags(0X2F2E,0x1000);
	set_name(0X2F33, "US", SN_LOCAL);
	set_name(0X2F44, "UY", SN_LOCAL);
	set_name(0X2F4E, "UW", SN_LOCAL);
	set_name(0X2F50, "UX", SN_LOCAL);
	set_name(0X2F61, "VE", SN_LOCAL);
	set_name(0X2F73, "VD", SN_LOCAL);
	set_name(0X2F79, "UV", SN_LOCAL);
	add_func    (0X2F85,0X2FAA);
	set_func_flags(0X2F85,0x1000);
	set_func_cmt(0X2F85,	"DL IRQ triggered when the control display is reached", 1);
	add_func    (0X2FAA,0X3149);
	set_func_flags(0X2FAA,0x1000);
	set_name(0X3148, "Q9", SN_LOCAL);
	add_func    (0X319B,0X3289);
	set_func_flags(0X319B,0x1000);
	set_func_cmt(0X319B,	"Advance to next row of the level", 1);
	set_name(0X3149, "WY", SN_LOCAL);
	set_name(0X3166, "ADL", SN_LOCAL);
	set_name(0X3169, "XC", SN_LOCAL);
	set_name(0X318B, "YM", SN_LOCAL);
	set_name(0X318E, "U9", SN_LOCAL);
	set_name(0X3191, "WZ", SN_LOCAL);
	set_name(0X3196, "XS", SN_LOCAL);
	set_name(0X31A2, "WN", SN_LOCAL);
	set_name(0X31C7, "U7", SN_LOCAL);
	set_name(0X31F1, "WO", SN_LOCAL);
	set_name(0X31F6, "WP", SN_LOCAL);
	set_name(0X3218, "XB", SN_LOCAL);
	set_name(0X321D, "WQ", SN_LOCAL);
	set_name(0X3226, "WS", SN_LOCAL);
	set_name(0X322B, "WR", SN_LOCAL);
	set_name(0X3246, ".1", SN_LOCAL);
	set_name(0X3252, "WT", SN_LOCAL);
	set_name(0X326C, "U8", SN_LOCAL);
	set_name(0X3271, "WV", SN_LOCAL);
	add_func    (0X3289,0X32E6);
	set_func_flags(0X3289,0x1000);
	set_func_cmt(0X3289,	"Check if Wind Warnings are possible and randomly trigger it.", 1);
	set_name(0X328E, ".1", SN_LOCAL);
	set_name(0X32B7, "ZR", SN_LOCAL);
	set_name(0X32BA, "ZQ", SN_LOCAL);
	set_name(0X32BB, "ZP", SN_LOCAL);
	set_name(0X32C5, "ZS", SN_LOCAL);
	set_name(0X32D3, "ZU", SN_LOCAL);
	set_name(0X32DA, "ZT", SN_LOCAL);
	add_func    (0X32E6,0X335B);
	set_func_flags(0X32E6,0x1000);
	set_name(0X32F0, "YY", SN_LOCAL);
	set_name(0X32F1, "YZ", SN_LOCAL);
	set_name(0X32F7, "ZA", SN_LOCAL);
	set_name(0X3306, "ZB", SN_LOCAL);
	set_name(0X3315, "ZC", SN_LOCAL);
	set_name(0X332B, "ZF", SN_LOCAL);
	set_name(0X333A, "ZG", SN_LOCAL);
	set_name(0X334B, "ZH", SN_LOCAL);
	add_func    (0X335B,0X3369);
	set_func_flags(0X335B,0x1000);
	set_name(0X3361, "ZL", SN_LOCAL);
	add_func    (0X3369,0X33E2);
	set_func_flags(0X3369,0x1000);
	add_func    (0X33E2,0X33F1);
	set_func_flags(0X33E2,0x1000);
	set_name(0X33EC, "YE", SN_LOCAL);
	set_name(0X33ED, "YF", SN_LOCAL);
	add_func    (0X33F1,0X3440);
	set_func_flags(0X33F1,0x1000);
	set_name(0X33FA, "YG", SN_LOCAL);
	set_name(0X3408, "YL", SN_LOCAL);
	set_name(0X3422, "YQ", SN_LOCAL);
	set_name(0X342F, "XO", SN_LOCAL);
	set_name(0X3464, "XK", SN_LOCAL);
	set_name(0X3467, "XQ", SN_LOCAL);
	add_func    (0X3440,0X3464);
	set_func_flags(0X3440,0x1000);
	set_name(0X3443, "XR", SN_LOCAL);
	set_name(0X3460, "YS", SN_LOCAL);
	set_name(0X3463, "YH", SN_LOCAL);
	add_func    (0X34FB,0X3509);
	set_func_flags(0X34FB,0x1000);
	add_func    (0X3509,0X3598);
	set_func_flags(0X3509,0x1000);
	add_func    (0X3598,0X35A6);
	set_func_flags(0X3598,0x1000);
	add_func    (0X35A6,0X35AD);
	set_func_flags(0X35A6,0);
	add_func    (0X35E2,0X35FB);
	set_func_flags(0X35E2,0x1000);
	set_name(0X35F8, "A5", SN_LOCAL);
	add_func    (0X35FB,0X360E);
	set_func_flags(0X35FB,0x1000);
	add_func    (0X360E,0X3641);
	set_func_flags(0X360E,0x1000);
	set_name(0X3614, "B8", SN_LOCAL);
	set_name(0X361A, "B6", SN_LOCAL);
	set_name(0X3623, "B9", SN_LOCAL);
	set_name(0X3640, "C0", SN_LOCAL);
	add_func    (0X3641,0X3671);
	set_func_flags(0X3641,0x1000);
	add_func    (0X3671,0X3738);
	set_func_flags(0X3671,0x1000);
	set_frame_size(0X3671, 0, 0, 0);
	set_name(0X3688, ".1", SN_LOCAL);
	set_name(0X3699, "C4", SN_LOCAL);
	set_name(0X36A4, "C3", SN_LOCAL);
	set_name(0X36AD, "G2", SN_LOCAL);
	set_name(0X36B2, "C6", SN_LOCAL);
	set_name(0X36D3, "C2", SN_LOCAL);
	set_name(0X36DF, "C7", SN_LOCAL);
	set_name(0X36E2, "G6", SN_LOCAL);
	set_name(0X36EB, "C8", SN_LOCAL);
	set_name(0X36F9, "G7", SN_LOCAL);
	set_name(0X36FF, "C9", SN_LOCAL);
	set_name(0X3715, "D2", SN_LOCAL);
	set_name(0X371F, "D1", SN_LOCAL);
	set_name(0X3769, "D5", SN_LOCAL);
	add_func    (0X3738,0X3758);
	set_func_flags(0X3738,0x1000);
	set_func_cmt(0X3738,	"Remove bullet image at Y", 1);
	add_func    (0X3775,0X37AF);
	set_func_flags(0X3775,0x1000);
	set_name(0X3787, "D7", SN_LOCAL);
	set_name(0X3788, "D6", SN_LOCAL);
	set_name(0X3792, ".1", SN_LOCAL);
	set_name(0X37A1, "J4", SN_LOCAL);
	set_name(0X37A3, "J5", SN_LOCAL);
	set_name(0X37A8, "ADH", SN_LOCAL);
	add_func    (0X37AF,0X37B9);
	set_func_flags(0X37AF,0x1000);
	set_name(0X2B5B, "ZV", SN_LOCAL);
	set_name(0X2B5E, "G5", SN_LOCAL);
	set_name(0X2B67, "ZX", SN_LOCAL);
	set_name(0X2B75, "G4", SN_LOCAL);
	set_name(0X2B7B, "SW", SN_LOCAL);
	set_name(0X2B91, "WD", SN_LOCAL);
	set_name(0X2BA6, "SQ", SN_LOCAL);
	set_name(0X2BDF, "SN", SN_LOCAL);
	set_name(0X2BF0, "SS", SN_LOCAL);
	set_name(0X35C6, "A9", SN_LOCAL);
	set_name(0X35C8, "A6", SN_LOCAL);
	set_name(0X35D1, "A4", SN_LOCAL);
	set_name(0X35DA, "G1", SN_LOCAL);
	set_name(0X35DF, "A7", SN_LOCAL);
	set_name(0X37B6, "B4", SN_LOCAL);
	add_func    (0X37B9,0X37EB);
	set_func_flags(0X37B9,0x1000);
	set_name(0X37C0, "B2", SN_LOCAL);
	set_name(0X37CA, "B0", SN_LOCAL);
	set_name(0X37E1, "B1", SN_LOCAL);
	add_func    (0X37EB,0X3934);
	set_func_flags(0X37EB,0x1000);
	set_func_cmt(0X37EB,	"Draw the runway on the map", 1);
	set_name(0X37F0, "EV", SN_LOCAL);
	set_name(0X3802, "MC", SN_LOCAL);
	set_name(0X380F, "PE", SN_LOCAL);
	set_name(0X381A, "EW", SN_LOCAL);
	set_name(0X381B, "LY", SN_LOCAL);
	set_name(0X3840, "R3", SN_LOCAL);
	set_name(0X3856, "MD", SN_LOCAL);
	set_name(0X386A, "LZ", SN_LOCAL);
	set_name(0X3873, "MA", SN_LOCAL);
	set_name(0X3892, "EX", SN_LOCAL);
	set_name(0X3897, "EY", SN_LOCAL);
	set_name(0X38A5, "SH", SN_LOCAL);
	set_name(0X38C6, "NB", SN_LOCAL);
	set_name(0X38D1, "EZ", SN_LOCAL);
	set_name(0X38D7, "FA", SN_LOCAL);
	set_name(0X390A, "FI", SN_LOCAL);
	set_name(0X3911, "FB", SN_LOCAL);
	set_name(0X391B, "FC", SN_LOCAL);
	set_name(0X391E, "FD", SN_LOCAL);
	set_name(0X3921, "FF", SN_LOCAL);
	set_name(0X3924, "FE", SN_LOCAL);
	set_name(0X3927, "V2", SN_LOCAL);
	add_func    (0X3934,0X3948);
	set_func_flags(0X3934,0x1000);
	set_func_cmt(0X3934,	"Flash background of control display to signal damage", 1);
	set_name(0X3939, "D8", SN_LOCAL);
	set_name(0X3942, "D9", SN_LOCAL);
	set_name(0X3944, "E0", SN_LOCAL);
	add_func    (0X3948,0X3A06);
	set_func_flags(0X3948,0x1000);
	set_name(0X3954, "M0", SN_LOCAL);
	set_name(0X3955, "L9", SN_LOCAL);
	set_name(0X396B, "M8", SN_LOCAL);
	set_name(0X397D, "M1", SN_LOCAL);
	set_name(0X3980, "N0", SN_LOCAL);
	set_name(0X3998, "L8", SN_LOCAL);
	set_name(0X39A0, "M6", SN_LOCAL);
	set_name(0X39B6, "M7", SN_LOCAL);
	set_name(0X39D6, "N2", SN_LOCAL);
	set_name(0X39DF, "M5", SN_LOCAL);
	set_name(0X39F6, "N1", SN_LOCAL);
	add_func    (0X3A06,0X3AA2);
	set_func_flags(0X3A06,0x1000);
	set_name(0X3A15, "L1", SN_LOCAL);
	set_name(0X3A16, "K3", SN_LOCAL);
	set_name(0X3A43, "K6", SN_LOCAL);
	set_name(0X3A50, "K2", SN_LOCAL);
	set_name(0X3A6D, "K9", SN_LOCAL);
	set_name(0X3A7B, "K7", SN_LOCAL);
	set_name(0X3A92, "L0", SN_LOCAL);
	add_func    (0X3AA2,0X3AD7);
	set_func_flags(0X3AA2,0x1000);
	set_func_cmt(0X3AA2,	"Draw a car in the middle of a vertial/diagnal road", 1);
	set_name(0X3AA9, "J8", SN_LOCAL);
	set_name(0X3AAA, "J6", SN_LOCAL);
	set_name(0X3ACD, "J7", SN_LOCAL);
	add_func    (0X3AD7,0X3B85);
	set_func_flags(0X3AD7,0x1000);
	set_func_cmt(0X3AD7,	"Draw a moving ship", 1);
	set_name(0X3AE0, "I3", SN_LOCAL);
	set_name(0X3B11, "I5", SN_LOCAL);
	set_name(0X3B2F, "P6", SN_LOCAL);
	set_name(0X3B34, "P7", SN_LOCAL);
	set_name(0X3B43, "I6", SN_LOCAL);
	set_name(0X3B46, "I4", SN_LOCAL);
	set_name(0X3B47, "I2", SN_LOCAL);
	set_name(0X3B63, "I8", SN_LOCAL);
	set_name(0X3B70, "I7", SN_LOCAL);
	set_name(0X3B7C, "J0", SN_LOCAL);
	add_func    (0X3B85,0X3BA6);
	set_func_flags(0X3B85,0x1000);
	set_func_cmt(0X3B85,	"Move a movable ship: Y+2, X-1", 1);
	set_name(0X3B87, "I9", SN_LOCAL);
	add_func    (0X3BA6,0X3BC5);
	set_func_flags(0X3BA6,0x1000);
	set_func_cmt(0X3BA6,	"Fire movable ship gun", 1);
	set_name(0X3BAB, "J2", SN_LOCAL);
	set_name(0X3BAC, "J1", SN_LOCAL);
	add_func    (0X3BC5,0X3BD3);
	set_func_flags(0X3BC5,0);
	set_name(0X3BCA, "E1", SN_LOCAL);
	set_name(0X3BD9, "E9", SN_LOCAL);
	add_func    (0X3CBB,0X3CE5);
	set_func_flags(0X3CBB,0x1000);
	set_name(0X3C06, ".1", SN_LOCAL);
	set_name(0X3C2E, "E4", SN_LOCAL);
	set_name(0X3C48, ".1_0", SN_LOCAL);
	set_name(0X3C5C, ".2", SN_LOCAL);
	set_name(0X3C68, "F3", SN_LOCAL);
	set_name(0X3C73, "F4", SN_LOCAL);
	set_name(0X3C79, "F5", SN_LOCAL);
	set_name(0X3C86, "F0", SN_LOCAL);
	set_name(0X3C8C, "E8", SN_LOCAL);
	set_name(0X3C9B, "E6", SN_LOCAL);
	set_name(0X3C9F, "E7", SN_LOCAL);
	set_name(0X3CB3, "TH", SN_LOCAL);
	set_name(0X3CB5, "F2", SN_LOCAL);
	set_name(0X3CC4, "TI", SN_LOCAL);
	set_name(0X3CDF, "NI", SN_LOCAL);
	set_name(0X3CE2, "NO", SN_LOCAL);
	add_func    (0X3CE5,0X3CF2);
	set_func_flags(0X3CE5,0x1000);
	add_func    (0X3CF2,0X3D12);
	set_func_flags(0X3CF2,0x1000);
	set_func_cmt(0X3CF2,	"Flicker PCOLR2", 1);
	set_name(0X3CFE, ".1", SN_LOCAL);
	set_name(0X3D0C, "V6", SN_LOCAL);
	set_name(0X3D0E, "V5", SN_LOCAL);
	add_func    (0X3D12,0X3D1D);
	set_func_flags(0X3D12,0x1000);
	set_func_cmt(0X3D12,	"Select previous tile row", 1);
	add_func    (0X3D1D,0X3D34);
	set_func_flags(0X3D1D,0x1000);
	set_func_cmt(0X3D1D,	"Select next tile row (mark, if there is none)", 1);
	set_name(0X3D2F, ".1", SN_LOCAL);
	add_func    (0X3D34,0X3D53);
	set_func_flags(0X3D34,0x1000);
	set_name(0X3D43, "Z2", SN_LOCAL);
	add_func    (0X3D53,0X3D72);
	set_func_flags(0X3D53,0x1000);
	set_func_cmt(0X3D53,	"HIT: fixed boat top-right", 1);
	set_name(0X3D62, "Y4", SN_LOCAL);
	add_func    (0X3D72,0X3D86);
	set_func_flags(0X3D72,0x1000);
	set_func_cmt(0X3D72,	"HIT: empty piece of road at high speed", 1);
	set_name(0X3D81, ".1", SN_LOCAL);
	add_func    (0X3D86,0X3E4C);
	set_func_flags(0X3D86,0x1000);
	set_func_cmt(0X3D86,	"Check if a tile based target in A was hit", 1);
	set_name(0X3DA8, ".9", SN_LOCAL);
	set_name(0X3DB2, "T6", SN_LOCAL);
	set_name(0X3DBC, "T8", SN_LOCAL);
	set_name(0X3DC6, "U0", SN_LOCAL);
	set_name(0X3DD0, ".1", SN_LOCAL);
	set_name(0X3DDB, "W4", SN_LOCAL);
	set_name(0X3DEE, "U1", SN_LOCAL);
	set_name(0X3DFB, "W7", SN_LOCAL);
	set_name(0X3E0E, ".1_0", SN_LOCAL);
	set_name(0X3E1B, "T9", SN_LOCAL);
	set_name(0X3E1E, "W0", SN_LOCAL);
	set_name(0X3E36, "U5", SN_LOCAL);
	set_name(0X3E3E, ".1_", SN_LOCAL);
	set_name(0X3E46, "V9", SN_LOCAL);
	add_func    (0X3E4C,0X3E8D);
	set_func_flags(0X3E4C,0x1000);
	set_name(0X3E51, "S8", SN_LOCAL);
	set_name(0X3E63, "T0", SN_LOCAL);
	set_name(0X3E65, "T1", SN_LOCAL);
	set_name(0X3E79, "S9", SN_LOCAL);
	set_name(0X3E81, "T3", SN_LOCAL);
	set_name(0X3E8A, "T2", SN_LOCAL);
	add_func    (0X3E8D,0X3F64);
	set_func_flags(0X3E8D,0x1000);
	set_name(0X3EA6, "S6", SN_LOCAL);
	set_name(0X3EDE, "S5", SN_LOCAL);
	set_name(0X3EE3, "R8", SN_LOCAL);
	set_name(0X3EF4, "S7", SN_LOCAL);
	set_name(0X3F05, "V3", SN_LOCAL);
	set_name(0X3F0E, "R7", SN_LOCAL);
	set_name(0X3F1D, "R5", SN_LOCAL);
	set_name(0X3F2F, "S0", SN_LOCAL);
	set_name(0X3F31, "S1", SN_LOCAL);
	set_name(0X3F34, "S4", SN_LOCAL);
	set_name(0X3F43, "S2", SN_LOCAL);
	set_name(0X3F45, "S3", SN_LOCAL);
	set_name(0X3F5D, "R9", SN_LOCAL);
	add_func    (0X3F64,0X3F81);
	set_func_flags(0X3F64,0x1000);
	set_name(0X3F70, "Q1", SN_LOCAL);
	add_func    (0X3F81,0X405B);
	set_func_flags(0X3F81,0x1000);
	set_frame_size(0X3F81, 0, 0, 0);
	set_name(0X3F90, "N9", SN_LOCAL);
	set_name(0X3F93, "O0", SN_LOCAL);
	set_name(0X3FB6, "O3", SN_LOCAL);
	set_name(0X3FBA, "O7", SN_LOCAL);
	set_name(0X3FC5, "O2", SN_LOCAL);
	set_name(0X3FCB, "Q5", SN_LOCAL);
	set_name(0X3FCF, "Q7", SN_LOCAL);
	set_name(0X3FDD, "R2", SN_LOCAL);
	set_name(0X3FDE, "Q6", SN_LOCAL);
	set_name(0X4000, "Q8", SN_LOCAL);
	set_name(0X4008, "Q2", SN_LOCAL);
	set_name(0X4011, "Z9", SN_LOCAL);
	set_name(0X401E, "O6", SN_LOCAL);
	set_name(0X4033, "O9", SN_LOCAL);
	set_name(0X4055, "Q4", SN_LOCAL);
	add_func    (0X405B,0X407F);
	set_func_flags(0X405B,0x1000);
	set_func_cmt(0X405B,	"Fix one broken part per call (F, B, M, G)", 1);
	add_func    (0X407F,0X40BA);
	set_func_flags(0X407F,0x1000);
	set_name(0X4086, ".2", SN_LOCAL);
	set_name(0X4087, ".1", SN_LOCAL);
	set_name(0X40B0, ".4", SN_LOCAL);
	set_name(0X40B7, ".3", SN_LOCAL);
	add_func    (0X40BA,0X4180);
	set_func_flags(0X40BA,0x1000);
	set_name(0X40C4, ".12", SN_LOCAL);
	set_name(0X40C5, ".1", SN_LOCAL);
	set_name(0X40ED, ".8", SN_LOCAL);
	set_name(0X40F6, ".9", SN_LOCAL);
	set_name(0X40FC, ".10", SN_LOCAL);
	set_name(0X4113, ".4", SN_LOCAL);
	set_name(0X412D, ".3", SN_LOCAL);
	set_name(0X412E, ".2", SN_LOCAL);
	set_name(0X414E, ".7", SN_LOCAL);
	set_name(0X4156, ".5", SN_LOCAL);
	set_name(0X4158, ".6", SN_LOCAL);
	add_func    (0X4180,0X4190);
	set_func_flags(0X4180,0x1000);
	set_func_cmt(0X4180,	"Score: add 10", 1);
	set_name(0X418B, ".1", SN_LOCAL);
	add_func    (0X4190,0X41BE);
	set_func_flags(0X4190,0x1000);
	set_func_cmt(0X4190,	"Score: add 100", 1);
	set_name(0X419B, ".1", SN_LOCAL);
	set_name(0X41AB, "S10000__SCORE_ADD_10000", SN_LOCAL);
	set_name(0X41BA, ".1_", SN_LOCAL);
	add_func    (0X41BE,0X41D5);
	set_func_flags(0X41BE,0x1000);
	set_func_cmt(0X41BE,	"Score: add 500", 1);
	set_name(0X41CC, ".1", SN_LOCAL);
	add_func    (0X41D5,0X41EC);
	set_func_flags(0X41D5,0x1000);
	set_func_cmt(0X41D5,	"Score: add 50", 1);
	add_func    (0X41EC,0X41FA);
	set_func_flags(0X41EC,0x1000);
	set_func_cmt(0X41EC,	"Score: add 30", 1);
	add_func    (0X41FA,0X4221);
	set_func_flags(0X41FA,0x1000);
	set_name(0X4203, ".1", SN_LOCAL);
	set_name(0X420A, ".4", SN_LOCAL);
	set_name(0X420B, ".2", SN_LOCAL);
	set_name(0X4219, ".3", SN_LOCAL);
	add_func    (0X4221,0X423D);
	set_func_flags(0X4221,0x1000);
	set_name(0X4229, ".1", SN_LOCAL);
	set_name(0X4232, ".2", SN_LOCAL);
	add_func    (0X423D,0X427F);
	set_func_flags(0X423D,0x1000);
	set_func_cmt(0X423D,	"Flash the screen colors after e.g. a crash", 1);
	set_name(0X4243, ".1", SN_LOCAL);
	set_name(0X4268, ".3", SN_LOCAL);
	set_name(0X4273, ".2", SN_LOCAL);
	set_name(0X4275, ".4", SN_LOCAL);
	add_func    (0X427F,0X429A);
	set_func_flags(0X427F,0x1000);
	set_func_cmt(0X427F,	"Save current color palette, because we start the flashing animation", 1);
	set_name(0X4290, "ADG", SN_LOCAL);
	set_name(0X4299, "ADF", SN_LOCAL);
	add_func    (0X429A,0X42A0);
	set_func_flags(0X429A,0x1000);
	add_func    (0X42A0,0X4334);
	set_func_flags(0X42A0,0x1000);
	set_name(0X42A2, ".1", SN_LOCAL);
	set_name(0X42B7, ".9", SN_LOCAL);
	set_name(0X42B9, ".7", SN_LOCAL);
	set_name(0X42CB, ".11", SN_LOCAL);
	set_name(0X42D6, ".12", SN_LOCAL);
	set_name(0X42E7, ".13", SN_LOCAL);
	set_name(0X42F6, ".78", SN_LOCAL);
	set_name(0X42F7, ".2", SN_LOCAL);
	set_name(0X431B, ".3", SN_LOCAL);
	set_name(0X431E, ".77", SN_LOCAL);
	set_name(0X4321, ".8", SN_LOCAL);
	set_name(0X432A, ".4", SN_LOCAL);
	add_func    (0X4334,0X4382);
	set_func_flags(0X4334,0x1000);
	set_name(0X433D, ".1", SN_LOCAL);
	set_name(0X435D, ".4", SN_LOCAL);
	set_name(0X4363, ".2", SN_LOCAL);
	set_name(0X436F, ".5", SN_LOCAL);
	add_func    (0X4382,0X43F7);
	set_func_flags(0X4382,0x1000);
	set_func_cmt(0X4382,	"2x2 water explosion", 1);
	set_name(0X43A7, ".2", SN_LOCAL);
	set_name(0X43D0, "X3", SN_LOCAL);
	set_name(0X43DE, "X4", SN_LOCAL);
	set_name(0X43E4, ".5", SN_LOCAL);
	add_func    (0X43F7,0X4400);
	set_func_flags(0X43F7,0x1000);
	set_func_cmt(0X43F7,	"Check if previous tile row is still visible, exit if not", 1);
	set_name(0X43FF, ".1", SN_LOCAL);
	add_func    (0X443B,0X4451);
	set_func_flags(0X443B,0x1000);
	set_func_cmt(0X443B,	"Player collision with enemy?", 1);
	set_name(0X4442, ".2", SN_LOCAL);
	set_name(0X4443, ".1", SN_LOCAL);
	add_func    (0X4451,0X44B4);
	set_func_flags(0X4451,0x1000);
	set_func_cmt(0X4451,	"Check if the plane is too low to the ground. Warn via control display color and sound effect.", 1);
	set_name(0X445E, ".5", SN_LOCAL);
	set_name(0X446B, ".8", SN_LOCAL);
	set_name(0X4470, ".3", SN_LOCAL);
	set_name(0X447D, ".12", SN_LOCAL);
	set_name(0X447F, ".4", SN_LOCAL);
	set_name(0X4482, ".2", SN_LOCAL);
	set_name(0X4483, ".6", SN_LOCAL);
	set_name(0X44AD, ".10", SN_LOCAL);
	add_func    (0X44B4,0X452A);
	set_func_flags(0X44B4,0x1000);
	set_func_cmt(0X44B4,	"Shoot plane bullet. Check if something was hit.", 1);
	set_name(0X44BC, ".2", SN_LOCAL);
	set_name(0X44BD, ".1", SN_LOCAL);
	set_name(0X44F4, ".5", SN_LOCAL);
	set_name(0X4510, ".8", SN_LOCAL);
	set_name(0X4519, ".10", SN_LOCAL);
	set_name(0X4521, ".6", SN_LOCAL);
	set_name(0X4522, ".7", SN_LOCAL);
	add_func    (0X452A,0X4544);
	set_func_flags(0X452A,0x1000);
	add_func    (0X4544,0X4569);
	set_func_flags(0X4544,0x1000);
	set_func_cmt(0X4544,	"Convert a X/Y position into an address to screen memory", 1);
	add_func    (0X4569,0X45D5);
	set_func_flags(0X4569,0x1000);
	add_func    (0X45D5,0X461D);
	set_func_flags(0X45D5,0x1000);
	set_name(0X45DE, ".1", SN_LOCAL);
	set_name(0X45ED, ".2", SN_LOCAL);
	set_name(0X45EF, ".3", SN_LOCAL);
	set_name(0X4609, ".4", SN_LOCAL);
	set_name(0X4616, ".5", SN_LOCAL);
	set_name(0X461C, ".6", SN_LOCAL);
	add_func    (0X461D,0X4681);
	set_func_flags(0X461D,0x1000);
	set_name(0X4627, ".2", SN_LOCAL);
	set_name(0X4628, ".1", SN_LOCAL);
	set_name(0X4646, ".3", SN_LOCAL);
	set_name(0X464B, ".4", SN_LOCAL);
	set_name(0X464D, ".5", SN_LOCAL);
	set_name(0X4658, ".6", SN_LOCAL);
	add_func    (0X4681,0X46A5);
	set_func_flags(0X4681,0x1000);
	set_func_cmt(0X4681,	"Skyscraper explosition via tile animation", 1);
	set_name(0X4691, ".2", SN_LOCAL);
	set_name(0X469B, ".1", SN_LOCAL);
	add_func    (0X46A5,0X46C4);
	set_func_flags(0X46A5,0x1000);
	add_func    (0X46C4,0X4706);
	set_func_flags(0X46C4,0x1000);
	set_func_cmt(0X46C4,	"Final target phase: define skyscraper buildings", 1);
	set_name(0X46C6, ".1", SN_LOCAL);
	add_func    (0X4706,0X472A);
	set_func_flags(0X4706,0x1000);
	set_func_cmt(0X4706,	"Buildings explosion via tile animation", 1);
	set_name(0X4716, ".2", SN_LOCAL);
	set_name(0X4720, ".1", SN_LOCAL);
	add_func    (0X472A,0X4740);
	set_func_flags(0X472A,0x1000);
	add_func    (0X4740,0X4770);
	set_func_flags(0X4740,0x1000);
	set_name(0X4742, ".1", SN_LOCAL);
	add_func    (0X4770,0X4786);
	set_func_flags(0X4770,0x1000);
	set_name(0X4775, ".1", SN_LOCAL);
	set_name(0X4780, ".2", SN_LOCAL);
	set_name(0X4782, ".3", SN_LOCAL);
	add_func    (0X4786,0X4819);
	set_func_flags(0X4786,0x1000);
	set_name(0X4790, ".3", SN_LOCAL);
	set_name(0X4791, ".1", SN_LOCAL);
	set_name(0X47CC, ".5", SN_LOCAL);
	set_name(0X47DF, ".4", SN_LOCAL);
	set_name(0X47E9, ".6", SN_LOCAL);
	set_name(0X47F9, ".2", SN_LOCAL);
	add_func    (0X4819,0X48C1);
	set_func_flags(0X4819,0x1000);
	set_name(0X4838, ".33", SN_LOCAL);
	set_name(0X4853, ".3", SN_LOCAL);
	set_name(0X4854, ".2", SN_LOCAL);
	set_name(0X4867, ".82", SN_LOCAL);
	set_name(0X4869, ".4_", SN_LOCAL);
	set_name(0X487E, ".5", SN_LOCAL);
	set_name(0X4887, "AFS", SN_LOCAL);
	set_name(0X48A0, ".3_", SN_LOCAL);
	set_name(0X48B1, ".8", SN_LOCAL);
	set_name(0X48B2, ".1", SN_LOCAL);
	set_name(0X48BE, ".4", SN_LOCAL);
	add_func    (0X48C1,0X48D1);
	set_func_flags(0X48C1,0x1000);
	set_name(0X48C7, ".1", SN_LOCAL);
	add_func    (0X48D1,0X48DC);
	set_func_flags(0X48D1,0x1000);
	add_func    (0X48DC,0X48F0);
	set_func_flags(0X48DC,0x1000);
	set_func_cmt(0X48DC,	"2x1 tile explosion in water", 1);
	set_name(0X48E8, ".1", SN_LOCAL);
	set_name(0X48EA, ".2", SN_LOCAL);
	add_func    (0X48F0,0X4916);
	set_func_flags(0X48F0,0x1000);
	set_name(0X48F4, ".2", SN_LOCAL);
	set_name(0X48F5, ".1", SN_LOCAL);
	set_name(0X4908, ".3", SN_LOCAL);
	add_func    (0X4916,0X492A);
	set_func_flags(0X4916,0x1000);
	set_func_cmt(0X4916,	"2x1 tile explosion wall", 1);
	add_func    (0X492A,0X494D);
	set_func_flags(0X492A,0x1000);
	set_func_cmt(0X492A,	"Airport hangar explosion via tile animation", 1);
	set_name(0X4939, ".2", SN_LOCAL);
	set_name(0X4943, ".1", SN_LOCAL);
	add_func    (0X494D,0X4975);
	set_func_flags(0X494D,0x1000);
	set_func_cmt(0X494D,	"Set line X of the the hangar font characters", 1);
	add_func    (0X4975,0X498C);
	set_func_flags(0X4975,0x1000);
	set_func_cmt(0X4975,	"Define Hangar – restore the font characters for the hangar", 1);
	add_func    (0X498C,0X49A1);
	set_func_flags(0X498C,0x1000);
	set_func_cmt(0X498C,	"Count individual button presses during a landing", 1);
	set_name(0X4994, ".2", SN_LOCAL);
	set_name(0X4995, ".1", SN_LOCAL);
	add_func    (0X49A1,0X49AD);
	set_func_flags(0X49A1,0x1000);
	set_func_cmt(0X49A1,	"Restore anti-airgraft gun battery graphics at character $31", 1);
	set_name(0X49A3, ".1", SN_LOCAL);
	add_func    (0X49AD,0X49F9);
	set_func_flags(0X49AD,0x1000);
	set_name(0X49BD, ".2", SN_LOCAL);
	set_name(0X49BE, ".3", SN_LOCAL);
	set_name(0X49C4, ".5", SN_LOCAL);
	set_name(0X49CF, ".1", SN_LOCAL);
	set_name(0X49EE, ".4", SN_LOCAL);
	add_func    (0X49FC,0X4A73);
	set_func_flags(0X49FC,0x1000);
	set_name(0X4400, "TB", SN_LOCAL);
	set_name(0X49F9, "ADC", SN_LOCAL);
	set_name(0X4A06, ".7", SN_LOCAL);
	set_name(0X4A07, ".1", SN_LOCAL);
	set_name(0X4A20, ".3", SN_LOCAL);
	set_name(0X4A25, ".2", SN_LOCAL);
	set_name(0X4A4C, ".5", SN_LOCAL);
	set_name(0X4A61, ".6", SN_LOCAL);
	set_name(0X4A68, ".4", SN_LOCAL);
	add_func    (0X4A73,0X4AA2);
	set_func_flags(0X4A73,0x1000);
	set_func_cmt(0X4A73,	"Play gound sound, if enabled", 1);
	set_name(0X4A79, ".1", SN_LOCAL);
	set_name(0X4A8E, ".4", SN_LOCAL);
	set_name(0X4A94, ".3", SN_LOCAL);
	set_name(0X4A9C, ".2", SN_LOCAL);
	add_func    (0X4AA2,0X4AC8);
	set_func_flags(0X4AA2,0x1000);
	set_func_cmt(0X4AA2,	"Increment Speed", 1);
	set_name(0X4AC7, ".2", SN_LOCAL);
	add_func    (0X4AC8,0X4AD3);
	set_func_flags(0X4AC8,0x1000);
	set_func_cmt(0X4AC8,	"Display List IRQ during the menu", 1);
	add_func    (0X4AD3,0X4B02);
	set_func_flags(0X4AD3,0x1000);
	set_func_cmt(0X4AD3,	"Read score from screen memory digits (range: 000-199 in tenths)", 1);
	set_name(0X4AFA, ".2", SN_LOCAL);
	set_name(0X4B01, ".3", SN_LOCAL);
	add_func    (0X4B12,0X4BBD);
	set_func_flags(0X4B12,0x1000);
	set_func_cmt(0X4B12,	"Display the rank based on difficulty and score", 1);
	set_name(0X4B02, "WORST", SN_LOCAL);
	set_name(0X4B09, "WORST1", SN_LOCAL);
	set_name(0X4B0E, "AIB", SN_LOCAL);
	set_name(0X4B32, ".30", SN_LOCAL);
	set_name(0X4B80, ".2", SN_LOCAL);
	set_name(0X4B84, ".1", SN_LOCAL);
	set_name(0X4B97, ".9", SN_LOCAL);
	set_name(0X4B9E, ".10", SN_LOCAL);
	set_name(0X4BA5, ".8", SN_LOCAL);
	set_name(0X4BA9, ".7", SN_LOCAL);
	set_name(0X4BAD, ".6", SN_LOCAL);
	set_name(0X4BB1, ".5", SN_LOCAL);
	set_name(0X4BB5, ".4", SN_LOCAL);
	set_name(0X4BB9, ".3", SN_LOCAL);
	add_func    (0X4BBD,0X4BD4);
	set_func_flags(0X4BBD,0x1000);
	set_func_cmt(0X4BBD,	"Print \"BLUE MAX\" to screen", 1);
	set_name(0X4BBF, ".1", SN_LOCAL);
	add_func    (0X4BD4,0X4BE2);
	set_func_flags(0X4BD4,0x1000);
	set_func_cmt(0X4BD4,	"Print \"RANK: CLASS\" to screen", 1);
	set_name(0X4BD6, ".1", SN_LOCAL);
	add_func    (0X4BE2,0X4BEE);
	set_func_flags(0X4BE2,0x1000);
	set_func_cmt(0X4BE2,	"Print \"SQUADRON LEADER\" to screen", 1);
	set_name(0X4BE4, ".1", SN_LOCAL);
	add_func    (0X4BEE,0X4BFC);
	set_func_flags(0X4BEE,0x1000);
	set_func_cmt(0X4BEE,	"Erase rank text lines", 1);
	set_name(0X4BF2, ".1", SN_LOCAL);
	add_func    (0X4BFC,0X4CB0);
	set_func_flags(0X4BFC,0x1000);
	set_func_cmt(0X4BFC,	"Print Rank Class on screen", 1);
	set_name(0X4C01, ".3", SN_LOCAL);
	set_name(0X4C22, ".2", SN_LOCAL);
	set_name(0X4C2C, ".88", SN_LOCAL);
	set_name(0X4C3D, ".4", SN_LOCAL);
	set_name(0X4C43, ".1", SN_LOCAL);
	set_name(0X4C6B, ".5", SN_LOCAL);
	set_name(0X4C70, ".6", SN_LOCAL);
	set_name(0X4C75, ".7", SN_LOCAL);
	set_name(0X4C7A, ".8", SN_LOCAL);
	set_name(0X4C7F, ".9", SN_LOCAL);
	set_name(0X4C84, ".10", SN_LOCAL);
	set_name(0X4C89, ".11", SN_LOCAL);
	set_name(0X4C8C, "ACDT", SN_LOCAL);
	set_name(0X4C8E, ".1_0", SN_LOCAL);
	set_name(0X4C98, "RSW", SN_LOCAL);
	set_name(0X4C9A, ".1_1", SN_LOCAL);
	set_name(0X4CA6, ".1_2", SN_LOCAL);
	add_func    (0X4CB0,0X4CB4);
	set_func_flags(0X4CB0,0x1000);
	set_func_cmt(0X4CB0,	"Print \"1\" for class to screen", 1);
	add_func    (0X4CB4,0X4CB8);
	set_func_flags(0X4CB4,0x1000);
	set_func_cmt(0X4CB4,	"Print \"2\" for class to screen", 1);
	add_func    (0X4CB8,0X4CBC);
	set_func_flags(0X4CB8,0x1000);
	set_func_cmt(0X4CB8,	"Print \"3\" for class to screen", 1);
	add_func    (0X4CBC,0X4CC2);
	set_func_flags(0X4CBC,0x1000);
	set_func_cmt(0X4CBC,	"Print \"4\" for class to screen", 1);
	add_func    (0X4CC2,0X4CDB);
	set_func_flags(0X4CC2,0x1000);
	set_func_cmt(0X4CC2,	"Clear Player-Missile Graphics", 1);
	set_name(0X4CCE, ".1", SN_LOCAL);
	set_name(0X4CD0, ".2", SN_LOCAL);
	add_func    (0X4CDB,0X4CEA);
	set_func_flags(0X4CDB,0x1000);
	set_func_cmt(0X4CDB,	"Reset deferred vertial blank IRQ", 1);
	add_func    (0X4CEA,0X4CF9);
	set_func_flags(0X4CEA,0x1000);
	set_func_cmt(0X4CEA,	"Sound: stop all audio output", 1);
	add_func    (0X4CF9,0X4DD8);
	set_func_flags(0X4CF9,0x1000);
	set_func_cmt(0X4CF9,	"Console for option selection and to start the game", 1);
	set_name(0X4D05, ".1", SN_LOCAL);
	set_name(0X4D1A, ".5", SN_LOCAL);
	set_name(0X4D3A, ".2", SN_LOCAL);
	set_name(0X4D45, ".6", SN_LOCAL);
	set_name(0X4D83, ".95", SN_LOCAL);
	set_name(0X4DA2, ".7", SN_LOCAL);
	set_name(0X4DA8, ".14", SN_LOCAL);
	set_name(0X4DAB, ".8", SN_LOCAL);
	set_name(0X4DBA, ".9", SN_LOCAL);
	set_name(0X4DBD, ".10", SN_LOCAL);
	set_name(0X4DCA, ".11", SN_LOCAL);
	set_name(0X4DCD, ".12", SN_LOCAL);
	set_name(0X4DD2, ".13", SN_LOCAL);
	add_func    (0X4DD8,0X4DE2);
	set_func_flags(0X4DD8,0x1000);
	set_func_cmt(0X4DD8,	"Print \"NOVICE      \" to screen", 1);
	add_func    (0X4DE2,0X4DEC);
	set_func_flags(0X4DE2,0x1000);
	set_func_cmt(0X4DE2,	"Print \"ADVANCED    \" to screen", 1);
	add_func    (0X4DEC,0X4DF6);
	set_func_flags(0X4DEC,0x1000);
	set_func_cmt(0X4DEC,	"Print \"INTERMEDIATE\" to screen", 1);
	add_func    (0X4DF6,0X4E00);
	set_func_flags(0X4DF6,0x1000);
	set_func_cmt(0X4DF6,	"Print \"NORMAL CTRL \" to screen", 1);
	add_func    (0X4E00,0X4E0A);
	set_func_flags(0X4E00,0x1000);
	set_func_cmt(0X4E00,	"Print \"REVERSED CTRL\" to screen", 1);
	add_func    (0X4E0A,0X4E14);
	set_func_flags(0X4E0A,0x1000);
	set_func_cmt(0X4E0A,	"Print \"NO GRAVITY\" to screen", 1);
	add_func    (0X4E14,0X4E1E);
	set_func_flags(0X4E14,0x1000);
	set_func_cmt(0X4E14,	"Print \"GRAVITY   \" to screen", 1);
	add_func    (0X4E1E,0X4ECE);
	set_func_flags(0X4E1E,0x1000);
	set_func_cmt(0X4E1E,	"Check for keys during the options menu", 1);
	set_name(0X4E27, ".1", SN_LOCAL);
	set_name(0X4E37, ".3", SN_LOCAL);
	set_name(0X4E48, ".2", SN_LOCAL);
	set_name(0X4E5F, ".4", SN_LOCAL);
	set_name(0X4E6D, ".5", SN_LOCAL);
	set_name(0X4E7B, ".6", SN_LOCAL);
	set_name(0X4E91, ".9", SN_LOCAL);
	set_name(0X4E97, ".7", SN_LOCAL);
	set_name(0X4EAA, ".10", SN_LOCAL);
	set_name(0X4EB0, ".15", SN_LOCAL);
	set_name(0X4EB6, ".8", SN_LOCAL);
	set_name(0X4ECB, ".12", SN_LOCAL);
	add_func    (0X4ECE,0X4EE6);
	set_func_flags(0X4ECE,0x1000);
	set_func_cmt(0X4ECE,	"Demo Bomb release", 1);
	set_name(0X4EE0, ".1", SN_LOCAL);
	add_func    (0X4EE6,0X4F0F);
	set_func_flags(0X4EE6,0x1000);
	set_func_cmt(0X4EE6,	"Get Demo Bomb Release", 1);
	set_name(0X4EEF, ".1", SN_LOCAL);
	set_name(0X4EFA, ".9", SN_LOCAL);
	set_name(0X4F04, ".2", SN_LOCAL);
	set_name(0X4F0C, ".3", SN_LOCAL);
	add_func    (0X4F0F,0X4F74);
	set_func_flags(0X4F0F,0x1000);
	set_func_cmt(0X4F0F,	"Get Demo Joystick Movement", 1);
	set_name(0X4F23, ".2", SN_LOCAL);
	set_name(0X4F3A, ".15", SN_LOCAL);
	set_name(0X4F3F, ".10", SN_LOCAL);
	set_name(0X4F47, ".6", SN_LOCAL);
	set_name(0X4F4D, ".3", SN_LOCAL);
	set_name(0X4F58, ".31", SN_LOCAL);
	set_name(0X4F61, ".5", SN_LOCAL);
	set_name(0X4F6E, ".32", SN_LOCAL);
	add_func    (0X4F74,0X4F83);
	set_func_flags(0X4F74,0x1000);
	set_func_cmt(0X4F74,	"Demo: Pulsate \"BLUE MAX\" in blue", 1);
	set_name(0X4F82, ".1", SN_LOCAL);
	add_func    (0X4F83,0X4F98);
	set_func_flags(0X4F83,0x1000);
	set_func_cmt(0X4F83,	"Demo: plane take-off at speed 100", 1);
	set_name(0X4F97, ".1", SN_LOCAL);
	add_func    (0X4F98,0X4FD1);
	set_func_flags(0X4F98,0x1000);
	set_func_cmt(0X4F98,	"Sound: Start playing the title music", 1);
	set_name(0X4F9A, ".0", SN_LOCAL);
	add_func    (0X4FD1,0X4FFF);
	set_func_flags(0X4FD1,0x1000);
	set_func_cmt(0X4FD1,	"Sound: Playback Interrupt via Timer 1", 1);
	set_name(0X4FE7, ".2", SN_LOCAL);
	set_name(0X4FF9, ".3", SN_LOCAL);
	add_func    (0X4FFF,0X5140);
	set_func_flags(0X4FFF,0x1000);
	set_func_cmt(0X4FFF,	"Sound: Play a multichannel notes – call via the IRQ", 1);
	set_name(0X501F, ".1_0", SN_LOCAL);
	set_name(0X502A, ".2_", SN_LOCAL);
	set_name(0X503C, "NOTIE", SN_LOCAL);
	set_name(0X5052, "DD2", SN_LOCAL);
	set_name(0X5068, ".1_1", SN_LOCAL);
	set_name(0X506B, "D22", SN_LOCAL);
	set_name(0X508B, ".1_2", SN_LOCAL);
	set_name(0X5096, ".2__", SN_LOCAL);
	set_name(0X50A8, "NOTI2", SN_LOCAL);
	set_name(0X50BE, "DD3", SN_LOCAL);
	set_name(0X50D2, ".1_3", SN_LOCAL);
	set_name(0X50D5, "D33", SN_LOCAL);
	set_name(0X50F5, ".12", SN_LOCAL);
	set_name(0X5100, ".2", SN_LOCAL);
	set_name(0X5112, "NOTI3", SN_LOCAL);
	set_name(0X5128, "DD4", SN_LOCAL);
	set_name(0X513C, ".1", SN_LOCAL);
	set_name(0X513F, "D44", SN_LOCAL);
	add_func    (0X5140,0X5152);
	set_func_flags(0X5140,0x1000);
	set_func_cmt(0X5140,	"Sound: Convert Tempo to Duration", 1);
	set_name(0X514A, ".1", SN_LOCAL);
	set_name(0X5151, ".2", SN_LOCAL);
	add_func    (0X5152,0X5192);
	set_func_flags(0X5152,0x1000);
	set_func_cmt(0X5152,	"Sound: Get Audio Frequency", 1);
	set_name(0X5189, ".1", SN_LOCAL);
	set_name(0X518D, ".2", SN_LOCAL);
	add_func    (0X5192,0X519D);
	set_func_flags(0X5192,0x1000);
	set_func_cmt(0X5192,	"Sound: Stop", 1);
	set_name(0X5196, ".1", SN_LOCAL);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"ds",0,3);
	split_sreg_range(0XB0,"ds",0,3);
	split_sreg_range(0X100,"ds",0,3);
	split_sreg_range(0X200,"ds",0,3);
	split_sreg_range(0X600,"ds",0,3);
	split_sreg_range(0X700,"ds",0,3);
	split_sreg_range(0XC00,"ds",0X1,3);
	split_sreg_range(0X519D,"ds",0,3);
	split_sreg_range(0X5C00,"ds",0,3);
	split_sreg_range(0X6400,"ds",0,3);
	split_sreg_range(0X7000,"ds",0,3);
	split_sreg_range(0XD000,"ds",0,3);
	split_sreg_range(0XD800,"ds",0,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
        end_type_updating(UTP_STRUCT);
}

// End of file.
