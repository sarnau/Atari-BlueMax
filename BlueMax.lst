00000000 ; ---------------------------------------------------------------------------
00000000
00000000 DCB_STRUCT      struc ; (sizeof=0xC)    ; XREF: LOWMEM:DCB/r
00000000                                         ; TAPE_LOADER:LOAD_DCB/r
00000000 DDEVICE:        .BYTE ?                 ; XREF: READ_BLOCK:loc_757/r
00000000                                         ; READ_BLOCK+5/w
00000001 DUNIT:          .BYTE ?                 ; base 10
00000002 DCOMMAND:       .BYTE ?                 ; enum DCB_COMMANDS
00000003 DSTATS:         .BYTE ?
00000004 DBUF:           .WORD ?                 ; XREF: BOOT_CONTINUE+1E/r
00000004                                         ; BOOT_CONTINUE+24/w ... ; offset (00000000)
00000006 DTIMLO:         .BYTE ?                 ; base 10
00000007                 .BYTE ? ; undefined
00000008 DBYTE:          .WORD ?                 ; XREF: BOOT_CONTINUE+32/w
0000000A DSECTOR:        .WORD ?
0000000C DCB_STRUCT      ends
0000000C
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 IOCB_STRUCT     struc ; (sizeof=0x10)
00000000 ICHID:          .BYTE ?
00000001 ICDNO:          .BYTE ?
00000002 ICCOM:          .BYTE ?
00000003 ICSTA:          .BYTE ?
00000004 ICBADR:         .WORD ?
00000006 ICPUT:          .WORD ?
00000008 ICBLEN:         .WORD ?
0000000A ICAX1:          .BYTE ?
0000000B ICAX2:          .BYTE ?
0000000C ICAX3:          .BYTE ?
0000000D ICAX4:          .BYTE ?
0000000E ICAX5:          .BYTE ?
0000000F ICAX6:          .BYTE ?
00000010 IOCB_STRUCT     ends
00000010
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 HATABS_STRUCT   struc ; (sizeof=0x3)
00000000 DEVICE:         .BYTE ?
00000001 ADR:            .WORD ?                 ; offset (00000000)
00000003 HATABS_STRUCT   ends
00000003
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 DIFF_STRUCT     struc ; (sizeof=0x7)    ; XREF: VARS:DIFF/r
00000000                                         ; DATA:EAS0/r ...
00000000 wind_probability:.BYTE ?                ; XREF: EB:_5/r
00000000                                         ; EB+39/w ... ; Wind triggered, if RANDOM < value
00000001 wind_minimum_duration:.BYTE ?           ; XREF: WIND+18/r ; Minimum duration during which wind is active
00000002 field_2:        .BYTE ?                 ; XREF: TRIGB+14/r
00000002                                         ; TRIGF+E/r
00000003 field_3:        .BYTE ?                 ; XREF: COLM30+15/r
00000003                                         ; CLG20+1F/r
00000004 field_4:        .BYTE ?                 ; XREF: COLM30+1B/r
00000004                                         ; CLG20:J5/r
00000005 field_5:        .BYTE ?                 ; XREF: COLM20+E/r
00000006 field_6:        .BYTE ?                 ; XREF: COLM20+1B/r
00000007 DIFF_STRUCT     ends
00000007
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 CONTROL_DISPLAY struc ; (sizeof=0x48)   ; XREF: SCREENRAM:SC_STATUS_LINE/r
00000000 line_0:         CONTROL_DISPLAY_LINE_0 ? ; XREF: RESET+155/w
00000000                                         ; JOYST/r ...
00000018 line_1:         CONTROL_DISPLAY_LINE_1 ? ; XREF: EB+C8/w
00000018                                         ; EB+CB/w ...
00000030 line_2:         CONTROL_DISPLAY_LINE_2 ? ; XREF: TURN+F3/w
00000030                                         ; CKLAND+D/w ...
00000048 CONTROL_DISPLAY ends
00000048
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 CONTROL_DISPLAY_LINE_0 struc ; (sizeof=0x18)
00000000                                         ; XREF: CONTROL_DISPLAY/r
00000000 empty_0:        .BYTE ?
00000001 empty_1:        .BYTE ?
00000002 empty_2:        .BYTE ?                 ; XREF: RESET+155/w
00000003 fuel_F:         .BYTE ?                 ; XREF: REFUEL+A3/w
00000003                                         ; INCBMB+2/w ...
00000004 fuel_colon:     .BYTE ?
00000005 fuel_digit_100: .BYTE ?                 ; XREF: FUEL+30/r
00000005                                         ; FUEL+59/w ...
00000006 fuel_digit_10:  .BYTE ?                 ; XREF: FUEL:MR/r
00000006                                         ; FUEL+49/w ...
00000007 fuel_digit_1:   .BYTE ?                 ; XREF: FUEL+1E/w
00000007                                         ; FUEL+21/r ...
00000008 field_8:        .BYTE ?
00000009 bomb_B:         .BYTE ?                 ; XREF: REFUEL+F/w
00000009                                         ; INCBMB+7/w
0000000A bomb_colon:     .BYTE ?
0000000B bomb_digit_10:  .BYTE ?                 ; XREF: BOMB+35/r
0000000B                                         ; BOMB+4B/w ...
0000000C bomb_digit_1:   .BYTE ?                 ; XREF: BOMB+2E/r
0000000C                                         ; BOMB:PB/w ...
0000000D field_D:        .BYTE ?
0000000E field_E:        .BYTE ?
0000000F fuel_leak:      .BYTE ?                 ; XREF: FUEL+5/r
0000000F                                         ; COLM20:RW/r ... ; "F" character
00000010 bomb_gear_damaged:.BYTE ?               ; XREF: BOMB+C/r
00000010                                         ; COLM20:RX/r ... ; "B" character
00000011 decreased_maneuverability:.BYTE ?       ; XREF: JOYST/r
00000011                                         ; COLM20:RY/r ... ; "M" character
00000012 machine_gun_damaged:.BYTE ?             ; XREF: TRIG__TRIGGER_MACHINE_GUN+8/r
00000012                                         ; COLM20+59/r ... ; "G" character
00000013 field_13:       .BYTE ?
00000014 enemy_above_warning:.BYTE ?             ; XREF: ASTRSK+11/w
00000014                                         ; AEL+2/w ... ; red "*" character
00000015 field_15:       .BYTE ?
00000016 field_16:       .BYTE ?
00000017 field_17:       .BYTE ?
00000018 CONTROL_DISPLAY_LINE_0 ends
00000018
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 CONTROL_DISPLAY_LINE_1 struc ; (sizeof=0x18)
00000000                                         ; XREF: CONTROL_DISPLAY/r
00000000 empty_0:        .BYTE ?
00000001 empty_1:        .BYTE ?
00000002 empty_2:        .BYTE ?
00000003 field_3:        .BYTE ?
00000004 field_4:        .BYTE ?                 ; XREF: BLMX__PRINT_BLUE_MAX+13/w
00000004                                         ; SQLD__PRINT_SQUADRON_LEADER+5/w ...
00000005 field_5:        .BYTE ?                 ; XREF: BLMX__PRINT_BLUE_MAX+10/w
00000005                                         ; RNKX__PRINT_RANK_CLASS+AD/w
00000006 field_6:        .BYTE ?                 ; XREF: BLMX__PRINT_BLUE_MAX+7/w
00000006                                         ; BLMX__PRINT_BLUE_MAX+D/w
00000007 speed_digit_100:.BYTE ?                 ; XREF: EB+C8/w
00000007                                         ; TURN:_20/r ...
00000008 speed_digit_10: .BYTE ?                 ; XREF: EB+CB/w
00000008                                         ; TURN+EB/w ...
00000009 speed_digit_1:  .BYTE ?                 ; XREF: EB+CE/w
00000009                                         ; TURN+EE/w ...
0000000A field_A:        .BYTE ?
0000000B field_B:        .BYTE ?
0000000C field_C:        .BYTE ?
0000000D field_D:        .BYTE ?
0000000E field_E:        .BYTE ?
0000000F altitude_digit_100:.BYTE ?              ; XREF: ALT__ALTITUDE_DISPLAY_FIXUP+23/w
0000000F                                         ; ALT__ALTITUDE_DISPLAY_FIXUP+3F/w
00000010 altitude_digit_10:.BYTE ?               ; XREF: ALT__ALTITUDE_DISPLAY_FIXUP+11/w
00000010                                         ; ALT__ALTITUDE_DISPLAY_FIXUP+14/r ...
00000011 altitude_digit_1:.BYTE ?                ; XREF: KK/w UP+6/w ...
00000012 field_12:       .BYTE ?
00000013 field_13:       .BYTE ?
00000014 enemy_plane_warning:.BYTE ?             ; XREF: PLFWD+184/w
00000014                                         ; PLFWD+18D/w ... ; "P" character
00000015 wind_factor_warning:.BYTE ?             ; XREF: CKLAND+45/w
00000015                                         ; WIND+1F/w ... ; "W" character
00000016 field_16:       .BYTE ?
00000017 field_17:       .BYTE ?
00000018 CONTROL_DISPLAY_LINE_1 ends
00000018
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 CONTROL_DISPLAY_LINE_2 struc ; (sizeof=0x18)
00000000                                         ; XREF: CONTROL_DISPLAY/r
00000000 empty_0:        .BYTE ?
00000001 empty_1:        .BYTE ?
00000002 empty_2:        .BYTE ?
00000003 field_3:        .BYTE ?
00000004 field_4:        .BYTE ?
00000005 field_5:        .BYTE ?
00000006 field_6:        .BYTE ?
00000007 field_7:        .BYTE ?
00000008 field_8:        .BYTE ?
00000009 score_digit_1000:.BYTE ?                ; XREF: S100__SCORE_ADD_100+20/r
00000009                                         ; S100__SCORE_ADD_100+27/w ...
0000000A score_digit_100:.BYTE ?                 ; XREF: S100__SCORE_ADD_100:S1000__SCORE_ADD_1000/w
0000000A                                         ; S100__SCORE_ADD_100+13/r ...
0000000B score_digit_10: .BYTE ?                 ; XREF: S100__SCORE_ADD_100/w
0000000B                                         ; S100__SCORE_ADD_100+3/r ...
0000000C score_digit_1:  .BYTE ?                 ; XREF: S10__SCORE_ADD_10/w
0000000C                                         ; S10__SCORE_ADD_10+3/r ...
0000000D field_D:        .BYTE ?
0000000E field_E:        .BYTE ?
0000000F field_F:        .BYTE ?
00000010 field_10:       .BYTE ?
00000011 landing_flag:   .BYTE ?                 ; XREF: CKLAND+D/w
00000011                                         ; CKLAND+2E/r ... ; "L" character
00000012 field_12:       .BYTE ?
00000013 field_13:       .BYTE ?
00000014 field_14:       .BYTE ?                 ; XREF: TURN+F3/w
00000014                                         ; ASTRSK:_1/w ... ; "*" character
00000015 field_15:       .BYTE ?
00000016 field_16:       .BYTE ?
00000017 field_17:       .BYTE ?
00000018 CONTROL_DISPLAY_LINE_2 ends
00000018
00000000 ; ---------------------------------------------------------------------------
00000000
00000000 NOTE            struc ; (sizeof=0x2)    ; XREF: DATA:VOICE_1/r
00000000                                         ; DATA:VOICE_2/r ...
00000000 freq:           .BYTE ?                 ; frequency
00000001 dur:            .BYTE ?                 ; duration
00000002 NOTE            ends
00000002
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum DCB_COMMANDS
FFFFFFFF DCB_COMMANDS_FORMAT: = $21
FFFFFFFF DCB_COMMANDS_FORMAT_MD: = $22
FFFFFFFF DCB_COMMANDS_INTO: = $4E
FFFFFFFF DCB_COMMANDS_OUT: = $4F
FFFFFFFF DCB_COMMANDS_PUT: = $50
FFFFFFFF DCB_COMMANDS_READ: = $52                ; XREF: TAPE_LOADER:LOAD_DCB/s
FFFFFFFF DCB_COMMANDS_STATUS: = $53
FFFFFFFF DCB_COMMANDS_WRITE: = $57
FFFFFFFF
0000000F ; ---------------------------------------------------------------------------
0000000F
0000000F ; enum COLOR, bitfield
0000000F COLOR_INTENSITY_0: = 0                  ; XREF: TAPE_LOADER:COLOR_TABLE/s
0000000F                                         ; SHCOL:CS__/s ...
0000000F COLOR_INTENSITY_1: = 1
0000000F COLOR_INTENSITY_2: = 2                  ; XREF: RESET+DB/s
0000000F                                         ; SHCOL:CR/s ...
0000000F COLOR_INTENSITY_3: = 3
0000000F COLOR_INTENSITY_4: = 4                  ; XREF: RESET+CF/s
0000000F                                         ; RESET+D6/s ...
0000000F COLOR_INTENSITY_5: = 5
0000000F COLOR_INTENSITY_6: = 6                  ; XREF: XP2:UW/s
0000000F                                         ; VDSLST_ROUTINE+1C/s ...
0000000F COLOR_INTENSITY_7: = 7
0000000F COLOR_INTENSITY_8: = 8                  ; XREF: COLM02+1C/s
0000000F                                         ; VDSLST_ROUTINE+11/s ...
0000000F COLOR_INTENSITY_9: = 9
0000000F COLOR_INTENSITY_10: = $A                ; XREF: CKCOL+1C/s
0000000F                                         ; DRP23+FC/s ...
0000000F COLOR_INTENSITY_11: = $B
0000000F COLOR_INTENSITY_12: = $C                ; XREF: TAPE_LOADER:COLOR_TABLE/s
0000000F                                         ; CRSH:_3/s ...
0000000F COLOR_INTENSITY_13: = $D
0000000F COLOR_INTENSITY_14: = $E                ; XREF: TAPE_LOADER:COLOR_TABLE/s
0000000F                                         ; REFUEL+5D/s ...
0000000F COLOR_INTENSITY_15: = $F
000000F0 COLOR_GRAY:      = 0                    ; XREF: TAPE_LOADER:COLOR_TABLE/s
000000F0                                         ; SHCOL:CR/s ...
000000F0 COLOR_GOLD:      = $10                  ; XREF: TAPE_LOADER:COLOR_TABLE/s
000000F0                                         ; DRP23:IT/s ...
000000F0 COLOR_ORANGE:    = $20                  ; XREF: CKCOL+1C/s
000000F0                                         ; CRSH:_3/s ...
000000F0 COLOR_RED_ORANGE: = $30                 ; XREF: CRSH+27/s
000000F0                                         ; XP2+11/s ...
000000F0 COLOR_RED_PINK:  = $40
000000F0 COLOR_RED_PINK_PURPLE: = $50            ; XREF: CNSL__CONSOLE+79/s
000000F0 COLOR_PURPLE_BLUE: = $60                ; XREF: CPTL+2E/s
000000F0                                         ; BMCPTL+20/s ...
000000F0 COLOR_DARK_PURPLE: = $70                ; XREF: DRP23+33/s
000000F0                                         ; PLFWD+23/s ...
000000F0 COLOR_BLUE:      = $80                  ; XREF: TAPE_LOADER:COLOR_TABLE/s
000000F0 COLOR_LIGHT_BLUE: = $90                 ; XREF: RESET+D6/s
000000F0                                         ; TURN+168/s ...
000000F0 COLOR_TURQUOISE: = $A0                  ; XREF: COLM02+1C/s
000000F0                                         ; TRGTP2+7/s ...
000000F0 COLOR_GREEN_BLUE: = $B0
000000F0 COLOR_GREEN:     = $C0                  ; XREF: TAPE_LOADER:COLOR_TABLE/s
000000F0                                         ; RESET+CF/s ...
000000F0 COLOR_YELLOW_GREEN: = $D0               ; XREF: RESET+DB/s
000000F0                                         ; B7+3C/s
000000F0 COLOR_ORANGE_GREEN: = $E0               ; XREF: VDSLST_ROUTINE+3/s
000000F0 COLOR_LIGHT_ORANGE: = $F0
000000F0
0000000F ; ---------------------------------------------------------------------------
0000000F
0000000F ; enum AUDIO_CONTROL, bitfield
0000000F AUDIO_CONTROL_VOL_1: = 1                ; XREF: EB+8F/s
0000000F AUDIO_CONTROL_VOL_2: = 2                ; XREF: PC+25/s
0000000F                                         ; REFUEL+42/s ...
0000000F AUDIO_CONTROL_VOL_3: = 3                ; XREF: Y8+D/s
0000000F                                         ; PBMB:_2/s
0000000F AUDIO_CONTROL_VOL_4: = 4                ; XREF: ROAR+13/s
0000000F                                         ; RUNSND+1B/s
0000000F AUDIO_CONTROL_VOL_5: = 5                ; XREF: GUNSND+24/s
0000000F                                         ; GUNSND:QC/s ...
0000000F AUDIO_CONTROL_VOL_6: = 6                ; XREF: LOW+53/s
0000000F AUDIO_CONTROL_VOL_7: = 7                ; XREF: FTNKGN-C23/s
0000000F                                         ; FM2GN+9F/s ...
0000000F AUDIO_CONTROL_VOL_8: = 8                ; XREF: ROAR+30/s
0000000F AUDIO_CONTROL_VOL_9: = 9
0000000F AUDIO_CONTROL_VOL_10: = $A
0000000F AUDIO_CONTROL_VOL_11: = $B
0000000F AUDIO_CONTROL_VOL_12: = $C              ; XREF: XPLSN+89/s
0000000F                                         ; COLM02+65/s ...
0000000F AUDIO_CONTROL_VOL_13: = $D
0000000F AUDIO_CONTROL_VOL_14: = $E              ; XREF: BMCPTL+5F/s
0000000F AUDIO_CONTROL_VOL_15: = $F              ; XREF: TURN+7A/s
0000000F                                         ; FLSH+48/s
00000010 VOLUME_ONLY:     = $10
000000E0 AUDIO_CONTROL_DIST_0: = $20             ; XREF: WARN+9/s
000000E0 AUDIO_CONTROL_DIST_1: = $40             ; XREF: TURN+7A/s
000000E0                                         ; XPLSN+89/s ...
000000E0 AUDIO_CONTROL_DIST_2: = $60             ; XREF: GUNSND+24/s
000000E0                                         ; GUNSND:QB/s ...
000000E0 AUDIO_CONTROL_DIST_3: = $80             ; XREF: Y8+D/s
000000E0 AUDIO_CONTROL_DIST_4: = $A0             ; XREF: PC+25/s
000000E0                                         ; REFUEL+42/s ...
000000E0 AUDIO_CONTROL_DIST_6: = $C0             ; XREF: EB+8F/s
000000E0                                         ; KMKZ+D/s ...
000000E0
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum SND_FREQ
FFFFFFFF SND_FREQ_0:      = 0
FFFFFFFF SND_FREQ_1:      = 1
FFFFFFFF SND_FREQ_2:      = 2
FFFFFFFF SND_FREQ_3:      = 3
FFFFFFFF SND_FREQ_4:      = 4
FFFFFFFF SND_FREQ_5:      = 5
FFFFFFFF SND_FREQ_6:      = 6
FFFFFFFF SND_FREQ_7:      = 7
FFFFFFFF SND_FREQ_8:      = 8
FFFFFFFF SND_FREQ_9:      = 9
FFFFFFFF SND_FREQ_10:     = 10                   ; XREF: RUNSND+10/s
FFFFFFFF                                         ; LOW+4B/s
FFFFFFFF SND_FREQ_11:     = 11
FFFFFFFF SND_FREQ_12:     = 12
FFFFFFFF SND_FREQ_13:     = 13                   ; XREF: EB+80/s
FFFFFFFF SND_FREQ_14:     = 14
FFFFFFFF SND_FREQ_15:     = 15                   ; XREF: LINE+3D/s
FFFFFFFF                                         ; DATA:VOICE_1/s ...
FFFFFFFF SND_FREQ_16:     = 16
FFFFFFFF SND_FREQ_17:     = 17
FFFFFFFF SND_FREQ_18:     = 18
FFFFFFFF SND_FREQ_19:     = 19
FFFFFFFF SND_FREQ_20:     = 20                   ; XREF: PC+1D/s
FFFFFFFF SND_FREQ_21:     = 21                   ; XREF: REFUEL+3D/s
FFFFFFFF SND_FREQ_22:     = 22
FFFFFFFF SND_FREQ_23:     = 23
FFFFFFFF SND_FREQ_24:     = 24
FFFFFFFF SND_FREQ_25:     = 25                   ; XREF: RUNSND:QG/s
FFFFFFFF SND_FREQ_26:     = 26
FFFFFFFF SND_FREQ_27:     = 27
FFFFFFFF SND_FREQ_28:     = 28
FFFFFFFF SND_FREQ_29:     = 29
FFFFFFFF SND_FREQ_30:     = 30
FFFFFFFF SND_FREQ_31:     = 31
FFFFFFFF SND_FREQ_32:     = 32
FFFFFFFF SND_FREQ_33:     = 33
FFFFFFFF SND_FREQ_34:     = 34
FFFFFFFF SND_FREQ_35:     = 35
FFFFFFFF SND_FREQ_36:     = 36                   ; XREF: DATA:VOICE_1/s
FFFFFFFF SND_FREQ_37:     = 37                   ; XREF: DATA:VOICE_1/s
FFFFFFFF SND_FREQ_38:     = 38                   ; XREF: DATA:VOICE_1/s
FFFFFFFF SND_FREQ_39:     = 39                   ; XREF: DATA:VOICE_1/s
FFFFFFFF SND_FREQ_40:     = 40
FFFFFFFF SND_FREQ_41:     = 41                   ; XREF: DATA:VOICE_1/s
FFFFFFFF                                         ; DATA:VOICE_2/s
FFFFFFFF SND_FREQ_42:     = 42
FFFFFFFF SND_FREQ_43:     = 43                   ; XREF: DATA:VOICE_1/s
FFFFFFFF                                         ; DATA:VOICE_2/s
FFFFFFFF SND_FREQ_44:     = 44
FFFFFFFF SND_FREQ_45:     = 45
FFFFFFFF SND_FREQ_46:     = 46
FFFFFFFF SND_FREQ_47:     = 47
FFFFFFFF SND_FREQ_48:     = 48                   ; XREF: DATA:VOICE_1/s
FFFFFFFF                                         ; DATA:VOICE_2/s
FFFFFFFF SND_FREQ_49:     = 49
FFFFFFFF SND_FREQ_50:     = 50                   ; XREF: GUNSND+E/s
FFFFFFFF                                         ; DATA:VOICE_1/s ...
FFFFFFFF SND_FREQ_51:     = 51
FFFFFFFF SND_FREQ_52:     = 52                   ; XREF: DATA:VOICE_1/s
FFFFFFFF                                         ; DATA:VOICE_2/s
FFFFFFFF SND_FREQ_53:     = 53                   ; XREF: DATA:VOICE_2/s
FFFFFFFF SND_FREQ_54:     = 54                   ; XREF: DATA:VOICE_1/s
FFFFFFFF                                         ; DATA:VOICE_2/s
FFFFFFFF SND_FREQ_55:     = 55                   ; XREF: DATA:VOICE_2/s
FFFFFFFF SND_FREQ_56:     = 56
FFFFFFFF SND_FREQ_57:     = 57
FFFFFFFF SND_FREQ_58:     = 58
FFFFFFFF SND_FREQ_59:     = 59                   ; XREF: DATA:VOICE_2/s
FFFFFFFF                                         ; DATA:VOICE_3/s
FFFFFFFF SND_FREQ_60:     = 60                   ; XREF: GGNSND:_4/s
FFFFFFFF SND_FREQ_61:     = 61
FFFFFFFF SND_FREQ_62:     = 62
FFFFFFFF SND_FREQ_63:     = 63
FFFFFFFF SND_FREQ_64:     = 64                   ; XREF: DATA:VOICE_2/s
FFFFFFFF                                         ; DATA:VOICE_3/s
FFFFFFFF SND_FREQ_65:     = 65
FFFFFFFF SND_FREQ_66:     = 66                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_67:     = 67
FFFFFFFF SND_FREQ_68:     = 68                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_69:     = 69                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_70:     = 70                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_71:     = 71                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_72:     = 72
FFFFFFFF SND_FREQ_73:     = 73                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_74:     = 74
FFFFFFFF SND_FREQ_75:     = 75                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_76:     = 76
FFFFFFFF SND_FREQ_77:     = 77
FFFFFFFF SND_FREQ_78:     = 78
FFFFFFFF SND_FREQ_79:     = 79
FFFFFFFF SND_FREQ_80:     = 80                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_81:     = 81
FFFFFFFF SND_FREQ_82:     = 82                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_83:     = 83
FFFFFFFF SND_FREQ_84:     = 84                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_85:     = 85                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_86:     = 86                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_87:     = 87                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_88:     = 88
FFFFFFFF SND_FREQ_89:     = 89                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_90:     = 90
FFFFFFFF SND_FREQ_91:     = 91                   ; XREF: DATA:VOICE_3/s
FFFFFFFF SND_FREQ_92:     = 92
FFFFFFFF SND_FREQ_93:     = 93
FFFFFFFF SND_FREQ_94:     = 94
FFFFFFFF SND_FREQ_95:     = 95
FFFFFFFF SND_FREQ_96:     = 96
FFFFFFFF SND_FREQ_97:     = 97
FFFFFFFF SND_FREQ_98:     = 98
FFFFFFFF SND_FREQ_99:     = 99
FFFFFFFF SND_FREQ_100:    = 100
FFFFFFFF SND_FREQ_101:    = 101
FFFFFFFF SND_FREQ_102:    = 102
FFFFFFFF SND_FREQ_103:    = 103
FFFFFFFF SND_FREQ_104:    = 104
FFFFFFFF SND_FREQ_105:    = 105
FFFFFFFF SND_FREQ_106:    = 106
FFFFFFFF SND_FREQ_107:    = 107
FFFFFFFF SND_FREQ_108:    = 108
FFFFFFFF SND_FREQ_109:    = 109
FFFFFFFF SND_FREQ_110:    = 110
FFFFFFFF SND_FREQ_111:    = 111
FFFFFFFF SND_FREQ_112:    = 112
FFFFFFFF SND_FREQ_113:    = 113
FFFFFFFF SND_FREQ_114:    = 114
FFFFFFFF SND_FREQ_115:    = 115
FFFFFFFF SND_FREQ_116:    = 116
FFFFFFFF SND_FREQ_117:    = 117
FFFFFFFF SND_FREQ_118:    = 118
FFFFFFFF SND_FREQ_119:    = 119
FFFFFFFF SND_FREQ_120:    = 120
FFFFFFFF SND_FREQ_121:    = 121
FFFFFFFF SND_FREQ_122:    = 122
FFFFFFFF SND_FREQ_123:    = 123
FFFFFFFF SND_FREQ_124:    = 124
FFFFFFFF SND_FREQ_125:    = 125
FFFFFFFF SND_FREQ_126:    = 126
FFFFFFFF SND_FREQ_127:    = 127
FFFFFFFF SND_FREQ_128:    = 128
FFFFFFFF SND_FREQ_129:    = 129
FFFFFFFF SND_FREQ_130:    = 130
FFFFFFFF SND_FREQ_131:    = 131
FFFFFFFF SND_FREQ_132:    = 132
FFFFFFFF SND_FREQ_133:    = 133
FFFFFFFF SND_FREQ_134:    = 134
FFFFFFFF SND_FREQ_135:    = 135
FFFFFFFF SND_FREQ_136:    = 136
FFFFFFFF SND_FREQ_137:    = 137
FFFFFFFF SND_FREQ_138:    = 138
FFFFFFFF SND_FREQ_139:    = 139
FFFFFFFF SND_FREQ_140:    = 140
FFFFFFFF SND_FREQ_141:    = 141
FFFFFFFF SND_FREQ_142:    = 142
FFFFFFFF SND_FREQ_143:    = 143
FFFFFFFF SND_FREQ_144:    = 144
FFFFFFFF SND_FREQ_145:    = 145
FFFFFFFF SND_FREQ_146:    = 146
FFFFFFFF SND_FREQ_147:    = 147
FFFFFFFF SND_FREQ_148:    = 148
FFFFFFFF SND_FREQ_149:    = 149
FFFFFFFF SND_FREQ_150:    = 150
FFFFFFFF SND_FREQ_151:    = 151
FFFFFFFF SND_FREQ_152:    = 152
FFFFFFFF SND_FREQ_153:    = 153
FFFFFFFF SND_FREQ_154:    = 154
FFFFFFFF SND_FREQ_155:    = 155
FFFFFFFF SND_FREQ_156:    = 156
FFFFFFFF SND_FREQ_157:    = 157
FFFFFFFF SND_FREQ_158:    = 158
FFFFFFFF SND_FREQ_159:    = 159
FFFFFFFF SND_FREQ_160:    = 160
FFFFFFFF SND_FREQ_161:    = 161
FFFFFFFF SND_FREQ_162:    = 162
FFFFFFFF SND_FREQ_163:    = 163
FFFFFFFF SND_FREQ_164:    = 164
FFFFFFFF SND_FREQ_165:    = 165
FFFFFFFF SND_FREQ_166:    = 166
FFFFFFFF SND_FREQ_167:    = 167
FFFFFFFF SND_FREQ_168:    = 168
FFFFFFFF SND_FREQ_169:    = 169
FFFFFFFF SND_FREQ_170:    = 170
FFFFFFFF SND_FREQ_171:    = 171
FFFFFFFF SND_FREQ_172:    = 172
FFFFFFFF SND_FREQ_173:    = 173
FFFFFFFF SND_FREQ_174:    = 174
FFFFFFFF SND_FREQ_175:    = 175
FFFFFFFF SND_FREQ_176:    = 176
FFFFFFFF SND_FREQ_177:    = 177
FFFFFFFF SND_FREQ_178:    = 178
FFFFFFFF SND_FREQ_179:    = 179
FFFFFFFF SND_FREQ_180:    = 180
FFFFFFFF SND_FREQ_181:    = 181
FFFFFFFF SND_FREQ_182:    = 182
FFFFFFFF SND_FREQ_183:    = 183
FFFFFFFF SND_FREQ_184:    = 184
FFFFFFFF SND_FREQ_185:    = 185
FFFFFFFF SND_FREQ_186:    = 186
FFFFFFFF SND_FREQ_187:    = 187
FFFFFFFF SND_FREQ_188:    = 188
FFFFFFFF SND_FREQ_189:    = 189
FFFFFFFF SND_FREQ_190:    = 190
FFFFFFFF SND_FREQ_191:    = 191
FFFFFFFF SND_FREQ_192:    = 192
FFFFFFFF SND_FREQ_193:    = 193
FFFFFFFF SND_FREQ_194:    = 194
FFFFFFFF SND_FREQ_195:    = 195
FFFFFFFF SND_FREQ_196:    = 196
FFFFFFFF SND_FREQ_197:    = 197
FFFFFFFF SND_FREQ_198:    = 198
FFFFFFFF SND_FREQ_199:    = 199
FFFFFFFF SND_FREQ_200:    = 200
FFFFFFFF SND_FREQ_201:    = 201
FFFFFFFF SND_FREQ_202:    = 202
FFFFFFFF SND_FREQ_203:    = 203
FFFFFFFF SND_FREQ_204:    = 204
FFFFFFFF SND_FREQ_205:    = 205
FFFFFFFF SND_FREQ_206:    = 206
FFFFFFFF SND_FREQ_207:    = 207
FFFFFFFF SND_FREQ_208:    = 208
FFFFFFFF SND_FREQ_209:    = 209
FFFFFFFF SND_FREQ_210:    = 210
FFFFFFFF SND_FREQ_211:    = 211
FFFFFFFF SND_FREQ_212:    = 212
FFFFFFFF SND_FREQ_213:    = 213
FFFFFFFF SND_FREQ_214:    = 214
FFFFFFFF SND_FREQ_215:    = 215
FFFFFFFF SND_FREQ_216:    = 216
FFFFFFFF SND_FREQ_217:    = 217
FFFFFFFF SND_FREQ_218:    = 218
FFFFFFFF SND_FREQ_219:    = 219
FFFFFFFF SND_FREQ_220:    = 220
FFFFFFFF SND_FREQ_221:    = 221
FFFFFFFF SND_FREQ_222:    = 222
FFFFFFFF SND_FREQ_223:    = 223
FFFFFFFF SND_FREQ_224:    = 224
FFFFFFFF SND_FREQ_225:    = 225
FFFFFFFF SND_FREQ_226:    = 226
FFFFFFFF SND_FREQ_227:    = 227
FFFFFFFF SND_FREQ_228:    = 228
FFFFFFFF SND_FREQ_229:    = 229
FFFFFFFF SND_FREQ_230:    = 230
FFFFFFFF SND_FREQ_231:    = 231
FFFFFFFF SND_FREQ_232:    = 232
FFFFFFFF SND_FREQ_233:    = 233
FFFFFFFF SND_FREQ_234:    = 234
FFFFFFFF SND_FREQ_235:    = 235
FFFFFFFF SND_FREQ_236:    = 236
FFFFFFFF SND_FREQ_237:    = 237
FFFFFFFF SND_FREQ_238:    = 238
FFFFFFFF SND_FREQ_239:    = 239
FFFFFFFF SND_FREQ_240:    = 240
FFFFFFFF SND_FREQ_241:    = 241
FFFFFFFF SND_FREQ_242:    = 242
FFFFFFFF SND_FREQ_243:    = 243
FFFFFFFF SND_FREQ_244:    = 244
FFFFFFFF SND_FREQ_245:    = 245
FFFFFFFF SND_FREQ_246:    = 246
FFFFFFFF SND_FREQ_247:    = 247
FFFFFFFF SND_FREQ_248:    = 248
FFFFFFFF SND_FREQ_249:    = 249
FFFFFFFF SND_FREQ_250:    = 250
FFFFFFFF SND_FREQ_251:    = 251                  ; XREF: RESET+183/s
FFFFFFFF                                         ; EB:AFX/s
FFFFFFFF SND_FREQ_252:    = 252
FFFFFFFF SND_FREQ_253:    = 253
FFFFFFFF SND_FREQ_254:    = 254
FFFFFFFF SND_FREQ_255:    = 255
FFFFFFFF
0000003F ; ---------------------------------------------------------------------------
0000003F
0000003F ; enum KEYCODE, bitfield
0000003F KEYCODE_SPACE:   = $21                  ; XREF: PAUSE+3/s
0000003F                                         ; PAUSE+2F/s
0000003F KEYCODE_9:       = $30                  ; XREF: S10__SCORE_ADD_10+6/t
0000003F                                         ; S100__SCORE_ADD_100+6/t ...
00000040 KEYCODE_SHIFT:   = $40
00000080 KEYCODE_CONTROL: = $80
00000080
0000003F ; ---------------------------------------------------------------------------
0000003F
0000003F ; enum ATASCI, bitfield, width 1 byte
0000003F _SPACE:          = 0                    ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; TURN+F1/s ...
0000003F _EXCLAMATION:    = 1
0000003F _OPEN_BRACKET:   = 8                    ; XREF: DATA:DEMI/s
0000003F _CLOSE_BRACKET:  = 9                    ; XREF: DATA:DEMI/s
0000003F _ASTERIX:        = $A                   ; XREF: ASTRSK+7/s
0000003F                                         ; CNSL__CONSOLE:_12/s ...
0000003F _MINUS:          = $D
0000003F _QUESTIONMARK:   = $F                   ; XREF: READ_BLOCK+17/s
0000003F                                         ; ALT__ALTITUDE_DISPLAY_FIXUP+33/s ...
0000003F _0:              = $10                  ; XREF: EB+C6/s
0000003F                                         ; TURN+71/s ...
0000003F _1:              = $11                  ; XREF: ALT__ALTITUDE_DISPLAY_FIXUP+21/s
0000003F                                         ; SPD__SPEED_CHANGE+1A/s ...
0000003F _2:              = $12                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; TURN+CB/s ...
0000003F _3:              = $13                  ; XREF: SPD__SPEED_CHANGE+13/s
0000003F                                         ; SPD__SPEED_CHANGE+29/s ...
0000003F _4:              = $14                  ; XREF: RNK__DISPLAY_RANK:_8/s
0000003F                                         ; RNK__DISPLAY_RANK:_4/s ...
0000003F _5:              = $15
0000003F _6:              = $16
0000003F _7:              = $17
0000003F _8:              = $18                  ; XREF: DATA:DEMI/s
0000003F _9:              = $19                  ; XREF: READ_BLOCK+1E/s
0000003F                                         ; BOMB+46/s ...
0000003F _COLON:          = $1A                  ; XREF: ALT__ALTITUDE_DISPLAY_FIXUP+3/s
0000003F                                         ; ALT__ALTITUDE_DISPLAY_FIXUP+17/s ...
0000003F _A:              = $21                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:53F6/s ...
0000003F _B:              = $22                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; REFUEL+D/s ...
0000003F _C:              = $23                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:53F6/s ...
0000003F _D:              = $24                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; TAKOF__TAKEOFF_LOOP+21/s ...
0000003F _E:              = $25                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:53F6/s ...
0000003F _F:              = $26                  ; XREF: REFUEL+A1/s
0000003F                                         ; INCBMB/s ...
0000003F _G:              = $27                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; COLM20+5E/s ...
0000003F _H:              = $28
0000003F _I:              = $29                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:NOVI/s ...
0000003F _J:              = $2A
0000003F _K:              = $2B                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:RNKI/s ...
0000003F _L:              = $2C                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; CKLAND:MG/s ...
0000003F _M:              = $2D                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; COLM20+7F/s ...
0000003F _N:              = $2E                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:NOVI/s ...
0000003F _O:              = $2F                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:53F6/s ...
0000003F _P:              = $30                  ; XREF: PLFWD:loc_220E/s
0000003F                                         ; L6:OF/s ...
0000003F _Q:              = $31                  ; XREF: DATA:SQLDI/s
0000003F _R:              = $32                  ; XREF: DRUN__DRAW_RUNWAY+5D/s
0000003F                                         ; DATA:53F6/s ...
0000003F _S:              = $33                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:53F6/s ...
0000003F _T:              = $34                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:53F6/s ...
0000003F _U:              = $35                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:DEMI/s ...
0000003F _V:              = $36                  ; XREF: DATA:NOVI/s
0000003F                                         ; DATA:VETI/s ...
0000003F _W:              = $37                  ; XREF: WIND+1D/s
0000003F                                         ; DATA:RSWI/s
0000003F _X:              = $38                  ; XREF: TAPE_LOADER:TEXT_LINE/s
0000003F                                         ; DATA:DEMI/s
0000003F _Y:              = $39                  ; XREF: DATA:NGRVI/s
0000003F                                         ; DATA:DEMI/s ...
0000003F _Z:              = $3A                  ; XREF: DATA:KMKZI/s
000000C0 _C_BLACK:        = 0                    ; XREF: TAPE_LOADER:TEXT_LINE/s
000000C0                                         ; TURN+F1/s ...
000000C0 _C_BLUE:         = $40                  ; XREF: TAPE_LOADER:TEXT_LINE/s
000000C0                                         ; TURN+71/s ...
000000C0 _C_ORANGE:       = $80                  ; XREF: READ_BLOCK+17/s
000000C0                                         ; READ_BLOCK+1E/s ...
000000C0 _C_LBLUE:        = $C0                  ; XREF: REFUEL+D/s
000000C0                                         ; CKLAND:MG/s ...
000000C0
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum SETVBV_VECTORS, width 1 byte
FFFFFFFF SETVBV_CDTMV1:   = 1
FFFFFFFF SETVBV_CDTMV2:   = 2
FFFFFFFF SETVBV_CDTMV3:   = 3
FFFFFFFF SETVBV_CDTMV4:   = 4
FFFFFFFF SETVBV_CDTMV5:   = 5
FFFFFFFF SETVBV_VVBLKI:   = 6
FFFFFFFF SETVBV_VVBLKD:   = 7                    ; XREF: EB:MZ/s
FFFFFFFF                                         ; PAUSE:IF/s ...
FFFFFFFF
0000007F ; ---------------------------------------------------------------------------
0000007F
0000007F ; enum LEVEL, bitfield
0000007F L_GRAS:          = 0                    ; XREF: DRAW+7/s
0000007F                                         ; DRTR__DRAW_TREE+82/s ...
0000007F L_WATER_GRAS_A:  = 1                    ; XREF: DRAW+8C/s
0000007F L_WATER:         = 2                    ; XREF: DRAW+93/s
0000007F                                         ; DRAW+EF/s ...
0000007F L_CLIFF_WATER_A: = 3                    ; XREF: DRAW+A7/s
0000007F                                         ; XPLSN+46/s
0000007F L_CLIFF_GRAS_A:  = 4                    ; XREF: DRAW+B7/s
0000007F                                         ; DRAW+152/s ...
0000007F L_WATER_GRAS_B1: = 5                    ; XREF: DRAW+198/s
0000007F                                         ; XPLSN+4A/s
0000007F L_WATER_GRAS_B2: = 6                    ; XREF: DRAW+18D/s
0000007F L_CLIFF_WATER_B1: = 7                   ; XREF: DRAW+1BE/s
0000007F                                         ; XPLSN+5A/s
0000007F L_CLIFF_WATER_B2: = 8                   ; XREF: DRAW+1B3/s
0000007F                                         ; XPLSN+42/s
0000007F L_CLIFF_GRAS_B1: = 9                    ; XREF: DRAW+C3/s
0000007F                                         ; DRAW+1E7/s
0000007F L_CLIFF_GRAS_B2: = $A                   ; XREF: DRAW:BN/s
0000007F                                         ; DRAW:AP/s ...
0000007F L_WATER_GRAS_C1: = $B                   ; XREF: DRAW+125/s
0000007F L_WATER_GRAS_C2: = $C                   ; XREF: DRAW+E8/s
0000007F                                         ; XPLSN+4E/s
0000007F L_CLIFF_WATER_C: = $D                   ; XREF: DRAW+140/s
0000007F                                         ; XPLSN+3E/s
0000007F L_GRAS_CLIFF_WATER_A: = $E              ; XREF: DRAW+10A/s
0000007F                                         ; XPLSN+66/s ...
0000007F L_GRASS_CLIFF_D: = $F                   ; XREF: DRAW:Y_/s
0000007F                                         ; XPLSN+62/s
0000007F L_GRAS_CLIFF_WATER_B: = $10             ; XREF: DRAW:AZ/s
0000007F                                         ; XPLSN+5E/s
0000007F L_RUNWAY_RIGHT_11: = $11                ; XREF: DRUN__DRAW_RUNWAY+C0/s
0000007F L_RUNWAY_CENTER_12: = $12               ; XREF: QN:RA/s
0000007F                                         ; ZE+37/s ...
0000007F L_RUNWAY_LEFT_13: = $13                 ; XREF: DRUN__DRAW_RUNWAY+F2/s
0000007F                                         ; RNK__DISPLAY_RANK-D/s
0000007F L_RUNWAY_MARKER_14: = $14               ; XREF: DRUN__DRAW_RUNWAY+EA/s
0000007F                                         ; RNK__DISPLAY_RANK-6/s
0000007F L_HANGAR_A:      = $15                  ; XREF: DATA:HNGR1/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_B:      = $16                  ; XREF: DATA:HNGR2/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_C:      = $17                  ; XREF: DATA:HNGR2/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_D:      = $18                  ; XREF: DATA:HNGR2/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_E:      = $19                  ; XREF: DATA:HNGR2/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_F:      = $1A                  ; XREF: DATA:HNGR1/s
0000007F                                         ; DATA:HNGR2/s ...
0000007F L_HANGAR_G:      = $1B                  ; XREF: DATA:HNGR2/s
0000007F                                         ; DATA:HNGR3/s ...
0000007F L_HANGAR_H:      = $1C                  ; XREF: DATA:HNGR3/s
0000007F                                         ; DATA:AAA/s ...
0000007F L_HANGAR_I:      = $1D                  ; XREF: DATA:HNGR5/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_J:      = $1E                  ; XREF: DATA:HNGR5/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_K:      = $1F                  ; XREF: DATA:HNGR5/s
0000007F                                         ; DATA:AAF/s
0000007F L_HANGAR_L:      = $20                  ; XREF: DATA:HNGR5/s
0000007F                                         ; DATA:AAF/s
0000007F L_TREE_TOP_LEFT_A: = $21                ; XREF: DRTR__DRAW_TREE:ES/s
0000007F L_TREE_TOP_LEFT_B: = $22                ; XREF: DRTR__DRAW_TREE+2B/s
0000007F L_TREE_TOP_RIGHT_B: = $23               ; XREF: DRTR__DRAW_TREE:EQ/s
0000007F L_TREE_TOP_RIGHT_A: = $24               ; XREF: DRTR__DRAW_TREE+19/s
0000007F L_TREE_BOTTOM_LEFT_A: = $25             ; XREF: DRTR__DRAW_TREE+AA/s
0000007F L_TREE_BOTTOM_LEFT_B: = $26             ; XREF: DRTR__DRAW_TREE:EJ/s
0000007F L_TREE_BOTTOM_RIGHT_A: = $27            ; XREF: DRTR__DRAW_TREE+98/s
0000007F L_TREE_BOTTOM_RIGHT_B: = $28            ; XREF: DRTR__DRAW_TREE:EH/s
0000007F L_BRIDGE_A:      = $29                  ; XREF: DATA:BR2/s
0000007F                                         ; DATA:AAC/s
0000007F L_BRIDGE_B:      = $2A                  ; XREF: DATA:BR3/s
0000007F                                         ; DATA:AAD/s
0000007F L_BRIDGE_C:      = $2B                  ; XREF: DATA:BR2/s
0000007F                                         ; DATA:AAC/s
0000007F L_BRIDGE_D:      = $2C                  ; XREF: DATA:BR2/s
0000007F                                         ; DATA:AAC/s
0000007F L_BRIDGE_E:      = $2D
0000007F L_BRIDGE_F:      = $2E                  ; XREF: DATA:BR2/s
0000007F                                         ; DATA:AAC/s
0000007F L_BRIDGE_G:      = $2F                  ; XREF: XPLSN+3A/s
0000007F                                         ; DATA:BR1/s
0000007F L_BRIDGE_H:      = $30                  ; XREF: DATA:BR1/s
0000007F L_ANTI_AIRCRAFT_BATTERY_A: = $31        ; XREF: QN+7B/s
0000007F                                         ; ENRUN+F6/s ...
0000007F L_BRIDGE_J:      = $32                  ; XREF: DATA:BR1/s
0000007F                                         ; DATA:AAC/s
0000007F L_BRIDGE_K:      = $33                  ; XREF: DRBR__DRAW_BRIDGE+115/s
0000007F                                         ; DRBR__DRAW_BRIDGE+143/s
0000007F L_BRIDGE_L:      = $34                  ; XREF: DRBR__DRAW_BRIDGE+124/s
0000007F                                         ; DRBR__DRAW_BRIDGE+14D/s
0000007F L_BRIDGE_M:      = $35                  ; XREF: DRBR__DRAW_BRIDGE+C6/s
0000007F                                         ; DRBR__DRAW_BRIDGE+FD/s ...
0000007F L_BRIDGE_N:      = $36                  ; XREF: DRBR__DRAW_BRIDGE+D2/s
0000007F                                         ; DRBR__DRAW_BRIDGE+107/s ...
0000007F L_BRIDGE_O:      = $37                  ; XREF: DATA:BR3/s
0000007F                                         ; DATA:AAD/s
0000007F L_BRIDGE_P:      = $38                  ; XREF: DATA:BR3/s
0000007F                                         ; DATA:AAD/s
0000007F L_BRIDGE_Q:      = $39                  ; XREF: DATA:BR1/s
0000007F                                         ; DATA:AAC/s
0000007F L_FIXED_BOAT_TOP_LEFT: = $3A            ; XREF: DRBT__DRAW_BOAT+4E/s
0000007F                                         ; CKCHAR+10/s
0000007F L_FIXED_BOAT_TOP_RIGHT: = $3B           ; XREF: DRBT__DRAW_BOAT:HB/s
0000007F                                         ; CKCHAR+14/s
0000007F L_FIXED_BOAT_BOTTOM_LEFT: = $3C         ; XREF: DRBT__DRAW_BOAT+3A/s
0000007F                                         ; CKCHAR+18/s ...
0000007F L_FIXED_BOAT_BOTTOM_RIGHT: = $3D        ; XREF: DRBT__DRAW_BOAT+35/s
0000007F                                         ; CKCHAR+1C/s ...
0000007F L_EXPLOSION_GRAS_4: = $3E               ; XREF: ID:HO/s
0000007F L_BUILDING_ROOF_CENTER: = $3F           ; XREF: QN+9F/s
0000007F                                         ; DATA:AAA/s
0000007F L_EXPLOSION_GRAS_1: = $40               ; XREF: XPLSN:HY/s
0000007F                                         ; ID:HP/s
0000007F L_EXPLOSION_GRAS_2: = $41               ; XREF: ID+6A/s
0000007F L_EXPLOSION_GRAS_3: = $42               ; XREF: ID+7D/s
0000007F L_EXPLOSION_WATER_1: = $43              ; XREF: XPLSN:HW/s
0000007F                                         ; HV:IB/s ...
0000007F L_EXPLOSION_WATER_2: = $44              ; XREF: HV:IA/s
0000007F                                         ; Y6:loc_43A2/s
0000007F L_BUILDING_WINDOW: = $45                ; XREF: QN+5A/s
0000007F                                         ; DATA:AAA/s
0000007F L_TANK_LEFT_A:   = $46                  ; XREF: QN+2A/s
0000007F                                         ; TNKC1-25/s ...
0000007F L_TANK_RIGHT_A:  = $47                  ; XREF: QN+2F/s
0000007F                                         ; TNKC1-29/s ...
0000007F L_GRAS_BEFORE_BUILDING: = $48           ; XREF: QN+37/s
0000007F                                         ; TNKC1:E6/s ...
0000007F L_BUILDING_ROOF_TOP_RIGHT: = $49        ; XREF: QN+A7/s
0000007F                                         ; DATA:AAA/s
0000007F L_BUILDING_WALL_A: = $4A                ; XREF: QN+6B/s
0000007F                                         ; DATA:AAA/s
0000007F L_RUNWAY_LEFT:   = $4B                  ; XREF: DATA:ROADS/s
0000007F                                         ; DATA:ENRNIM/s ...
0000007F L_ROAD_DIAG_RIGHT_B: = $4C              ; XREF: DATA:ROADR/s
0000007F                                         ; DATA:AAE/s
0000007F L_ROAD_DIAG_RIGHT_A: = $4D              ; XREF: DATA:ROADR/s
0000007F                                         ; DATA:AAE/s
0000007F L_ROAD_DIAG_LEFT_B: = $4E               ; XREF: DATA:ROADR/s
0000007F                                         ; DATA:AAE/s
0000007F L_ROAD_E:        = $4F
0000007F L_RUNWAY_PLANE_TOP_RIGHT: = $50         ; XREF: ENRUN+57/s
0000007F                                         ; CKCHAR/s
0000007F L_RUNWAY_PLANE_TOP_LEFT: = $51          ; XREF: ENRUN+52/s
0000007F                                         ; CKCHAR+4/s
0000007F L_RUNWAY_PLANE_BOTTOM_RIGHT: = $52      ; XREF: ENRUN+7B/s
0000007F                                         ; CKCHAR+8/s
0000007F L_RUNWAY_PLANE_BOTTOM_LEFT: = $53       ; XREF: ENRUN+76/s
0000007F                                         ; CKCHAR+C/s
0000007F L_SKYSCRAPER_54: = $54                  ; XREF: BLDG+AA/s
0000007F                                         ; DATA:AAB/s
0000007F L_SKYSCRAPER_55: = $55                  ; XREF: BLDG+16B/s
0000007F                                         ; DATA:AAB/s
0000007F L_SKYSCRAPER_56: = $56                  ; XREF: BLDG+131/s
0000007F                                         ; BLDG+154/s ...
0000007F L_SKYSCRAPER_57: = $57                  ; XREF: BLDG+C7/s
0000007F                                         ; DATA:AAB/s
0000007F L_SKYSCRAPER_58: = $58                  ; XREF: BLDG:loc_3109/s
0000007F                                         ; DATA:AAB/s
0000007F L_SKYSCRAPER_59: = $59                  ; XREF: BLDG+173/s
0000007F                                         ; DATA:AAB/s
0000007F L_SKYSCRAPER_B_5A: = $5A                ; XREF: DATA:AAB/s
0000007F L_SKYSCRAPER_B_5B: = $5B                ; XREF: DRBR__DRAW_BRIDGE+163/s
0000007F                                         ; DATA:AAC/s
0000007F L_SKYSCRAPER_B_C: = $5C                 ; XREF: DATA:AAB/s
0000007F L_SKYSCRAPER_B_5D: = $5D                ; XREF: DATA:AAB/s
0000007F L_SKYSCRAPER_B_5E: = $5E                ; XREF: DATA:AAB/s
0000007F L_EXPLOSION_5F:  = $5F                  ; XREF: AEI:loc_4922/s
0000007F L_WATER_60:      = $60                  ; XREF: ZE+A5/s
0000007F                                         ; XI+7/s
0000007F L_61:            = $61                  ; XREF: ZE+AD/s
0000007F L_62:            = $62                  ; XREF: ZE:loc_34B1/s
0000007F L_63:            = $63
0000007F L_64:            = $64                  ; XREF: ZE+FD/s XYZ/s
0000007F L_65:            = $65                  ; XREF: ZE:loc_3487/s
0000007F L_66:            = $66
0000007F L_67:            = $67
0000007F L_68:            = $68
0000007F L_69:            = $69
0000007F L_6A:            = $6A
0000007F L_6B:            = $6B
0000007F L_STREET_CAR_LEFT_COLOR_A: = $6C        ; XREF: DRCAR+26/s
0000007F                                         ; SHBT+1F/s ...
0000007F L_STREET_CAR_RIGHT_COLOR_A: = $6D       ; XREF: DRCAR+21/s
0000007F                                         ; SHBT+27/s ...
0000007F L_STREET_CAR_LEFT_COLOR_B: = $6E        ; XREF: DRCAR+30/s
0000007F                                         ; SHBT+23/s ...
0000007F L_STREET_CAR_RIGHT_COLOR_B: = $6F       ; XREF: DRCAR:J7/s
0000007F                                         ; SHBT+2B/s ...
0000007F L_ANTI_AIRCRAFT_BATTERY_B: = $70        ; XREF: GUNC+34/s
0000007F                                         ; GUNC+46/s ...
0000007F L_TANK_LEFT_B:   = $71                  ; XREF: GUNC+6D/s
0000007F                                         ; DATA:AAG/s
0000007F L_TANK_RIGHT_B:  = $72                  ; XREF: GUNC+72/s
0000007F                                         ; DATA:AAG/s
0000007F L_FLASHING_MARKER: = $73                ; XREF: GUNC-5DD/s
0000007F                                         ; GUNC-5CB/s
0000007F L_RUNWAY_RIGHT:  = $74                  ; XREF: DATA:ROADS/s
0000007F                                         ; DATA:ENRNIM/s
0000007F L_EXPLOSION_WATER_3: = $75              ; XREF: V8:_1/s
0000007F                                         ; V8+2B/s ...
0000007F L_EXPLOSION_WATER_4: = $76              ; XREF: V8+20/s
0000007F                                         ; Y6+C/s
0000007F L_EXPLOSION_WATER_5: = $77              ; XREF: V8+8/s
0000007F                                         ; V8+17/s
0000007F L_EXPLOSION_WATER_6: = $78              ; XREF: V8+C/s
0000007F L_EXPLOSION_STREET_2: = $79             ; XREF: Y6+1B/s
0000007F                                         ; Y6:loc_43BC/s ...
0000007F L_EXPLOSION_STREET_3: = $7A             ; XREF: Y6+3F/s
0000007F L_EXPLOSION_STREET_1: = $7B             ; XREF: Y6+32/s
0000007F                                         ; Y6+4C/s
0000007F L_RUNWAY_CENTER: = $7C                  ; XREF: DRBR__DRAW_BRIDGE+B8/s
0000007F                                         ; DRBR__DRAW_BRIDGE+EF/s ...
0000007F L_ROAD_DIAG_LEFT_A: = $7D               ; XREF: DATA:ROADR/s
0000007F                                         ; DATA:AAE/s
0000007F L_SOLID_WALL:    = $7E                  ; XREF: CLEAR+10/s
0000007F                                         ; AEI+7/s ...
0000007F L_BUILDING_ROOF_TOP_LEFT: = $7F         ; XREF: QN+98/s
0000007F                                         ; DATA:AAA/s
00000080 L_C_0:           = 0                    ; XREF: DRAW+7/s
00000080                                         ; DRAW+8C/s ...
00000080 L_C_1:           = $80                  ; XREF: DRBT__DRAW_BOAT+35/s
00000080                                         ; DRBT__DRAW_BOAT+3A/s ...
00000080
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum DIR_RIVER
FFFFFFFF DIR_RIVER_STRAIGHT: = 1                 ; XREF: DRAW+11/s
FFFFFFFF                                         ; DRAW+29/s ...
FFFFFFFF DIR_RIVER_LEFT:  = 2                    ; XREF: RESET+26C/s
FFFFFFFF                                         ; DRAW:BA/s
FFFFFFFF DIR_RIVER_RIGHT: = 3                    ; XREF: DRAW+15/s
FFFFFFFF                                         ; DRAW:AV/s
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum TURN_MODE, width 1 byte
FFFFFFFF TURN_MODE_OFF:   = 0
FFFFFFFF TURN_MODE_LEFT:  = 1                    ; XREF: LD-F/s
FFFFFFFF                                         ; L6+19A/s ...
FFFFFFFF TURN_MODE_RIGHT: = 2                    ; XREF: PLFWD+A3/s
FFFFFFFF                                         ; PLFWD+133/s ...
FFFFFFFF
00000007 ; ---------------------------------------------------------------------------
00000007
00000007 ; enum FINAL_TARGETS_STATE, bitfield, width 1 byte
00000007 FINAL_TARGET_1:  = 1                    ; XREF: CPTL:_8/s
00000007                                         ; BMCPTL:_3/s
00000007 FINAL_TARGET_2:  = 2                    ; XREF: CPTL:_9/s
00000007                                         ; BMCPTL:_4/s
00000007 FINAL_TARGET_3:  = 4                    ; XREF: CPTL+2A/s
00000007                                         ; BMCPTL+24/s
00000007 FINAL_TARGET_ALL: = 7                   ; XREF: STOPL+2D/s
00000007                                         ; FLSH+1B/s ...
00000007
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum JOYSTICK, width 1 byte
FFFFFFFF JOYSTICK_0:      = 0
FFFFFFFF JOYSTICK_1:      = 1
FFFFFFFF JOYSTICK_2:      = 2
FFFFFFFF JOYSTICK_3:      = 3
FFFFFFFF JOYSTICK_4:      = 4
FFFFFFFF JOYSTICK_DOWN_RIGHT: = 5                ; XREF: PROP+28/s
FFFFFFFF                                         ; PROP+45/s ...
FFFFFFFF JOYSTICK_UP_RIGHT: = 6                  ; XREF: JOYST+1E/s
FFFFFFFF                                         ; SPD__SPEED_CHANGE+8/s ...
FFFFFFFF JOYSTICK_RIGHT:  = 7                    ; XREF: PROP+24/s
FFFFFFFF                                         ; PROP+41/s ...
FFFFFFFF JOYSTICK_8:      = 8
FFFFFFFF JOYSTICK_DOWN_LEFT: = 9                 ; XREF: JOYST+22/s
FFFFFFFF JOYSTICK_UP_LEFT: = $A                  ; XREF: PROP+20/s
FFFFFFFF                                         ; PROP+3D/s ...
FFFFFFFF JOYSTICK_LEFT:   = $B                   ; XREF: PROP+1C/s
FFFFFFFF                                         ; PROP+39/s ...
FFFFFFFF JOYSTICK_c:      = $C
FFFFFFFF JOYSTICK_DOWN:   = $D                   ; XREF: RESET+8/s
FFFFFFFF                                         ; MENU__CHECK_KEYS+A6/s
FFFFFFFF JOYSTICK_UP:     = $E                   ; XREF: RESET+D/s
FFFFFFFF JOYSTICK_NOTHING: = $F                  ; XREF: TAKOF__TAKEOFF_LOOP+49/s
FFFFFFFF                                         ; DJOY__DEMO_JOYSTICK_INPUT+17/s ...
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum GAME_LEVEL
FFFFFFFF GAME_LEVEL_NOVICE: = 0
FFFFFFFF GAME_LEVEL_INTERMEDIATE: = 1            ; XREF: EB+30/s
FFFFFFFF                                         ; RNK__DISPLAY_RANK+7D/s ...
FFFFFFFF GAME_LEVEL_ADVANCED: = 2                ; XREF: CKSC+3/s
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum ENEMY_BULLET_MOVEMENT_TYPES, width 1 byte
FFFFFFFF ENEMY_BULLET_MOVEMENT_TYPES_LEFT: = 0   ; XREF: ZZ/s
FFFFFFFF                                         ; FTNKGN-1EE/s ...
FFFFFFFF ENEMY_BULLET_MOVEMENT_TYPES_LEFT2: = 1  ; XREF: FTNKGN-C5B/s
FFFFFFFF                                         ; FTNKGN:A9/s ...
FFFFFFFF ENEMY_BULLET_MOVEMENT_TYPES_NOTHING: = 2 ; XREF: FTNKGN:ZX/s
FFFFFFFF                                         ; FTNKGN-1DA/s ...
FFFFFFFF ENEMY_BULLET_MOVEMENT_TYPES_LEFT_RANDOM: = 3
FFFFFFFF ENEMY_BULLET_MOVEMENT_TYPES_RIGHT: = 4  ; XREF: FTNKGN-C44/s
FFFFFFFF                                         ; FTNKGN:G1/s ...
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum HORIZONTAL_POSITIONS, width 1 byte
FFFFFFFF PLANE_MIN_XorY_POSITION: = 60           ; XREF: UP+2/s CE+2/s ... ; min. allowed X position for the plane
FFFFFFFF PLANE_MAX_X_POSITION: = 184             ; XREF: CD+2/s
FFFFFFFF                                         ; JOYST+125/s ... ; max. allowed X position for the plane
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum GAME_PHASE, width 1 byte
FFFFFFFF GAME_PHASE_RIVER_PHASE_0: = 0           ; XREF: B7:XC/s
FFFFFFFF GAME_PHASE_DIAGNOAL_ROAD_1: = 1         ; XREF: B7+2F/s
FFFFFFFF GAME_PHASE_DIAGNOAL_ROAD_2: = 2         ; XREF: ENRUN+12/s
FFFFFFFF                                         ; BLDG+77/s ...
FFFFFFFF GAME_PHASE_ROAD_HARD_RIGHT_3: = 3       ; XREF: L6+4B/s
FFFFFFFF                                         ; TNKC+10/s ...
FFFFFFFF GAME_PHASE_4:    = 4                    ; XREF: B7+18/s
FFFFFFFF                                         ; TNKC1+10/s ...
FFFFFFFF GAME_PHASE_5:    = 5                    ; XREF: AREA+13/s
FFFFFFFF                                         ; CLEAR+8/s ...
FFFFFFFF GAME_PHASE_6:    = 6                    ; XREF: B7+28/s
FFFFFFFF                                         ; END+39/s ...
FFFFFFFF GAME_PHASE_7:    = 7                    ; XREF: B7+20/s
FFFFFFFF                                         ; YI+11/s ...
FFFFFFFF GAME_PHASE_8:    = 8                    ; XREF: AREA+17/s
FFFFFFFF                                         ; CLEAR+C/s ...
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum EXPLOSITION_TARGET, width 1 byte
FFFFFFFF EXPLOSITION_TARGET_WATER: = 0           ; XREF: Y8/s
FFFFFFFF                                         ; BMBSHP+D/s
FFFFFFFF EXPLOSITION_TARGET_GRAS: = 1            ; XREF: XPLSN:U3/s
FFFFFFFF                                         ; SHBT+71/s
FFFFFFFF EXPLOSITION_TARGET_2: = 2               ; XREF: HU:HX/s
FFFFFFFF                                         ; ID+63/s ...
FFFFFFFF EXPLOSITION_TARGET_BRIDGE: = 3          ; XREF: ID+D/s
FFFFFFFF                                         ; CKCHAR:W0/s
FFFFFFFF EXPLOSITION_TARGET_BUILDING: = 4        ; XREF: ID+11/s
FFFFFFFF                                         ; CKCHAR+6D/s
FFFFFFFF EXPLOSITION_TARGET_SKYSCRAPER: = 5      ; XREF: ID+15/s
FFFFFFFF                                         ; CKCHAR+8D/s
FFFFFFFF EXPLOSITION_TARGET_EMPTY_ROAD: = 6      ; XREF: ID+19/s X5/s
FFFFFFFF EXPLOSITION_TARGET_BOAT: = 7            ; XREF: ID+1D/s
FFFFFFFF                                         ; X8__HIT_BOAT_TR+17/s ...
FFFFFFFF EXPLOSITION_TARGET_RUNWAY_PLANE: = 8    ; XREF: ID+21/s
FFFFFFFF                                         ; Y7__HIT_RW_PLANE_TR+11/s
FFFFFFFF EXPLOSITION_TARGET_AIRPORT_HANGAR: = 9  ; XREF: ID+25/s
FFFFFFFF                                         ; Z3+63/s
FFFFFFFF EXPLOSITION_TARGET_10: = 10             ; XREF: ID+29/s
FFFFFFFF                                         ; Z3:_4/s
FFFFFFFF EXPLOSITION_TARGET_11: = 11
FFFFFFFF EXPLOSITION_TARGET_12: = 12
FFFFFFFF EXPLOSITION_TARGET_13: = 13
FFFFFFFF EXPLOSITION_TARGET_14: = 14
FFFFFFFF EXPLOSITION_TARGET_15: = 15             ; XREF: ID+2D/s
FFFFFFFF                                         ; Z3+3D/s
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum PRIMARY_TARGET_SUBTYPE, width 1 byte
FFFFFFFF PRIMARY_TARGET_SUBTYPE_0: = 0
FFFFFFFF PRIMARY_TARGET_SUBTYPE_BUILDING: = 1    ; XREF: QN+C7/s
FFFFFFFF                                         ; CKCHAR+58/s
FFFFFFFF PRIMARY_TARGET_SUBTYPE_SKYSCRAPER: = 2  ; XREF: BLDG+18E/s
FFFFFFFF                                         ; CKCHAR+78/s
FFFFFFFF PRIMARY_TARGET_SUBTYPE_BRIDGE: = 3      ; XREF: DRBR__DRAW_BRIDGE+7B/s
FFFFFFFF                                         ; CKCHAR+A0/s
FFFFFFFF
FFFFFFFF ; ---------------------------------------------------------------------------
FFFFFFFF
FFFFFFFF ; enum UNKNOWNS_STATE, width 1 byte
FFFFFFFF UNKNOWNS_STATE_0: = 0
FFFFFFFF UNKNOWNS_STATE_1: = 1
FFFFFFFF UNKNOWNS_STATE_2: = 2                   ; XREF: L6+3/s
FFFFFFFF                                         ; L6+42/s
FFFFFFFF UNKNOWNS_STATE_3: = 3                   ; XREF: DRP23+13/s
FFFFFFFF                                         ; DRP23+72/s ...
FFFFFFFF UNKNOWNS_STATE_4: = 4                   ; XREF: DRP23+17/s
FFFFFFFF                                         ; DRP23+99/s ...
FFFFFFFF UNKNOWNS_STATE_5: = 5                   ; XREF: PLBCK+1C/s
FFFFFFFF                                         ; L6+F/s ...
FFFFFFFF UNKNOWNS_STATE_6: = 6                   ; XREF: DRP23+F/s
FFFFFFFF                                         ; DRBR__DRAW_BRIDGE+177/s
FFFFFFFF UNKNOWNS_STATE_7: = 7                   ; XREF: PLFWD+11/s
FFFFFFFF                                         ; KV/s
FFFFFFFF UNKNOWNS_STATE_8: = 8                   ; XREF: PLFWD+15/s
FFFFFFFF UNKNOWNS_STATE_9: = 9
FFFFFFFF UNKNOWNS_STATE_10: = 10                 ; XREF: PLFWD+9/s
FFFFFFFF UNKNOWNS_STATE_11: = 11                 ; XREF: PLFWD+D/s
FFFFFFFF                                         ; PLFWD+DA/s
FFFFFFFF
ZEROPAGE:0000 ;
ZEROPAGE:0000 ; +-------------------------------------------------------------------------+
ZEROPAGE:0000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
ZEROPAGE:0000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
ZEROPAGE:0000 ; |                      License info: 48-3051-7314-20                      |
ZEROPAGE:0000 ; |                       Markus Fritze, personal use                       |
ZEROPAGE:0000 ; +-------------------------------------------------------------------------+
ZEROPAGE:0000 ;
ZEROPAGE:0000 ; Input SHA256 : 8568B6B1AF5F74D6DB88B1FCFB576B06F31FE1F930646E7A65D41C0313CF620D
ZEROPAGE:0000 ; Input MD5    : 1D772C7FDBD42E633EA7805A065EC2C8
ZEROPAGE:0000 ; Input CRC32  : 37B533A8
ZEROPAGE:0000
ZEROPAGE:0000
ZEROPAGE:0000 ; ; Processor:        M6502
ZEROPAGE:0000 ; ; Target assembler: SVENSON ELECTRONICS 6502/65C02 ASSEMBLER - V.1.0 - MAY, 1988
ZEROPAGE:0000
ZEROPAGE:0000 ; ===========================================================================
ZEROPAGE:0000
ZEROPAGE:0000 ; Segment type: Regular
ZEROPAGE:0000                 ;.segment ZEROPAGE
ZEROPAGE:0000                 .BYTE 0,0 ; (uninited)
ZEROPAGE:0002 CASINI:         .BYTE 0,0 ; (uninited)  ; DATA XREF: RESET+2↓w
ZEROPAGE:0002                                         ; RESET+6↓w
ZEROPAGE:0002                                         ; CASSETTE INIT LOCATION
ZEROPAGE:0004                 .BYTE 0,0,0,0,0 ; (uninited)
ZEROPAGE:0009 BOOT?:          .BYTE 0 ; (uninited)    ; DATA XREF: RESET+32↓w
ZEROPAGE:0009                                         ; SUCCESSFUL BOOT FLAG
ZEROPAGE:000A                 .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:0012 RTCLOK:         .BYTE 0,0,0 ; (uninited)
ZEROPAGE:0012                                         ; DATA XREF: RESET+1AB↓w
ZEROPAGE:0012                                         ; PAUSE+19↓r ...
ZEROPAGE:0012                                         ; REAL TIME CLOCK (IN 16 MSEC UNITS)
ZEROPAGE:0015                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:0015                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:0015                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:0015                 .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:004D ATRACT:         .BYTE 0 ; (uninited)    ; DATA XREF: EB+29↓w
ZEROPAGE:004D                                         ; SRT+36↓w ...
ZEROPAGE:004D                                         ; ATRACT FLAG
ZEROPAGE:004E byte_4E:        .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:004E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:004E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:004E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:004E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:004E                 .BYTE 0,0 ; (uninited)
ZEROPAGE:00A0 VV1:            .BYTE 0,0 ; (uninited)  ; DATA XREF: PLAY_IT+F↓w
ZEROPAGE:00A0                                         ; PLAY_NOTE+12↓r ...
ZEROPAGE:00A0                                         ; Sound: Voice 1 Music Playback Note Ptr
ZEROPAGE:00A2 VV2:            .BYTE 0,0 ; (uninited)  ; DATA XREF: PLAY_IT+17↓w
ZEROPAGE:00A2                                         ; PLAY_NOTE+7E↓r ...
ZEROPAGE:00A2                                         ; Sound: Voice 2 Music Playback Note Ptr
ZEROPAGE:00A4 VV3:            .BYTE 0,0 ; (uninited)  ; DATA XREF: PLAY_IT+1F↓w
ZEROPAGE:00A4                                         ; PLAY_NOTE+E8↓r ...
ZEROPAGE:00A4                                         ; Sound: Voice 3 Music Playback Note Ptr
ZEROPAGE:00A6 ADR1:           .BYTE 0,0 ; (uninited)  ; DATA XREF: GET_AUDF+A↓w
ZEROPAGE:00A6                                         ; GET_AUDF+1D↓r ...
ZEROPAGE:00A6                                         ; Sound: temp addr for sound frequency calculation
ZEROPAGE:00A8                 .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
ZEROPAGE:00A8 ; end of 'ZEROPAGE'
ZEROPAGE:00A8
VARS_ZP:00B0 ; Zero-page variables for Blue Max
VARS_ZP:00B0 ; ===========================================================================
VARS_ZP:00B0
VARS_ZP:00B0 ; Segment type: Uninitialized
VARS_ZP:00B0                 ;.segment VARS_ZP
VARS_ZP:00B0                 * =  $B0
VARS_ZP:00B0 TEMP_B0:        .BYTE 0 ; (uninited)    ; DATA XREF: TURN+157↓w
VARS_ZP:00B0                                         ; TURN+15C↓w ...
VARS_ZP:00B1 byte_B1:        .BYTE 0 ; (uninited)    ; DATA XREF: RESET+D1↓w
VARS_ZP:00B1                                         ; COLM02+40↓w ...
VARS_ZP:00B2 byte_B2:        .BYTE 0 ; (uninited)    ; DATA XREF: EB+14C↓w
VARS_ZP:00B2                                         ; BLDG↓r ...
VARS_ZP:00B3                 .BYTE 0 ; (uninited)
VARS_ZP:00B4 byte_B4:        .BYTE 0 ; (uninited)    ; DATA XREF: BLDG+8C↓w
VARS_ZP:00B4                                         ; BLDG:loc_3048↓w ...
VARS_ZP:00B5 SKYSCRAPER_TILE_OFFSET:.BYTE 0 ; (uninited)
VARS_ZP:00B5                                         ; DATA XREF: BLDG:loc_3032↓w
VARS_ZP:00B5                                         ; BLDG+AD↓r ...
VARS_ZP:00B6 byte_B6:        .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1E7↓w
VARS_ZP:00B6                                         ; EB+1D↓w ...
VARS_ZP:00B7 CURRENT_GAME_PHASE:.BYTE 0 ; (uninited) ; DATA XREF: RESET+1C8↓w
VARS_ZP:00B7                                         ; EB+14E↓w ...
VARS_ZP:00B8 GAME_PHASE_ROWS:.BYTE 0 ; (uninited)    ; DATA XREF: EB+145↓w
VARS_ZP:00B8                                         ; B7↓r ...
VARS_ZP:00B8                                         ; Length of a game phase in remaining rows
VARS_ZP:00B9 byte_B9:        .BYTE 0 ; (uninited)    ; DATA XREF: BLDGL:ZF↓r
VARS_ZP:00B9                                         ; BLDGL+4B↓w ...
VARS_ZP:00BA byte_BA:        .BYTE 0 ; (uninited)    ; DATA XREF: B7+86↓w
VARS_ZP:00BA                                         ; ZE:YG↓r ...
VARS_ZP:00BB byte_BB:        .BYTE 0 ; (uninited)    ; DATA XREF: ZE+3A↓r
VARS_ZP:00BB                                         ; ZE+CB↓r ...
VARS_ZP:00BC byte_BC:        .BYTE 0 ; (uninited)    ; DATA XREF: XYZ+5↓r
VARS_ZP:00BC                                         ; END+10↓r ...
VARS_ZP:00BD byte_BD:        .BYTE 0 ; (uninited)    ; DATA XREF: ZE+C3↓r
VARS_ZP:00BD                                         ; END+6↓r ...
VARS_ZP:00BE WIND_DURATION:  .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1A3↓w
VARS_ZP:00BE                                         ; CKLAND+48↓w ...
VARS_ZP:00BE                                         ; Duration during which Wind is in effect
VARS_ZP:00BF byte_BF:        .BYTE 0 ; (uninited)    ; DATA XREF: DRBT__DRAW_BOAT+41↓w
VARS_ZP:00BF                                         ; DRBR__DRAW_BRIDGE+98↓w ...
VARS_ZP:00C0 ENEMY_X_POS:    .BYTE 0 ; (uninited)    ; DATA XREF: DRP23+58↓w
VARS_ZP:00C0                                         ; DRP23+7F↓w ...
VARS_ZP:00C0                                         ; Enemy X position
VARS_ZP:00C1 ENEMY_Y_POS:    .BYTE 0 ; (uninited)    ; DATA XREF: DG+2↓r
VARS_ZP:00C1                                         ; DRP23+2D↓w ...
VARS_ZP:00C1                                         ; Enemy Y position
VARS_ZP:00C2 byte_C2:        .BYTE 0 ; (uninited)    ; DATA XREF: COLP02+16↓r
VARS_ZP:00C2                                         ; PLFWD+43↓w ...
VARS_ZP:00C3                 .BYTE 0 ; (uninited)
VARS_ZP:00C4 byte_C4:        .BYTE 0 ; (uninited)    ; DATA XREF: RESET+125↓w
VARS_ZP:00C4                                         ; DRP23+2F↓r ...
VARS_ZP:00C5 byte_C5:        .BYTE 0 ; (uninited)    ; DATA XREF: RESET+239↓w
VARS_ZP:00C5                                         ; CKCOL↓r ...
VARS_ZP:00C6                 ; 0 .BYTE uninited & unexplored
VARS_ZP:00C7 PREVIOUS_TILE_ROW_PTR:.BYTE 0,0 ; (uninited)
VARS_ZP:00C7                                         ; DATA XREF: V8+14↓w
VARS_ZP:00C7                                         ; V8+19↓w ...
VARS_ZP:00C9                 .BYTE 0 ; (uninited)
VARS_ZP:00CA PLANE_HIT_FLASH_COUNTER:.BYTE 0 ; (uninited)
VARS_ZP:00CA                                         ; DATA XREF: RESET+1B1↓w
VARS_ZP:00CA                                         ; COLM20+2F↓w ...
VARS_ZP:00CA                                         ; !=0 => counter to signal damage via flashing
VARS_ZP:00CB byte_CB:        .BYTE 0,0,0,0,0,0,0,0,0 ; (uninited)
VARS_ZP:00D4 TEMP_ADR:       .BYTE 0,0 ; (uninited)  ; DATA XREF: AFP+24↓w
VARS_ZP:00D4                                         ; XPLSN:ADB↓r ...
VARS_ZP:00D6                 ; 0 .BYTE uninited & unexplored
VARS_ZP:00D7 STICK0_COPY:    .BYTE 0 ; (uninited)    ; DATA XREF: RESET+179↓w
VARS_ZP:00D7                                         ; COMMON+3↓w ...
VARS_ZP:00D7                                         ; JOYSTICK 0 copy
VARS_ZP:00D8 STRIG0_COPY:    .BYTE 0 ; (uninited)    ; DATA XREF: RESET+237↓w
VARS_ZP:00D8                                         ; COMMON+8↓w ...
VARS_ZP:00D8                                         ; 0=: joystick button is pressed, !=0: button is not pressed
VARS_ZP:00D9                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
VARS_ZP:00D9                 .BYTE 0,0,0,0,0,0,0 ; (uninited)
VARS_ZP:00F0 DISABLE_MAP_GENERATION:.BYTE 0 ; (uninited)
VARS_ZP:00F0                                         ; DATA XREF: RESET+61↓w
VARS_ZP:00F0                                         ; RESET:B↓r ...
VARS_ZP:00F0                                         ; !=0 Disable generation of new map data. Reset during VBL scrolling
VARS_ZP:00F1 SCROLL_OFFSET_F1:.BYTE 0 ; (uninited)   ; DATA XREF: RESET+65↓w
VARS_ZP:00F1                                         ; RESET+73↓r ...
VARS_ZP:00F1                                         ; HSCROL and VSCROL shadow during gameplay
VARS_ZP:00F2 VBL_NEXT_ROW_PTR:.BYTE 0,0 ; (uninited) ; DATA XREF: VBIR__DEFERRED_VBL_DRAW+64↓w
VARS_ZP:00F2                                         ; DRAW:N↓w ...
VARS_ZP:00F2                                         ; new row to be draw. Set inside the VBL.
VARS_ZP:00F4 PLANE_HORI_POS: .BYTE 0 ; (uninited)    ; DATA XREF: RESET+226↓w
VARS_ZP:00F4                                         ; CE↓r ...
VARS_ZP:00F4                                         ; Horizontal Position of the Plane
VARS_ZP:00F5 PLANE_VERT_POS: .BYTE 0 ; (uninited)    ; DATA XREF: RESET+230↓w
VARS_ZP:00F5                                         ; DRP1↓r ...
VARS_ZP:00F5                                         ; Vertical Position of the Plane
VARS_ZP:00F6 PLANE_VERT_SHADOW_POS:.BYTE 0 ; (uninited)
VARS_ZP:00F6                                         ; DATA XREF: RESET+246↓w
VARS_ZP:00F6                                         ; SHDW_SUB+2↓r ...
VARS_ZP:00F6                                         ; Vertical Position of the Plane Shadow
VARS_ZP:00F7 CRASH_EXPLOSION_COUNTER:.BYTE 0 ; (uninited)
VARS_ZP:00F7                                         ; DATA XREF: TURN+11C↓w
VARS_ZP:00F7                                         ; TURN+133↓w ...
VARS_ZP:00F7                                         ; Duration counter for the plane explosion
VARS_ZP:00F8 RIVER_BRIDGE_ROW:.BYTE 0 ; (uninited)   ; DATA XREF: RESET+289↓w
VARS_ZP:00F8                                         ; EB+9↓w ...
VARS_ZP:00F9 PLANE_BULLET_Y_POS:.BYTE 0 ; (uninited) ; DATA XREF: RESET+119↓w
VARS_ZP:00F9                                         ; TURN+8A↓r ...
VARS_ZP:00F9                                         ; Y-Position of the current bullet from the plane
VARS_ZP:00FA byte_FA:        .BYTE 0 ; (uninited)    ; DATA XREF: RESET+11B↓w
VARS_ZP:00FA                                         ; TURN+DC↓w ...
VARS_ZP:00FB CURRENT_TILE_ROW_PTR:.BYTE 0,0 ; (uninited)
VARS_ZP:00FB                                         ; DATA XREF: XPLSN+15↓w
VARS_ZP:00FB                                         ; XPLSN+33↓r ...
VARS_ZP:00FD byte_FD:        .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1E2↓w
VARS_ZP:00FD                                         ; TURN+145↓r ...
VARS_ZP:00FE byte_FE:        .BYTE 0 ; (uninited)    ; DATA XREF: RESET+129↓w
VARS_ZP:00FE                                         ; VBIR__DEFERRED_VBL_DRAW:J↓r ...
VARS_ZP:00FF RIVER_RIGHT_X_POS:.BYTE 0 ; (uninited)  ; DATA XREF: RESET+205↓w
VARS_ZP:00FF                                         ; DRAW:P↓r ...
VARS_ZP:00FF ; end of 'VARS_ZP'                      ; Right position of the river
VARS_ZP:00FF
STACK:0100 ; ===========================================================================
STACK:0100
STACK:0100 ; Segment type: Regular
STACK:0100                 ;.segment STACK
STACK:0100                 * =  $100
STACK:0100 STACK:          .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; PAGE 1 - STACK
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
STACK:0100 ; end of 'STACK'
STACK:0100
LOWMEM:0200 ; ===========================================================================
LOWMEM:0200
LOWMEM:0200 ; Segment type: Regular
LOWMEM:0200                 ;.segment LOWMEM
LOWMEM:0200                 * =  $200
LOWMEM:0200 VDSLST:         .BYTE 0,0 ; (uninited)  ; DATA XREF: RESET+EA↓w
LOWMEM:0200                                         ; CNSL__CONSOLE+71↓w ...
LOWMEM:0200                                         ; DISPLAY LIST NMI VECTOR
LOWMEM:0202                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0202                 .BYTE 0,0,0,0,0,0 ; (uninited)
LOWMEM:0218 CDTMV1:         .BYTE 0,0 ; (uninited)  ; DATA XREF: CNSL__CONSOLE+13↓w
LOWMEM:0218                                         ; CNSL__CONSOLE+29↓w ...
LOWMEM:0218                                         ; COUNT DOWN TIMER 1 - used for music playback
LOWMEM:021A                 .BYTE 0,0 ; (uninited)
LOWMEM:021C CDTMV3:         .BYTE 0,0 ; (uninited)  ; DATA XREF: TIMER:L↓r
LOWMEM:021C                                         ; COUNT DOWN TIMER 3
LOWMEM:021E                 .BYTE 0,0,0,0 ; (uninited)
LOWMEM:0222 VVBLKI:         .BYTE 0,0 ; (uninited)  ; IMMEDIATE VERTICAL BLANK NMI VECTOR
LOWMEM:0224 VVBLKD:         .BYTE 0,0 ; (uninited)  ; DATA XREF: PBMB+E↓r
LOWMEM:0224                                         ; PBMB+8A↓r ...
LOWMEM:0224                                         ; DEFERRED VERTICAL BLANK NMI VECTOR
LOWMEM:0226 CDTMA1:         .BYTE 0,0 ; (uninited)  ; DATA XREF: EB+87↓w
LOWMEM:0226                                         ; PLAY_IT+27↓w ...
LOWMEM:0226                                         ; COUNT DOWN TIMER 1 JSR ADDRESS
LOWMEM:0228                 .BYTE 0,0,0,0,0,0,0 ; (uninited)
LOWMEM:022F SDMCTL:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+27↓w
LOWMEM:022F                                         ; RESET+45↓w ...
LOWMEM:022F                                         ; SAVE DMACTL REGISTER
LOWMEM:0230 SDLSTL:         .BYTE 0 ; (uninited)    ; DATA XREF: BOOT_CONTINUE+D↓w
LOWMEM:0230                                         ; RESET+BF↓w ...
LOWMEM:0230                                         ; SAVE DISPLAY LIST LOW BYTE
LOWMEM:0231 SDLSTH:         .BYTE 0 ; (uninited)    ; DATA XREF: BOOT_CONTINUE+12↓w
LOWMEM:0231                                         ; RESET+C7↓w ...
LOWMEM:0231                                         ; SAVE DISPLAY LIST HI BYTE
LOWMEM:0232                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0232                 .BYTE 0,0 ; (uninited)
LOWMEM:0244 COLDST:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1E↓w
LOWMEM:0244                                         ; COLDSTART FLAG (1=IN MIDDLE OF COLDSTART)
LOWMEM:0245                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0245                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0245                 .BYTE 0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:026F GPRIOR:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+23B↓w
LOWMEM:026F                                         ; PRIOR__+2E↓w ...
LOWMEM:026F                                         ; GLOBAL PRIORITY CELL
LOWMEM:0270                 .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0278 STICK0:         .BYTE 0 ; (uninited)    ; DATA XREF: COMMON↓r
LOWMEM:0278                                         ; SPD__SPEED_CHANGE+5↓r ...
LOWMEM:0278                                         ; JOYSTICK 0 RAM CELL
LOWMEM:0279                 .BYTE 0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0284 STRIG0:         .BYTE 0 ; (uninited)    ; DATA XREF: COMMON+5↓r
LOWMEM:0284                                         ; TRIGC__TRIGGER_COUNT↓r
LOWMEM:0284                                         ; JOYSTICK TRIGGER 0
LOWMEM:0285                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0285                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0285                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:0285                 .BYTE 0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:02C0 PCOLR0:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+217↓w
LOWMEM:02C0                                         ; TURN+13C↓w ...
LOWMEM:02C0                                         ; P0 COLOR
LOWMEM:02C1 PCOLR1:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1F5↓w
LOWMEM:02C1                                         ; SHCOL+10↓w ...
LOWMEM:02C1                                         ; P1 COLOR
LOWMEM:02C2 PCOLR2:         .BYTE 0 ; (uninited)    ; DATA XREF: TURN+14B↓w
LOWMEM:02C2                                         ; SK+5↓w ...
LOWMEM:02C2                                         ; P2 COLOR
LOWMEM:02C3 PCOLP3:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1F2↓w
LOWMEM:02C3                                         ; P3 COLOR
LOWMEM:02C4 COLOR0:         .BYTE 0 ; (uninited)    ; DATA XREF: BOOT_CONTINUE+5↓w
LOWMEM:02C4                                         ; RESET+D3↓w ...
LOWMEM:02C4                                         ; COLOR 0
LOWMEM:02C5 COLOR1:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+D8↓w
LOWMEM:02C5                                         ; CKCOL:L3↓r ...
LOWMEM:02C6 COLOR2:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+E0↓w
LOWMEM:02C6                                         ; B7+3E↓w ...
LOWMEM:02C7 COLOR3:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+25E↓w
LOWMEM:02C7                                         ; B7+B9↓w ...
LOWMEM:02C8 COLOR4:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1F8↓w
LOWMEM:02C8                                         ; B7+39↓w ...
LOWMEM:02C9                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:02C9                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:02C9                 .BYTE 0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:02F4 CHBAS:          .BYTE 0 ; (uninited)    ; DATA XREF: RESET+CC↓w
LOWMEM:02F4                                         ; CNSL__CONSOLE+31↓w
LOWMEM:02F4                                         ; CHBAS REGISTER RAM
LOWMEM:02F5                 .BYTE 0,0,0,0,0,0,0 ; (uninited)
LOWMEM:02FC CH:             .BYTE 0 ; (uninited)    ; DATA XREF: RESET+137↓w
LOWMEM:02FC                                         ; EB+EB↓w ...
LOWMEM:02FC                                         ; GLOBAL VARIABLE FOR KEYBOARD
LOWMEM:02FD                 .BYTE 0,0,0 ; (uninited)
LOWMEM:0300 DCB:            DCB_STRUCT <?>          ; DATA XREF: READ_BLOCK+5↓w
LOWMEM:0300                                         ; DEVICE CONTROL BLOCK
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
LOWMEM:030C                 .BYTE 0,0,0,0 ; (uninited)
LOWMEM:030C ; end of 'LOWMEM'
LOWMEM:030C
VARS:0600 ; Variables for Blue Max
VARS:0600 ; ===========================================================================
VARS:0600
VARS:0600 ; Segment type: Uninitialized
VARS:0600                 ;.segment VARS
VARS:0600                 * =  $600
VARS:0600 MAP_RIVER_DIR:  .BYTE 0 ; (uninited)    ; DATA XREF: RESET+271↓w
VARS:0600                                         ; DRAW:AY↓r ...
VARS:0600                                         ; Direction of the river
VARS:0601 MAP_RIVER_LENGTH:.BYTE 0 ; (uninited)   ; DATA XREF: RESET+20F↓w
VARS:0601                                         ; DRAW+26↓w ...
VARS:0601                                         ; Length of a certain river feature to continue (straight, turn left/right)
VARS:0602 byte_602:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1FD↓w
VARS:0602                                         ; DRAW+46↓r ...
VARS:0603 byte_603:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+269↓w
VARS:0603                                         ; DRAW+43↓w ...
VARS:0604 VBL_DOWN_COUNTER:.BYTE 0 ; (uninited)   ; DATA XREF: VBIR__DEFERRED_VBL_DRAW↓w
VARS:0604                                         ; VBIR__DEFERRED_VBL_DRAW+3↓r ...
VARS:0604                                         ; VBL down counter, running countinously during the game
VARS:0605 PROPELLER_PHASE:.BYTE 0 ; (uninited)    ; DATA XREF: RESET+16F↓w
VARS:0605                                         ; PROP↓w ...
VARS:0605                                         ; Propeller phase (typically 0-4)
VARS:0606 byte_606:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+23E↓w
VARS:0606                                         ; DRAW+B2↓r ...
VARS:0607 TURN_STICK0:    .BYTE 0 ; (uninited)    ; DATA XREF: TURN+2↓r
VARS:0607                                         ; TURN:BC↓w ...
VARS:0607                                         ; STICK0 copy for the TURN routine
VARS:0608 byte_608:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+261↓w
VARS:0608                                         ; JOYST:PN↓w ...
VARS:0609 CAN_LAND_FLAG:  .BYTE 0 ; (uninited)    ; DATA XREF: RESET+207↓w
VARS:0609                                         ; CKLAND↓r ...
VARS:0609                                         ; =0 => plane can land (runway reached)
VARS:060A TREE_POS_BUF:   .BYTE 0,0,0,0,0,0 ; (uninited)
VARS:060A                                         ; DATA XREF: RESET:EU↓t
VARS:060A                                         ; DRTR__DRAW_TREE:EO↓t ...
VARS:060A                                         ; Position of trees
VARS:0610 byte_610:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+241↓w
VARS:0610                                         ; DRAW+51↓r ...
VARS:0611 TREE_PLANT_MIN_X:.BYTE 0 ; (uninited)   ; DATA XREF: DRTR__DRAW_TREE:ET↓w
VARS:0611                                         ; DRTR__DRAW_TREE+79↓r
VARS:0611                                         ; min. X position for planing trees in a row
VARS:0612 TREE_PLANT_MAX_X:.BYTE 0 ; (uninited)   ; DATA XREF: DRTR__DRAW_TREE+54↓w
VARS:0612                                         ; DRTR__DRAW_TREE+74↓r
VARS:0612                                         ; max. X position for planing trees in a row
VARS:0613 RUNWAY_POS_Y_INDEX:.BYTE 0 ; (uninited) ; DATA XREF: RESET+122↓w
VARS:0613                                         ; DRUN__DRAW_RUNWAY:LY↓r ...
VARS:0613                                         ; Runway is 45 characters long, this is an index used for drawing the correct line
VARS:0614                 .BYTE 0,0 ; (uninited)
VARS:0616 TREE_PLANT_TRY_COUNT:.BYTE 0 ; (uninited)
VARS:0616                                         ; DATA XREF: DRTR__DRAW_TREE+63↓w
VARS:0616                                         ; DRTR__DRAW_TREE:EF↓w
VARS:0616                                         ; Try up to 25 times to find a position for a tree in a row
VARS:0617 byte_617:       .BYTE 0 ; (uninited)    ; DATA XREF: DRBR__DRAW_BRIDGE+B5↓w
VARS:0617                                         ; DRBR__DRAW_BRIDGE+111↓r
VARS:0618 byte_618:       .BYTE 0 ; (uninited)    ; DATA XREF: DRBR__DRAW_BRIDGE+C3↓w
VARS:0618                                         ; DRBR__DRAW_BRIDGE+117↓r
VARS:0619 byte_619:       .BYTE 0 ; (uninited)    ; DATA XREF: DRBR__DRAW_BRIDGE+EC↓w
VARS:0619                                         ; DRBR__DRAW_BRIDGE+13C↓r
VARS:061A byte_61A:       .BYTE 0 ; (uninited)    ; DATA XREF: DRBR__DRAW_BRIDGE+FA↓w
VARS:061A                                         ; DRBR__DRAW_BRIDGE+140↓r
VARS:061B byte_61B:       .BYTE 0 ; (uninited)    ; DATA XREF: VBIR__DEFERRED_VBL_DRAW+38↓w
VARS:061B                                         ; DRBR__DRAW_BRIDGE+29↓r
VARS:061C RIVER_BOAT_ROW_FLAG:.BYTE 0 ; (uninited)
VARS:061C                                         ; DATA XREF: RESET+116↓w
VARS:061C                                         ; DRBT__DRAW_BOAT:GV↓r ...
VARS:061C                                         ; !=0 boat top row drawn, ==0 boat bottom row drawn
VARS:061D RIVER_BOAT_NEXT_COUNTER:.BYTE 0 ; (uninited)
VARS:061D                                         ; DATA XREF: RESET+132↓w
VARS:061D                                         ; DRBT__DRAW_BOAT+A↓r ...
VARS:061D                                         ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
VARS:061E PLANE_BULLET_X_POS:.BYTE 0 ; (uninited) ; DATA XREF: TRIG__TRIGGER_MACHINE_GUN+26↓w
VARS:061E                                         ; TRIG__TRIGGER_MACHINE_GUN+3F↓r ...
VARS:061E                                         ; X-Position of the current bullet from the plane
VARS:061F byte_61F:       .BYTE 0 ; (uninited)    ; DATA XREF: PC+15↓w
VARS:061F                                         ; BOMB:TJ↓r ...
VARS:0620 byte_620:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+DD↓w
VARS:0620                                         ; TRIG__TRIGGER_MACHINE_GUN+1C↓r ...
VARS:0621 VAR_EXPLOSION_X_POS:.BYTE 0 ; (uninited)
VARS:0621                                         ; DATA XREF: XPLSN+10↓w
VARS:0621                                         ; ID+5↓r ...
VARS:0622 EXPLOSION_TILE_ANIMATION:.BYTE 0 ; (uninited)
VARS:0622                                         ; DATA XREF: RESET+1A0↓w
VARS:0622                                         ; AFP+17↓w ...
VARS:0623 byte_623:       .BYTE 0 ; (uninited)    ; DATA XREF: TURN+D7↓w
VARS:0623                                         ; PC+7↓w ...
VARS:0624 VAR_EXPLOSION_TARGET:.BYTE 0 ; (uninited)
VARS:0624                                         ; DATA XREF: XPLSN+70↓w
VARS:0624                                         ; Y8+2↓w ...
VARS:0625                 .BYTE 0,0,0,0,0 ; (uninited)
VARS:062A VBL_DRAW_DOWN_COUNTER:.BYTE 0 ; (uninited)
VARS:062A                                         ; DATA XREF: VBIR__DEFERRED_VBL_DRAW:SCROL↓r
VARS:062A                                         ; VBIR__DEFERRED_VBL_DRAW+11↓w ...
VARS:062A                                         ; VBL: 30Hz down counter whenever the level scrolls a pixel
VARS:062B MSHIP_VAR_62B:  .BYTE 0 ; (uninited)    ; DATA XREF: SHIP+68↓w
VARS:062B                                         ; SHIP:I6↓w ...
VARS:062C byte_62C:       .BYTE 0 ; (uninited)    ; DATA XREF: DRUN__DRAW_RUNWAY+A↓w
VARS:062C                                         ; DRUN__DRAW_RUNWAY+D↓r
VARS:062D GRAVITY_COUNT:  .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1E4↓w
VARS:062D                                         ; RESET+214↓w ...
VARS:062D                                         ; When enabled, this counter pulls the plane down every 40 ticks
VARS:062E                 ; 0 .BYTE uninited & unexplored
VARS:062F byte_62F:       .BYTE 0 ; (uninited)    ; DATA XREF: PLFWD+5F↓w
VARS:062F                                         ; PLFWD:LN↓w ...
VARS:0630                 .BYTE 0,0,0,0,0 ; (uninited)
VARS:0635 SPEED_DELAY_COUNTER:.BYTE 0 ; (uninited)
VARS:0635                                         ; DATA XREF: RESET+264↓w
VARS:0635                                         ; SPD__SPEED_CHANGE:KM↓w ...
VARS:0635                                         ; Limit speed increment/decrement changes with this counter
VARS:0636 byte_636:       .BYTE 0 ; (uninited)    ; DATA XREF: PLFWD:loc_21F2↓w
VARS:0636                                         ; PLFWD:loc_21FB↓r ...
VARS:0637 byte_637:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+26E↓w
VARS:0637                                         ; PLFWD+C2↓w ...
VARS:0638 byte_638:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+21↓w
VARS:0638                                         ; DRTNK+13↓r ...
VARS:0639 byte_639:       .BYTE 0 ; (uninited)    ; DATA XREF: TURN+E3↓w
VARS:0639                                         ; BOMB:AFV↓w ...
VARS:063A FUEL_TIMER:     .BYTE 0 ; (uninited)    ; DATA XREF: RESET+20A↓w
VARS:063A                                         ; KMKZ:NC↓w ...
VARS:063B                 .BYTE 0,0,0,0 ; (uninited)
VARS:063F IS_DEMO_MODE:   .BYTE 0 ; (uninited)    ; DATA XREF: RESET+145↓w
VARS:063F                                         ; EB+E8↓w ...
VARS:063F                                         ; 0=Demo Mode active
VARS:0640 VAR_UNKNOWN_STATE:.BYTE 0 ; (uninited)  ; DATA XREF: DRP23+C↓r
VARS:0640                                         ; DRP23+74↓w ...
VARS:0641 AUDC1_SHADOW:   .BYTE 0 ; (uninited)    ; DATA XREF: EB+91↓w
VARS:0641                                         ; KMKZ+A↓r ...
VARS:0642 AUDIO2_DROPSND_FREQ:.BYTE 0 ; (uninited)
VARS:0642                                         ; DATA XREF: RESET+1B3↓w
VARS:0642                                         ; PC+22↓w ...
VARS:0643 byte_643:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+274↓w
VARS:0643                                         ; KMKZ↓w ...
VARS:0644 AUDIO3_SOUND_COUNTER:.BYTE 0 ; (uninited)
VARS:0644                                         ; DATA XREF: RESET+1EC↓w
VARS:0644                                         ; XSND↓r ...
VARS:0645 AUDIO3_COUNTER_TRIGGER:.BYTE 0 ; (uninited)
VARS:0645                                         ; DATA XREF: XSND+18↓r
VARS:0645                                         ; XXX↓w
VARS:0646 AUDIO3_CONTROL: .BYTE 0 ; (uninited)    ; DATA XREF: XSND+1D↓r
VARS:0646                                         ; XSND+2E↓w ...
VARS:0647 AUDIO3_CONTROL_COUNTER:.BYTE 0 ; (uninited)
VARS:0647                                         ; DATA XREF: XSND+24↓w
VARS:0647                                         ; XSND+2B↓w ...
VARS:0648 PLANE_GUN_SOUND_TIMER:.BYTE 0 ; (uninited)
VARS:0648                                         ; DATA XREF: RESET+1EF↓w
VARS:0648                                         ; TRIG__TRIGGER_MACHINE_GUN+37↓w ...
VARS:0648                                         ; Timer for the repeating gun sound from the plane
VARS:0649 AUDIO2_DROPSND_COUNTER:.BYTE 0 ; (uninited)
VARS:0649                                         ; DATA XREF: DRPSND↓w
VARS:0649                                         ; DRPSND+3↓r
VARS:064A PLANE_GUN_SOUND_TIMER_2:.BYTE 0 ; (uninited)
VARS:064A                                         ; DATA XREF: GUNSND+5↓w
VARS:064A                                         ; GUNSND+8↓r
VARS:064A                                         ; Timer 2 for the repeating gun sound from the plane
VARS:064B PLANE_GUN_SOUND_TIMER_3:.BYTE 0 ; (uninited)
VARS:064B                                         ; DATA XREF: GUNSND+1B↓w
VARS:064B                                         ; GUNSND+1E↓r
VARS:064B                                         ; Timer 3 for the repeating gun sound from the plane
VARS:064C RUN_SOUND_COUNTER:.BYTE 0 ; (uninited)  ; DATA XREF: RUNSND↓r
VARS:064C                                         ; RUNSND+5↓w ...
VARS:064C                                         ; 0=Run sound off, otherwise a count down timer for the effect
VARS:064D AUDIO2_DURATION_COUNTER:.BYTE 0 ; (uninited)
VARS:064D                                         ; DATA XREF: RESET+200↓w
VARS:064D                                         ; PC+2C↓w ...
VARS:064E AUDIO2_FREQ_COUNTER:.BYTE 0 ; (uninited) ; DATA XREF: Y8+7↓w
VARS:064E                                         ; SPLASH+1A↓w ...
VARS:064F AUDIO2_EFFECT_COUNTER:.BYTE 0 ; (uninited) ; DATA XREF: Y8+F↓w
VARS:064F                                         ; SPLASH:QI↓w ...
VARS:0650 byte_650:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+16A↓w
VARS:0650                                         ; DRTNK:QL↓r ...
VARS:0651 BUILDING_ROW_COUNTER:.BYTE 0 ; (uninited)
VARS:0651                                         ; DATA XREF: RESET+109↓w
VARS:0651                                         ; DRTNK:QM↓r ...
VARS:0652 BUILDING_COLOR_OFFSET:.BYTE 0 ; (uninited)
VARS:0652                                         ; DATA XREF: QS+12↓w
VARS:0652                                         ; QS+18↓w ...
VARS:0653 BUILDING_X_START_POS:.BYTE 0 ; (uninited) ; DATA XREF: QN+54↓w
VARS:0653                                         ; QN+7D↓r ...
VARS:0654 byte_654:       .BYTE 0 ; (uninited)    ; DATA XREF: CKCOL+38↓w
VARS:0654                                         ; TURN+9D↓r ...
VARS:0655 byte_655:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+142↓w
VARS:0655                                         ; TURN+B7↓r ...
VARS:0656 byte_656:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1DC↓w
VARS:0656                                         ; TRIGB↓r ...
VARS:0657 byte_657:       .BYTE 0 ; (uninited)    ; DATA XREF: TRIGB+25↓w
VARS:0657                                         ; TRIGB+3F↓r ...
VARS:0658 byte_658:       .BYTE 0 ; (uninited)    ; DATA XREF: COLM20+11↓w
VARS:0658                                         ; COLM20+18↓r
VARS:0659 WORKING_PARTS:  .BYTE 0 ; (uninited)    ; DATA XREF: RESET+25B↓w
VARS:0659                                         ; REFUEL:SB↓r ...
VARS:0659                                         ; # of working part (4): fuel, bomb, maneuverabiity, gun
VARS:065A byte_65A:       .BYTE 0 ; (uninited)    ; DATA XREF: JOYST+5↓w
VARS:065A                                         ; JOYST+8↓r
VARS:065B RUNWAY_POS_X_INDEX:.BYTE 0 ; (uninited) ; DATA XREF: RESET+14A↓w
VARS:065B                                         ; DRUN__DRAW_RUNWAY+96↓w ...
VARS:065B                                         ; Right position where the runway starts
VARS:065C MISSLE_3_X_POS2:.BYTE 0 ; (uninited)    ; DATA XREF: A2+2↓w
VARS:065C                                         ; BRGPOS+28↓w ...
VARS:065D byte_65D:       .BYTE 0 ; (uninited)    ; DATA XREF: A2+F↓w
VARS:065D                                         ; BRGPOS:loc_2AE4↓w ...
VARS:065E byte_65E:       .BYTE 0 ; (uninited)    ; DATA XREF: BRGPOS+1F↓w
VARS:065E                                         ; BRGPOS+22↓r ...
VARS:065F byte_65F:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1D0↓w
VARS:065F                                         ; FBRGN+4↓r ...
VARS:0660 byte_660:       .BYTE 0 ; (uninited)    ; DATA XREF: ZZ+1D↓w
VARS:0660                                         ; FTNKGN:SW↓r ...
VARS:0661 byte_661:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1CA↓w
VARS:0661                                         ; DRBT__DRAW_BOAT+43↓w ...
VARS:0662 byte_662:       .BYTE 0 ; (uninited)    ; DATA XREF: FTNKGN-C1C↓w
VARS:0662                                         ; FTNKGN:SN↓w
VARS:0663 MISSLE_3_X_POS: .BYTE 0 ; (uninited)    ; DATA XREF: ZZ+8↓w
VARS:0663                                         ; FTNKGN-C57↓w ...
VARS:0664 byte_664:       .BYTE 0 ; (uninited)    ; DATA XREF: A2+A↓w
VARS:0664                                         ; BRGPOS:loc_2ADB↓r ...
VARS:0665                 .BYTE 0 ; (uninited)
VARS:0666 byte_666:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+175↓w
VARS:0666                                         ; EB+119↓w ...
VARS:0667 byte_667:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+180↓w
VARS:0667                                         ; EB+111↓w ...
VARS:0668 byte_668:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+12B↓w
VARS:0668                                         ; DROAD↓r ...
VARS:0669 byte_669:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+11C↓w
VARS:0669                                         ; DROAD:TM↓r ...
VARS:066A ROAD_RIGHT_X_POS:.BYTE 0 ; (uninited)   ; DATA XREF: EB+126↓w
VARS:066A                                         ; ENRUN:WH↓r ...
VARS:066A                                         ; right X position where the road starts
VARS:066B ENEMY_RUNWAY_START:.BYTE 0 ; (uninited) ; DATA XREF: EB+12E↓w
VARS:066B                                         ; ENRUN-4↓w ...
VARS:066B                                         ; How many lines till the enemy runway will appear
VARS:066C ENEMY_RUNWAY_LENGTH:.BYTE 0 ; (uninited) ; DATA XREF: EB+133↓w
VARS:066C                                         ; ENRUN-19↓w ...
VARS:066C                                         ; Length/current line of the enemy runway (default length=36)
VARS:066D ENEMY_RUNWAY_PLANE_FLAG:.BYTE 0 ; (uninited)
VARS:066D                                         ; DATA XREF: EB+13B↓w
VARS:066D                                         ; ENRUN+4D↓r ...
VARS:066E DL_IRQ_BACKGROUND_COLOR:.BYTE 0 ; (uninited)
VARS:066E                                         ; DATA XREF: RESET+11D↓w
VARS:066E                                         ; TURN+139↓w ...
VARS:066E                                         ; Background color set in the DL IRQ
VARS:066F PCOLR2_FLASH_COUNTER:.BYTE 0 ; (uninited)
VARS:066F                                         ; DATA XREF: COLM02+52↓w
VARS:066F                                         ; XP2:US↓w ...
VARS:066F                                         ; Duration for PCOLR2 flash (enemy got hit)
VARS:0670 byte_670:       .BYTE 0 ; (uninited)    ; DATA XREF: BLDG:loc_2FF2↓w
VARS:0670                                         ; BLDG+62↓r ...
VARS:0671 byte_671:       .BYTE 0 ; (uninited)    ; DATA XREF: BLDG+1E↓w
VARS:0671                                         ; BLDG+3A↓r ...
VARS:0672 byte_672:       .BYTE 0 ; (uninited)    ; DATA XREF: BLDG:loc_2FFE↓w
VARS:0672                                         ; BLDG+A2↓r ...
VARS:0673 byte_673:       .BYTE 0 ; (uninited)    ; DATA XREF: BLDG+5F↓w
VARS:0673                                         ; BLDG+128↓r
VARS:0674 byte_674:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+136↓w
VARS:0674                                         ; BLDG:loc_2FB6↓r ...
VARS:0675 byte_675:       .BYTE 0 ; (uninited)    ; DATA XREF: BLDG+93↓w
VARS:0675                                         ; BLDG:loc_30EA↓w ...
VARS:0676 byte_676:       .BYTE 0 ; (uninited)    ; DATA XREF: QS+9↓w
VARS:0676                                         ; QN+18↓r ...
VARS:0677 byte_677:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+13E↓w
VARS:0677                                         ; B7:WY↓w ...
VARS:0678                 ; 0 .BYTE uninited & unexplored
VARS:0679 DIRECTION_A:    .BYTE 0 ; (uninited)    ; DATA XREF: RESET+A↓w
VARS:0679                                         ; JOYST+26↓r ...
VARS:067A byte_67A:       .BYTE 0 ; (uninited)    ; DATA XREF: BLDGL:ZH↓r
VARS:067A                                         ; BLDGL+6C↓w ...
VARS:067B byte_67B:       .BYTE 0 ; (uninited)    ; DATA XREF: ZE+12↓w
VARS:067B                                         ; YI↓r ...
VARS:067C byte_67C:       .BYTE 0 ; (uninited)    ; DATA XREF: ZE+9F↓r
VARS:067C                                         ; ZE+F6↓r ...
VARS:067D byte_67D:       .BYTE 0 ; (uninited)    ; DATA XREF: B7+67↓w
VARS:067D                                         ; ZE↓r ...
VARS:067E                 .BYTE 0,0 ; (uninited)
VARS:0680 DIRECTION_B:    .BYTE 0 ; (uninited)    ; DATA XREF: RESET+F↓w
VARS:0680                                         ; JOYST+11↓r ...
VARS:0681 byte_681:       .BYTE 0,0,0 ; (uninited)
VARS:0681                                         ; DATA XREF: BLDGL:ZG↓r
VARS:0681                                         ; BLDGL+5B↓w ...
VARS:0684 byte_684:       .BYTE 0 ; (uninited)    ; DATA XREF: B7+64↓w
VARS:0684                                         ; ZE+1F↓r ...
VARS:0685 byte_685:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+114↓w
VARS:0685                                         ; PRIOR__↓r ...
VARS:0686 byte_686:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+141↓w
VARS:0686                                         ; BLDGL+15↓r ...
VARS:0687 byte_687:       .BYTE 0,0,0 ; (uninited)
VARS:0687                                         ; DATA XREF: BLDGL+68↓w
VARS:068A byte_68A:       .BYTE 0 ; (uninited)    ; DATA XREF: B7+6D↓w
VARS:068A                                         ; BLDGL+24↓r
VARS:068B byte_68B:       .BYTE 0,0,0 ; (uninited)
VARS:068B                                         ; DATA XREF: BLDGL+57↓w
VARS:068E byte_68E:       .BYTE 0 ; (uninited)    ; DATA XREF: B7+70↓w
VARS:068E                                         ; BLDGL+32↓r
VARS:068F byte_68F:       .BYTE 0 ; (uninited)    ; DATA XREF: BLDGL+47↓w
VARS:0690 byte_690:       .BYTE 0 ; (uninited)    ; DATA XREF: B7+88↓w
VARS:0691                 .BYTE 0,0,0 ; (uninited)
VARS:0694 byte_694:       .BYTE 0 ; (uninited)    ; DATA XREF: B7+6A↓w
VARS:0694                                         ; BLDGL+3A↓w ...
VARS:0695 WIND_ENABLED:   .BYTE 0 ; (uninited)    ; DATA XREF: WIND+2A↓w
VARS:0695                                         ; WIND:ZR↓w ...
VARS:0695                                         ; 50% chance that wind is in effect
VARS:0696 VAR_MISSLE_3_STATE:.BYTE 0 ; (uninited) ; DATA XREF: ZZ:A1↓w
VARS:0696                                         ; FTNKGN:SM↓r ...
VARS:0697 MSHIP_BULLET_X_POS:.BYTE 0 ; (uninited) ; DATA XREF: B3+2↓w
VARS:0697                                         ; M2GPOS+1F↓r ...
VARS:0698 byte_698:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1C2↓w
VARS:0698                                         ; B3+5↓w ...
VARS:0699 byte_699:       .BYTE 0 ; (uninited)    ; DATA XREF: B3+A↓w
VARS:0699                                         ; M2GPOS:B6↓r ...
VARS:069A byte_69A:       .BYTE 0 ; (uninited)    ; DATA XREF: B3+F↓w
VARS:069A                                         ; M2GPOS:B9↓w ...
VARS:069B byte_69B:       .BYTE 0 ; (uninited)    ; DATA XREF: M2GPOS+26↓w
VARS:069B                                         ; M2GPOS+29↓r
VARS:069C ENEMY_BULLET_Y_POS:.BYTE 0 ; (uninited) ; DATA XREF: RESET+1C5↓w
VARS:069C                                         ; FM2GN↓r ...
VARS:069C                                         ; Y position of an enemy bullet (0=none)
VARS:069D ENEMY_BULLET_MOVEMENT:.BYTE 0 ; (uninited)
VARS:069D                                         ; DATA XREF: FM2GN:C5↓w
VARS:069D                                         ; FM2GN:C2↓r
VARS:069D                                         ; Movement pattern (state machine) for the bullet
VARS:069E ENEMY_BULLET_X_POS:.BYTE 0 ; (uninited) ; DATA XREF: FM2GN+44↓w
VARS:069E                                         ; FM2GN+6B↓w ...
VARS:069E                                         ; X position of an enemy bullet (0=none)
VARS:069F byte_69F:       .BYTE 0 ; (uninited)    ; DATA XREF: FM2GN+59↓w
VARS:069F                                         ; FM2GN:C9↓r ...
VARS:06A0 byte_6A0:       .BYTE 0 ; (uninited)    ; DATA XREF: FM2GN+A6↓w
VARS:06A0                                         ; FM2GN:D0↓w
VARS:06A1 byte_6A1:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+14D↓w
VARS:06A1                                         ; TNK:E1↓r ...
VARS:06A2 byte_6A2:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1A8↓w
VARS:06A2                                         ; TNK:E9↓r ...
VARS:06A3 byte_6A3:       .BYTE 0 ; (uninited)    ; DATA XREF: QN+75↓w
VARS:06A3                                         ; ENRUN+101↓w ...
VARS:06A4 byte_6A4:       .BYTE 0 ; (uninited)    ; DATA XREF: LINE+33↓w
VARS:06A4                                         ; LINE+36↓r ...
VARS:06A5 ENEMY_TURN_MODE:.BYTE 0 ; (uninited)    ; DATA XREF: PLFWD:loc_2123↓r
VARS:06A5                                         ; PLFWD+BD↓r ...
VARS:06A5                                         ; 0=none, 1=left, 2=right, >2=any
VARS:06A6 byte_6A6:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1B6↓w
VARS:06A6                                         ; L6+32↓r ...
VARS:06A7 byte_6A7:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1BC↓w
VARS:06A7                                         ; EB+3F↓w ...
VARS:06A8 byte_6A8:       .BYTE 0 ; (uninited)    ; DATA XREF: PLBCK+8↓r
VARS:06A8                                         ; L6+2C↓w ...
VARS:06A9 SIZEM_SHADOW:   .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1A5↓w
VARS:06A9                                         ; SR+16↓r ...
VARS:06A9                                         ; Shadow Register for SIZEM
VARS:06AA byte_6AA:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+160↓w
VARS:06AA                                         ; TRGT+2C↓r ...
VARS:06AB byte_6AB:       .BYTE 0 ; (uninited)    ; DATA XREF: CKCHAR+5F↓r
VARS:06AB                                         ; CKCHAR+7F↓r ...
VARS:06AC PRIMARY_TARGETS_HIT:.BYTE 0 ; (uninited)
VARS:06AC                                         ; DATA XREF: RESET+1BF↓w
VARS:06AC                                         ; EB+F3↓r ...
VARS:06AC                                         ; Number of primary targets hit
VARS:06AD VAR_PRIMARY_TARGET_SUBTYPE:.BYTE 0 ; (uninited)
VARS:06AD                                         ; DATA XREF: RESET+1D9↓w
VARS:06AD                                         ; DRBR__DRAW_BRIDGE+7D↓w ...
VARS:06AE byte_6AE:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1E9↓w
VARS:06AE                                         ; EB:V0↓w ...
VARS:06AF AUDIO4_GUN_SND_COUNTER:.BYTE 0 ; (uninited)
VARS:06AF                                         ; DATA XREF: RESET+18E↓w
VARS:06AF                                         ; ZZ+22↓w ...
VARS:06B0 byte_6B0:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+13F↓w
VARS:06B0                                         ; EB+E5↓w ...
VARS:06B1 byte_6B1:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+286↓w
VARS:06B1                                         ; GUNC:TB↓w ...
VARS:06B2 TEMP_NEXT_ROW_PTR:.BYTE 0,0 ; (uninited)
VARS:06B2                                         ; DATA XREF: XPLSN+1E↓w
VARS:06B2                                         ; DNXP+7↓r ...
VARS:06B4 TEMP_PREVIOUS_ROW_PTR:.BYTE 0,0 ; (uninited)
VARS:06B4                                         ; DATA XREF: XPLSN+2A↓w
VARS:06B4                                         ; UPXP↓r ...
VARS:06B6 byte_6B6:       .BYTE 0 ; (uninited)    ; DATA XREF: CKLAND+10↓w
VARS:06B6                                         ; CKLAND+4D↓w ...
VARS:06B7 byte_6B7:       .BYTE 0 ; (uninited)    ; DATA XREF: FLSH:_1↓w
VARS:06B7                                         ; FLSH+C↓r
VARS:06B8                 ; 0 .BYTE uninited & unexplored
VARS:06B9 COLOR_FLASHING: .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1CD↓w
VARS:06B9                                         ; TURN+84↓w ...
VARS:06B9                                         ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
VARS:06BA SAVED_COLOR0_3: .BYTE 0,0,0,0 ; (uninited)
VARS:06BA                                         ; DATA XREF: B7+C4↓w
VARS:06BA                                         ; B7+DB↓w ...
VARS:06BE QUAKE_ANIMATION_COUNTER:.BYTE 0 ; (uninited)
VARS:06BE                                         ; DATA XREF: EB+D7↓w
VARS:06BE                                         ; QUAKE↓r ...
VARS:06BE                                         ; Quake, shake via the scroll register, timer
VARS:06BF CAPITAL_Y_POS:  .BYTE 0 ; (uninited)    ; DATA XREF: RESET+194↓w
VARS:06BF                                         ; CPTL+E↓r ...
VARS:06C0                 ; 0 .BYTE uninited & unexplored
VARS:06C1 byte_6C1:       .BYTE 0 ; (uninited)    ; DATA XREF: CPTL+54↓w
VARS:06C1                                         ; CPTL+7E↓w
VARS:06C2 GAME_COMPLETION_MASK:.BYTE 0 ; (uninited)
VARS:06C2                                         ; DATA XREF: RESET+197↓w
VARS:06C2                                         ; STOPL+2A↓r ...
VARS:06C3 byte_6C3:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+19A↓w
VARS:06C3                                         ; AFP+26↓r ...
VARS:06C4 byte_6C4:       .BYTE 0 ; (uninited)    ; DATA XREF: XCPTL:_1↓w
VARS:06C4                                         ; XCPTL+C↓r ...
VARS:06C5 byte_6C5:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+19D↓w
VARS:06C5                                         ; CPTL+8E↓w ...
VARS:06C6 byte_6C6:       .BYTE 0 ; (uninited)    ; DATA XREF: XCPTL+1D↓r
VARS:06C6                                         ; XCPTL+44↓w
VARS:06C7 REQUIRED_TARGETS:.BYTE 0 ; (uninited)   ; DATA XREF: RESET+256↓w
VARS:06C7                                         ; EB+FA↓r ...
VARS:06C7                                         ; Number of required primary targets to progress (8 or 9 by random)
VARS:06C8 DIFF:           DIFF_STRUCT <?>         ; DATA XREF: EB+39↓w
VARS:06C8                                         ; EB+4F↓w ...
VARS:06C8                                         ; Difficulty for the level
VARS:06CF byte_6CF:       .BYTE 0 ; (uninited)    ; DATA XREF: EB+44↓w
VARS:06CF                                         ; EB+65↓w ...
VARS:06D0                 .BYTE 0,0,0,0,0,0 ; (uninited)
VARS:06D6 byte_6D6:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+172↓w
VARS:06D6                                         ; CKCOL+2C↓w ...
VARS:06D7                 .BYTE 0,0,0,0 ; (uninited)
VARS:06DB byte_6DB:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+191↓w
VARS:06DC byte_6DC:       .BYTE 0 ; (uninited)    ; DATA XREF: SHIP+5F↓w
VARS:06DC                                         ; SHP23:_3↓w
VARS:06DD                 .BYTE 0 ; (uninited)
VARS:06DE RIVER_BOAT_HIT_COUNTER:.BYTE 0 ; (uninited)
VARS:06DE                                         ; DATA XREF: DRBT__DRAW_BOAT+63↓w
VARS:06DE                                         ; SHBT:_5↓w
VARS:06DE                                         ; The boat requires 2 hits to be destroyed
VARS:06DF LAST_STRIG0:    .BYTE 0 ; (uninited)    ; DATA XREF: TRIGC__TRIGGER_COUNT+3↓r
VARS:06DF                                         ; TRIGC__TRIGGER_COUNT:_1↓w ...
VARS:06DF                                         ; Last STRIG0 value (for debouncing)
VARS:06E0 TRIGGER_COUNT:  .BYTE 0 ; (uninited)    ; DATA XREF: REFUEL+7↓w
VARS:06E0                                         ; REFUEL+2C↓r ...
VARS:06E0                                         ; Increment with each button/trigger press
VARS:06E1                 .BYTE 0,0 ; (uninited)
VARS:06E3 byte_6E3:       .BYTE 0 ; (uninited)    ; DATA XREF: PBMB+4B↓w
VARS:06E3                                         ; PBMB:_6↓r
VARS:06E4                 .BYTE 0,0 ; (uninited)
VARS:06E6 MODE_GRAVITY_FLAG:.BYTE 0 ; (uninited)  ; DATA XREF: RESET+21↓w
VARS:06E6                                         ; GRAV__APPLY_GRAVITY↓r ...
VARS:06E6                                         ; Gravity? 0=No, 1=Yes
VARS:06E7 MODE_LEVEL:     .BYTE 0 ; (uninited)    ; DATA XREF: RESET+24↓w
VARS:06E7                                         ; EB+2B↓r ...
VARS:06E7                                         ; Level: 0=Novice, 1=Intermediate, 2=Advanced
VARS:06E8 MENU_OPTION_INDEX_6E8:.BYTE 0 ; (uninited)
VARS:06E8                                         ; DATA XREF: CNSL__CONSOLE+3E↓w
VARS:06E8                                         ; MENU__CHECK_KEYS:_2↓r ...
VARS:06E8                                         ; MENU: currently selected option
VARS:06E9 MENU_LAST_CONSOL_6E9:.BYTE 0 ; (uninited)
VARS:06E9                                         ; DATA XREF: CNSL__CONSOLE:_5↓w
VARS:06E9                                         ; MENU__CHECK_KEYS+3↓r ...
VARS:06E9                                         ; Last value of CONSOL in the MENU selection
VARS:06EA byte_6EA:       .BYTE 0 ; (uninited)    ; DATA XREF: PRIOR__+3D↓w
VARS:06EA                                         ; AFB:_1↓r
VARS:06EB byte_6EB:       .BYTE 0 ; (uninited)    ; DATA XREF: BOMB:HJ↓w
VARS:06EB                                         ; Z3+A↓r ...
VARS:06EC AUDIO2_DROPSND_FREQ_SAVED:.BYTE 0 ; (uninited)
VARS:06EC                                         ; DATA XREF: DRPSND+F↓w
VARS:06EC                                         ; Z3+4D↓r
VARS:06ED byte_6ED:       .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1DF↓w
VARS:06ED                                         ; BOMB+1F↓r ...
VARS:06EE                 .BYTE 0,0 ; (uninited)
VARS:06F0 PAUSE_RTCLOK:   .BYTE 0,0 ; (uninited)  ; DATA XREF: PAUSE+1B↓w
VARS:06F0                                         ; PAUSE+33↓r ...
VARS:06F0                                         ; Saved 2 bytes of the RTCLOK during pause
VARS:06F2 byte_6F2:       .BYTE 0 ; (uninited)    ; DATA XREF: DRBR__DRAW_BRIDGE+69↓w
VARS:06F2                                         ; CKCHAR:U5↓w
VARS:06F3 DEMO_IS_ACTIVE: .BYTE 0 ; (uninited)    ; DATA XREF: RESET+3F↓w
VARS:06F3                                         ; RESET+95↓r ...
VARS:06F3                                         ; 0:normal game play, 1=demo mode active
VARS:06F4 DL_IRQ_COLPF1:  .BYTE 0 ; (uninited)    ; DATA XREF: VDSLST_ROUTINE+13↓r
VARS:06F4                                         ; CNSL__CONSOLE+1B↓w ...
VARS:06F4                                         ; COLPF1 color set in the DL IRQ
VARS:06F5 DEMO_JOY_TIMER: .BYTE 0 ; (uninited)    ; DATA XREF: DJOY__DEMO_JOYSTICK_INPUT:_15↓w
VARS:06F5                                         ; DJOY__DEMO_JOYSTICK_INPUT+4F↓w
VARS:06F5                                         ; Demo mode: timer for joystick input
VARS:06F6 DEMO_STICK0:    .BYTE 0 ; (uninited)    ; DATA XREF: RESET+17B↓w
VARS:06F6                                         ; DJOY__DEMO_JOYSTICK_INPUT:_2↓r ...
VARS:06F6                                         ; Demo mode: joystick movement
VARS:06F7 byte_6F7:       .BYTE 0 ; (uninited)    ; DATA XREF: COMMON+72↓r
VARS:06F7                                         ; COMMON+77↓w ...
VARS:06F8 LOW_SND_FREQ:   .BYTE 0 ; (uninited)    ; DATA XREF: LOW:_3↓r
VARS:06F8                                         ; LOW+26↓w ...
VARS:06F8                                         ; Sound flag when the plane is low to the ground
VARS:06F9 byte_6F9:       .BYTE 0 ; (uninited)    ; DATA XREF: ENRUN+22↓w
VARS:06F9                                         ; DRUN__DRAW_RUNWAY+12A↓w ...
VARS:06FA                 .BYTE 0,0,0,0,0 ; (uninited)
VARS:06FF SOUND_MUSIC_ACTIVE_6FF:.BYTE 0 ; (uninited)
VARS:06FF                                         ; DATA XREF: RESET+13C↓w
VARS:06FF                                         ; EB+76↓r ...
VARS:06FF ; end of 'VARS'                         ; Sound: Music playback is active, when != 0
VARS:06FF
TAPE_LOADER:0700 ; ===========================================================================
TAPE_LOADER:0700
TAPE_LOADER:0700 ; Segment type: Pure code
TAPE_LOADER:0700                 ;.segment TAPE_LOADER
TAPE_LOADER:0700                 * =  $700
TAPE_LOADER:0700 BOOT_RECORD:    .BYTE 0                 ; DATA XREF: TAPE_LOADER:0702↓o
TAPE_LOADER:0700                                         ; boot flag, copied to DFLAGS
TAPE_LOADER:0701                 .BYTE 2                 ; number of sectors the boot record, copied to DBSECT
TAPE_LOADER:0702                 .WORD BOOT_RECORD       ; BOOT ADRESS, copied to BOOTAD
TAPE_LOADER:0704                 .WORD BOOT_INIT         ; BOOT INIT
TAPE_LOADER:0706
TAPE_LOADER:0706 ; =============== S U B R O U T I N E =======================================
TAPE_LOADER:0706
TAPE_LOADER:0706 ; BOOT CONTINUE
TAPE_LOADER:0706
TAPE_LOADER:0706                 ; public BOOT_CONTINUE
TAPE_LOADER:0706 BOOT_CONTINUE:
TAPE_LOADER:0706                 LDX     #4
TAPE_LOADER:0708
TAPE_LOADER:0708 _COLOR_INIT:                            ; CODE XREF: BOOT_CONTINUE+9↓j
TAPE_LOADER:0708                 LDA     COLOR_TABLE,X
TAPE_LOADER:070B                 STA     COLOR0,X        ; COLOR 0
TAPE_LOADER:070E                 DEX
TAPE_LOADER:070F                 BPL     _COLOR_INIT
TAPE_LOADER:0711                 LDA     #<DISPLAY_LIST
TAPE_LOADER:0713                 STA     SDLSTL          ; SAVE DISPLAY LIST LOW BYTE
TAPE_LOADER:0716                 LDA     #>DISPLAY_LIST
TAPE_LOADER:0718                 STA     SDLSTH          ; SAVE DISPLAY LIST HI BYTE
TAPE_LOADER:071B                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
TAPE_LOADER:071D
TAPE_LOADER:071D _SYNC:                                  ; CODE XREF: BOOT_CONTINUE+19↓j
TAPE_LOADER:071D                 CMP     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
TAPE_LOADER:071F                 BEQ     _SYNC
TAPE_LOADER:0721
TAPE_LOADER:0721 _READ_LOOP:                             ; CODE XREF: BOOT_CONTINUE+29↓j
TAPE_LOADER:0721                 JSR     READ_BLOCK
TAPE_LOADER:0724                 LDA     LOAD_DCB.DBUF+1
TAPE_LOADER:0727                 SEC
TAPE_LOADER:0728                 SBC     #4
TAPE_LOADER:072A                 STA     LOAD_DCB.DBUF+1
TAPE_LOADER:072D                 CMP     #9
TAPE_LOADER:072F                 BNE     _READ_LOOP
TAPE_LOADER:0731                 LDA     #$B
TAPE_LOADER:0733                 STA     LOAD_DCB.DBUF+1
TAPE_LOADER:0736                 LDA     #2
TAPE_LOADER:0738                 STA     LOAD_DCB.DBYTE+1
TAPE_LOADER:073B                 JSR     READ_BLOCK
TAPE_LOADER:073E                 LDA     #5
TAPE_LOADER:0740                 TAY
TAPE_LOADER:0741                 TAX
TAPE_LOADER:0742
TAPE_LOADER:0742 _TIMER_LOOP:                            ; CODE XREF: BOOT_CONTINUE+3E↓j
TAPE_LOADER:0742                                         ; BOOT_CONTINUE+41↓j ...
TAPE_LOADER:0742                 SBC     #1
TAPE_LOADER:0744                 BNE     _TIMER_LOOP
TAPE_LOADER:0746                 DEX
TAPE_LOADER:0747                 BNE     _TIMER_LOOP
TAPE_LOADER:0749                 DEY
TAPE_LOADER:074A                 BNE     _TIMER_LOOP
TAPE_LOADER:074C                 LDA     #$3C ; '<'      ; Stop Tape
TAPE_LOADER:074E                 STA     PACTL           ; Port A Control Register
TAPE_LOADER:0751                 JMP     RESET
TAPE_LOADER:0751 ; End of function BOOT_CONTINUE
TAPE_LOADER:0751
TAPE_LOADER:0754
TAPE_LOADER:0754 ; =============== S U B R O U T I N E =======================================
TAPE_LOADER:0754
TAPE_LOADER:0754
TAPE_LOADER:0754                 ; public BOOT_INIT
TAPE_LOADER:0754 BOOT_INIT:                              ; DATA XREF: TAPE_LOADER:0704↑o
TAPE_LOADER:0754                 RTS
TAPE_LOADER:0754 ; End of function BOOT_INIT
TAPE_LOADER:0754
TAPE_LOADER:0755
TAPE_LOADER:0755 ; =============== S U B R O U T I N E =======================================
TAPE_LOADER:0755
TAPE_LOADER:0755
TAPE_LOADER:0755 READ_BLOCK:                             ; CODE XREF: BOOT_CONTINUE:_READ_LOOP↑p
TAPE_LOADER:0755                                         ; BOOT_CONTINUE+35↑p
TAPE_LOADER:0755                 LDX     #11
TAPE_LOADER:0757
TAPE_LOADER:0757 loc_757:                                ; CODE XREF: READ_BLOCK+9↓j
TAPE_LOADER:0757                 LDA     LOAD_DCB,X
TAPE_LOADER:075A                 STA     DCB,X           ; DEVICE CONTROL BLOCK
TAPE_LOADER:075D                 DEX
TAPE_LOADER:075E                 BPL     loc_757
TAPE_LOADER:0760                 JSR     SIOV            ; SERIAL INPUT OUTPUT ROUTINE
TAPE_LOADER:0763                 BPL     loc_768
TAPE_LOADER:0765                 JMP     (BRK)
TAPE_LOADER:0768 ; ---------------------------------------------------------------------------
TAPE_LOADER:0768
TAPE_LOADER:0768 loc_768:                                ; CODE XREF: READ_BLOCK+E↑j
TAPE_LOADER:0768                 LDX     TEXT_LINE+$26
TAPE_LOADER:076B                 DEX
TAPE_LOADER:076C                 CPX     #_QUESTIONMARK|_C_ORANGE
TAPE_LOADER:076E                 BNE     loc_775
TAPE_LOADER:0770                 DEC     TEXT_LINE+$25
TAPE_LOADER:0773                 LDX     #_9|_C_ORANGE
TAPE_LOADER:0775
TAPE_LOADER:0775 loc_775:                                ; CODE XREF: READ_BLOCK+19↑j
TAPE_LOADER:0775                 STX     TEXT_LINE+$26
TAPE_LOADER:0778                 RTS
TAPE_LOADER:0778 ; End of function READ_BLOCK
TAPE_LOADER:0778
TAPE_LOADER:0779 ; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
TAPE_LOADER:077A COLOR_TABLE:    .BYTE COLOR_INTENSITY_14|COLOR_BLUE
TAPE_LOADER:077A                                         ; DATA XREF: BOOT_CONTINUE:_COLOR_INIT↑r
TAPE_LOADER:077A                 .BYTE COLOR_INTENSITY_12|COLOR_GREEN
TAPE_LOADER:077A                 .BYTE COLOR_INTENSITY_14|COLOR_GOLD
TAPE_LOADER:077A                 .BYTE COLOR_INTENSITY_14|COLOR_GREEN
TAPE_LOADER:077A                 .BYTE COLOR_INTENSITY_0|COLOR_GRAY
TAPE_LOADER:077F LOAD_DCB:       .BYTE $60               ; DDEVICE
TAPE_LOADER:077F                                         ; DATA XREF: READ_BLOCK:loc_757↑r
TAPE_LOADER:077F                                         ; BOOT_CONTINUE+1E↑r ...
TAPE_LOADER:077F                 .BYTE 0                 ; DUNIT ; $3F: Black tile
TAPE_LOADER:077F                 .BYTE DCB_COMMANDS_READ ; DCOMMAND
TAPE_LOADER:077F                 .BYTE $40               ; DSTATS
TAPE_LOADER:077F                 .WORD ABQ+5             ; DBUF
TAPE_LOADER:077F                 .BYTE 64                ; DTIMLO
TAPE_LOADER:077F                 .BYTE 0
TAPE_LOADER:077F                 .WORD $403              ; DBYTE
TAPE_LOADER:077F                 .WORD $8004             ; DSECTOR
TAPE_LOADER:078B
TAPE_LOADER:078B DISPLAY_LIST:   .BYTE $70               ; DATA XREF: BOOT_CONTINUE+B↑t
TAPE_LOADER:078B                                         ; BOOT_CONTINUE+10↑t ...
TAPE_LOADER:078C                 .BYTE $70
TAPE_LOADER:078D                 .BYTE $70
TAPE_LOADER:078E                 .BYTE $47
TAPE_LOADER:078F                 .WORD TEXT_LINE
TAPE_LOADER:0791                 .BYTE $70
TAPE_LOADER:0792                 .BYTE $70
TAPE_LOADER:0793                 .BYTE $70
TAPE_LOADER:0794                 .BYTE 6
TAPE_LOADER:0795                 .BYTE $41
TAPE_LOADER:0796                 .WORD DISPLAY_LIST
TAPE_LOADER:0798
TAPE_LOADER:0798 TEXT_LINE:      .BYTE _SPACE|_C_BLACK,_SPACE|_C_BLACK,_L|_C_BLACK,_O|_C_BLACK,_A|_C_BLACK,_D|_C_BLACK,_I|_C_BLACK,_N|_C_BLACK,_G|_C_BLACK,_SPACE|_C_BLACK
TAPE_LOADER:0798                                         ; DATA XREF: TAPE_LOADER:078F↑o
TAPE_LOADER:0798                 .BYTE _B|_C_BLACK,_L|_C_BLACK,_U|_C_BLACK,_E|_C_BLACK,_SPACE|_C_BLACK,_M|_C_BLACK,_A|_C_BLACK,_X|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
TAPE_LOADER:0798                 .BYTE _B|_C_BLUE,_L|_C_BLUE,_O|_C_BLUE,_C|_C_BLUE,_K|_C_BLUE,_S|_C_BLUE,_SPACE|_C_BLACK,_T|_C_BLUE,_O|_C_BLUE,_SPACE|_C_BLACK
TAPE_LOADER:0798                 .BYTE _L|_C_BLUE,_O|_C_BLUE,_A|_C_BLUE,_D|_C_BLUE,_SPACE|_C_BLACK,_MINUS|_C_BLUE,_SPACE|_C_BLACK,_2|_C_ORANGE,_2|_C_ORANGE,_SPACE|_C_BLACK
TAPE_LOADER:07C0                 .BYTE   0,$4C,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
TAPE_LOADER:07C0                 .BYTE   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
TAPE_LOADER:07C0 ; end of 'TAPE_LOADER'
TAPE_LOADER:07C0
GAME:0C00 ; ===========================================================================
GAME:0C00
GAME:0C00 ; Segment type: Pure code
GAME:0C00                 ;.segment GAME
GAME:0C00                 * =  $C00
GAME:0C00
GAME:0C00 ; =============== S U B R O U T I N E =======================================
GAME:0C00
GAME:0C00
GAME:0C00 RESET:                                  ; CODE XREF: BOOT_CONTINUE+4B↑j
GAME:0C00                                         ; DATA XREF: RESET↓t ...
GAME:0C00                 LDA     #<RESET
GAME:0C02                 STA     CASINI          ; CASSETTE INIT LOCATION
GAME:0C04                 LDA     #>RESET
GAME:0C06                 STA     CASINI+1        ; CASSETTE INIT LOCATION
GAME:0C08
GAME:0C08                 LDA     #JOYSTICK_DOWN
GAME:0C0A                 STA     DIRECTION_A
GAME:0C0D                 LDA     #JOYSTICK_UP
GAME:0C0F                 STA     DIRECTION_B
GAME:0C12                 LDX     #95
GAME:0C14
GAME:0C14 X0:                                     ; CODE XREF: RESET+1B↓j
GAME:0C14                 LDA     ADS,X           ; $15: Hangar (A)
GAME:0C17                 STA     AEG,X           ; Backup of the hangar font characters
GAME:0C1A                 DEX
GAME:0C1B                 BPL     X0
GAME:0C1D                 INX
GAME:0C1E                 STX     COLDST          ; COLDSTART FLAG (1=IN MIDDLE OF COLDSTART)
GAME:0C21                 STX     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:0C24                 STX     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:0C27                 STX     SDMCTL          ; SAVE DMACTL REGISTER
GAME:0C2A                 STX     AUDCTL          ; Audio Control Register
GAME:0C2D                 LDA     #3
GAME:0C2F                 STA     SKSTAT          ; Serial Port control Register
GAME:0C32                 STA     BOOT?           ; SUCCESSFUL BOOT FLAG
GAME:0C34                 LDX     #58
GAME:0C36
GAME:0C36 loc_C36:                                ; CODE XREF: RESET+3D↓j
GAME:0C36                 LDA     DEMI,X          ; "BLUE MAX" / "  BY BOB POLIN" / "    (C)SYNSOFT 1983"
GAME:0C39                 STA     SC_STATUS_TITLE+8,X ; Print title copyright to screen
GAME:0C3C                 DEX
GAME:0C3D                 BPL     loc_C36
GAME:0C3F                 STX     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:0C42
GAME:0C42 START:                                  ; CODE XREF: TURN+196↓j
GAME:0C42                                         ; CNSL__CONSOLE+1E↓j ...
GAME:0C42                 JSR     STOP_SN         ; Sound: Stop
GAME:0C45                 STA     SDMCTL          ; SAVE DMACTL REGISTER
GAME:0C48                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:0C4B
GAME:0C4B                 LDA     #$50 ; 'P'      ; Display List: 6 VBLANK
GAME:0C4D                 STA     DL
GAME:0C50                 STA     DL+1
GAME:0C53
GAME:0C53                 LDA     #$74 ; 't'      ; Display List: LMS <adr> VSCROL HSCROL MODE 4
GAME:0C55                 LDX     #66
GAME:0C57
GAME:0C57 A_:                                     ; CODE XREF: RESET+5D↓j
GAME:0C57                 STA     DL-1,X
GAME:0C5A                 DEX
GAME:0C5B                 DEX
GAME:0C5C                 DEX
GAME:0C5D                 BNE     A_
GAME:0C5F                 LDA     #<SC_TOP_PLAYSCREEN
GAME:0C61                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:0C63                 LDA     #>SC_TOP_PLAYSCREEN
GAME:0C65                 STA     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:0C67                 LDY     #69
GAME:0C69
GAME:0C69 B:                                      ; CODE XREF: RESET+7F↓j
GAME:0C69                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:0C6B                 SEC
GAME:0C6C                 SBC     #65             ; each line has 65 bytes RAM
GAME:0C6E                 STA     DL,Y
GAME:0C71                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:0C73                 LDA     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:0C75                 SBC     #0
GAME:0C77                 STA     DL+1,Y
GAME:0C7A                 STA     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:0C7C                 DEY
GAME:0C7D                 DEY
GAME:0C7E                 DEY
GAME:0C7F                 BNE     B
GAME:0C81
GAME:0C81                 LDA     #$80            ; Display List: DLI 1 BLANK (trigger an interrupt)
GAME:0C83                 STA     DL+71
GAME:0C86                 LDA     #$54 ; 'T'      ; Display List: LMS <adr> HSCROL MODE 4
GAME:0C88                 STA     DL+68
GAME:0C8B                 LDA     #$20 ; ' '      ; Display List: 3 BLANK
GAME:0C8D                 STA     DL+72
GAME:0C90                 LDA     #$46 ; 'F'      ; Display List: LMS <adr> MODE 6
GAME:0C92                 STA     DL+73
GAME:0C95
GAME:0C95                 LDA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:0C98                 BEQ     AFZ
GAME:0C9A                 LDA     #<SC_STATUS_TITLE
GAME:0C9C                 STA     DL+74
GAME:0C9F                 LDA     #>SC_STATUS_TITLE
GAME:0CA1                 BNE     AGA
GAME:0CA3
GAME:0CA3 AFZ:                                    ; CODE XREF: RESET+98↑j
GAME:0CA3                 LDA     #<SC_STATUS_LINE
GAME:0CA5                 STA     DL+74
GAME:0CA8                 LDA     #>SC_STATUS_LINE
GAME:0CAA
GAME:0CAA AGA:                                    ; CODE XREF: RESET+A1↑j
GAME:0CAA                 STA     DL+75
GAME:0CAD                 LDA     #6              ; Display List: MODE 6
GAME:0CAF                 STA     DL+76
GAME:0CB2                 STA     DL+77
GAME:0CB5                 LDA     #$41 ; 'A'      ; Display List: JVB <adr>
GAME:0CB7                 STA     DL+78
GAME:0CBA                 LDA     #<DL
GAME:0CBC                 STA     DL+79
GAME:0CBF                 STA     SDLSTL          ; SAVE DISPLAY LIST LOW BYTE
GAME:0CC2                 LDA     #>DL
GAME:0CC4                 STA     DL+80
GAME:0CC7                 STA     SDLSTH          ; SAVE DISPLAY LIST HI BYTE
GAME:0CCA
GAME:0CCA                 LDA     #>__CHBAS
GAME:0CCC                 STA     CHBAS           ; Select the playfield font
GAME:0CCF                 LDA     #COLOR_INTENSITY_4|COLOR_GREEN
GAME:0CD1                 STA     byte_B1
GAME:0CD3                 STA     COLOR0          ; COLOR 0
GAME:0CD6                 LDA     #COLOR_INTENSITY_4|COLOR_LIGHT_BLUE
GAME:0CD8                 STA     COLOR1
GAME:0CDB                 LDA     #COLOR_INTENSITY_2|COLOR_YELLOW_GREEN
GAME:0CDD                 STA     byte_620
GAME:0CE0                 STA     COLOR2
GAME:0CE3                 LDA     #$C0
GAME:0CE5                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:0CE8                 LDA     #>VDSLST_ROUTINE ; DL IRQ triggered when the control display is reached
GAME:0CEA                 STA     VDSLST          ; DISPLAY LIST NMI VECTOR
GAME:0CED                 LDA     #<VDSLST_ROUTINE ; DL IRQ triggered when the control display is reached
GAME:0CEF                 STA     VDSLST+1        ; DISPLAY LIST NMI VECTOR
GAME:0CF2                 LDA     #<(SC_TOP_PLAYSCREEN-1)
GAME:0CF4                 STA     BOTM            ; Last byte of the screen level memory
GAME:0CF7                 LDA     #>(SC_TOP_PLAYSCREEN-1)
GAME:0CF9                 STA     BOTM+1          ; Last byte of the screen level memory
GAME:0CFC                 LDA     #>SC            ; Screen memory
GAME:0CFE                 STA     TOP             ; First byte of the screen level memory
GAME:0D01                 LDA     #<SC            ; Screen memory
GAME:0D03                 STA     TOP+1           ; First byte of the screen level memory
GAME:0D06                 JSR     CLRPM__CLEAR_PMGRAPHICS ; Clear Player-Missile Graphics
GAME:0D09                 STX     BUILDING_ROW_COUNTER
GAME:0D0C                 LDX     #6
GAME:0D0E                 LDA     #0
GAME:0D10
GAME:0D10 EU:                                     ; CODE XREF: RESET+114↓j
GAME:0D10                 STA     TREE_POS_BUF-1,X ; Position of trees
GAME:0D13                 DEX
GAME:0D14                 BNE     EU
GAME:0D16                 STA     RIVER_BOAT_ROW_FLAG ; !=0 boat top row drawn, ==0 boat bottom row drawn
GAME:0D19                 STA     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:0D1B                 STA     byte_FA
GAME:0D1D                 STA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:0D20                 LDA     #26
GAME:0D22                 STA     RUNWAY_POS_Y_INDEX ; Runway is 45 characters long, this is an index used for drawing the correct line
GAME:0D25                 STA     byte_C4
GAME:0D27                 LDA     #150
GAME:0D29                 STA     byte_FE
GAME:0D2B                 LDA     RANDOM          ; Random Number Generator
GAME:0D2E                 AND     #$1F
GAME:0D30                 ADC     #$F
GAME:0D32                 STA     RIVER_BOAT_NEXT_COUNTER ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
GAME:0D35                 LDA     #$40 ; '@'
GAME:0D37                 STA     CH              ; GLOBAL VARIABLE FOR KEYBOARD
GAME:0D3A                 LDA     #$50 ; 'P'
GAME:0D3C                 STA     SOUND_MUSIC_ACTIVE_6FF ; Sound: Music playback is active, when != 0
GAME:0D3F                 STA     byte_6B0
GAME:0D42                 STA     byte_655
GAME:0D45                 STA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:0D48                 LDA     #44
GAME:0D4A                 STA     RUNWAY_POS_X_INDEX ; Right position where the runway starts
GAME:0D4D                 STA     byte_6A1
GAME:0D50                 LDX     #66
GAME:0D52
GAME:0D52 L5:                                     ; CODE XREF: RESET+159↓j
GAME:0D52                 LDA     DSPLY-1,X       ; Initial Control Display
GAME:0D55                 STA     SC_STATUS_LINE.line_0.empty_2,X
GAME:0D58                 DEX
GAME:0D59                 BNE     L5
GAME:0D5B                 LDA     RANDOM          ; Random Number Generator
GAME:0D5E                 ORA     #$40 ; '@'
GAME:0D60                 STA     byte_6AA
GAME:0D63                 LDA     RANDOM          ; Random Number Generator
GAME:0D66                 ORA     #$18
GAME:0D68                 AND     #$7F
GAME:0D6A                 STA     byte_650
GAME:0D6D                 LDX     #16
GAME:0D6F                 STX     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:0D72                 STX     byte_6D6
GAME:0D75                 STX     byte_666
GAME:0D78                 DEX
GAME:0D79                 STX     STICK0_COPY     ; JOYSTICK 0 copy
GAME:0D7B                 STX     DEMO_STICK0     ; Demo mode: joystick movement
GAME:0D7E                 LDA     #75
GAME:0D80                 STA     byte_667
GAME:0D83                 LDA     #SND_FREQ_251
GAME:0D85                 STA     AUDF1           ; Audio 1 Frequency Register
GAME:0D88                 JSR     DFGN            ; Restore anti-airgraft gun battery graphics at character $31
GAME:0D8B                 JSR     QUIET__STOP_ALL_SOUNDS ; Sound: stop all audio output
GAME:0D8E                 STA     AUDIO4_GUN_SND_COUNTER
GAME:0D91                 STA     byte_6DB
GAME:0D94                 STA     CAPITAL_Y_POS
GAME:0D97                 STA     GAME_COMPLETION_MASK
GAME:0D9A                 STA     byte_6C3
GAME:0D9D                 STA     byte_6C5
GAME:0DA0                 STA     EXPLOSION_TILE_ANIMATION
GAME:0DA3                 STA     WIND_DURATION   ; Duration during which Wind is in effect
GAME:0DA5                 STA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:0DA8                 STA     byte_6A2
GAME:0DAB                 STA     RTCLOK          ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:0DAD                 STA     RTCLOK+1        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:0DAF                 STA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:0DB1                 STA     PLANE_HIT_FLASH_COUNTER ; !=0 => counter to signal damage via flashing
GAME:0DB3                 STA     AUDIO2_DROPSND_FREQ
GAME:0DB6                 STA     byte_6A6
GAME:0DB9                 STA     SIZEM           ; Missle Size
GAME:0DBC                 STA     byte_6A7
GAME:0DBF                 STA     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:0DC2                 STA     byte_698
GAME:0DC5                 STA     ENEMY_BULLET_Y_POS ; Y position of an enemy bullet (0=none)
GAME:0DC8                 STA     CURRENT_GAME_PHASE
GAME:0DCA                 STA     byte_661
GAME:0DCD                 STA     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:0DD0                 STA     byte_65F
GAME:0DD3                 STA     M2PL_SIZEP2     ; Missle to Player 2 Collision / Player 2 Size
GAME:0DD6                 STA     M3PL_SIZEP3     ; Missle to Player 3 Collision / Player 3 Size
GAME:0DD9                 STA     VAR_PRIMARY_TARGET_SUBTYPE
GAME:0DDC                 STA     byte_656
GAME:0DDF                 STA     byte_6ED
GAME:0DE2                 STA     byte_FD
GAME:0DE4                 STA     GRAVITY_COUNT   ; When enabled, this counter pulls the plane down every 40 ticks
GAME:0DE7                 STA     byte_B6
GAME:0DE9                 STA     byte_6AE
GAME:0DEC                 STA     AUDIO3_SOUND_COUNTER
GAME:0DEF                 STA     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:0DF2                 STA     PCOLP3          ; P3 COLOR
GAME:0DF5                 STA     PCOLR1          ; P1 COLOR
GAME:0DF8                 STA     COLOR4
GAME:0DFB                 STA     CURRENT_TILE_ROW_PTR+1
GAME:0DFD                 STA     byte_602
GAME:0E00                 STA     AUDIO2_DURATION_COUNTER
GAME:0E03                 LDA     #26
GAME:0E05                 STA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:0E07                 STA     CAN_LAND_FLAG   ; =0 => plane can land (runway reached)
GAME:0E0A                 STA     FUEL_TIMER
GAME:0E0D                 LDA     #6
GAME:0E0F                 STA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:0E12                 LDA     #14
GAME:0E14                 STA     GRAVITY_COUNT   ; When enabled, this counter pulls the plane down every 40 ticks
GAME:0E17                 STA     PCOLR0          ; P0 COLOR
GAME:0E1A                 LDA     #>PMBASE_
GAME:0E1C                 STA     PMBASE          ; Player-Missile Address Base Register
GAME:0E1F                 LDA     #11b            ; Enable Player Graphics and Missile Graphics
GAME:0E21                 STA     GRACTL          ; Graphics Control Register
GAME:0E24                 LDA     #119
GAME:0E26                 STA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:0E28                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:0E2B                 STA     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:0E2E                 LDA     #165
GAME:0E30                 STA     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:0E32                 JSR     DRP0            ; Update the primary plane graphics at the current vertical position (not the shadow or alternative color)
GAME:0E35                 LDA     #1
GAME:0E37                 STA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:0E39                 STA     byte_C5
GAME:0E3B                 STA     GPRIOR          ; PRIO = Players first, then Playfield
GAME:0E3E                 STA     byte_606
GAME:0E41                 STA     byte_610
GAME:0E44                 LDA     #168
GAME:0E46                 STA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:0E48                 JSR     DRP1
GAME:0E4B                 JSR     SHDW_SUB        ; Copy Plane Shadow into P1
GAME:0E4E                 LDA     RANDOM          ; Random Number Generator
GAME:0E51                 AND     #1
GAME:0E53                 CLC
GAME:0E54                 ADC     #8
GAME:0E56                 STA     REQUIRED_TARGETS ; Number of required primary targets to progress (8 or 9 by random)
GAME:0E59                 LDA     #4
GAME:0E5B                 STA     WORKING_PARTS   ; # of working part (4): fuel, bomb, maneuverabiity, gun
GAME:0E5E                 STA     COLOR3
GAME:0E61                 STA     byte_608
GAME:0E64                 STA     SPEED_DELAY_COUNTER ; Limit speed increment/decrement changes with this counter
GAME:0E67                 LDA     #255
GAME:0E69                 STA     byte_603
GAME:0E6C                 LDA     #DIR_RIVER_LEFT
GAME:0E6E                 STA     byte_637
GAME:0E71                 STA     MAP_RIVER_DIR   ; Direction of the river
GAME:0E74                 STA     byte_643
GAME:0E77                 JSR     DFHNGR          ; Define Hangar – restore the font characters for the hangar
GAME:0E7A                 LDA     #<EB
GAME:0E7C                 STA     EE__JMP_PATCH+1
GAME:0E7F                 LDA     #>EB
GAME:0E81                 STA     EE__JMP_PATCH+2
GAME:0E84                 LDA     #25
GAME:0E86                 STA     byte_6B1
GAME:0E89                 STA     RIVER_BRIDGE_ROW
GAME:0E8B
GAME:0E8B EA:                                     ; CODE XREF: EB+B↓j
GAME:0E8B                 JMP     J
GAME:0E8B ; End of function RESET
GAME:0E8B
GAME:0E8E
GAME:0E8E ; =============== S U B R O U T I N E =======================================
GAME:0E8E
GAME:0E8E
GAME:0E8E EB:                                     ; DATA XREF: RESET+27A↑t
GAME:0E8E                                         ; RESET+27F↑t
GAME:0E8E                 JSR     DRAW            ; Draw river/gras on the map
GAME:0E91                 JSR     MB
GAME:0E94                 JSR     DRTR__DRAW_TREE ; Draw trees into the map. Needs to be the last draw function to be called.
GAME:0E97                 DEC     RIVER_BRIDGE_ROW
GAME:0E99                 BNE     EA
GAME:0E9B                 LDA     #>XSND          ; Deferred interrupt for sound
GAME:0E9D                 STA     EE__JMP_PATCH+2
GAME:0EA0                 LDA     #<XSND          ; Deferred interrupt for sound
GAME:0EA2                 STA     EE__JMP_PATCH+1
GAME:0EA5                 LDA     #3
GAME:0EA7                 STA     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:0EA9                 LDA     #255
GAME:0EAB                 STA     byte_B6
GAME:0EAD                 LDA     #130
GAME:0EAF                 STA     byte_638
GAME:0EB2                 LDA     #$3F ; '?'
GAME:0EB4                 STA     SDMCTL          ; SAVE DMACTL REGISTER
GAME:0EB7                 STA     ATRACT          ; ATRACT FLAG
GAME:0EB9
GAME:0EB9                 LDA     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:0EBC                 BEQ     _2              ; Setup level: novice
GAME:0EBE                 CMP     #GAME_LEVEL_INTERMEDIATE
GAME:0EC0                 BEQ     _6              ; Setup level: intermediate
GAME:0EC2                 LDX     #6              ; Setup level: advanced
GAME:0EC4
GAME:0EC4 _5:                                     ; CODE XREF: EB+3D↓j
GAME:0EC4                 LDA     EAS9,X          ; Advanced level variables
GAME:0EC7                 STA     DIFF,X          ; Difficulty for the level
GAME:0ECA                 DEX
GAME:0ECB                 BPL     _5
GAME:0ECD                 INC     byte_6A7
GAME:0ED0                 LDA     #200
GAME:0ED2                 STA     byte_6CF
GAME:0ED5                 JMP     _3
GAME:0ED8 ; ---------------------------------------------------------------------------
GAME:0ED8
GAME:0ED8 _2:                                     ; CODE XREF: EB+2E↑j
GAME:0ED8                 LDX     #7              ; Setup level: novice
GAME:0EDA
GAME:0EDA _1:                                     ; CODE XREF: EB+53↓j
GAME:0EDA                 LDA     EAS0,X          ; Novice level variables
GAME:0EDD                 STA     DIFF,X          ; Difficulty for the level
GAME:0EE0                 DEX
GAME:0EE1                 BPL     _1
GAME:0EE3                 JMP     _3
GAME:0EE6 ; ---------------------------------------------------------------------------
GAME:0EE6
GAME:0EE6 _6:                                     ; CODE XREF: EB+32↑j
GAME:0EE6                 LDX     #6              ; Setup level: intermediate
GAME:0EE8
GAME:0EE8 _7:                                     ; CODE XREF: EB+61↓j
GAME:0EE8                 LDA     EAS6,X          ; Intermediate level variables
GAME:0EEB                 STA     DIFF,X          ; Difficulty for the level
GAME:0EEE                 DEX
GAME:0EEF                 BPL     _7
GAME:0EF1                 LDA     #180
GAME:0EF3                 STA     byte_6CF
GAME:0EF6
GAME:0EF6 _3:                                     ; CODE XREF: EB+47↑j
GAME:0EF6                                         ; EB+55↑j
GAME:0EF6                 LDX     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:0EF9                 BEQ     AFX
GAME:0EFB                 JSR     PLAY_IT         ; Sound: Start playing the title music
GAME:0EFE
GAME:0EFE AFY:                                    ; CODE XREF: EB+79↓j
GAME:0EFE                 JSR     CNSL__CONSOLE   ; Console for option selection and to start the game
GAME:0F01                 JSR     DFLSH__DEMO_FLASH_BLUEMAX ; Demo: Pulsate "BLUE MAX" in blue
GAME:0F04                 LDA     SOUND_MUSIC_ACTIVE_6FF ; Sound: Music playback is active, when != 0
GAME:0F07                 BNE     AFY             ; Wait for the title music to be done
GAME:0F09
GAME:0F09 AFX:                                    ; CODE XREF: EB+6B↑j
GAME:0F09                 LDA     #SND_FREQ_251
GAME:0F0B                 STA     AUDF1           ; Audio 1 Frequency Register
GAME:0F0E                 LDA     #SND_FREQ_13
GAME:0F10                 STA     AUDF3           ; Audio 3 Frequency Register
GAME:0F13                 LDA     #$EC
GAME:0F15                 STA     CDTMA1          ; COUNT DOWN TIMER 1 JSR ADDRESS
GAME:0F18                 LDA     #$EB
GAME:0F1A                 STA     CDTMA1+1        ; COUNT DOWN TIMER 1 JSR ADDRESS
GAME:0F1D                 LDA     #AUDIO_CONTROL_VOL_1|AUDIO_CONTROL_DIST_6
GAME:0F1F                 STA     AUDC1_SHADOW
GAME:0F22                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:0F25                 LDX     #150
GAME:0F27
GAME:0F27 CW:                                     ; CODE XREF: EB+B3↓j
GAME:0F27                 STX     RIVER_BRIDGE_ROW
GAME:0F29                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:0F2C                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:0F2F                 JSR     CNSL__CONSOLE   ; Console for option selection and to start the game
GAME:0F32                 JSR     FUEL            ; Use fuel, update the display as well
GAME:0F35                 JSR     DFLSH__DEMO_FLASH_BLUEMAX ; Demo: Pulsate "BLUE MAX" in blue
GAME:0F38                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:0F3B                 JSR     ROAR
GAME:0F3E                 LDX     RIVER_BRIDGE_ROW
GAME:0F40                 DEX
GAME:0F41                 BNE     CW
GAME:0F43
GAME:0F43 MZ:                                     ; CODE XREF: REFUEL:_1↓j
GAME:0F43                 LDA     #SETVBV_VVBLKD
GAME:0F45                 LDX     #>VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:0F47                 LDY     #<VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:0F49                 JSR     SETVBV          ; SET SYSTEM TIMERS ROUTINE
GAME:0F4C                 LDA     #$C0
GAME:0F4E                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:0F51                 STA     HITCLR          ; write to HITCLR clears all of the collision registers.
GAME:0F54                 LDA     #_0|_C_ORANGE
GAME:0F56                 STA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:0F59                 STA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:0F5C                 STA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:0F5F                 JSR     TAKOF__TAKEOFF_LOOP ; Loop to manage takeoff
GAME:0F62                 LDA     byte_6CF
GAME:0F65                 STA     QUAKE_ANIMATION_COUNTER ; Quake, shake via the scroll register, timer
GAME:0F68                 CMP     #220
GAME:0F6A                 BCS     _1_0
GAME:0F6C                 ADC     #7
GAME:0F6E                 STA     byte_6CF
GAME:0F71
GAME:0F71 _1_0:                                   ; CODE XREF: EB+DC↑j
GAME:0F71                 LDA     #4
GAME:0F73                 STA     byte_6B0
GAME:0F76                 STA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:0F79                 STA     CH              ; GLOBAL VARIABLE FOR KEYBOARD
GAME:0F7C
GAME:0F7C                 LDA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:0F7F                 BNE     _18
GAME:0F81                 LDA     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:0F84                 CMP     #2
GAME:0F86                 BCC     SRT
GAME:0F88                 CMP     REQUIRED_TARGETS ; Number of required primary targets to progress (8 or 9 by random)
GAME:0F8B                 BCS     V0
GAME:0F8D                 INC     byte_6A7
GAME:0F90
GAME:0F90 _18:                                    ; CODE XREF: EB+F1↑j
GAME:0F90                 LDA     RANDOM          ; Random Number Generator
GAME:0F93                 CMP     #160
GAME:0F95                 BCC     ZN
GAME:0F97
GAME:0F97 _9:
GAME:0F97                 JMP     SRT
GAME:0F9A ; ---------------------------------------------------------------------------
GAME:0F9A
GAME:0F9A V0:                                     ; CODE XREF: EB+FD↑j
GAME:0F9A                 INC     byte_6AE
GAME:0F9D
GAME:0F9D ZN:                                     ; CODE XREF: EB+107↑j
GAME:0F9D                 LDA     #90
GAME:0F9F                 STA     byte_667
GAME:0FA2                 STA     byte_685
GAME:0FA5                 LDA     #1
GAME:0FA7                 STA     byte_666
GAME:0FAA                 STA     byte_669
GAME:0FAD
GAME:0FAD                 LDA     RANDOM          ; Random Number Generator
GAME:0FB0                 AND     #1111b
GAME:0FB2                 ADC     #30
GAME:0FB4                 STA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:0FB7                 ORA     #16
GAME:0FB9                 STA     byte_668
GAME:0FBC                 STA     ENEMY_RUNWAY_START ; How many lines till the enemy runway will appear
GAME:0FBF                 LDA     #36
GAME:0FC1                 STA     ENEMY_RUNWAY_LENGTH ; Length/current line of the enemy runway (default length=36)
GAME:0FC4                 STA     byte_674
GAME:0FC7                 LDY     #0
GAME:0FC9                 STY     ENEMY_RUNWAY_PLANE_FLAG
GAME:0FCC                 STY     byte_677
GAME:0FCF                 STY     byte_686
GAME:0FD2                 DEY
GAME:0FD3                 STY     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:0FD5                 LDA     RANDOM          ; Random Number Generator
GAME:0FD8                 AND     #11111b
GAME:0FDA                 STA     byte_B2
GAME:0FDC                 INC     CURRENT_GAME_PHASE
GAME:0FDE                 JSR     AKA
GAME:0FE1                 JMP     CITY
GAME:0FE1 ; End of function EB
GAME:0FE1
GAME:0FE4
GAME:0FE4 ; =============== S U B R O U T I N E =======================================
GAME:0FE4
GAME:0FE4
GAME:0FE4 SRT:                                    ; CODE XREF: EB+F8↑j
GAME:0FE4                                         ; EB:_9↑j ...
GAME:0FE4                 JSR     DRAW            ; Draw river/gras on the map
GAME:0FE7                 JSR     DRBR__DRAW_BRIDGE ; Draw a bridge over water
GAME:0FEA                 JSR     DRBT__DRAW_BOAT ; Draw a ship onto the map
GAME:0FED                 JSR     DRUN__DRAW_RUNWAY ; Draw the runway on the map
GAME:0FF0                 JSR     PLBCK
GAME:0FF3                 JSR     PLFWD
GAME:0FF6                 JSR     DRTNK
GAME:0FF9                 JSR     TNK
GAME:0FFC                 JSR     SHIP            ; Draw a moving ship
GAME:0FFF                 JSR     COMMON
GAME:1002                 JSR     CKLAND          ; Check if the player wants to land the plane while being over the runway
GAME:1005                 JSR     RUNSND
GAME:1008                 JSR     FBRGN           ; Fire Gun
GAME:100B                 JSR     FBTGN
GAME:100E                 JSR     DRP23           ; Draw Car or Truck driving left/right
GAME:1011                 JSR     CKCOL           ; Check collision?!?
GAME:1014                 JSR     SPD__SPEED_CHANGE ; Change the speed of the plane up/down based on the joystick
GAME:1017                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:101A                 STA     ATRACT          ; ATRACT FLAG
GAME:101C                 JMP     SRT
GAME:101C ; End of function SRT
GAME:101C
GAME:101F
GAME:101F ; =============== S U B R O U T I N E =======================================
GAME:101F
GAME:101F
GAME:101F COMMON:                                 ; CODE XREF: SRT+1B↑p
GAME:101F                                         ; CKLAND+1C↓p ...
GAME:101F                 LDA     STICK0          ; JOYSTICK 0 RAM CELL
GAME:1022                 STA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:1024                 LDA     STRIG0          ; JOYSTICK TRIGGER 0
GAME:1027                 STA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:1029                 JSR     DEMO__DEMO_TRIGGER ; Demo Bomb release
GAME:102C                 JSR     WIND            ; Check if Wind Warnings are possible and randomly trigger it.
GAME:102F                 JSR     TRGT
GAME:1032                 JSR     PBMB
GAME:1035                 JSR     DRTR__DRAW_TREE ; Draw trees into the map. Needs to be the last draw function to be called.
GAME:1038                 JSR     QUAKE           ; Quake, if enabled, shake the screen via HSCROL.
GAME:103B                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:103E                 LDA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:1041                 BNE     NQ
GAME:1043                 JSR     KMKZ
GAME:1046                 JMP     NR
GAME:1049 ; ---------------------------------------------------------------------------
GAME:1049
GAME:1049 NQ:                                     ; CODE XREF: COMMON+22↑j
GAME:1049                 JSR     JOYST
GAME:104C
GAME:104C NR:                                     ; CODE XREF: COMMON+27↑j
GAME:104C                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:104F                 JSR     XPLSN
GAME:1052                 JSR     ROAR
GAME:1055                 JSR     TRIG__TRIGGER_MACHINE_GUN ; Trigger machine gun
GAME:1058                 JSR     BOMB            ; Trigger bomb drop
GAME:105B                 JSR     GUNSND          ; Gun sound from the plane
GAME:105E                 JSR     SPLASH          ; Splash sound effect on channel 2
GAME:1061                 JSR     GRAV__APPLY_GRAVITY ; When enabled, apply gravity to the plane
GAME:1064                 JSR     LOW             ; Check if the plane is too low to the ground. Warn via control display color and sound effect.
GAME:1067                 JSR     FUEL            ; Use fuel, update the display as well
GAME:106A                 JSR     PAUSE           ; Check if 'SPACE' for Pause was pressed and pause the game.
GAME:106D                 JSR     BRGPOS
GAME:1070                 JSR     FTNKGN
GAME:1073                 JSR     M2GPOS
GAME:1076                 JSR     FM2GN
GAME:1079                 JSR     ALT__ALTITUDE_DISPLAY_FIXUP ; Fixup Altitude display to make sure that all digits are correct. This can be necessary, because the last digit can over/underflow when in/decremented somewhere else.
GAME:107C                 JSR     GGNSND          ; Play gound sound, if enabled
GAME:107F                 JSR     COLRDM__COLOR_DAMAGE ; Flash background of control display to signal damage
GAME:1082                 JSR     XFLSH           ; Flash the screen colors after e.g. a crash
GAME:1085                 JSR     CKSC
GAME:1088                 JSR     CNSL__CONSOLE   ; Console for option selection and to start the game
GAME:108B                 JSR     SHCOL
GAME:108E                 JSR     TRGTP2          ; Flicker PCOLR2
GAME:1091                 LDA     byte_6F7
GAME:1094                 BEQ     _9              ; => Return
GAME:1096                 DEC     byte_6F7
GAME:1099
GAME:1099 _9:                                     ; CODE XREF: COMMON+75↑j
GAME:1099                 RTS                     ; => Return
GAME:1099 ; End of function COMMON
GAME:1099
GAME:109A
GAME:109A ; =============== S U B R O U T I N E =======================================
GAME:109A
GAME:109A ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:109A
GAME:109A TIMER:                                  ; CODE XREF: RESET+48↑p
GAME:109A                                         ; EB+AA↑p ...
GAME:109A                 LDA     #11b
GAME:109C                 STA     HITCLR          ; write to HITCLR clears all of the collision registers.
GAME:109F                 LDX     #0
GAME:10A1                 LDY     #1
GAME:10A3                 JSR     SETVBV          ; SET SYSTEM TIMERS ROUTINE
GAME:10A6                 LDA     #$C0
GAME:10A8                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:10AB
GAME:10AB L:                                      ; CODE XREF: TIMER+14↓j
GAME:10AB                 LDA     CDTMV3          ; COUNT DOWN TIMER 3
GAME:10AE                 BNE     L
GAME:10B0                 RTS
GAME:10B0 ; End of function TIMER
GAME:10B0
GAME:10B1
GAME:10B1 ; =============== S U B R O U T I N E =======================================
GAME:10B1
GAME:10B1 ; Deferred VBL: scroll the playfield and play sound
GAME:10B1
GAME:10B1 VBIR__DEFERRED_VBL_DRAW:                ; DATA XREF: EB+B7↑t
GAME:10B1                                         ; EB+B9↑t ...
GAME:10B1                 DEC     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:10B4                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:10B7                 LSR     A
GAME:10B8                 BCC     SCROL           ; Scrolling happens at 30Hz
GAME:10BA                 JMP     XSND            ; Deferred interrupt for sound
GAME:10BD ; ---------------------------------------------------------------------------
GAME:10BD
GAME:10BD SCROL:                                  ; CODE XREF: VBIR__DEFERRED_VBL_DRAW+7↑j
GAME:10BD                 LDA     VBL_DRAW_DOWN_COUNTER ; Scrolling happens at 30Hz
GAME:10C0                 BEQ     JR
GAME:10C2                 DEC     VBL_DRAW_DOWN_COUNTER ; VBL: 30Hz down counter whenever the level scrolls a pixel
GAME:10C5
GAME:10C5 JR:                                     ; CODE XREF: VBIR__DEFERRED_VBL_DRAW+F↑j
GAME:10C5                 LDA     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:10C7                 BEQ     J
GAME:10C9                 SEC
GAME:10CA                 SBC     #1
GAME:10CC                 STA     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:10CE                 STA     HSCROL          ; Horizontal Scroll Register
GAME:10D1                 ASL     A
GAME:10D2                 STA     VSCROL          ; Vertical Scroll Register
GAME:10D5                 JMP     XSND            ; Deferred interrupt for sound
GAME:10D8 ; ---------------------------------------------------------------------------
GAME:10D8
GAME:10D8 J:                                      ; CODE XREF: RESET:EA↑j
GAME:10D8                                         ; VBIR__DEFERRED_VBL_DRAW+16↑j
GAME:10D8                 LDA     byte_FE
GAME:10DA                 BEQ     GN
GAME:10DC                 DEC     byte_FE
GAME:10DE                 BNE     GN
GAME:10E0                 LDA     #8
GAME:10E2                 STA     RIVER_BRIDGE_ROW
GAME:10E4                 LDA     RANDOM          ; Random Number Generator
GAME:10E7                 AND     #11b
GAME:10E9                 STA     byte_61B
GAME:10EC
GAME:10EC GN:                                     ; CODE XREF: VBIR__DEFERRED_VBL_DRAW+29↑j
GAME:10EC                                         ; VBIR__DEFERRED_VBL_DRAW+2D↑j
GAME:10EC                 LDA     #0
GAME:10EE                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:10F0                 LDA     #3
GAME:10F2                 STA     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:10F4                 STA     HSCROL          ; Horizontal Scroll Register
GAME:10F7                 ASL     A
GAME:10F8                 STA     VSCROL          ; Vertical Scroll Register
GAME:10FB
GAME:10FB                 LDA     BOTM            ; Last byte of the screen level memory
GAME:10FE                 SEC
GAME:10FF                 SBC     #23
GAME:1101                 STA     BUF
GAME:1104                 LDA     BOTM+1          ; Last byte of the screen level memory
GAME:1107                 SBC     #0
GAME:1109                 STA     BUF+1
GAME:110C                 LDA     BOTSCREN
GAME:110F                 STA     BOTM            ; Last byte of the screen level memory
GAME:1112                 SEC
GAME:1113                 SBC     #20
GAME:1115                 STA     VBL_NEXT_ROW_PTR ; new row to be draw. Set inside the VBL.
GAME:1117                 PHP
GAME:1118                 LDA     BOTSCREN+1
GAME:111B                 STA     BOTM+1          ; Last byte of the screen level memory
GAME:111E                 PLP
GAME:111F                 SBC     #0
GAME:1121                 STA     VBL_NEXT_ROW_PTR+1 ; new row to be draw. Set inside the VBL.
GAME:1123                 LDY     #66
GAME:1125
GAME:1125 K:                                      ; CODE XREF: VBIR__DEFERRED_VBL_DRAW+88↓j
GAME:1125                 LDA     DL,Y
GAME:1128                 CLC
GAME:1129                 ADC     #1
GAME:112B                 STA     DL+3,Y
GAME:112E                 LDA     DL+1,Y
GAME:1131                 ADC     #0
GAME:1133                 STA     DL+4,Y
GAME:1136                 DEY
GAME:1137                 DEY
GAME:1138                 DEY
GAME:1139                 BNE     K
GAME:113B                 LDA     TOP             ; First byte of the screen level memory
GAME:113E                 CLC
GAME:113F                 ADC     #1
GAME:1141                 STA     DL+3
GAME:1144                 LDA     TOP+1           ; First byte of the screen level memory
GAME:1147                 ADC     #0
GAME:1149                 STA     DL+4
GAME:114C                 LDA     BUF
GAME:114F                 STA     TOP             ; First byte of the screen level memory
GAME:1152                 LDA     BUF+1
GAME:1155                 STA     TOP+1           ; First byte of the screen level memory
GAME:1158
GAME:1158 EE__JMP_PATCH:                          ; DATA XREF: RESET+27C↑w
GAME:1158                                         ; EB+14↑w ...
GAME:1158                 JMP     XSND            ; Deferred interrupt for sound
GAME:1158 ; End of function VBIR__DEFERRED_VBL_DRAW
GAME:1158
GAME:115B
GAME:115B ; =============== S U B R O U T I N E =======================================
GAME:115B
GAME:115B ; Draw river/gras on the map
GAME:115B
GAME:115B DRAW:                                   ; CODE XREF: EB↑p
GAME:115B                                         ; SRT↑p ...
GAME:115B                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:115D                 BEQ     M
GAME:115F                 RTS
GAME:1160 ; ---------------------------------------------------------------------------
GAME:1160
GAME:1160 M:                                      ; CODE XREF: DRAW+2↑j
GAME:1160                 LDY     #64
GAME:1162                 LDA     #L_GRAS|L_C_0
GAME:1164
GAME:1164 N:                                      ; CODE XREF: DRAW+C↓j
GAME:1164                 STA     (VBL_NEXT_ROW_PTR),Y ; Fill whole line with gras
GAME:1166                 DEY
GAME:1167                 BNE     N               ; Fill whole line with gras
GAME:1169
GAME:1169 AY:                                     ; Direction of the river
GAME:1169                 LDA     MAP_RIVER_DIR
GAME:116C                 CMP     #DIR_RIVER_STRAIGHT
GAME:116E                 BEQ     STRGHT
GAME:1170                 CMP     #DIR_RIVER_RIGHT
GAME:1172                 BEQ     AR
GAME:1174
GAME:1174 AQ:
GAME:1174                 JMP     LFT
GAME:1177 ; ---------------------------------------------------------------------------
GAME:1177
GAME:1177 AR:                                     ; CODE XREF: DRAW+17↑j
GAME:1177                 JMP     RGHT
GAME:117A ; ---------------------------------------------------------------------------
GAME:117A
GAME:117A RND:                                    ; CODE XREF: DRAW+35↓j
GAME:117A                                         ; DRAW+D2↓j ...
GAME:117A                 LDA     RANDOM          ; Random Number Generator
GAME:117D                 AND     #3
GAME:117F                 ORA     #2
GAME:1181                 STA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:1184                 LDA     #DIR_RIVER_STRAIGHT
GAME:1186                 STA     MAP_RIVER_DIR   ; Direction of the river
GAME:1189                 JMP     STRGHT
GAME:118C ; ---------------------------------------------------------------------------
GAME:118C
GAME:118C AX:                                     ; CODE XREF: DRAW+83↓j
GAME:118C                 LDA     RANDOM          ; Random Number Generator
GAME:118F                 LSR     A
GAME:1190                 BCS     RND
GAME:1192                 LDA     RANDOM          ; Random Number Generator
GAME:1195                 AND     #15
GAME:1197                 ORA     #3
GAME:1199                 STA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:119C                 LDA     #255
GAME:119E                 STA     byte_603
GAME:11A1                 LDA     byte_602
GAME:11A4                 CMP     #4
GAME:11A6                 BEQ     AV              ; River should turn right
GAME:11A8                 CMP     #5
GAME:11AA                 BEQ     BA              ; River should turn left
GAME:11AC                 LDA     byte_610
GAME:11AF                 BEQ     EC              ; 50/50 chance for the river to turn left/right
GAME:11B1                 LSR     A
GAME:11B2                 STA     byte_610
GAME:11B5                 BCC     AV              ; River should turn right
GAME:11B7                 JMP     BA              ; River should turn left
GAME:11BA ; ---------------------------------------------------------------------------
GAME:11BA
GAME:11BA EC:                                     ; CODE XREF: DRAW+54↑j
GAME:11BA                 LDA     RANDOM          ; 50/50 chance for the river to turn left/right
GAME:11BD                 LSR     A
GAME:11BE                 BCC     AV              ; River should turn right
GAME:11C0
GAME:11C0 BA:                                     ; CODE XREF: DRAW+4F↑j
GAME:11C0                                         ; DRAW+5C↑j
GAME:11C0                 LDA     #DIR_RIVER_LEFT ; River should turn left
GAME:11C2                 STA     MAP_RIVER_DIR   ; Direction of the river
GAME:11C5                 JMP     LFT
GAME:11C8 ; ---------------------------------------------------------------------------
GAME:11C8
GAME:11C8 AV:                                     ; CODE XREF: DRAW+4B↑j
GAME:11C8                                         ; DRAW+5A↑j ...
GAME:11C8                 LDA     #DIR_RIVER_RIGHT ; River should turn right
GAME:11CA                 STA     MAP_RIVER_DIR   ; Direction of the river
GAME:11CD                 LSR     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:11D0                 ORA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:11D3                 STA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:11D6                 JMP     RGHT
GAME:11D9 ; ---------------------------------------------------------------------------
GAME:11D9
GAME:11D9 STRGHT:                                 ; CODE XREF: DRAW+13↑j
GAME:11D9                                         ; DRAW+2E↑j
GAME:11D9                 DEC     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:11DC                 BNE     P
GAME:11DE                 JMP     AX
GAME:11E1 ; ---------------------------------------------------------------------------
GAME:11E1
GAME:11E1 P:                                      ; CODE XREF: DRAW+81↑j
GAME:11E1                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:11E3                 CPY     #65
GAME:11E5                 BCS     AF
GAME:11E7                 LDA     #L_WATER_GRAS_A|L_C_0
GAME:11E9                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:11EB
GAME:11EB AF:                                     ; CODE XREF: DRAW+8A↑j
GAME:11EB                 DEY
GAME:11EC                 BEQ     U
GAME:11EE                 LDA     #L_WATER|L_C_0
GAME:11F0                 LDX     #19
GAME:11F2
GAME:11F2 Q:                                      ; CODE XREF: DRAW+A1↓j
GAME:11F2                 CPY     #65
GAME:11F4                 BCS     AG
GAME:11F6                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:11F8
GAME:11F8 AG:                                     ; CODE XREF: DRAW+99↑j
GAME:11F8                 DEY
GAME:11F9                 BEQ     U
GAME:11FB                 DEX
GAME:11FC                 BNE     Q
GAME:11FE                 CPY     #65
GAME:1200                 BCS     AH
GAME:1202                 LDA     #L_CLIFF_WATER_A|L_C_0
GAME:1204                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1206
GAME:1206 AH:                                     ; CODE XREF: DRAW+A5↑j
GAME:1206                 DEY
GAME:1207                 BEQ     U
GAME:1209                 CPY     #65
GAME:120B                 BCS     U
GAME:120D                 LDA     byte_606
GAME:1210                 BEQ     BN
GAME:1212                 LDA     #L_CLIFF_GRAS_A|L_C_0
GAME:1214                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1216                 RTS
GAME:1217 ; ---------------------------------------------------------------------------
GAME:1217
GAME:1217 BN:                                     ; CODE XREF: DRAW+B5↑j
GAME:1217                 LDA     #L_CLIFF_GRAS_B2|L_C_0
GAME:1219                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:121B                 DEY
GAME:121C                 BEQ     U
GAME:121E                 LDA     #L_CLIFF_GRAS_B1|L_C_0
GAME:1220                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1222
GAME:1222 U:                                      ; CODE XREF: DRAW+91↑j
GAME:1222                                         ; DRAW+9E↑j ...
GAME:1222                 LDA     #1
GAME:1224                 STA     byte_606
GAME:1227                 RTS
GAME:1228 ; ---------------------------------------------------------------------------
GAME:1228
GAME:1228 LFT:                                    ; CODE XREF: DRAW:AQ↑j
GAME:1228                                         ; DRAW+6A↑j
GAME:1228                 DEC     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:122B                 BNE     R
GAME:122D                 JMP     RND
GAME:1230 ; ---------------------------------------------------------------------------
GAME:1230
GAME:1230 R:                                      ; CODE XREF: DRAW+D0↑j
GAME:1230                 LDA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:1233                 LSR     A
GAME:1234                 BCC     S
GAME:1236                 DEC     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1238                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:123A                 CPY     byte_666
GAME:123D                 BEQ     W
GAME:123F                 CPY     #65
GAME:1241                 BCS     AL
GAME:1243                 LDA     #L_WATER_GRAS_C2|L_C_0
GAME:1245                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1247
GAME:1247 AL:                                     ; CODE XREF: DRAW+E6↑j
GAME:1247                 DEY
GAME:1248                 BEQ     V
GAME:124A                 LDA     #L_WATER|L_C_0
GAME:124C                 LDX     #19
GAME:124E
GAME:124E X_:                                     ; CODE XREF: DRAW+FD↓j
GAME:124E                 CPY     #65
GAME:1250                 BCS     AM
GAME:1252                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1254
GAME:1254 AM:                                     ; CODE XREF: DRAW+F5↑j
GAME:1254                 DEY
GAME:1255                 BEQ     V
GAME:1257                 DEX
GAME:1258                 BNE     X_
GAME:125A                 CPY     #65
GAME:125C                 BCS     V
GAME:125E                 LDA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:1261                 CMP     #1
GAME:1263                 BEQ     AZ
GAME:1265                 LDA     #L_GRAS_CLIFF_WATER_A|L_C_0
GAME:1267                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1269
GAME:1269 V:                                      ; CODE XREF: DRAW+ED↑j
GAME:1269                                         ; DRAW+FA↑j ...
GAME:1269                 DEC     byte_603
GAME:126C                 RTS
GAME:126D ; ---------------------------------------------------------------------------
GAME:126D
GAME:126D AZ:                                     ; CODE XREF: DRAW+108↑j
GAME:126D                 LDA     #L_GRAS_CLIFF_WATER_B|L_C_0
GAME:126F                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1271                 RTS
GAME:1272 ; ---------------------------------------------------------------------------
GAME:1272
GAME:1272 W:                                      ; CODE XREF: DRAW+E2↑j
GAME:1272                 LDA     #4
GAME:1274                 STA     byte_602
GAME:1277                 JMP     RND
GAME:127A ; ---------------------------------------------------------------------------
GAME:127A
GAME:127A S:                                      ; CODE XREF: DRAW+D9↑j
GAME:127A                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:127C                 CPY     #65
GAME:127E                 BCS     BB
GAME:1280                 LDA     #L_WATER_GRAS_C1|L_C_0
GAME:1282                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1284
GAME:1284 BB:                                     ; CODE XREF: DRAW+123↑j
GAME:1284                 DEY
GAME:1285                 BEQ     V
GAME:1287                 LDA     #L_WATER|L_C_0
GAME:1289                 LDX     #19
GAME:128B
GAME:128B T:                                      ; CODE XREF: DRAW+13A↓j
GAME:128B                 CPY     #65
GAME:128D                 BCS     AJ
GAME:128F                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1291
GAME:1291 AJ:                                     ; CODE XREF: DRAW+132↑j
GAME:1291                 DEY
GAME:1292                 BEQ     V
GAME:1294                 DEX
GAME:1295                 BNE     T
GAME:1297                 CPY     #65
GAME:1299                 BCS     AK
GAME:129B                 LDA     #L_CLIFF_WATER_C|L_C_0
GAME:129D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:129F
GAME:129F AK:                                     ; CODE XREF: DRAW+13E↑j
GAME:129F                 DEY
GAME:12A0                 BEQ     V
GAME:12A2                 CPY     #65
GAME:12A4                 BCS     TL              ; => Return
GAME:12A6                 LDA     byte_603
GAME:12A9                 CMP     #$FF
GAME:12AB                 BNE     Y_
GAME:12AD                 LDA     #L_CLIFF_GRAS_A|L_C_0
GAME:12AF                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:12B1                 DEC     byte_603
GAME:12B4                 LDA     #$FF
GAME:12B6                 STA     byte_602
GAME:12B9                 RTS
GAME:12BA ; ---------------------------------------------------------------------------
GAME:12BA
GAME:12BA Y_:                                     ; CODE XREF: DRAW+150↑j
GAME:12BA                 LDA     #L_GRASS_CLIFF_D|L_C_0
GAME:12BC                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:12BE
GAME:12BE TL:                                     ; CODE XREF: DRAW+149↑j
GAME:12BE                                         ; DRAW+1C7↓j
GAME:12BE                 RTS                     ; => Return
GAME:12BF ; ---------------------------------------------------------------------------
GAME:12BF
GAME:12BF RGHT:                                   ; CODE XREF: DRAW:AR↑j
GAME:12BF                                         ; DRAW+7B↑j
GAME:12BF                 DEC     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:12C2                 BNE     Z
GAME:12C4                 LDA     #0
GAME:12C6                 STA     byte_606
GAME:12C9                 JMP     RND
GAME:12CC ; ---------------------------------------------------------------------------
GAME:12CC
GAME:12CC Z:                                      ; CODE XREF: DRAW+167↑j
GAME:12CC                 INC     RIVER_RIGHT_X_POS ; Right position of the river
GAME:12CE                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:12D0                 CPY     byte_667
GAME:12D3                 BCC     AA
GAME:12D5                 LDA     #0
GAME:12D7                 STA     byte_606
GAME:12DA                 DEC     RIVER_RIGHT_X_POS ; Right position of the river
GAME:12DC                 LDA     #5
GAME:12DE                 STA     byte_602
GAME:12E1                 JMP     RND
GAME:12E4 ; ---------------------------------------------------------------------------
GAME:12E4
GAME:12E4 AA:                                     ; CODE XREF: DRAW+178↑j
GAME:12E4                 CPY     #65
GAME:12E6                 BCS     AB
GAME:12E8                 LDA     #L_WATER_GRAS_B2|L_C_0
GAME:12EA                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:12EC
GAME:12EC AB:                                     ; CODE XREF: DRAW+18B↑j
GAME:12EC                 DEY
GAME:12ED                 BEQ     AI
GAME:12EF                 CPY     #65
GAME:12F1                 BCS     AC
GAME:12F3                 LDA     #L_WATER_GRAS_B1|L_C_0
GAME:12F5                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:12F7
GAME:12F7 AC:                                     ; CODE XREF: DRAW+196↑j
GAME:12F7                 DEY
GAME:12F8                 BEQ     AI
GAME:12FA                 LDX     #18
GAME:12FC                 LDA     #L_WATER|L_C_0
GAME:12FE
GAME:12FE AD:                                     ; CODE XREF: DRAW+1AD↓j
GAME:12FE                 CPY     #65
GAME:1300                 BCS     AE
GAME:1302                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1304
GAME:1304 AE:                                     ; CODE XREF: DRAW+1A5↑j
GAME:1304                 DEY
GAME:1305                 BEQ     AI
GAME:1307                 DEX
GAME:1308                 BNE     AD
GAME:130A                 CPY     #65
GAME:130C                 BCS     AN
GAME:130E                 LDA     #L_CLIFF_WATER_B2|L_C_0
GAME:1310                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1312
GAME:1312 AN:                                     ; CODE XREF: DRAW+1B1↑j
GAME:1312                 DEY
GAME:1313                 BEQ     AI
GAME:1315                 CPY     #65
GAME:1317                 BCS     AO
GAME:1319                 LDA     #L_CLIFF_WATER_B1|L_C_0
GAME:131B                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:131D
GAME:131D AO:                                     ; CODE XREF: DRAW+1BC↑j
GAME:131D                 DEY
GAME:131E                 BEQ     AI
GAME:1320                 CPY     #65
GAME:1322                 BCS     TL              ; => Return
GAME:1324                 LDA     byte_603
GAME:1327                 CMP     #$FF
GAME:1329                 BNE     AP
GAME:132B                 LDA     #L_CLIFF_GRAS_A|L_C_0
GAME:132D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:132F                 DEC     byte_603
GAME:1332                 LDA     #$FF
GAME:1334                 STA     byte_602
GAME:1337
GAME:1337 AI:                                     ; CODE XREF: DRAW+192↑j
GAME:1337                                         ; DRAW+19D↑j ...
GAME:1337                 DEC     byte_603
GAME:133A                 RTS
GAME:133B ; ---------------------------------------------------------------------------
GAME:133B
GAME:133B AP:                                     ; CODE XREF: DRAW+1CE↑j
GAME:133B                 LDA     #L_CLIFF_GRAS_B2|L_C_0
GAME:133D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:133F                 DEY
GAME:1340                 BEQ     AI
GAME:1342                 LDA     #L_CLIFF_GRAS_B1|L_C_0
GAME:1344                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1346                 RTS
GAME:1346 ; End of function DRAW
GAME:1346
GAME:1347
GAME:1347 ; =============== S U B R O U T I N E =======================================
GAME:1347
GAME:1347
GAME:1347 DRP1:                                   ; CODE XREF: RESET+248↑p
GAME:1347                                         ; CE-10↓p
GAME:1347                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1349                 INY
GAME:134A                 INY
GAME:134B                 LDA     #1100b
GAME:134D                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:1350                 INY
GAME:1351                 LDA     #100b
GAME:1353                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:1356                 INY
GAME:1357                 LDA     #10000b
GAME:1359                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:135C                 INY
GAME:135D                 LDA     #0
GAME:135F                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:1362                 RTS
GAME:1362 ; End of function DRP1
GAME:1362
GAME:1363
GAME:1363 ; =============== S U B R O U T I N E =======================================
GAME:1363
GAME:1363 ; Copy Plane Shadow into P1
GAME:1363
GAME:1363 SHDW_SUB:                               ; CODE XREF: RESET+24B↑p
GAME:1363                                         ; CE-4↓p ...
GAME:1363                 LDX     #0
GAME:1365                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1367
GAME:1367 loc_1367:                               ; CODE XREF: SHDW_SUB+E↓j
GAME:1367                 LDA     P1IMAGE,X       ; plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)
GAME:136A                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:136D                 INY
GAME:136E                 INX
GAME:136F                 CPX     #8
GAME:1371                 BNE     loc_1367
GAME:1373                 RTS
GAME:1373 ; End of function SHDW_SUB
GAME:1373
GAME:1374
GAME:1374 ; =============== S U B R O U T I N E =======================================
GAME:1374
GAME:1374 ; Update the propeller graphics for rotation
GAME:1374
GAME:1374 PROP:                                   ; CODE XREF: EB+9B↑p
GAME:1374                                         ; COMMON+1C↑p ...
GAME:1374                 DEC     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:1377                 BNE     BG
GAME:1379                 LDA     #4
GAME:137B                 STA     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:137E
GAME:137E BG:                                     ; CODE XREF: PROP+3↑j
GAME:137E                 LDX     #3
GAME:1380                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1382                 LDA     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:1385                 CMP     #2
GAME:1387                 BEQ     BE
GAME:1389                 CMP     #4
GAME:138B                 BEQ     BF
GAME:138D                 RTS
GAME:138E ; ---------------------------------------------------------------------------
GAME:138E
GAME:138E BE:                                     ; CODE XREF: PROP+13↑j
GAME:138E                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:1390                 CMP     #JOYSTICK_LEFT
GAME:1392                 BEQ     BP
GAME:1394                 CMP     #JOYSTICK_UP_LEFT
GAME:1396                 BEQ     BP
GAME:1398                 CMP     #JOYSTICK_RIGHT
GAME:139A                 BEQ     BR
GAME:139C                 CMP     #JOYSTICK_DOWN_RIGHT
GAME:139E                 BEQ     BR
GAME:13A0
GAME:13A0 BT:                                     ; CODE XREF: PROP+34↓j
GAME:13A0                 LDA     P0IMAGE+9,X     ; regular plane (0-9), contrast color (10-12), contrast color (13-15)
GAME:13A3                 STA     P0+2,Y          ; Player Plane (WHITE parts)
GAME:13A6                 DEY
GAME:13A7                 DEX
GAME:13A8                 BNE     BT
GAME:13AA                 RTS
GAME:13AB ; ---------------------------------------------------------------------------
GAME:13AB
GAME:13AB BF:                                     ; CODE XREF: PROP+17↑j
GAME:13AB                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:13AD                 CMP     #JOYSTICK_LEFT
GAME:13AF                 BEQ     BQ
GAME:13B1                 CMP     #JOYSTICK_UP_LEFT
GAME:13B3                 BEQ     BQ
GAME:13B5                 CMP     #JOYSTICK_RIGHT
GAME:13B7                 BEQ     BS
GAME:13B9                 CMP     #JOYSTICK_DOWN_RIGHT
GAME:13BB                 BEQ     BS
GAME:13BD
GAME:13BD BU:                                     ; CODE XREF: PROP+51↓j
GAME:13BD                 LDA     P0IMAGE+$C,X    ; regular plane (0-9), contrast color (10-12), contrast color (13-15)
GAME:13C0                 STA     P0+2,Y          ; Player Plane (WHITE parts)
GAME:13C3                 DEY
GAME:13C4                 DEX
GAME:13C5                 BNE     BU
GAME:13C7                 RTS
GAME:13C8 ; ---------------------------------------------------------------------------
GAME:13C8
GAME:13C8 BP:                                     ; CODE XREF: PROP+1E↑j
GAME:13C8                                         ; PROP+22↑j
GAME:13C8                 LDA     #0
GAME:13CA                 STA     P0,Y            ; Player Plane (WHITE parts)
GAME:13CD                 LDA     #1000b
GAME:13CF                 STA     P0+1,Y          ; Player Plane (WHITE parts)
GAME:13D2                 LDA     #10b
GAME:13D4                 STA     P0+2,Y          ; Player Plane (WHITE parts)
GAME:13D7                 RTS
GAME:13D8 ; ---------------------------------------------------------------------------
GAME:13D8
GAME:13D8 BQ:                                     ; CODE XREF: PROP+3B↑j
GAME:13D8                                         ; PROP+3F↑j
GAME:13D8                 LDA     #100b
GAME:13DA                 STA     P0,Y            ; Player Plane (WHITE parts)
GAME:13DD                 STA     P0+1,Y          ; Player Plane (WHITE parts)
GAME:13E0                 LDA     #0
GAME:13E2                 STA     P0+2,Y          ; Player Plane (WHITE parts)
GAME:13E5                 RTS
GAME:13E6 ; ---------------------------------------------------------------------------
GAME:13E6
GAME:13E6 BR:                                     ; CODE XREF: PROP+26↑j
GAME:13E6                                         ; PROP+2A↑j
GAME:13E6                 LDA     #11000000b
GAME:13E8                 STA     P0,Y            ; Player Plane (WHITE parts)
GAME:13EB                 LDA     #1001000b
GAME:13ED                 STA     P0+1,Y          ; Player Plane (WHITE parts)
GAME:13F0                 LDA     #1100010b
GAME:13F2                 STA     P0+2,Y          ; Player Plane (WHITE parts)
GAME:13F5                 RTS
GAME:13F6 ; ---------------------------------------------------------------------------
GAME:13F6
GAME:13F6 BS:                                     ; CODE XREF: PROP+43↑j
GAME:13F6                                         ; PROP+47↑j
GAME:13F6                 LDA     #11000100b
GAME:13F8                 STA     P0,Y            ; Player Plane (WHITE parts)
GAME:13FB                 LDA     #1000100b
GAME:13FD                 STA     P0+1,Y          ; Player Plane (WHITE parts)
GAME:1400                 LDA     #1100000b
GAME:1402                 STA     P0+2,Y          ; Player Plane (WHITE parts)
GAME:1405                 RTS
GAME:1405 ; End of function PROP
GAME:1405
GAME:1406
GAME:1406 ; =============== S U B R O U T I N E =======================================
GAME:1406
GAME:1406 ; Check if 'SPACE' for Pause was pressed and pause the game.
GAME:1406
GAME:1406 PAUSE:                                  ; CODE XREF: COMMON+4B↑p
GAME:1406                 LDA     CH              ; GLOBAL VARIABLE FOR KEYBOARD
GAME:1409                 CMP     #KEYCODE_SPACE
GAME:140B                 BEQ     IF
GAME:140D                 RTS
GAME:140E ; ---------------------------------------------------------------------------
GAME:140E
GAME:140E IF:                                     ; CODE XREF: PAUSE+5↑j
GAME:140E                 LDA     #SETVBV_VVBLKD
GAME:1410                 LDX     #>XSND          ; Deferred interrupt for sound
GAME:1412                 LDY     #<XSND          ; Deferred interrupt for sound
GAME:1414                 JSR     SETVBV          ; SET SYSTEM TIMERS ROUTINE
GAME:1417                 LDA     #$C0
GAME:1419                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:141C                 STA     CH              ; GLOBAL VARIABLE FOR KEYBOARD
GAME:141F                 LDA     RTCLOK          ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:1421                 STA     PAUSE_RTCLOK    ; Saved 2 bytes of the RTCLOK during pause
GAME:1424                 LDA     RTCLOK+1        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:1426                 STA     PAUSE_RTCLOK+1  ; Saved 2 bytes of the RTCLOK during pause
GAME:1429
GAME:1429 IG:                                     ; CODE XREF: PAUSE+31↓j
GAME:1429                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:142C                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:142F                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:1432                 LDA     CH              ; GLOBAL VARIABLE FOR KEYBOARD
GAME:1435                 CMP     #KEYCODE_SPACE  ; Wait for Space to be pressed again
GAME:1437                 BNE     IG
GAME:1439
GAME:1439                 LDA     PAUSE_RTCLOK    ; Saved 2 bytes of the RTCLOK during pause
GAME:143C                 STA     RTCLOK          ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:143E                 LDA     PAUSE_RTCLOK+1  ; Saved 2 bytes of the RTCLOK during pause
GAME:1441                 STA     RTCLOK+1        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:1443                 LDA     #SETVBV_VVBLKD
GAME:1445                 LDX     #>VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:1447                 LDY     #<VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:1449                 JSR     SETVBV          ; SET SYSTEM TIMERS ROUTINE
GAME:144C                 LDA     #$C0
GAME:144E                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:1451                 STA     CH              ; GLOBAL VARIABLE FOR KEYBOARD
GAME:1454                 RTS
GAME:1454 ; End of function PAUSE
GAME:1454
GAME:1455
GAME:1455 ; =============== S U B R O U T I N E =======================================
GAME:1455
GAME:1455 ; Check collision?!?
GAME:1455
GAME:1455 CKCOL:                                  ; CODE XREF: SRT+2D↑p
GAME:1455                                         ; CKLAND+25↓p ...
GAME:1455                 LDA     byte_C5
GAME:1457                 BNE     L2
GAME:1459                 RTS
GAME:145A ; ---------------------------------------------------------------------------
GAME:145A
GAME:145A L2:                                     ; CODE XREF: CKCOL+2↑j
GAME:145A                 LDA     P1PF_HPOSM1     ; Missile 1 Horizontal Position / Player 1 to Playfield Collision
GAME:145D                 CMP     #1
GAME:145F                 BEQ     IJ              ; => Return
GAME:1461                 CMP     #10b
GAME:1463                 BEQ     L3
GAME:1465                 CMP     #1000b
GAME:1467                 BEQ     IJ              ; => Return
GAME:1469                 CMP     #1001b
GAME:146B                 BNE     IL
GAME:146D
GAME:146D IJ:                                     ; CODE XREF: CKCOL+A↑j
GAME:146D                                         ; CKCOL+12↑j ...
GAME:146D                 RTS                     ; => Return
GAME:146E ; ---------------------------------------------------------------------------
GAME:146E
GAME:146E L3:                                     ; CODE XREF: CKCOL+E↑j
GAME:146E                 LDY     COLOR1
GAME:1471                 CPY     #COLOR_INTENSITY_10|COLOR_ORANGE
GAME:1473                 BNE     IJ              ; => Return
GAME:1475
GAME:1475 IL:                                     ; CODE XREF: CKCOL+16↑j
GAME:1475                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:1478                 BNE     _1
GAME:147A                 LDA     RANDOM          ; Random Number Generator
GAME:147D                 AND     #7
GAME:147F                 ADC     #$F
GAME:1481                 STA     byte_6D6
GAME:1484
GAME:1484 _1:                                     ; CODE XREF: CKCOL+23↑j
GAME:1484                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1486                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1488                 CMP     byte_6D6
GAME:148B                 BCS     IJ              ; => Return
GAME:148D                 STA     byte_654
GAME:1490                 JMP     CRASH           ; Plane was crashed
GAME:1490 ; End of function CKCOL
GAME:1490
GAME:1493
GAME:1493 ; =============== S U B R O U T I N E =======================================
GAME:1493
GAME:1493
GAME:1493 JOYST:                                  ; CODE XREF: COMMON:NQ↑p
GAME:1493
GAME:1493 ; FUNCTION CHUNK AT GAME:158C SIZE 00000066 BYTES
GAME:1493
GAME:1493                 LDA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:1496                 BEQ     SE
GAME:1498                 DEC     byte_65A
GAME:149B                 LDA     byte_65A
GAME:149E                 LSR     A
GAME:149F                 BCC     SE
GAME:14A1                 RTS
GAME:14A2 ; ---------------------------------------------------------------------------
GAME:14A2
GAME:14A2 SE:                                     ; CODE XREF: JOYST+3↑j
GAME:14A2                                         ; JOYST+C↑j
GAME:14A2                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:14A4                 CMP     DIRECTION_B
GAME:14A7                 BEQ     UP              ; Move Plane up, if possible
GAME:14A9                 CMP     #JOYSTICK_RIGHT
GAME:14AB                 BEQ     PI
GAME:14AD                 CMP     #JOYSTICK_LEFT
GAME:14AF                 BEQ     PJ
GAME:14B1                 CMP     #JOYSTICK_UP_RIGHT
GAME:14B3                 BEQ     CO
GAME:14B5                 CMP     #JOYSTICK_DOWN_LEFT
GAME:14B7                 BEQ     PM
GAME:14B9                 CMP     DIRECTION_A
GAME:14BC                 BEQ     KK              ; Move Plane down, if possible
GAME:14BE                 CMP     #JOYSTICK_UP_LEFT
GAME:14C0                 BEQ     CE
GAME:14C2                 CMP     #JOYSTICK_DOWN_RIGHT
GAME:14C4                 BEQ     CF
GAME:14C6                 JMP     BACK
GAME:14C9 ; ---------------------------------------------------------------------------
GAME:14C9
GAME:14C9 PI:                                     ; CODE XREF: JOYST+18↑j
GAME:14C9                 JMP     PK              ; Move Plane right, if possible
GAME:14CC ; ---------------------------------------------------------------------------
GAME:14CC
GAME:14CC PJ:                                     ; CODE XREF: JOYST+1C↑j
GAME:14CC                 JMP     PL              ; Move Plane left, if possible
GAME:14CF ; ---------------------------------------------------------------------------
GAME:14CF
GAME:14CF PM:                                     ; CODE XREF: JOYST+24↑j
GAME:14CF                 JMP     PN
GAME:14D2 ; ---------------------------------------------------------------------------
GAME:14D2
GAME:14D2 CF:                                     ; CODE XREF: JOYST+31↑j
GAME:14D2                 JMP     CD
GAME:14D5 ; ---------------------------------------------------------------------------
GAME:14D5
GAME:14D5 CO:                                     ; CODE XREF: JOYST+20↑j
GAME:14D5                 JMP     FRWD
GAME:14D5 ; End of function JOYST
GAME:14D5
GAME:14D8
GAME:14D8 ; =============== S U B R O U T I N E =======================================
GAME:14D8
GAME:14D8 ; Move Plane down, if possible
GAME:14D8
GAME:14D8 KK:                                     ; CODE XREF: JOYST+29↑j
GAME:14D8                                         ; GRAV__APPLY_GRAVITY+1D↓j ...
GAME:14D8                 DEC     SC_STATUS_LINE.line_1.altitude_digit_1
GAME:14DB
GAME:14DB DN:                                     ; CODE XREF: CD+2C↓j
GAME:14DB                 INC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:14DD                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:14DF                 SEC
GAME:14E0                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:14E2                 CMP     #2
GAME:14E4                 BEQ     E               ; Plane crashed into the ground
GAME:14E6                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:14E8                 LDX     #11
GAME:14EA
GAME:14EA G:                                      ; CODE XREF: KK+1A↓j
GAME:14EA                 LDA     P0+8,Y          ; Player Plane (WHITE parts)
GAME:14ED                 STA     P0+9,Y          ; Player Plane (WHITE parts)
GAME:14F0                 DEY
GAME:14F1                 DEX
GAME:14F2                 BNE     G
GAME:14F4                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:14F6                 LDX     #4
GAME:14F8
GAME:14F8 H:                                      ; CODE XREF: KK+28↓j
GAME:14F8                 LDA     P1+3,Y          ; Player Plane (BLACK parts)
GAME:14FB                 STA     P1+4,Y          ; Player Plane (BLACK parts)
GAME:14FE                 DEY
GAME:14FF                 DEX
GAME:1500                 BNE     H
GAME:1502                 RTS
GAME:1503 ; ---------------------------------------------------------------------------
GAME:1503
GAME:1503 E:                                      ; CODE XREF: KK+C↑j
GAME:1503                 JMP     CRASH           ; Plane crashed into the ground
GAME:1503 ; End of function KK
GAME:1503
GAME:1506
GAME:1506 ; =============== S U B R O U T I N E =======================================
GAME:1506
GAME:1506 ; Move Plane up, if possible
GAME:1506
GAME:1506 UP:                                     ; CODE XREF: JOYST+14↑j
GAME:1506                                         ; DJOY__DEMO_JOYSTICK_INPUT+10↓p ...
GAME:1506                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1508                 CPY     #PLANE_MIN_XorY_POSITION ; min. allowed X position for the plane
GAME:150A                 BEQ     CA
GAME:150C                 INC     SC_STATUS_LINE.line_1.altitude_digit_1
GAME:150C ; End of function UP
GAME:150C
GAME:150F ; START OF FUNCTION CHUNK FOR CE
GAME:150F
GAME:150F BY:                                     ; CODE XREF: CE+29↓j
GAME:150F                 LDX     #11
GAME:1511
GAME:1511 O:                                      ; CODE XREF: CE-14↓j
GAME:1511                 LDA     P0,Y            ; Player Plane (WHITE parts)
GAME:1514                 STA     P0-1,Y          ; Player Plane (WHITE parts)
GAME:1517                 INY
GAME:1518                 DEX
GAME:1519                 BNE     O
GAME:151B                 DEC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:151D                 JSR     DRP1
GAME:1520                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1522                 SEC
GAME:1523                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1525                 CMP     #6
GAME:1527                 BCS     I               ; => Return
GAME:1529                 JSR     SHDW_SUB        ; Copy Plane Shadow into P1
GAME:152C
GAME:152C I:                                      ; CODE XREF: CE-6↑j
GAME:152C                 RTS                     ; => Return
GAME:152C ; END OF FUNCTION CHUNK FOR CE
GAME:152D
GAME:152D ; =============== S U B R O U T I N E =======================================
GAME:152D
GAME:152D
GAME:152D CE:                                     ; CODE XREF: JOYST+2D↑j
GAME:152D                                         ; KMKZ+36↓p
GAME:152D
GAME:152D ; FUNCTION CHUNK AT GAME:150F SIZE 0000001E BYTES
GAME:152D
GAME:152D                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:152F                 CMP     #PLANE_MIN_XorY_POSITION ; min. allowed X position for the plane
GAME:1531                 BEQ     CG
GAME:1533                 DEC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:1535                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:1537                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:153A                 STA     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:153D
GAME:153D CG:                                     ; CODE XREF: CE+4↑j
GAME:153D                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:153F                 CPY     #PLANE_MIN_XorY_POSITION ; min. allowed X position for the plane
GAME:1541                 BNE     CH__
GAME:1543                 RTS
GAME:1544 ; ---------------------------------------------------------------------------
GAME:1544
GAME:1544 CH__:                                   ; CODE XREF: CE+14↑j
GAME:1544                                         ; JOYST+13A↓j
GAME:1544                 LDX     #9
GAME:1546                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1548
GAME:1548 CI:                                     ; CODE XREF: CE+23↓j
GAME:1548                 LDA     P1,Y            ; Player Plane (BLACK parts)
GAME:154B                 STA     P1-1,Y          ; Player Plane (BLACK parts)
GAME:154E                 INY
GAME:154F                 DEX
GAME:1550                 BNE     CI
GAME:1552                 DEC     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1554                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1556                 JMP     BY
GAME:1556 ; End of function CE
GAME:1556
GAME:1559
GAME:1559 ; =============== S U B R O U T I N E =======================================
GAME:1559
GAME:1559
GAME:1559 CD:                                     ; CODE XREF: JOYST:CF↑j
GAME:1559                                         ; KMKZ:loc_2251↓p
GAME:1559                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:155B                 CMP     #PLANE_MAX_X_POSITION ; max. allowed X position for the plane
GAME:155D                 BEQ     CA
GAME:155F                 INC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:1561                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:1563                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:1566                 STA     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:1569
GAME:1569 CA:                                     ; CODE XREF: UP+4↑j
GAME:1569                                         ; CD+4↑j
GAME:1569                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:156B                 CPY     #168
GAME:156D                 BNE     CB
GAME:156F                 RTS
GAME:1570 ; ---------------------------------------------------------------------------
GAME:1570
GAME:1570 CB:                                     ; CODE XREF: CD+14↑j
GAME:1570                                         ; JOYST+120↓j
GAME:1570                 LDX     #9
GAME:1572
GAME:1572 CC:                                     ; CODE XREF: CD+21↓j
GAME:1572                 LDA     P1+7,Y          ; Player Plane (BLACK parts)
GAME:1575                 STA     P1+8,Y          ; Player Plane (BLACK parts)
GAME:1578                 DEY
GAME:1579                 DEX
GAME:157A                 BNE     CC
GAME:157C                 INC     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:157E                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:1580                 CMP     DIRECTION_B
GAME:1583                 BEQ     MO
GAME:1585                 JMP     DN
GAME:1588 ; ---------------------------------------------------------------------------
GAME:1588
GAME:1588 MO:                                     ; CODE XREF: CD+2A↑j
GAME:1588                 INC     SC_STATUS_LINE.line_1.altitude_digit_1
GAME:158B                 RTS
GAME:158B ; End of function CD
GAME:158B
GAME:158C ; ---------------------------------------------------------------------------
GAME:158C ; START OF FUNCTION CHUNK FOR JOYST
GAME:158C
GAME:158C PN:                                     ; CODE XREF: JOYST:PM↑j
GAME:158C                 DEC     byte_608
GAME:158F                 DEC     byte_608
GAME:1592
GAME:1592 BACK:                                   ; CODE XREF: JOYST+33↑j
GAME:1592                 DEC     byte_608
GAME:1595                 BMI     CM
GAME:1597
GAME:1597 CN:                                     ; CODE XREF: JOYST+10E↓j
GAME:1597                                         ; JOYST+114↓j
GAME:1597                 RTS                     ; => Return
GAME:1598 ; ---------------------------------------------------------------------------
GAME:1598
GAME:1598 CM:                                     ; CODE XREF: JOYST+102↑j
GAME:1598                 LDA     #4
GAME:159A                 STA     byte_608
GAME:159D                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:159F                 CMP     #PLANE_MIN_XorY_POSITION ; min. allowed X position for the plane
GAME:15A1                 BEQ     CN              ; => Return
GAME:15A3                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:15A5                 CPY     #168
GAME:15A7                 BEQ     CN              ; => Return
GAME:15A9                 DEC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15AB                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15AD                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:15B0                 STA     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:15B3                 JMP     CB
GAME:15B6 ; ---------------------------------------------------------------------------
GAME:15B6
GAME:15B6 FRWD:                                   ; CODE XREF: JOYST:CO↑j
GAME:15B6                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15B8                 CMP     #PLANE_MAX_X_POSITION ; max. allowed X position for the plane
GAME:15BA                 BNE     CP
GAME:15BC
GAME:15BC CQ:                                     ; CODE XREF: JOYST+12E↓j
GAME:15BC                                         ; JOYST+141↓j ...
GAME:15BC                 RTS                     ; => Return
GAME:15BD ; ---------------------------------------------------------------------------
GAME:15BD
GAME:15BD CP:                                     ; CODE XREF: JOYST+127↑j
GAME:15BD                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:15BF                 CPY     #PLANE_MIN_XorY_POSITION ; min. allowed X position for the plane
GAME:15C1                 BEQ     CQ              ; => Return
GAME:15C3                 INC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15C5                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15C7                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:15CA                 STA     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:15CD                 JMP     CH__
GAME:15D0 ; ---------------------------------------------------------------------------
GAME:15D0
GAME:15D0 PK:                                     ; CODE XREF: JOYST:PI↑j
GAME:15D0                 LDA     PLANE_HORI_POS  ; Move Plane right, if possible
GAME:15D2                 CMP     #PLANE_MAX_X_POSITION ; max. allowed X position for the plane
GAME:15D4                 BEQ     CQ              ; => Return
GAME:15D6                 INC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15D8                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15DA                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:15DD                 STA     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:15E0                 RTS
GAME:15E1 ; ---------------------------------------------------------------------------
GAME:15E1
GAME:15E1 PL:                                     ; CODE XREF: JOYST:PJ↑j
GAME:15E1                 LDA     PLANE_HORI_POS  ; Move Plane left, if possible
GAME:15E3                 CMP     #PLANE_MIN_XorY_POSITION ; min. allowed X position for the plane
GAME:15E5                 BEQ     CQ              ; => Return
GAME:15E7                 DEC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15E9                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:15EB                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:15EE                 STA     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:15F1                 RTS
GAME:15F1 ; END OF FUNCTION CHUNK FOR JOYST
GAME:15F2
GAME:15F2 ; =============== S U B R O U T I N E =======================================
GAME:15F2
GAME:15F2
GAME:15F2 SHCOL:                                  ; CODE XREF: COMMON+6C↑p
GAME:15F2                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:15F4                 SEC
GAME:15F5                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:15F7                 CMP     #80
GAME:15F9                 BEQ     CR
GAME:15FB                 CMP     #79
GAME:15FD                 BEQ     CS__
GAME:15FF                 RTS
GAME:1600 ; ---------------------------------------------------------------------------
GAME:1600
GAME:1600 CR:                                     ; CODE XREF: SHCOL+7↑j
GAME:1600                 LDA     #COLOR_INTENSITY_2|COLOR_GRAY
GAME:1602                 STA     PCOLR1          ; P1 COLOR
GAME:1605                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1607                 LDA     P1+4,Y          ; Player Plane (BLACK parts)
GAME:160A                 BEQ     FFF             ; => Return
GAME:160C                 LDA     #0
GAME:160E                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:1611                 STA     P1+7,Y          ; Player Plane (BLACK parts)
GAME:1614                 LDA     #1000100b
GAME:1616                 STA     P1+1,Y          ; Player Plane (BLACK parts)
GAME:1619                 LDA     #1000010b
GAME:161B                 STA     P1+6,Y          ; Player Plane (BLACK parts)
GAME:161E
GAME:161E FFF:                                    ; CODE XREF: SHCOL+18↑j
GAME:161E                                         ; SHCOL+37↓j
GAME:161E                 RTS                     ; => Return
GAME:161F ; ---------------------------------------------------------------------------
GAME:161F
GAME:161F CS__:                                   ; CODE XREF: SHCOL+B↑j
GAME:161F                 LDA     #COLOR_INTENSITY_0|COLOR_GRAY
GAME:1621                 STA     PCOLR1          ; P1 COLOR
GAME:1624                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1626                 LDA     P1+4,Y          ; Player Plane (BLACK parts)
GAME:1629                 BEQ     FFF             ; => Return
GAME:162B                 JMP     SHDW_SUB        ; Copy Plane Shadow into P1
GAME:162E ; ---------------------------------------------------------------------------
GAME:162E
GAME:162E CK:                                     ; CODE XREF: TURN+1B↓j
GAME:162E                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1630                 LDA     P1+4,Y          ; Player Plane (BLACK parts)
GAME:1633                 BEQ     DRP0            ; Update the primary plane graphics at the current vertical position (not the shadow or alternative color)
GAME:1635                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1637                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1639                 CMP     #80
GAME:163B                 BCS     DRP0            ; Update the primary plane graphics at the current vertical position (not the shadow or alternative color)
GAME:163D                 LDA     #10000010b
GAME:163F                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:1642                 LDA     #1000001b
GAME:1644                 STA     P1+7,Y          ; Player Plane (BLACK parts)
GAME:1644 ; End of function SHCOL
GAME:1644
GAME:1647
GAME:1647 ; =============== S U B R O U T I N E =======================================
GAME:1647
GAME:1647 ; Update the primary plane graphics at the current vertical position (not the shadow or alternative color)
GAME:1647
GAME:1647 DRP0:                                   ; CODE XREF: RESET+232↑p
GAME:1647                                         ; SHCOL+41↑j ...
GAME:1647                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1649                 LDX     #9
GAME:164B
GAME:164B BH:                                     ; CODE XREF: DRP0+C↓j
GAME:164B                 LDA     P0IMAGE,X       ; regular plane (0-9), contrast color (10-12), contrast color (13-15)
GAME:164E                 STA     P0+9,Y          ; Player Plane (WHITE parts)
GAME:1651                 DEY
GAME:1652                 DEX
GAME:1653                 BPL     BH
GAME:1655                 RTS
GAME:1655 ; End of function DRP0
GAME:1655
GAME:1656
GAME:1656 ; =============== S U B R O U T I N E =======================================
GAME:1656
GAME:1656 ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:1656
GAME:1656 TURN:                                   ; CODE XREF: EB+9E↑p
GAME:1656                                         ; COMMON:NR↑p ...
GAME:1656                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:1658                 CMP     TURN_STICK0     ; STICK0 copy for the TURN routine
GAME:165B                 BNE     BC
GAME:165D                 RTS                     ; => joystick direction has not changed
GAME:165E ; ---------------------------------------------------------------------------
GAME:165E
GAME:165E BC:                                     ; CODE XREF: TURN+5↑j
GAME:165E                 STA     TURN_STICK0     ; STICK0 copy for the TURN routine
GAME:1661                 CMP     #JOYSTICK_LEFT
GAME:1663                 BEQ     BJ              ; Joystick was moved in allowed direction
GAME:1665                 CMP     #JOYSTICK_UP_LEFT
GAME:1667                 BEQ     BJ              ; Joystick was moved in allowed direction
GAME:1669                 CMP     #JOYSTICK_DOWN_RIGHT
GAME:166B                 BEQ     BJ              ; Joystick was moved in allowed direction
GAME:166D                 CMP     #JOYSTICK_RIGHT
GAME:166F                 BEQ     BJ              ; Joystick was moved in allowed direction
GAME:1671                 JMP     CK
GAME:1674 ; ---------------------------------------------------------------------------
GAME:1674
GAME:1674 BJ:                                     ; CODE XREF: TURN+D↑j
GAME:1674                                         ; TURN+11↑j ...
GAME:1674                 LDA     PLANE_VERT_SHADOW_POS ; Joystick was moved in allowed direction
GAME:1676                 SEC
GAME:1677                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1679                 CMP     #6              ; Is the plane already too close to the ground?
GAME:167B                 BCS     DU              ; => no
GAME:167D                 JMP     CRASH           ; Plane was crashed
GAME:1680 ; ---------------------------------------------------------------------------
GAME:1680
GAME:1680 DU:                                     ; CODE XREF: TURN+25↑j
GAME:1680                 LDA     TURN_STICK0     ; STICK0 copy for the TURN routine
GAME:1683                 CMP     #JOYSTICK_RIGHT
GAME:1685                 BEQ     BK
GAME:1687                 CMP     #JOYSTICK_DOWN_RIGHT
GAME:1689                 BEQ     BK
GAME:168B
GAME:168B ; Set plane image to turn left
GAME:168B                 LDX     #10
GAME:168D                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:168F
GAME:168F BL:                                     ; CODE XREF: TURN+41↓j
GAME:168F                 LDA     P1IMAGE+7,X     ; plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)
GAME:1692                 STA     P0+9,Y          ; Player Plane (WHITE parts)
GAME:1695                 DEY
GAME:1696                 DEX
GAME:1697                 BNE     BL
GAME:1699                 JMP     CJ
GAME:169C ; ---------------------------------------------------------------------------
GAME:169C
GAME:169C ; Set plane image to turn right
GAME:169C
GAME:169C BK:                                     ; CODE XREF: TURN+2F↑j
GAME:169C                                         ; TURN+33↑j
GAME:169C                 LDX     #10
GAME:169E                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:16A0
GAME:16A0 BO:                                     ; CODE XREF: TURN+52↓j
GAME:16A0                 LDA     P1IMAGE+$11,X   ; plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)
GAME:16A3                 STA     P0+9,Y          ; Player Plane (WHITE parts)
GAME:16A6                 DEY
GAME:16A7                 DEX
GAME:16A8                 BNE     BO
GAME:16AA
GAME:16AA CJ:                                     ; CODE XREF: TURN+43↑j
GAME:16AA                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:16AC                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:16AE                 CMP     #80             ; Shadow too far away?
GAME:16B0                 BCS     ZM              ; => Return
GAME:16B2                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:16B4                 LDA     P1+4,Y          ; Player Plane (BLACK parts)
GAME:16B7                 BEQ     ZM              ; => Return
GAME:16B9                 LDA     #10b
GAME:16BB                 STA     P1,Y            ; Player Plane (BLACK parts)
GAME:16BE                 LDA     #1000000b
GAME:16C0                 STA     P1+7,Y          ; Player Plane (BLACK parts)
GAME:16C3
GAME:16C3 ZM:                                     ; CODE XREF: TURN+5A↑j
GAME:16C3                                         ; TURN+61↑j
GAME:16C3                 RTS                     ; => Return
GAME:16C4 ; ---------------------------------------------------------------------------
GAME:16C4
GAME:16C4 CRASH:                                  ; CODE XREF: CKCOL+3B↑j
GAME:16C4                                         ; KK:E↑j ...
GAME:16C4                 LDA     SC_STATUS_LINE.line_1.altitude_digit_1 ; Plane was crashed
GAME:16C7                 CMP     #_0|_C_BLUE     ; avoid an underflow for the altitude
GAME:16C9                 BCS     loc_16CE
GAME:16CB                 INC     SC_STATUS_LINE.line_1.altitude_digit_1
GAME:16CE
GAME:16CE loc_16CE:                               ; CODE XREF: TURN+73↑j
GAME:16CE                 LDA     #80
GAME:16D0                 LDX     #AUDIO_CONTROL_VOL_15|AUDIO_CONTROL_DIST_1
GAME:16D2                 JSR     XXX             ; Start Audio 3 sound effect
GAME:16D5                 JSR     ABA             ; Save current color palette, because we start the flashing animation
GAME:16D8                 LDA     #22
GAME:16DA                 STA     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:16DD                 JSR     AFP             ; Remove all missles, bullets, etc. – reset variables related to this
GAME:16E0                 LDY     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:16E2                 JSR     HG              ; Remove plane bullet
GAME:16E5                 LDA     #SETVBV_VVBLKD
GAME:16E7                 LDX     #>XSND          ; Deferred interrupt for sound
GAME:16E9                 LDY     #<XSND          ; Deferred interrupt for sound
GAME:16EB                 JSR     SETVBV          ; SET SYSTEM TIMERS ROUTINE
GAME:16EE                 LDA     #$C0
GAME:16F0                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:16F3                 LDA     byte_654
GAME:16F6                 BEQ     _20
GAME:16F8
GAME:16F8 _4:                                     ; CODE XREF: TURN+B5↓j
GAME:16F8                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:16FA                 LDX     #9
GAME:16FC
GAME:16FC _3:                                     ; CODE XREF: TURN+AE↓j
GAME:16FC                 LDA     P1,Y            ; Player Plane (BLACK parts)
GAME:16FF                 STA     P0+$FF,Y        ; Player Plane (WHITE parts)
GAME:1702                 INY
GAME:1703                 DEX
GAME:1704                 BNE     _3
GAME:1706                 DEC     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1708                 DEC     byte_654
GAME:170B                 BNE     _4
GAME:170D                 LDX     byte_655
GAME:1710                 BNE     _20
GAME:1712                 STX     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:1715                 STX     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:1718                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:171B                 JMP     _2
GAME:171E ; ---------------------------------------------------------------------------
GAME:171E
GAME:171E _20:                                    ; CODE XREF: TURN+A0↑j
GAME:171E                                         ; TURN+BA↑j
GAME:171E                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:1721                 CMP     #_2|_C_BLUE
GAME:1723                 BCC     _2
GAME:1725                 LDA     byte_C5
GAME:1727                 BEQ     _2
GAME:1729                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:172B                 ADC     #3
GAME:172D                 STA     byte_623
GAME:1730                 LDA     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1732                 STA     byte_FA
GAME:1734                 JSR     AFP             ; Remove all missles, bullets, etc. – reset variables related to this
GAME:1737                 LDA     #120
GAME:1739                 STA     byte_639
GAME:173C
GAME:173C _2:                                     ; CODE XREF: TURN+C5↑j
GAME:173C                                         ; TURN+CD↑j ...
GAME:173C                 LDA     #_0|_C_BLUE
GAME:173E                 STA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:1741                 STA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:1744                 STA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:1747                 LDA     #_SPACE|_C_BLACK
GAME:1749                 STA     SC_STATUS_LINE.line_2.field_14 ; "*" character
GAME:174C                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:174F                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:1752                 CPX     #0
GAME:1754                 BNE     AFQ
GAME:1756                 JSR     DG
GAME:1759
GAME:1759 AFQ:                                    ; CODE XREF: TURN+FE↑j
GAME:1759                 LDX     #12
GAME:175B                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:175D
GAME:175D _10:                                    ; CODE XREF: TURN+112↓j
GAME:175D                 LDA     XPL1IM,X        ; plane explosion
GAME:1760                 STA     P0+$A,Y         ; Player Plane (WHITE parts)
GAME:1763                 STA     P1+$A,Y         ; Player Plane (BLACK parts)
GAME:1766                 DEY
GAME:1767                 DEX
GAME:1768                 BPL     _10
GAME:176A                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:176C                 STA     byte_FE
GAME:176E                 PLA
GAME:176F                 PLA
GAME:1770                 LDA     #80
GAME:1772                 STA     CRASH_EXPLOSION_COUNTER ; Duration counter for the plane explosion
GAME:1774
GAME:1774 _11:                                    ; CODE XREF: TURN+135↓j
GAME:1774                 JSR     CRSH
GAME:1777                 JSR     XFLSH           ; Flash the screen colors after e.g. a crash
GAME:177A                 JSR     XPLSN
GAME:177D                 JSR     SPLASH          ; Splash sound effect on channel 2
GAME:1780                 JSR     CNSL__CONSOLE   ; Console for option selection and to start the game
GAME:1783                 JSR     XSHIP
GAME:1786                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:1789                 DEC     CRASH_EXPLOSION_COUNTER ; Duration counter for the plane explosion
GAME:178B                 BNE     _11
GAME:178D
GAME:178D                 LDA     #COLOR_INTENSITY_0|COLOR_GRAY
GAME:178F                 STA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:1792                 STA     PCOLR0          ; P0 COLOR
GAME:1795                 STA     PCOLR1          ; P1 COLOR
GAME:1798                 JSR     SK
GAME:179B                 LDY     byte_FD
GAME:179D                 CPY     #15
GAME:179F                 BNE     _30
GAME:17A1                 STA     PCOLR2          ; P2 COLOR
GAME:17A4
GAME:17A4 _30:                                    ; CODE XREF: TURN+149↑j
GAME:17A4                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:17A6                 ADC     #2
GAME:17A8                 STA     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:17AB                 LDA     #64
GAME:17AD                 STA     TEMP_B0
GAME:17AF
GAME:17AF _15:                                    ; CODE XREF: TURN+15E↓j
GAME:17AF                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:17B2                 DEC     TEMP_B0
GAME:17B4                 BNE     _15
GAME:17B6                 LDA     byte_655
GAME:17B9                 BEQ     _6
GAME:17BB                 LDA     COLOR1
GAME:17BE                 CMP     #COLOR_INTENSITY_4|COLOR_LIGHT_BLUE
GAME:17C0                 BNE     _7
GAME:17C2                 LDA     P0PF_HPOSM0     ; Player Machine Gun Bullet (Horizontal Position)
GAME:17C5                 CMP     #10b
GAME:17C7                 BEQ     _8
GAME:17C9                 JMP     _7
GAME:17CC ; ---------------------------------------------------------------------------
GAME:17CC
GAME:17CC _6:                                     ; CODE XREF: TURN+163↑j
GAME:17CC                 LDX     #0
GAME:17CE                 STX     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:17D1
GAME:17D1 _8:                                     ; CODE XREF: TURN+171↑j
GAME:17D1                 STX     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:17D4                 STX     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:17D7
GAME:17D7 _7:                                     ; CODE XREF: TURN+16A↑j
GAME:17D7                                         ; TURN+173↑j
GAME:17D7                 JSR     RNKX__PRINT_RANK_CLASS ; Print Rank Class on screen
GAME:17DA                 LDA     #251
GAME:17DC                 STA     RTCLOK+1        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:17DE                 STA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:17E0
GAME:17E0 _86:                                    ; CODE XREF: TURN+18F↓j
GAME:17E0                 JSR     CNSL__CONSOLE   ; Console for option selection and to start the game
GAME:17E3                 LDA     RTCLOK+1        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:17E5                 BNE     _86
GAME:17E7                 LDA     #1
GAME:17E9                 STA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:17EC                 JMP     START
GAME:17EC ; End of function TURN
GAME:17EC
GAME:17EF
GAME:17EF ; =============== S U B R O U T I N E =======================================
GAME:17EF
GAME:17EF ; Draw trees into the map. Needs to be the last draw function to be called.
GAME:17EF
GAME:17EF DRTR__DRAW_TREE:                        ; CODE XREF: EB+6↑p
GAME:17EF                                         ; COMMON+16↑p ...
GAME:17EF                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:17F1                 BEQ     EN              ; 6 trees per row
GAME:17F3                 RTS
GAME:17F4 ; ---------------------------------------------------------------------------
GAME:17F4
GAME:17F4 EN:                                     ; CODE XREF: DRTR__DRAW_TREE+2↑j
GAME:17F4                 LDX     #6              ; 6 trees per row
GAME:17F6                 STX     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:17F8
GAME:17F8 EO:                                     ; CODE XREF: DRTR__DRAW_TREE+37↓j
GAME:17F8                 LDY     TREE_POS_BUF-1,X ; Position of trees
GAME:17FB                 BEQ     EP
GAME:17FD                 LDA     #0
GAME:17FF                 STA     TREE_POS_BUF-1,X ; Position of trees
GAME:1802
GAME:1802                 LDA     RANDOM          ; Set random top-right part of a tree at Y
GAME:1805                 LSR     A
GAME:1806                 BCC     EQ
GAME:1808                 LDA     #L_TREE_TOP_RIGHT_A|L_C_0
GAME:180A                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:180C                 JMP     ER              ; Set random top-left part of a tree at Y-1
GAME:180F ; ---------------------------------------------------------------------------
GAME:180F
GAME:180F EQ:                                     ; CODE XREF: DRTR__DRAW_TREE+17↑j
GAME:180F                 LDA     #L_TREE_TOP_RIGHT_B|L_C_0
GAME:1811                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1813
GAME:1813 ER:                                     ; CODE XREF: DRTR__DRAW_TREE+1D↑j
GAME:1813                 DEY                     ; Set random top-left part of a tree at Y-1
GAME:1814                 LDA     RANDOM          ; Random Number Generator
GAME:1817                 LSR     A
GAME:1818                 BCC     ES
GAME:181A                 LDA     #L_TREE_TOP_LEFT_B|L_C_0
GAME:181C                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:181E                 JMP     EP
GAME:1821 ; ---------------------------------------------------------------------------
GAME:1821
GAME:1821 ES:                                     ; CODE XREF: DRTR__DRAW_TREE+29↑j
GAME:1821                 LDA     #L_TREE_TOP_LEFT_A|L_C_0
GAME:1823                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1825
GAME:1825 EP:                                     ; CODE XREF: DRTR__DRAW_TREE+C↑j
GAME:1825                                         ; DRTR__DRAW_TREE+2F↑j
GAME:1825                 DEX
GAME:1826                 BNE     EO              ; => next tree
GAME:1828
GAME:1828                 LDA     byte_B6
GAME:182A                 BEQ     FH              ; => Return
GAME:182C                 CMP     #255
GAME:182E                 BNE     EM
GAME:1830
GAME:1830 EL:                                     ; CODE XREF: DRTR__DRAW_TREE+46↓j
GAME:1830                 LDA     RANDOM          ; Random Number Generator
GAME:1833                 AND     #7
GAME:1835                 BEQ     EL
GAME:1837                 SEC
GAME:1838                 SBC     #1
GAME:183A                 BNE     EM
GAME:183C
GAME:183C FH:                                     ; CODE XREF: DRTR__DRAW_TREE+3B↑j
GAME:183C                                         ; DRTR__DRAW_TREE+69↓j
GAME:183C                 RTS                     ; => Return
GAME:183D ; ---------------------------------------------------------------------------
GAME:183D
GAME:183D EM:                                     ; CODE XREF: DRTR__DRAW_TREE+3F↑j
GAME:183D                                         ; DRTR__DRAW_TREE+4B↑j
GAME:183D                 TAX
GAME:183E                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1840                 CLC
GAME:1841                 ADC     #2
GAME:1843                 STA     TREE_PLANT_MAX_X ; max. X position for planing trees in a row
GAME:1846                 SEC
GAME:1847                 SBC     #25
GAME:1849                 BPL     ET
GAME:184B                 LDA     #0
GAME:184D
GAME:184D ET:                                     ; CODE XREF: DRTR__DRAW_TREE+5A↑j
GAME:184D                 STA     TREE_PLANT_MIN_X ; min. X position for planing trees in a row
GAME:1850
GAME:1850                 LDA     #25
GAME:1852                 STA     TREE_PLANT_TRY_COUNT ; Try up to 25 times to find a position for a tree in a row
GAME:1855
GAME:1855 EF:                                     ; CODE XREF: DRTR__DRAW_TREE+72↓j
GAME:1855                                         ; DRTR__DRAW_TREE+7E↓j ...
GAME:1855                 DEC     TREE_PLANT_TRY_COUNT ; search for next spot for a tree
GAME:1858                 BEQ     FH              ; => Return
GAME:185A                 LDA     RANDOM          ; Random Number Generator
GAME:185D                 AND     #63
GAME:185F                 CMP     #62             ; too large for the line?
GAME:1861                 BCS     EF              ; => yes, next
GAME:1863                 CMP     TREE_PLANT_MAX_X ; max. X position for planing trees in a row
GAME:1866                 BCS     EG              ; Found a position A
GAME:1868                 CMP     TREE_PLANT_MIN_X ; min. X position for planing trees in a row
GAME:186B                 BCC     EG              ; Found a position A
GAME:186D                 JMP     EF              ; search for next spot for a tree
GAME:1870 ; ---------------------------------------------------------------------------
GAME:1870
GAME:1870 EG:                                     ; CODE XREF: DRTR__DRAW_TREE+77↑j
GAME:1870                                         ; DRTR__DRAW_TREE+7C↑j
GAME:1870                 TAY                     ; Found a position A
GAME:1871                 LDA     #L_GRAS|L_C_0
GAME:1873                 CMP     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1875                 BNE     EF              ; search for next spot for a tree
GAME:1877                 INY
GAME:1878                 CMP     (VBL_NEXT_ROW_PTR),Y ; require 3 tiles of gras to use that area
GAME:187A                 BNE     EF              ; search for next spot for a tree
GAME:187C                 INY
GAME:187D                 CMP     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:187F                 BNE     EF              ; search for next spot for a tree
GAME:1881
GAME:1881                 LDA     RANDOM          ; Set random bottom-right part of a tree at Y
GAME:1884                 LSR     A
GAME:1885                 BCC     EH
GAME:1887                 LDA     #L_TREE_BOTTOM_RIGHT_A|L_C_0
GAME:1889                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:188B                 JMP     EI              ; Set random bottom-left part of a tree at Y-1
GAME:188E ; ---------------------------------------------------------------------------
GAME:188E
GAME:188E EH:                                     ; CODE XREF: DRTR__DRAW_TREE+96↑j
GAME:188E                 LDA     #L_TREE_BOTTOM_RIGHT_B|L_C_0
GAME:1890                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1892
GAME:1892 EI:                                     ; CODE XREF: DRTR__DRAW_TREE+9C↑j
GAME:1892                 DEY                     ; Set random bottom-left part of a tree at Y-1
GAME:1893                 LDA     RANDOM          ; Random Number Generator
GAME:1896                 LSR     A
GAME:1897                 BCC     EJ
GAME:1899                 LDA     #L_TREE_BOTTOM_LEFT_A|L_C_0
GAME:189B                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:189D                 JMP     EK
GAME:18A0 ; ---------------------------------------------------------------------------
GAME:18A0
GAME:18A0 EJ:                                     ; CODE XREF: DRTR__DRAW_TREE+A8↑j
GAME:18A0                 LDA     #L_TREE_BOTTOM_LEFT_B|L_C_0
GAME:18A2                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:18A4
GAME:18A4 EK:                                     ; CODE XREF: DRTR__DRAW_TREE+AE↑j
GAME:18A4                 TYA
GAME:18A5                 STA     TREE_POS_BUF-1,X ; Position of trees
GAME:18A8                 DEX
GAME:18A9                 BNE     EF              ; search for next spot for a tree
GAME:18AB                 RTS
GAME:18AB ; End of function DRTR__DRAW_TREE
GAME:18AB
GAME:18AC
GAME:18AC ; =============== S U B R O U T I N E =======================================
GAME:18AC
GAME:18AC
GAME:18AC DG:                                     ; CODE XREF: TURN+100↑p
GAME:18AC                                         ; COLM02+4D↓p
GAME:18AC                 LDX     #12
GAME:18AE                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:18B0
GAME:18B0 _1:                                     ; CODE XREF: DG+C↓j
GAME:18B0                 LDA     XPL1IM,X        ; plane explosion
GAME:18B3                 STA     P2+$A,Y         ; Enemy (first color)
GAME:18B6                 DEY
GAME:18B7                 DEX
GAME:18B8                 BNE     _1
GAME:18BA                 RTS
GAME:18BA ; End of function DG
GAME:18BA
GAME:18BB
GAME:18BB ; =============== S U B R O U T I N E =======================================
GAME:18BB
GAME:18BB
GAME:18BB CRSH:                                   ; CODE XREF: TURN:_11↑p
GAME:18BB                 LDA     CRASH_EXPLOSION_COUNTER ; Duration counter for the plane explosion
GAME:18BD                 LSR     A
GAME:18BE                 LSR     A
GAME:18BF                 LSR     A
GAME:18C0                 PHP
GAME:18C1                 BCC     _1
GAME:18C3                 INC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:18C5                 DEC     byte_FE
GAME:18C7                 LDX     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:18C9                 STX     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:18CC                 LDX     byte_FE
GAME:18CE                 JMP     _2
GAME:18D1 ; ---------------------------------------------------------------------------
GAME:18D1
GAME:18D1 _1:                                     ; CODE XREF: CRSH+6↑j
GAME:18D1                 DEC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:18D3                 INC     byte_FE
GAME:18D5                 LDX     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:18D7                 STX     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:18DA                 LDX     byte_FE
GAME:18DC
GAME:18DC _2:                                     ; CODE XREF: CRSH+13↑j
GAME:18DC                 STX     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:18DF                 PLP
GAME:18E0                 BCC     _3
GAME:18E2                 LDA     #COLOR_INTENSITY_0|COLOR_RED_ORANGE
GAME:18E4                 JMP     _4
GAME:18E7 ; ---------------------------------------------------------------------------
GAME:18E7
GAME:18E7 _3:                                     ; CODE XREF: CRSH+25↑j
GAME:18E7                 LDA     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:18E9
GAME:18E9 _4:                                     ; CODE XREF: CRSH+29↑j
GAME:18E9                 STA     PCOLR0          ; P0 COLOR
GAME:18EC                 STA     PCOLR1          ; P1 COLOR
GAME:18EC ; End of function CRSH
GAME:18EC
GAME:18EF
GAME:18EF ; =============== S U B R O U T I N E =======================================
GAME:18EF
GAME:18EF
GAME:18EF SK:                                     ; CODE XREF: TURN+142↑p
GAME:18EF                 LDY     byte_655
GAME:18F2                 BNE     _1              ; => Return
GAME:18F4                 STA     PCOLR2          ; P2 COLOR
GAME:18F7
GAME:18F7 _1:                                     ; CODE XREF: SK+3↑j
GAME:18F7                 RTS                     ; => Return
GAME:18F7 ; End of function SK
GAME:18F7
GAME:18F8
GAME:18F8 ; =============== S U B R O U T I N E =======================================
GAME:18F8
GAME:18F8 ; Draw a ship onto the map
GAME:18F8
GAME:18F8 DRBT__DRAW_BOAT:                        ; CODE XREF: SRT+6↑p
GAME:18F8                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:18FA                 BEQ     GV
GAME:18FC                 RTS
GAME:18FD ; ---------------------------------------------------------------------------
GAME:18FD
GAME:18FD GV:                                     ; CODE XREF: DRBT__DRAW_BOAT+2↑j
GAME:18FD                 LDY     RIVER_BOAT_ROW_FLAG ; !=0 boat top row drawn, ==0 boat bottom row drawn
GAME:1900                 BNE     HB              ; Draw 2nd row of the river boat (the top one)
GAME:1902                 LDA     RIVER_BOAT_NEXT_COUNTER ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
GAME:1905                 BEQ     GX
GAME:1907                 DEC     RIVER_BOAT_NEXT_COUNTER ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
GAME:190A                 RTS
GAME:190B ; ---------------------------------------------------------------------------
GAME:190B
GAME:190B GX:                                     ; CODE XREF: DRBT__DRAW_BOAT+D↑j
GAME:190B                 LDA     byte_FE
GAME:190D                 CMP     #5
GAME:190F                 BCS     GY
GAME:1911                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1913                 CMP     #58
GAME:1915                 BCS     GY
GAME:1917                 CMP     #31
GAME:1919                 BCC     GY
GAME:191B                 LDA     #15
GAME:191D                 STA     RIVER_BOAT_NEXT_COUNTER ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
GAME:1920                 RTS
GAME:1921 ; ---------------------------------------------------------------------------
GAME:1921
GAME:1921 GY:                                     ; CODE XREF: DRBT__DRAW_BOAT+17↑j
GAME:1921                                         ; DRBT__DRAW_BOAT+1D↑j ...
GAME:1921                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1923                 SEC
GAME:1924                 SBC     #4              ; Ship is near the right riverbank
GAME:1926                 TAY
GAME:1927                 CLC
GAME:1928                 ADC     #6
GAME:192A                 JSR     A2
GAME:192D                 LDA     #L_FIXED_BOAT_BOTTOM_RIGHT|L_C_1
GAME:192F                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1931                 DEY
GAME:1932                 LDA     #L_FIXED_BOAT_BOTTOM_LEFT|L_C_1
GAME:1934                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1936                 STY     RIVER_BOAT_ROW_FLAG ; !=0 boat top row drawn, ==0 boat bottom row drawn
GAME:1939                 STA     byte_BF
GAME:193B                 STA     byte_661
GAME:193E                 RTS
GAME:193F ; ---------------------------------------------------------------------------
GAME:193F                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1941
GAME:1941 HB:                                     ; CODE XREF: DRBT__DRAW_BOAT+8↑j
GAME:1941                 LDA     #L_FIXED_BOAT_TOP_RIGHT|L_C_1 ; Draw 2nd row of the river boat (the top one)
GAME:1943                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1945                 DEY
GAME:1946                 LDA     #L_FIXED_BOAT_TOP_LEFT|L_C_1
GAME:1948                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:194A                 LDA     #0
GAME:194C                 STA     RIVER_BOAT_ROW_FLAG ; !=0 boat top row drawn, ==0 boat bottom row drawn
GAME:194F
GAME:194F                 LDA     RANDOM          ; Random Number Generator
GAME:1952                 ORA     #16
GAME:1954                 AND     #31
GAME:1956                 STA     RIVER_BOAT_NEXT_COUNTER ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
GAME:1959                 LDA     #2
GAME:195B                 STA     RIVER_BOAT_HIT_COUNTER ; The boat requires 2 hits to be destroyed
GAME:195E                 RTS
GAME:195E ; End of function DRBT__DRAW_BOAT
GAME:195E
GAME:195F
GAME:195F ; =============== S U B R O U T I N E =======================================
GAME:195F
GAME:195F ; Trigger machine gun
GAME:195F
GAME:195F TRIG__TRIGGER_MACHINE_GUN:              ; CODE XREF: COMMON+36↑p
GAME:195F                 LDY     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:1961                 BNE     HE
GAME:1963                 LDA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:1965                 BNE     HH              ; => button is not pressed
GAME:1967                 LDA     SC_STATUS_LINE.line_0.machine_gun_damaged ; "G" character
GAME:196A                 BEQ     HF              ; => gun is not damaged
GAME:196C                 LDA     RANDOM          ; Random Number Generator
GAME:196F                 AND     #$1F
GAME:1971                 BEQ     HF              ; 1/32 chance (3%) for the gun to still work
GAME:1973
GAME:1973 HH:                                     ; CODE XREF: TRIG__TRIGGER_MACHINE_GUN+6↑j
GAME:1973                                         ; TRIG__TRIGGER_MACHINE_GUN+1A↓j ...
GAME:1973                 RTS                     ; => Return
GAME:1974 ; ---------------------------------------------------------------------------
GAME:1974
GAME:1974 HF:                                     ; CODE XREF: TRIG__TRIGGER_MACHINE_GUN+B↑j
GAME:1974                                         ; TRIG__TRIGGER_MACHINE_GUN+12↑j
GAME:1974                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:1976                 CMP     DIRECTION_A
GAME:1979                 BEQ     HH              ; => Return
GAME:197B                 LDA     byte_620
GAME:197E                 BPL     HH              ; => Return
GAME:1980                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:1982                 CLC
GAME:1983                 ADC     #6
GAME:1985                 STA     PLANE_BULLET_X_POS ; X-Position of the current bullet from the plane
GAME:1988                 STA     P0PF_HPOSM0     ; Player Machine Gun Bullet (Horizontal Position)
GAME:198B                 LDY     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:198D                 INY
GAME:198E                 INY
GAME:198F                 STY     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:1991                 LDA     #11b
GAME:1993                 STA     MISSLE,Y
GAME:1996                 STA     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:1999                 RTS
GAME:199A ; ---------------------------------------------------------------------------
GAME:199A
GAME:199A HE:                                     ; CODE XREF: TRIG__TRIGGER_MACHINE_GUN+2↑j
GAME:199A                 CPY     #38
GAME:199C                 BCC     HG              ; Remove plane bullet
GAME:199E                 LDA     PLANE_BULLET_X_POS ; X-Position of the current bullet from the plane
GAME:19A1                 CMP     #203
GAME:19A3                 BCS     HG              ; Remove plane bullet
GAME:19A5                 CLC
GAME:19A6                 ADC     #8
GAME:19A8                 STA     PLANE_BULLET_X_POS ; X-Position of the current bullet from the plane
GAME:19AB                 STA     P0PF_HPOSM0     ; Player Machine Gun Bullet (Horizontal Position)
GAME:19AE                 LDA     #0
GAME:19B0                 STA     MISSLE,Y
GAME:19B3                 LDX     #8
GAME:19B5
GAME:19B5 OA:                                     ; CODE XREF: TRIG__TRIGGER_MACHINE_GUN+58↓j
GAME:19B5                 DEY
GAME:19B6                 DEX
GAME:19B7                 BNE     OA
GAME:19B9                 STY     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:19BB                 LDA     #11b
GAME:19BD                 STA     MISSLE,Y
GAME:19C0                 JSR     SHBT            ; Shoot plane bullet. Check if something was hit.
GAME:19C3                 RTS
GAME:19C3 ; End of function TRIG__TRIGGER_MACHINE_GUN
GAME:19C3
GAME:19C4
GAME:19C4 ; =============== S U B R O U T I N E =======================================
GAME:19C4
GAME:19C4 ; Remove plane bullet
GAME:19C4
GAME:19C4 HG:                                     ; CODE XREF: TURN+8C↑p
GAME:19C4                                         ; TRIG__TRIGGER_MACHINE_GUN+3D↑j ...
GAME:19C4                 LDA     #0
GAME:19C6                 STA     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:19C8                 STA     MISSLE,Y
GAME:19CB                 LDX     #255
GAME:19CD                 STX     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:19D0                 RTS
GAME:19D0 ; End of function HG
GAME:19D0
GAME:19D1
GAME:19D1 ; =============== S U B R O U T I N E =======================================
GAME:19D1
GAME:19D1 ; Trigger bomb drop
GAME:19D1
GAME:19D1 BOMB:                                   ; CODE XREF: COMMON+39↑p
GAME:19D1                                         ; BMBR:_3_↓p ...
GAME:19D1
GAME:19D1 ; FUNCTION CHUNK AT GAME:1A51 SIZE 0000003C BYTES
GAME:19D1
GAME:19D1                 LDY     byte_FA
GAME:19D3                 BNE     HI
GAME:19D5                 LDA     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:19D7                 BNE     HK              ; => Return
GAME:19D9                 LDA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:19DB                 BNE     HK              ; => button is not pressed
GAME:19DD                 LDA     SC_STATUS_LINE.line_0.bomb_gear_damaged ; "B" character
GAME:19E0                 BEQ     HJ
GAME:19E2                 LDA     RANDOM          ; Random Number Generator
GAME:19E5                 AND     #$1F
GAME:19E7                 BEQ     HJ
GAME:19E9
GAME:19E9 HK:                                     ; CODE XREF: BOMB+6↑j
GAME:19E9                                         ; BOMB+A↑j ...
GAME:19E9                 RTS                     ; => Return
GAME:19EA ; ---------------------------------------------------------------------------
GAME:19EA
GAME:19EA HI:                                     ; CODE XREF: BOMB+2↑j
GAME:19EA                 JMP     TJ
GAME:19ED ; ---------------------------------------------------------------------------
GAME:19ED
GAME:19ED HJ:                                     ; CODE XREF: BOMB+F↑j
GAME:19ED                                         ; BOMB+16↑j
GAME:19ED                 STA     byte_6EB
GAME:19F0                 LDA     byte_6ED
GAME:19F3                 BEQ     _1
GAME:19F5                 JSR     AFF
GAME:19F8
GAME:19F8 _1:                                     ; CODE XREF: BOMB+22↑j
GAME:19F8                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:19FA                 CMP     DIRECTION_A
GAME:19FD                 BNE     HK              ; => Return
GAME:19FF                 LDA     SC_STATUS_LINE.line_0.bomb_digit_1
GAME:1A02                 CMP     #_0|_C_BLUE
GAME:1A04                 BNE     PB
GAME:1A06                 LDA     SC_STATUS_LINE.line_0.bomb_digit_10
GAME:1A09                 CMP     #_0|_C_BLUE
GAME:1A0B                 BEQ     HK              ; => Return
GAME:1A0D
GAME:1A0D PB:                                     ; CODE XREF: BOMB+33↑j
GAME:1A0D                 DEC     SC_STATUS_LINE.line_0.bomb_digit_1
GAME:1A10                 LDA     SC_STATUS_LINE.line_0.bomb_digit_1
GAME:1A13                 CMP     #KEYCODE_0-1
GAME:1A15                 BNE     PC
GAME:1A17                 LDA     #_9|_C_BLUE
GAME:1A19                 STA     SC_STATUS_LINE.line_0.bomb_digit_1
GAME:1A1C                 DEC     SC_STATUS_LINE.line_0.bomb_digit_10
GAME:1A1C ; End of function BOMB
GAME:1A1C
GAME:1A1F
GAME:1A1F ; =============== S U B R O U T I N E =======================================
GAME:1A1F
GAME:1A1F
GAME:1A1F PC:                                     ; CODE XREF: BOMB+44↑j
GAME:1A1F                                         ; BMBR+60↓p
GAME:1A1F                 LDY     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:1A21                 INY
GAME:1A22                 INY
GAME:1A23                 STY     P1PF_HPOSM1     ; Missile 1 Horizontal Position / Player 1 to Playfield Collision
GAME:1A26                 STY     byte_623
GAME:1A29                 LDA     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1A2B                 CLC
GAME:1A2C                 ADC     #7
GAME:1A2E                 STA     byte_FA
GAME:1A30                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1A32                 ADC     #3
GAME:1A34                 STA     byte_61F
GAME:1A37                 LDA     #15
GAME:1A39                 STA     byte_620
GAME:1A3C                 LDA     #SND_FREQ_20
GAME:1A3E                 STA     AUDF2           ; Audio 2 Frequency Register
GAME:1A41                 STA     AUDIO2_DROPSND_FREQ
GAME:1A44                 LDA     #AUDIO_CONTROL_VOL_2|AUDIO_CONTROL_DIST_4
GAME:1A46                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:1A49                 LDA     #0
GAME:1A4B                 STA     AUDIO2_DURATION_COUNTER
GAME:1A4E                 JMP     AFB
GAME:1A4E ; End of function PC
GAME:1A4E
GAME:1A51 ; ---------------------------------------------------------------------------
GAME:1A51 ; START OF FUNCTION CHUNK FOR BOMB
GAME:1A51
GAME:1A51 TJ:                                     ; CODE XREF: BOMB:HI↑j
GAME:1A51                 CPY     byte_61F
GAME:1A54                 BPL     AFV
GAME:1A56
GAME:1A56 AFU:
GAME:1A56                 LDA     #0
GAME:1A58                 STA     MISSLE,Y
GAME:1A5B                 INY
GAME:1A5C                 STY     byte_FA
GAME:1A5E                 LDA     #1100b
GAME:1A60                 STA     MISSLE+1,Y
GAME:1A63                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:1A65                 LSR     A
GAME:1A66                 LSR     A
GAME:1A67                 BCC     _1_0
GAME:1A69                 LDA     #0
GAME:1A6B                 STA     MISSLE,Y
GAME:1A6E                 LDA     #1000b
GAME:1A70                 JMP     _2
GAME:1A73 ; ---------------------------------------------------------------------------
GAME:1A73
GAME:1A73 _1_0:                                   ; CODE XREF: BOMB+96↑j
GAME:1A73                 LDA     #1000b
GAME:1A75                 STA     MISSLE,Y
GAME:1A78                 LDA     #0
GAME:1A7A
GAME:1A7A _2:                                     ; CODE XREF: BOMB+9F↑j
GAME:1A7A                 STA     MISSLE+2,Y
GAME:1A7D                 DEC     byte_620
GAME:1A80                 JSR     DRPSND          ; Bomb drop sound
GAME:1A83                 RTS
GAME:1A84 ; ---------------------------------------------------------------------------
GAME:1A84
GAME:1A84 AFV:                                    ; CODE XREF: BOMB+83↑j
GAME:1A84                 STY     byte_639
GAME:1A87
GAME:1A87 HL:
GAME:1A87                 JSR     BMBSHP
GAME:1A8A                 JSR     BMCPTL
GAME:1A8A ; END OF FUNCTION CHUNK FOR BOMB
GAME:1A8D
GAME:1A8D ; =============== S U B R O U T I N E =======================================
GAME:1A8D
GAME:1A8D ; Remove all missles, bullets, etc. – reset variables related to this
GAME:1A8D
GAME:1A8D AFP:                                    ; CODE XREF: TURN+87↑p
GAME:1A8D                                         ; TURN+DE↑p
GAME:1A8D                 LDA     #0
GAME:1A8F                 LDY     byte_FA
GAME:1A91                 STY     CURRENT_TILE_ROW_PTR+1
GAME:1A93                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:1A96                 STY     TEMP_ADR+1
GAME:1A98                 STA     MISSLE,Y
GAME:1A9B                 STA     MISSLE+1,Y
GAME:1A9E                 STA     MISSLE+2,Y
GAME:1AA1                 STA     P1PF_HPOSM1     ; Missile 1 Horizontal Position / Player 1 to Playfield Collision
GAME:1AA4                 STA     EXPLOSION_TILE_ANIMATION
GAME:1AA7                 STA     byte_FA
GAME:1AA9                 LDA     #255
GAME:1AAB                 STA     byte_620
GAME:1AAE                 LDA     byte_623
GAME:1AB1                 STA     TEMP_ADR
GAME:1AB3                 LDA     byte_6C3
GAME:1AB6                 BEQ     _9              ; => Return
GAME:1AB8                 LDA     #0
GAME:1ABA                 STA     byte_6C3
GAME:1ABD                 STA     CURRENT_TILE_ROW_PTR+1
GAME:1ABF
GAME:1ABF _9:                                     ; CODE XREF: AFP+29↑j
GAME:1ABF                 RTS                     ; => Return
GAME:1ABF ; End of function AFP
GAME:1ABF
GAME:1AC0
GAME:1AC0 ; =============== S U B R O U T I N E =======================================
GAME:1AC0
GAME:1AC0
GAME:1AC0 XPLSN:                                  ; CODE XREF: COMMON+30↑p
GAME:1AC0                                         ; TURN+124↑p ...
GAME:1AC0                 LDA     CURRENT_TILE_ROW_PTR+1
GAME:1AC2                 BNE     HM
GAME:1AC4                 RTS
GAME:1AC5 ; ---------------------------------------------------------------------------
GAME:1AC5
GAME:1AC5 HN:                                     ; CODE XREF: XPLSN+B↓j
GAME:1AC5                 JMP     ID
GAME:1AC8 ; ---------------------------------------------------------------------------
GAME:1AC8
GAME:1AC8 HM:                                     ; CODE XREF: XPLSN+2↑j
GAME:1AC8                 LDA     EXPLOSION_TILE_ANIMATION
GAME:1ACB                 BNE     HN
GAME:1ACD                 JSR     ADA             ; Convert a X/Y position into an address to screen memory
GAME:1AD0                 STY     VAR_EXPLOSION_X_POS
GAME:1AD3
GAME:1AD3 ADB:
GAME:1AD3                 LDA     TEMP_ADR
GAME:1AD5                 STA     CURRENT_TILE_ROW_PTR
GAME:1AD7                 LDA     TEMP_ADR+1
GAME:1AD9                 STA     CURRENT_TILE_ROW_PTR+1
GAME:1ADB
GAME:1ADB                 LDA     DL+3,X
GAME:1ADE                 STA     TEMP_NEXT_ROW_PTR
GAME:1AE1                 LDA     DL+4,X
GAME:1AE4                 STA     TEMP_NEXT_ROW_PTR+1
GAME:1AE7                 LDA     DL-3,X
GAME:1AEA                 STA     TEMP_PREVIOUS_ROW_PTR
GAME:1AED                 LDA     DL-2,X
GAME:1AF0                 STA     TEMP_PREVIOUS_ROW_PTR+1
GAME:1AF3
GAME:1AF3                 LDA     (CURRENT_TILE_ROW_PTR),Y
GAME:1AF5                 JSR     CKCHAR          ; Check if a tile based target in A was hit
GAME:1AF8                 LDA     (CURRENT_TILE_ROW_PTR),Y
GAME:1AFA                 CMP     #L_BRIDGE_G|L_C_1
GAME:1AFC                 BEQ     HW
GAME:1AFE                 CMP     #L_CLIFF_WATER_C|L_C_0
GAME:1B00                 BEQ     HT
GAME:1B02                 CMP     #L_CLIFF_WATER_B2|L_C_0
GAME:1B04                 BEQ     HT
GAME:1B06                 CMP     #L_CLIFF_WATER_A|L_C_0
GAME:1B08                 BEQ     HT
GAME:1B0A                 CMP     #L_WATER_GRAS_B1|L_C_0
GAME:1B0C                 BEQ     HU
GAME:1B0E                 CMP     #L_WATER_GRAS_C2|L_C_0
GAME:1B10                 BEQ     HU
GAME:1B12                 CMP     #L_CLIFF_GRAS_A|L_C_0
GAME:1B14                 BEQ     HX
GAME:1B16                 CMP     #L_CLIFF_GRAS_B2|L_C_0
GAME:1B18                 BEQ     HX
GAME:1B1A                 CMP     #L_CLIFF_WATER_B1|L_C_0
GAME:1B1C                 BEQ     HX
GAME:1B1E                 CMP     #L_GRAS_CLIFF_WATER_B|L_C_0
GAME:1B20                 BEQ     HX
GAME:1B22                 CMP     #L_GRASS_CLIFF_D|L_C_0
GAME:1B24                 BEQ     HX
GAME:1B26                 CMP     #L_GRAS_CLIFF_WATER_A|L_C_0
GAME:1B28                 BEQ     HX
GAME:1B2A                 CMP     #L_WATER|L_C_0
GAME:1B2C                 BEQ     HW
GAME:1B2E
GAME:1B2E U3:                                     ; CODE XREF: Z3+87↓j
GAME:1B2E                 LDA     #EXPLOSITION_TARGET_GRAS
GAME:1B30                 STA     VAR_EXPLOSION_TARGET
GAME:1B33
GAME:1B33 HY:                                     ; CODE XREF: HU+B↓j
GAME:1B33                 LDA     #L_EXPLOSION_GRAS_1|L_C_0
GAME:1B35                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1B37
GAME:1B37 Z7:                                     ; CODE XREF: W1+3↓j
GAME:1B37                                         ; Z3+91↓j ...
GAME:1B37                 LDA     #187
GAME:1B39                 SBC     byte_639
GAME:1B3C                 LDX     byte_FD
GAME:1B3E                 CPX     #254
GAME:1B40                 BNE     DT
GAME:1B42                 LDA     #30
GAME:1B44
GAME:1B44 DT:                                     ; CODE XREF: XPLSN+80↑j
GAME:1B44                                         ; Z3+33↓j
GAME:1B44                 STA     EXPLOSION_TILE_ANIMATION
GAME:1B47
GAME:1B47 AFE:                                    ; CODE XREF: AFF+8↓j
GAME:1B47                 LDA     #42
GAME:1B49                 LDX     #AUDIO_CONTROL_VOL_12|AUDIO_CONTROL_DIST_1
GAME:1B4B                 JMP     XXX             ; Start Audio 3 sound effect
GAME:1B4E ; ---------------------------------------------------------------------------
GAME:1B4E
GAME:1B4E HW:                                     ; CODE XREF: XPLSN+3C↑j
GAME:1B4E                                         ; XPLSN+6C↑j ...
GAME:1B4E                 LDA     #L_EXPLOSION_WATER_1|L_C_0
GAME:1B50                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1B52                 LDA     #18
GAME:1B54                 STA     EXPLOSION_TILE_ANIMATION
GAME:1B54 ; End of function XPLSN
GAME:1B54
GAME:1B57
GAME:1B57 ; =============== S U B R O U T I N E =======================================
GAME:1B57
GAME:1B57 ; Trigger explosion in water with sound
GAME:1B57
GAME:1B57 Y8:                                     ; CODE XREF: X8__HIT_BOAT_TR:Y4↓p
GAME:1B57                 LDA     #EXPLOSITION_TARGET_WATER
GAME:1B59                 STA     VAR_EXPLOSION_TARGET
GAME:1B5C
GAME:1B5C SL:                                     ; CODE XREF: BMBSHP+33↓p
GAME:1B5C                                         ; SHBT+57↓p
GAME:1B5C                 LDA     #0              ; Trigger explosion sound effect
GAME:1B5E                 STA     AUDIO2_FREQ_COUNTER
GAME:1B61                 STA     AUDF2           ; Audio 2 Frequency Register
GAME:1B64                 LDA     #AUDIO_CONTROL_VOL_3|AUDIO_CONTROL_DIST_3
GAME:1B66                 STA     AUDIO2_EFFECT_COUNTER
GAME:1B69                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:1B6C                 LDA     #45
GAME:1B6E                 STA     AUDIO2_DURATION_COUNTER
GAME:1B71                 RTS
GAME:1B71 ; End of function Y8
GAME:1B71
GAME:1B72
GAME:1B72 ; =============== S U B R O U T I N E =======================================
GAME:1B72
GAME:1B72
GAME:1B72 HT:                                     ; CODE XREF: XPLSN+40↑j
GAME:1B72                                         ; XPLSN+44↑j ...
GAME:1B72                 INX
GAME:1B73                 INX
GAME:1B74                 LDA     DL,X
GAME:1B77                 STA     CURRENT_TILE_ROW_PTR
GAME:1B79                 INX
GAME:1B7A                 LDA     DL,X
GAME:1B7D                 STA     CURRENT_TILE_ROW_PTR+1
GAME:1B7F                 JMP     HW
GAME:1B7F ; End of function HT
GAME:1B7F
GAME:1B82
GAME:1B82 ; =============== S U B R O U T I N E =======================================
GAME:1B82
GAME:1B82 ; Attributes: thunk
GAME:1B82
GAME:1B82 AFD:                                    ; CODE XREF: ID+B↓j
GAME:1B82                 JMP     HV              ; Explosition in the water
GAME:1B82 ; End of function AFD
GAME:1B82
GAME:1B85
GAME:1B85 ; =============== S U B R O U T I N E =======================================
GAME:1B85
GAME:1B85
GAME:1B85 HU:                                     ; CODE XREF: XPLSN+4C↑j
GAME:1B85                                         ; XPLSN+50↑j
GAME:1B85                 INC     CURRENT_TILE_ROW_PTR
GAME:1B87                 BNE     HX
GAME:1B89                 INC     CURRENT_TILE_ROW_PTR+1
GAME:1B8B
GAME:1B8B HX:                                     ; CODE XREF: XPLSN+54↑j
GAME:1B8B                                         ; XPLSN+58↑j ...
GAME:1B8B                 LDA     #EXPLOSITION_TARGET_2
GAME:1B8D                 STA     VAR_EXPLOSION_TARGET
GAME:1B90                 JMP     HY
GAME:1B90 ; End of function HU
GAME:1B90
GAME:1B93
GAME:1B93 ; =============== S U B R O U T I N E =======================================
GAME:1B93
GAME:1B93
GAME:1B93 ID:                                     ; CODE XREF: XPLSN:HN↑j
GAME:1B93                 DEC     EXPLOSION_TILE_ANIMATION
GAME:1B96                 BEQ     HQ
GAME:1B98                 LDY     VAR_EXPLOSION_X_POS
GAME:1B9B                 LDA     VAR_EXPLOSION_TARGET
GAME:1B9E                 BEQ     AFD
GAME:1BA0                 CMP     #EXPLOSITION_TARGET_BRIDGE
GAME:1BA2                 BEQ     V7
GAME:1BA4                 CMP     #EXPLOSITION_TARGET_BUILDING
GAME:1BA6                 BEQ     ABF
GAME:1BA8                 CMP     #EXPLOSITION_TARGET_SKYSCRAPER
GAME:1BAA                 BEQ     ACK
GAME:1BAC                 CMP     #EXPLOSITION_TARGET_EMPTY_ROAD
GAME:1BAE                 BEQ     X6
GAME:1BB0                 CMP     #EXPLOSITION_TARGET_BOAT
GAME:1BB2                 BEQ     Y5
GAME:1BB4                 CMP     #EXPLOSITION_TARGET_RUNWAY_PLANE
GAME:1BB6                 BEQ     W5
GAME:1BB8                 CMP     #EXPLOSITION_TARGET_AIRPORT_HANGAR
GAME:1BBA                 BEQ     Z4
GAME:1BBC                 CMP     #EXPLOSITION_TARGET_10
GAME:1BBE                 BEQ     AEH
GAME:1BC0                 CMP     #EXPLOSITION_TARGET_15
GAME:1BC2                 BEQ     BD
GAME:1BC4                 LDA     EXPLOSION_TILE_ANIMATION ; 2x1 gras explosion
GAME:1BC7                 LSR     A
GAME:1BC8                 LSR     A
GAME:1BC9                 LSR     A
GAME:1BCA                 BCC     HO
GAME:1BCC                 JMP     HP
GAME:1BCF ; ---------------------------------------------------------------------------
GAME:1BCF
GAME:1BCF ABF:                                    ; CODE XREF: ID+13↑j
GAME:1BCF                 JMP     ABB             ; Buildings explosion via tile animation
GAME:1BD2 ; ---------------------------------------------------------------------------
GAME:1BD2
GAME:1BD2 V7:                                     ; CODE XREF: ID+F↑j
GAME:1BD2                 JMP     V8              ; 2x2 water explosion
GAME:1BD5 ; ---------------------------------------------------------------------------
GAME:1BD5
GAME:1BD5 W5:                                     ; CODE XREF: ID+23↑j
GAME:1BD5                 JMP     W6              ; 2x2 runway tile explosion
GAME:1BD8 ; ---------------------------------------------------------------------------
GAME:1BD8
GAME:1BD8 X6:                                     ; CODE XREF: ID+1B↑j
GAME:1BD8                 JMP     X7              ; 2x1 street explosion
GAME:1BDB ; ---------------------------------------------------------------------------
GAME:1BDB
GAME:1BDB Y5:                                     ; CODE XREF: ID+1F↑j
GAME:1BDB                 JMP     Y6              ; 2x2 water explosion
GAME:1BDE ; ---------------------------------------------------------------------------
GAME:1BDE
GAME:1BDE Z4:                                     ; CODE XREF: ID+27↑j
GAME:1BDE                 JMP     Z5              ; Airport hangar explosion via tile animation
GAME:1BE1 ; ---------------------------------------------------------------------------
GAME:1BE1
GAME:1BE1 ACK:                                    ; CODE XREF: ID+17↑j
GAME:1BE1                 JMP     ACL             ; Skyscraper explosition via tile animation
GAME:1BE4 ; ---------------------------------------------------------------------------
GAME:1BE4
GAME:1BE4 AEH:                                    ; CODE XREF: ID+2B↑j
GAME:1BE4                 JMP     AEI             ; 2x1 tile explosion wall
GAME:1BE7 ; ---------------------------------------------------------------------------
GAME:1BE7
GAME:1BE7 BD:                                     ; CODE XREF: ID+2F↑j
GAME:1BE7                 JMP     XI              ; 2x1 tile explosion in water
GAME:1BEA ; ---------------------------------------------------------------------------
GAME:1BEA
GAME:1BEA HQ:                                     ; CODE XREF: ID+3↑j
GAME:1BEA                 LDA     #0
GAME:1BEC                 STA     CURRENT_TILE_ROW_PTR+1
GAME:1BEE                 RTS
GAME:1BEF ; ---------------------------------------------------------------------------
GAME:1BEF
GAME:1BEF HO:                                     ; CODE XREF: ID+37↑j
GAME:1BEF                 LDA     #L_EXPLOSION_GRAS_4|L_C_0
GAME:1BF1                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1BF3                 LDA     VAR_EXPLOSION_TARGET
GAME:1BF6                 CMP     #EXPLOSITION_TARGET_2
GAME:1BF8                 BEQ     HZ              ; => Return
GAME:1BFA                 JSR     HR              ; Stop bombing, if cliff edge would be hit => return
GAME:1BFD                 LDA     #L_EXPLOSION_GRAS_2|L_C_0
GAME:1BFF                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C01
GAME:1C01 HZ:                                     ; CODE XREF: ID+65↑j
GAME:1C01                                         ; ID+78↓j
GAME:1C01                 RTS                     ; => Return
GAME:1C02 ; ---------------------------------------------------------------------------
GAME:1C02
GAME:1C02 HP:                                     ; CODE XREF: ID+39↑j
GAME:1C02                 LDA     #L_EXPLOSION_GRAS_1|L_C_0
GAME:1C04                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C06                 LDA     VAR_EXPLOSION_TARGET
GAME:1C09                 CMP     #EXPLOSITION_TARGET_2
GAME:1C0B                 BEQ     HZ              ; => Return
GAME:1C0D                 JSR     HR              ; Stop bombing, if cliff edge would be hit => return
GAME:1C10                 LDA     #L_EXPLOSION_GRAS_3|L_C_0
GAME:1C12                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C14                 RTS
GAME:1C14 ; End of function ID
GAME:1C14
GAME:1C15
GAME:1C15 ; =============== S U B R O U T I N E =======================================
GAME:1C15
GAME:1C15 ; Stop bombing, if cliff edge would be hit => return
GAME:1C15
GAME:1C15 HR:                                     ; CODE XREF: ID+67↑p
GAME:1C15                                         ; ID+7A↑p
GAME:1C15                 INY
GAME:1C16                 LDA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C18                 CMP     #L_GRAS_CLIFF_WATER_A|L_C_0
GAME:1C1A                 BEQ     HS
GAME:1C1C                 RTS
GAME:1C1D ; ---------------------------------------------------------------------------
GAME:1C1D
GAME:1C1D HS:                                     ; CODE XREF: HR+5↑j
GAME:1C1D                 PLA
GAME:1C1E                 PLA
GAME:1C1F                 RTS
GAME:1C1F ; End of function HR
GAME:1C1F
GAME:1C20
GAME:1C20 ; =============== S U B R O U T I N E =======================================
GAME:1C20
GAME:1C20 ; Explosition in the water
GAME:1C20
GAME:1C20 HV:                                     ; CODE XREF: AFD↑j
GAME:1C20                 LDA     EXPLOSION_TILE_ANIMATION
GAME:1C23                 CMP     #1
GAME:1C25                 BEQ     IC
GAME:1C27                 LSR     A
GAME:1C28                 LSR     A
GAME:1C29                 LSR     A
GAME:1C2A                 BCC     IA
GAME:1C2C                 JMP     IB
GAME:1C2F ; ---------------------------------------------------------------------------
GAME:1C2F
GAME:1C2F IA:                                     ; CODE XREF: HV+A↑j
GAME:1C2F                 LDA     #L_EXPLOSION_WATER_2|L_C_0
GAME:1C31                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C33                 RTS
GAME:1C34 ; ---------------------------------------------------------------------------
GAME:1C34
GAME:1C34 IB:                                     ; CODE XREF: HV+C↑j
GAME:1C34                 LDA     #L_EXPLOSION_WATER_1|L_C_0
GAME:1C36                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C38                 RTS
GAME:1C39 ; ---------------------------------------------------------------------------
GAME:1C39
GAME:1C39 IC:                                     ; CODE XREF: HV+5↑j
GAME:1C39                 LDA     #L_WATER|L_C_0
GAME:1C3B                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C3D                 RTS
GAME:1C3D ; End of function HV
GAME:1C3D
GAME:1C3E
GAME:1C3E ; =============== S U B R O U T I N E =======================================
GAME:1C3E
GAME:1C3E ; 2x2 water explosion
GAME:1C3E
GAME:1C3E V8:                                     ; CODE XREF: ID:V7↑j
GAME:1C3E                 LDA     EXPLOSION_TILE_ANIMATION
GAME:1C41                 LSR     A
GAME:1C42                 LSR     A
GAME:1C43                 LSR     A
GAME:1C44                 BCC     _1
GAME:1C46                 LDA     #L_EXPLOSION_WATER_5|L_C_1
GAME:1C48                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C4A                 LDA     #L_EXPLOSION_WATER_6|L_C_1
GAME:1C4C                 INY
GAME:1C4D                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C4F                 JSR     CPBT            ; Check if previous tile row is still visible, exit if not
GAME:1C52                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:1C54                 DEY
GAME:1C55                 LDA     #L_EXPLOSION_WATER_5|L_C_1
GAME:1C57                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:1C59
GAME:1C59 _2:                                     ; => Return
GAME:1C59                 RTS
GAME:1C5A ; ---------------------------------------------------------------------------
GAME:1C5A
GAME:1C5A _1:                                     ; CODE XREF: V8+6↑j
GAME:1C5A                 LDA     #L_EXPLOSION_WATER_3|L_C_1
GAME:1C5C                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C5E                 LDA     #L_EXPLOSION_WATER_4|L_C_1
GAME:1C60                 INY
GAME:1C61                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:1C63                 JSR     CPBT            ; Check if previous tile row is still visible, exit if not
GAME:1C66                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:1C68                 DEY
GAME:1C69                 LDA     #L_EXPLOSION_WATER_3|L_C_1
GAME:1C6B                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:1C6D                 RTS
GAME:1C6D ; End of function V8
GAME:1C6D
GAME:1C6E
GAME:1C6E ; =============== S U B R O U T I N E =======================================
GAME:1C6E
GAME:1C6E ; Quake, if enabled, shake the screen via HSCROL.
GAME:1C6E
GAME:1C6E QUAKE:                                  ; CODE XREF: COMMON+19↑p
GAME:1C6E                 LDA     QUAKE_ANIMATION_COUNTER ; Quake, shake via the scroll register, timer
GAME:1C71                 BMI     _1              ; => Return
GAME:1C73                 DEC     QUAKE_ANIMATION_COUNTER ; Quake, shake via the scroll register, timer
GAME:1C76                 LDX     SCROLL_OFFSET_F1 ; HSCROL and VSCROL shadow during gameplay
GAME:1C78                 BEQ     _1              ; => Return
GAME:1C7A                 DEX
GAME:1C7B                 STX     HSCROL          ; Horizontal Scroll Register
GAME:1C7E
GAME:1C7E _1:                                     ; CODE XREF: QUAKE+3↑j
GAME:1C7E                                         ; QUAKE+A↑j
GAME:1C7E                 RTS                     ; => Return
GAME:1C7E ; End of function QUAKE
GAME:1C7E
GAME:1C7F
GAME:1C7F ; =============== S U B R O U T I N E =======================================
GAME:1C7F
GAME:1C7F ; Draw Car or Truck driving left/right
GAME:1C7F
GAME:1C7F DRP23:                                  ; CODE XREF: SRT+2A↑p
GAME:1C7F                 LDA     byte_FD
GAME:1C81                 CMP     #1
GAME:1C83                 BNE     IR              ; => Return
GAME:1C85                 JSR     XP23
GAME:1C88                 JSR     SHP23
GAME:1C8B                 LDA     VAR_UNKNOWN_STATE
GAME:1C8E                 CMP     #UNKNOWNS_STATE_6
GAME:1C90                 BEQ     IO
GAME:1C92                 CMP     #UNKNOWNS_STATE_3
GAME:1C94                 BEQ     IP
GAME:1C96                 CMP     #UNKNOWNS_STATE_4
GAME:1C98                 BEQ     IQ
GAME:1C9A
GAME:1C9A IR:                                     ; CODE XREF: DRP23+4↑j
GAME:1C9A                 RTS                     ; => Return
GAME:1C9B ; ---------------------------------------------------------------------------
GAME:1C9B
GAME:1C9B JW:                                     ; CODE XREF: DRP23+47↓j
GAME:1C9B                 JMP     KC              ; Truck driving left/right
GAME:1C9E ; ---------------------------------------------------------------------------
GAME:1C9E
GAME:1C9E IP:                                     ; CODE XREF: DRP23+15↑j
GAME:1C9E                 JMP     IZ
GAME:1CA1 ; ---------------------------------------------------------------------------
GAME:1CA1
GAME:1CA1 IQ:                                     ; CODE XREF: DRP23+19↑j
GAME:1CA1                 JMP     JE
GAME:1CA4 ; ---------------------------------------------------------------------------
GAME:1CA4
GAME:1CA4 IO:                                     ; CODE XREF: DRP23+11↑j
GAME:1CA4                 LDA     VBL_DRAW_DOWN_COUNTER ; VBL: 30Hz down counter whenever the level scrolls a pixel
GAME:1CA7                 BEQ     IS
GAME:1CA9                 RTS
GAME:1CAA ; ---------------------------------------------------------------------------
GAME:1CAA
GAME:1CAA IS:                                     ; CODE XREF: DRP23+28↑j
GAME:1CAA                 LDY     #12
GAME:1CAC                 STY     ENEMY_Y_POS     ; Enemy Y position
GAME:1CAE                 LDA     byte_C4
GAME:1CB0                 BNE     P8
GAME:1CB2                 LDA     #COLOR_INTENSITY_12|COLOR_DARK_PURPLE
GAME:1CB4                 STA     PCOLR2          ; P2 COLOR
GAME:1CB7                 DEC     byte_C4
GAME:1CB9                 LDA     RANDOM          ; Random Number Generator
GAME:1CBC                 JMP     P9
GAME:1CBF ; ---------------------------------------------------------------------------
GAME:1CBF
GAME:1CBF P8:                                     ; CODE XREF: DRP23+31↑j
GAME:1CBF                 LDA     RANDOM          ; Random Number Generator
GAME:1CC2                 LSR     A
GAME:1CC3                 BCC     IT
GAME:1CC5                 LSR     A
GAME:1CC6                 BCC     JW
GAME:1CC8                 LDX     #COLOR_INTENSITY_2|COLOR_LIGHT_BLUE
GAME:1CCA                 STX     PCOLR2          ; P2 COLOR
GAME:1CCD                 LSR     A
GAME:1CCE                 BCC     IU
GAME:1CD0
GAME:1CD0 IY:                                     ; CODE XREF: DRP23+A7↓j
GAME:1CD0                 LDA     RANDOM          ; Random Number Generator
GAME:1CD3                 AND     #$1F
GAME:1CD5                 ADC     #90
GAME:1CD7                 STA     ENEMY_X_POS     ; Enemy X position
GAME:1CD9                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:1CDC                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:1CDF                 LDX     #5
GAME:1CE1
GAME:1CE1 IV:                                     ; CODE XREF: DRP23+70↓j
GAME:1CE1                 LDA     CARRT-1,X       ; car driving right
GAME:1CE4                 STA     P2+4,Y          ; Enemy (first color)
GAME:1CE7                 LDA     TYRRT-1,X       ; car tyres driving right
GAME:1CEA                 STA     P3+5,Y          ; Enemy (second color)
GAME:1CED                 DEY
GAME:1CEE                 DEX
GAME:1CEF                 BNE     IV
GAME:1CF1                 LDA     #UNKNOWNS_STATE_3
GAME:1CF3                 STA     VAR_UNKNOWN_STATE
GAME:1CF6                 RTS
GAME:1CF7 ; ---------------------------------------------------------------------------
GAME:1CF7
GAME:1CF7 IU:                                     ; CODE XREF: DRP23+4F↑j
GAME:1CF7                                         ; DRP23+A5↓j
GAME:1CF7                 LDA     RANDOM          ; Random Number Generator
GAME:1CFA                 AND     #$1F
GAME:1CFC                 ADC     #210
GAME:1CFE                 STA     ENEMY_X_POS     ; Enemy X position
GAME:1D00                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:1D03                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:1D06                 LDX     #5
GAME:1D08
GAME:1D08 IW:                                     ; CODE XREF: DRP23+97↓j
GAME:1D08                 LDA     CARLT-1,X       ; car driving left
GAME:1D0B                 STA     P2+4,Y          ; Enemy (first color)
GAME:1D0E                 LDA     TYRLT-1,X       ; car tyres driving left
GAME:1D11                 STA     P3+5,Y          ; Enemy (second color)
GAME:1D14                 DEY
GAME:1D15                 DEX
GAME:1D16                 BNE     IW
GAME:1D18                 LDA     #UNKNOWNS_STATE_4
GAME:1D1A                 STA     VAR_UNKNOWN_STATE
GAME:1D1D                 RTS
GAME:1D1E ; ---------------------------------------------------------------------------
GAME:1D1E
GAME:1D1E IT:                                     ; CODE XREF: DRP23+44↑j
GAME:1D1E                 LDX     #COLOR_INTENSITY_2|COLOR_GOLD
GAME:1D20                 STX     PCOLR2          ; P2 COLOR
GAME:1D23
GAME:1D23 P9:                                     ; CODE XREF: DRP23+3D↑j
GAME:1D23                 LSR     A
GAME:1D24                 BCC     IU
GAME:1D26                 JMP     IY
GAME:1D29 ; ---------------------------------------------------------------------------
GAME:1D29
GAME:1D29 IZ:                                     ; CODE XREF: DRP23:IP↑j
GAME:1D29                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:1D2B                 CPY     #194
GAME:1D2D                 BCC     JN
GAME:1D2F
GAME:1D2F JG:                                     ; CODE XREF: DRP23+E9↓j
GAME:1D2F                                         ; BMBSHP+D4↓j
GAME:1D2F                 LDX     #11
GAME:1D31                 LDA     #0
GAME:1D33
GAME:1D33 JB:                                     ; CODE XREF: DRP23+BC↓j
GAME:1D33                 STA     P2-1,Y          ; Enemy (first color)
GAME:1D36                 STA     P3,Y            ; Enemy (second color)
GAME:1D39                 INY
GAME:1D3A                 DEX
GAME:1D3B                 BNE     JB
GAME:1D3D                 LDA     #0
GAME:1D3F                 STA     byte_FD
GAME:1D41                 RTS
GAME:1D42 ; ---------------------------------------------------------------------------
GAME:1D42
GAME:1D42 JN:                                     ; CODE XREF: DRP23+AE↑j
GAME:1D42                                         ; DRP23+F6↓j
GAME:1D42                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:1D45                 LSR     A
GAME:1D46                 BCC     JC
GAME:1D48                 RTS
GAME:1D49 ; ---------------------------------------------------------------------------
GAME:1D49
GAME:1D49 JC:                                     ; CODE XREF: DRP23+C7↑j
GAME:1D49                 LDX     #8
GAME:1D4B                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:1D4D
GAME:1D4D JD:                                     ; CODE XREF: DRP23+DC↓j
GAME:1D4D                 LDA     P2+4,Y          ; Enemy (first color)
GAME:1D50                 STA     P2+6,Y          ; Enemy (first color)
GAME:1D53                 LDA     P3+5,Y          ; Enemy (second color)
GAME:1D56                 STA     P3+7,Y          ; Enemy (second color)
GAME:1D59                 DEY
GAME:1D5A                 DEX
GAME:1D5B                 BNE     JD
GAME:1D5D                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:1D5F                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:1D61                 RTS
GAME:1D62 ; ---------------------------------------------------------------------------
GAME:1D62
GAME:1D62 JE:                                     ; CODE XREF: DRP23:IQ↑j
GAME:1D62                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:1D64                 CPY     #194
GAME:1D66                 BCC     JF
GAME:1D68                 JMP     JG
GAME:1D6B ; ---------------------------------------------------------------------------
GAME:1D6B
GAME:1D6B JF:                                     ; CODE XREF: DRP23+E7↑j
GAME:1D6B                 DEC     ENEMY_X_POS     ; Enemy X position
GAME:1D6D                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:1D6F                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:1D72                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:1D75                 JMP     JN
GAME:1D78 ; ---------------------------------------------------------------------------
GAME:1D78
GAME:1D78 KC:                                     ; CODE XREF: DRP23:JW↑j
GAME:1D78                 LSR     A               ; Truck driving left/right
GAME:1D79                 BCC     JX
GAME:1D7B                 LDX     #COLOR_INTENSITY_10|COLOR_GRAY
GAME:1D7D                 STX     PCOLR2          ; P2 COLOR
GAME:1D80                 JMP     JY
GAME:1D83 ; ---------------------------------------------------------------------------
GAME:1D83
GAME:1D83 JX:                                     ; CODE XREF: DRP23+FA↑j
GAME:1D83                 LDX     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:1D85                 STX     PCOLR2          ; P2 COLOR
GAME:1D88
GAME:1D88 JY:                                     ; CODE XREF: DRP23+101↑j
GAME:1D88                 LSR     A
GAME:1D89                 BCC     JZ
GAME:1D8B                 LDA     RANDOM          ; Random Number Generator
GAME:1D8E                 AND     #$1F
GAME:1D90                 ADC     #90
GAME:1D92                 STA     ENEMY_X_POS     ; Enemy X position
GAME:1D94                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:1D97                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:1D9A                 LDX     #6
GAME:1D9C
GAME:1D9C KA:                                     ; CODE XREF: DRP23+12B↓j
GAME:1D9C                 LDA     TRRT-1,X        ; truck driving right
GAME:1D9F                 STA     P2+5,Y          ; Enemy (first color)
GAME:1DA2                 LDA     TYRTRR-1,X      ; truck tyres driving right
GAME:1DA5                 STA     P3+6,Y          ; Enemy (second color)
GAME:1DA8                 DEY
GAME:1DA9                 DEX
GAME:1DAA                 BNE     KA
GAME:1DAC                 LDA     #UNKNOWNS_STATE_3
GAME:1DAE                 STA     VAR_UNKNOWN_STATE
GAME:1DB1                 RTS
GAME:1DB2 ; ---------------------------------------------------------------------------
GAME:1DB2
GAME:1DB2 JZ:                                     ; CODE XREF: DRP23+10A↑j
GAME:1DB2                 LDA     RANDOM          ; Random Number Generator
GAME:1DB5                 AND     #$1F
GAME:1DB7                 ADC     #210
GAME:1DB9                 STA     ENEMY_X_POS     ; Enemy X position
GAME:1DBB                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:1DBE                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:1DC1                 LDX     #6
GAME:1DC3
GAME:1DC3 KB:                                     ; CODE XREF: DRP23+152↓j
GAME:1DC3                 LDA     TRLT-1,X        ; truck driving left
GAME:1DC6                 STA     P2+5,Y          ; Enemy (first color)
GAME:1DC9                 LDA     TYRTRL-1,X      ; truck tyres driving left
GAME:1DCC                 STA     P3+6,Y          ; Enemy (second color)
GAME:1DCF                 DEY
GAME:1DD0                 DEX
GAME:1DD1                 BNE     KB
GAME:1DD3                 LDA     #UNKNOWNS_STATE_4
GAME:1DD5                 STA     VAR_UNKNOWN_STATE
GAME:1DD8                 RTS
GAME:1DD8 ; End of function DRP23
GAME:1DD8
GAME:1DD9
GAME:1DD9 ; =============== S U B R O U T I N E =======================================
GAME:1DD9
GAME:1DD9
GAME:1DD9 COLP02:                                 ; CODE XREF: LF+3↓p
GAME:1DD9                                         ; L6+EF↓p ...
GAME:1DD9                 LDA     P2PL            ; Player Graphics Register 1
GAME:1DDC                 AND     #1              ; Collision with the player? (White color only)
GAME:1DDE                 CMP     #1
GAME:1DE0                 BEQ     AS
GAME:1DE2
GAME:1DE2 AT:                                     ; CODE XREF: COLP02+1F↓j
GAME:1DE2                 STA     byte_654
GAME:1DE5                 RTS
GAME:1DE6 ; ---------------------------------------------------------------------------
GAME:1DE6
GAME:1DE6 AS:                                     ; CODE XREF: COLP02+7↑j
GAME:1DE6                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:1DE8                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:1DEA                 SBC     #6
GAME:1DEC                 STA     byte_654
GAME:1DEF                 LDA     byte_C2
GAME:1DF1                 SBC     ENEMY_Y_POS     ; Enemy Y position
GAME:1DF3                 SBC     byte_654
GAME:1DF6                 CMP     #12
GAME:1DF8                 BCS     AT
GAME:1DFA                 LDA     #0
GAME:1DFC                 STA     byte_655
GAME:1DFF                 JMP     CRASH           ; Plane was crashed
GAME:1DFF ; End of function COLP02
GAME:1DFF
GAME:1E02
GAME:1E02 ; =============== S U B R O U T I N E =======================================
GAME:1E02
GAME:1E02 ; Fixup Altitude display to make sure that all digits are correct. This can be necessary, because the last digit can over/underflow when in/decremented somewhere else.
GAME:1E02
GAME:1E02 ALT__ALTITUDE_DISPLAY_FIXUP:            ; CODE XREF: COMMON+5A↑p
GAME:1E02                 LDA     SC_STATUS_LINE.line_1.altitude_digit_1
GAME:1E05                 CMP     #_COLON|_C_BLUE
GAME:1E07                 BEQ     KG
GAME:1E09                 CMP     #_0|_C_BLUE
GAME:1E0B                 BCC     KI
GAME:1E0D                 RTS
GAME:1E0E ; ---------------------------------------------------------------------------
GAME:1E0E
GAME:1E0E KG:                                     ; CODE XREF: ALT__ALTITUDE_DISPLAY_FIXUP+5↑j
GAME:1E0E                 LDA     #_0|_C_BLUE
GAME:1E10                 STA     SC_STATUS_LINE.line_1.altitude_digit_1
GAME:1E13                 INC     SC_STATUS_LINE.line_1.altitude_digit_10
GAME:1E16                 LDA     SC_STATUS_LINE.line_1.altitude_digit_10
GAME:1E19                 CMP     #_COLON|_C_BLUE
GAME:1E1B                 BEQ     KH
GAME:1E1D                 RTS
GAME:1E1E ; ---------------------------------------------------------------------------
GAME:1E1E
GAME:1E1E KH:                                     ; CODE XREF: ALT__ALTITUDE_DISPLAY_FIXUP+19↑j
GAME:1E1E                 LDA     #_0|_C_BLUE
GAME:1E20                 STA     SC_STATUS_LINE.line_1.altitude_digit_10
GAME:1E23                 LDA     #_1|_C_BLUE
GAME:1E25                 STA     SC_STATUS_LINE.line_1.altitude_digit_100
GAME:1E28                 RTS
GAME:1E29 ; ---------------------------------------------------------------------------
GAME:1E29
GAME:1E29 KI:                                     ; CODE XREF: ALT__ALTITUDE_DISPLAY_FIXUP+9↑j
GAME:1E29                 CLC
GAME:1E2A                 ADC     #10
GAME:1E2C                 STA     SC_STATUS_LINE.line_1.altitude_digit_1
GAME:1E2F                 DEC     SC_STATUS_LINE.line_1.altitude_digit_10
GAME:1E32                 LDA     SC_STATUS_LINE.line_1.altitude_digit_10
GAME:1E35                 CMP     #_QUESTIONMARK|_C_BLUE
GAME:1E37                 BEQ     KJ
GAME:1E39                 RTS
GAME:1E3A ; ---------------------------------------------------------------------------
GAME:1E3A
GAME:1E3A KJ:                                     ; CODE XREF: ALT__ALTITUDE_DISPLAY_FIXUP+35↑j
GAME:1E3A                 LDA     #_9|_C_BLUE
GAME:1E3C                 STA     SC_STATUS_LINE.line_1.altitude_digit_10
GAME:1E3F                 LDA     #_0|_C_BLUE
GAME:1E41                 STA     SC_STATUS_LINE.line_1.altitude_digit_100
GAME:1E44                 RTS
GAME:1E44 ; End of function ALT__ALTITUDE_DISPLAY_FIXUP
GAME:1E44
GAME:1E45
GAME:1E45 ; =============== S U B R O U T I N E =======================================
GAME:1E45
GAME:1E45 ; Draw a bridge over water
GAME:1E45
GAME:1E45 DRBR__DRAW_BRIDGE:                      ; CODE XREF: SRT+3↑p
GAME:1E45
GAME:1E45 ; FUNCTION CHUNK AT GAME:1EF7 SIZE 000000D4 BYTES
GAME:1E45
GAME:1E45                 LDA     byte_FE
GAME:1E47                 BEQ     FJ
GAME:1E49
GAME:1E49 GQ:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+7↓j
GAME:1E49                 RTS                     ; => Return
GAME:1E4A ; ---------------------------------------------------------------------------
GAME:1E4A
GAME:1E4A FJ:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+2↑j
GAME:1E4A                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:1E4C                 BNE     GQ              ; => Return
GAME:1E4E
GAME:1E4E LV:                                     ; Right position of the river
GAME:1E4E                 LDY     RIVER_RIGHT_X_POS
GAME:1E50                 CPY     #54
GAME:1E52                 BCS     FL
GAME:1E54                 CPY     #34
GAME:1E56                 BCC     FM
GAME:1E58                 LDA     MAP_RIVER_DIR   ; Direction of the river
GAME:1E5B                 CMP     #DIR_RIVER_STRAIGHT
GAME:1E5D                 BEQ     FN
GAME:1E5F                 RTS
GAME:1E60 ; ---------------------------------------------------------------------------
GAME:1E60
GAME:1E60 FL:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+D↑j
GAME:1E60                 LDA     #3
GAME:1E62                 STA     byte_610
GAME:1E65                 RTS
GAME:1E66 ; ---------------------------------------------------------------------------
GAME:1E66
GAME:1E66 FM:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+11↑j
GAME:1E66                 LDA     #4
GAME:1E68                 STA     byte_610
GAME:1E6B                 RTS
GAME:1E6C ; ---------------------------------------------------------------------------
GAME:1E6C
GAME:1E6C FN:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+18↑j
GAME:1E6C                 DEC     RIVER_BRIDGE_ROW
GAME:1E6E                 LDA     byte_61B
GAME:1E71                 BEQ     GU
GAME:1E73                 LDA     RIVER_BRIDGE_ROW
GAME:1E75                 CMP     #2
GAME:1E77                 BNE     GU
GAME:1E79                 DEC     RIVER_BRIDGE_ROW
GAME:1E7B
GAME:1E7B GU:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+2C↑j
GAME:1E7B                                         ; DRBR__DRAW_BRIDGE+32↑j
GAME:1E7B                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1E7D                 LDA     RIVER_BRIDGE_ROW
GAME:1E7F                 BEQ     GL
GAME:1E81                 CMP     #1
GAME:1E83                 BEQ     FO
GAME:1E85                 CMP     #2
GAME:1E87                 BEQ     FP
GAME:1E89                 CMP     #3
GAME:1E8B                 BEQ     JI
GAME:1E8D                 CMP     #4
GAME:1E8F                 BEQ     FR
GAME:1E91                 CMP     #5
GAME:1E93                 BEQ     FS
GAME:1E95                 LDA     #0
GAME:1E97                 STA     byte_B6
GAME:1E99                 LDA     #8
GAME:1E9B                 STA     MAP_RIVER_LENGTH ; Length of a certain river feature to continue (straight, turn left/right)
GAME:1E9E                 RTS
GAME:1E9F ; ---------------------------------------------------------------------------
GAME:1E9F
GAME:1E9F FP:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+42↑j
GAME:1E9F                 JMP     GS
GAME:1EA2 ; ---------------------------------------------------------------------------
GAME:1EA2
GAME:1EA2 JI:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+46↑j
GAME:1EA2                 JMP     JH
GAME:1EA5 ; ---------------------------------------------------------------------------
GAME:1EA5
GAME:1EA5 FO:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+3E↑j
GAME:1EA5                 JMP     FQ
GAME:1EA8 ; ---------------------------------------------------------------------------
GAME:1EA8
GAME:1EA8 GL:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+3A↑j
GAME:1EA8                 LDA     #255
GAME:1EAA                 STA     byte_B6
GAME:1EAC                 LDA     #2
GAME:1EAE                 STA     byte_6F2
GAME:1EB1                 LDA     RANDOM          ; Random Number Generator
GAME:1EB4                 ORA     #32
GAME:1EB6                 AND     #63
GAME:1EB8                 STA     byte_FE
GAME:1EBA                 LDA     byte_C4
GAME:1EBC                 CMP     #5
GAME:1EBE                 BNE     LX              ; => Return
GAME:1EC0                 LDA     #PRIMARY_TARGET_SUBTYPE_BRIDGE
GAME:1EC2                 STA     VAR_PRIMARY_TARGET_SUBTYPE
GAME:1EC5                 LDY     #22
GAME:1EC7                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1EC9                 SEC
GAME:1ECA                 SBC     #1
GAME:1ECC                 JMP     GNSGHT
GAME:1ECF ; ---------------------------------------------------------------------------
GAME:1ECF
GAME:1ECF LX:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+79↑j
GAME:1ECF                 RTS                     ; => Return
GAME:1ED0 ; ---------------------------------------------------------------------------
GAME:1ED0
GAME:1ED0 FS:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+4E↑j
GAME:1ED0                 INY
GAME:1ED1                 INY
GAME:1ED2                 LDX     #25
GAME:1ED4
GAME:1ED4 FT:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+96↓j
GAME:1ED4                 LDA     BR1-1,X
GAME:1ED7                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1ED9                 DEY
GAME:1EDA                 DEX
GAME:1EDB                 BNE     FT
GAME:1EDD                 STX     byte_BF
GAME:1EDF                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1EE1                 CLC
GAME:1EE2                 ADC     #9
GAME:1EE2 ; End of function DRBR__DRAW_BRIDGE
GAME:1EE2
GAME:1EE4
GAME:1EE4 ; =============== S U B R O U T I N E =======================================
GAME:1EE4
GAME:1EE4
GAME:1EE4 A2:                                     ; CODE XREF: DRBT__DRAW_BOAT+32↑p
GAME:1EE4                                         ; B5+B↓p ...
GAME:1EE4                 ASL     A
GAME:1EE5                 ASL     A
GAME:1EE6                 STA     MISSLE_3_X_POS2
GAME:1EE9                 STA     byte_661
GAME:1EEC                 LDA     #50
GAME:1EEE                 STA     byte_664
GAME:1EF1                 LDA     #45
GAME:1EF3                 STA     byte_65D
GAME:1EF6                 RTS
GAME:1EF6 ; End of function A2
GAME:1EF6
GAME:1EF7 ; ---------------------------------------------------------------------------
GAME:1EF7 ; START OF FUNCTION CHUNK FOR DRBR__DRAW_BRIDGE
GAME:1EF7
GAME:1EF7 FR:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+4A↑j
GAME:1EF7                 JSR     RND7            ; Return random number 3 or 7 into register X
GAME:1EFA                 STX     byte_617
GAME:1EFD                 LDA     #L_RUNWAY_CENTER|L_C_1
GAME:1EFF
GAME:1EFF FW:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+BE↓j
GAME:1EFF                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F01                 INY
GAME:1F02                 DEX
GAME:1F03                 BNE     FW
GAME:1F05                 JSR     RND7            ; Return random number 3 or 7 into register X
GAME:1F08                 STX     byte_618
GAME:1F0B                 LDA     #L_BRIDGE_M|L_C_1
GAME:1F0D
GAME:1F0D FY:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+D0↓j
GAME:1F0D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F0F                 INY
GAME:1F10                 CPY     #64
GAME:1F12                 BEQ     FX
GAME:1F14                 DEX
GAME:1F15                 BNE     FY
GAME:1F17                 LDA     #L_BRIDGE_N|L_C_1
GAME:1F19
GAME:1F19 FZ:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+D9↓j
GAME:1F19                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F1B                 INY
GAME:1F1C                 CPY     #64
GAME:1F1E                 BNE     FZ
GAME:1F20
GAME:1F20 FX:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+CD↑j
GAME:1F20                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1F22                 DEY
GAME:1F23                 LDX     #$15
GAME:1F25
GAME:1F25 GA:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+E7↓j
GAME:1F25                 LDA     BR2-1,X
GAME:1F28                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F2A                 DEY
GAME:1F2B                 DEX
GAME:1F2C                 BNE     GA
GAME:1F2E                 JSR     RND7            ; Return random number 3 or 7 into register X
GAME:1F31                 STX     byte_619
GAME:1F34                 LDA     #L_RUNWAY_CENTER|L_C_1
GAME:1F36
GAME:1F36 GB:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+F5↓j
GAME:1F36                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F38                 DEY
GAME:1F39                 DEX
GAME:1F3A                 BNE     GB
GAME:1F3C                 JSR     RND7            ; Return random number 3 or 7 into register X
GAME:1F3F                 STX     byte_61A
GAME:1F42                 LDA     #L_BRIDGE_M|L_C_1
GAME:1F44
GAME:1F44 GC:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+105↓j
GAME:1F44                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F46                 DEY
GAME:1F47                 BEQ     GD              ; => Return
GAME:1F49                 DEX
GAME:1F4A                 BNE     GC
GAME:1F4C                 LDA     #L_BRIDGE_N|L_C_1
GAME:1F4E
GAME:1F4E GE:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+10C↓j
GAME:1F4E                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F50                 DEY
GAME:1F51                 BNE     GE
GAME:1F53
GAME:1F53 GD:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+102↑j
GAME:1F53                 RTS                     ; => Return
GAME:1F54 ; ---------------------------------------------------------------------------
GAME:1F54
GAME:1F54 FQ:                                     ; CODE XREF: DRBR__DRAW_BRIDGE:FO↑j
GAME:1F54                 TYA
GAME:1F55                 CLC
GAME:1F56                 ADC     byte_617
GAME:1F59                 TAY
GAME:1F5A                 LDA     #L_BRIDGE_K|L_C_1
GAME:1F5C                 LDX     byte_618
GAME:1F5F
GAME:1F5F GF:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+122↓j
GAME:1F5F                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F61                 INY
GAME:1F62                 CPY     #65
GAME:1F64                 BEQ     GR
GAME:1F66                 DEX
GAME:1F67                 BNE     GF
GAME:1F69                 LDA     #L_BRIDGE_L|L_C_1
GAME:1F6B
GAME:1F6B GG:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+12B↓j
GAME:1F6B                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F6D                 INY
GAME:1F6E                 CPY     #65
GAME:1F70                 BNE     GG
GAME:1F72
GAME:1F72 GR:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+11F↑j
GAME:1F72                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1F74                 LDX     #21
GAME:1F76
GAME:1F76 GH:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+138↓j
GAME:1F76                 DEY
GAME:1F77                 LDA     BR3-1,X
GAME:1F7A                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F7C                 DEX
GAME:1F7D                 BNE     GH
GAME:1F7F                 TYA
GAME:1F80                 SEC
GAME:1F81                 SBC     byte_619
GAME:1F84                 TAY
GAME:1F85                 LDX     byte_61A
GAME:1F88                 LDA     #L_BRIDGE_K|L_C_1
GAME:1F8A
GAME:1F8A GJ:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+14B↓j
GAME:1F8A                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F8C                 DEY
GAME:1F8D                 BEQ     GI              ; => Return
GAME:1F8F                 DEX
GAME:1F90                 BNE     GJ
GAME:1F92                 LDA     #L_BRIDGE_L|L_C_1
GAME:1F94
GAME:1F94 GK:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+152↓j
GAME:1F94                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1F96                 DEY
GAME:1F97                 BNE     GK
GAME:1F99
GAME:1F99 GI:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+148↑j
GAME:1F99                 RTS                     ; => Return
GAME:1F9A ; ---------------------------------------------------------------------------
GAME:1F9A
GAME:1F9A GS:                                     ; CODE XREF: DRBR__DRAW_BRIDGE:FP↑j
GAME:1F9A                                         ; DRBR__DRAW_BRIDGE+16E↓j ...
GAME:1F9A                 LDY     #64
GAME:1F9C                 LDA     #L_RUNWAY_CENTER|L_C_1
GAME:1F9E
GAME:1F9E GT:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+15C↓j
GAME:1F9E                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1FA0                 DEY
GAME:1FA1                 BNE     GT
GAME:1FA3                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:1FA5                 DEY
GAME:1FA6                 LDX     #20
GAME:1FA8                 LDA     #L_SKYSCRAPER_B_5B|L_C_1
GAME:1FAA
GAME:1FAA T4:                                     ; CODE XREF: DRBR__DRAW_BRIDGE+169↓j
GAME:1FAA                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:1FAC                 DEY
GAME:1FAD                 DEX
GAME:1FAE                 BNE     T4
GAME:1FB0                 RTS
GAME:1FB1 ; ---------------------------------------------------------------------------
GAME:1FB1
GAME:1FB1 JH:                                     ; CODE XREF: DRBR__DRAW_BRIDGE:JI↑j
GAME:1FB1                 LDA     byte_FD
GAME:1FB3                 BNE     GS
GAME:1FB5                 LDA     RANDOM          ; Random Number Generator
GAME:1FB8                 AND     #7
GAME:1FBA                 BEQ     GS
GAME:1FBC                 LDA     #UNKNOWNS_STATE_6
GAME:1FBE                 STA     VAR_UNKNOWN_STATE
GAME:1FC1                 STA     VBL_DRAW_DOWN_COUNTER ; VBL: 30Hz down counter whenever the level scrolls a pixel
GAME:1FC4                 LDA     #1
GAME:1FC6                 STA     byte_FD
GAME:1FC8                 JMP     GS
GAME:1FC8 ; END OF FUNCTION CHUNK FOR DRBR__DRAW_BRIDGE
GAME:1FCB
GAME:1FCB ; =============== S U B R O U T I N E =======================================
GAME:1FCB
GAME:1FCB ; Return random number 3 or 7 into register X
GAME:1FCB
GAME:1FCB RND7:                                   ; CODE XREF: DRBR__DRAW_BRIDGE:FR↑p
GAME:1FCB                                         ; DRBR__DRAW_BRIDGE+C0↑p ...
GAME:1FCB                 LDA     RANDOM          ; Random Number Generator
GAME:1FCE                 AND     #7
GAME:1FD0                 ORA     #3
GAME:1FD2                 TAX
GAME:1FD3                 RTS
GAME:1FD3 ; End of function RND7
GAME:1FD3
GAME:1FD4
GAME:1FD4 ; =============== S U B R O U T I N E =======================================
GAME:1FD4
GAME:1FD4 ; Change the speed of the plane up/down based on the joystick
GAME:1FD4
GAME:1FD4 SPD__SPEED_CHANGE:                      ; CODE XREF: SRT+30↑p
GAME:1FD4                                         ; TAKOF__TAKEOFF_LOOP+25↓p ...
GAME:1FD4                 LDA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:1FD7                 BEQ     PD
GAME:1FD9                 LDA     STICK0          ; JOYSTICK 0 RAM CELL
GAME:1FDC                 CMP     #JOYSTICK_UP_RIGHT
GAME:1FDE                 BEQ     KL              ; Increment speed by 1, if not already 300
GAME:1FE0
GAME:1FE0 PD:                                     ; CODE XREF: SPD__SPEED_CHANGE+3↑j
GAME:1FE0                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:1FE3                 CMP     #_2|_C_BLUE
GAME:1FE5                 BCC     KT              ; Increment speed by 1
GAME:1FE7                 CMP     #_3|_C_BLUE
GAME:1FE9                 BEQ     KN              ; Decrement speed by 1 with little delay
GAME:1FEB                 LDA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:1FEE                 CMP     #_1|_C_BLUE
GAME:1FF0                 BCS     KN              ; Decrement speed by 1 with little delay
GAME:1FF2                 LDA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:1FF5                 CMP     #_1|_C_BLUE
GAME:1FF7                 BCS     KN              ; Decrement speed by 1 with little delay
GAME:1FF9
GAME:1FF9 KO:                                     ; CODE XREF: SPD__SPEED_CHANGE+2B↓j
GAME:1FF9                                         ; SPD__SPEED_CHANGE+30↓j ...
GAME:1FF9                 RTS                     ; => Return
GAME:1FFA ; ---------------------------------------------------------------------------
GAME:1FFA
GAME:1FFA KL:                                     ; CODE XREF: SPD__SPEED_CHANGE+A↑j
GAME:1FFA                 LDA     SC_STATUS_LINE.line_1.speed_digit_100 ; Increment speed by 1, if not already 300
GAME:1FFD                 CMP     #_3|_C_BLUE     ; Speed already 300?
GAME:1FFF                 BEQ     KO              ; => Return
GAME:2001
GAME:2001 KM:                                     ; Increment speed by 1 with little delay
GAME:2001                 DEC     SPEED_DELAY_COUNTER
GAME:2004                 BNE     KO              ; => Return
GAME:2006                 LDA     #2
GAME:2008                 STA     SPEED_DELAY_COUNTER ; Limit speed increment/decrement changes with this counter
GAME:200B
GAME:200B KT:                                     ; CODE XREF: SPD__SPEED_CHANGE+11↑j
GAME:200B                 INC     SC_STATUS_LINE.line_1.speed_digit_1 ; Increment speed by 1
GAME:200E                 LDA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:2011                 CMP     #ATASCI_9+1
GAME:2013                 BEQ     KP
GAME:2015                 RTS
GAME:2016 ; ---------------------------------------------------------------------------
GAME:2016
GAME:2016 KP:                                     ; CODE XREF: SPD__SPEED_CHANGE+3F↑j
GAME:2016                 LDA     #_0|_C_BLUE
GAME:2018                 STA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:201B                 INC     SC_STATUS_LINE.line_1.speed_digit_10
GAME:201E                 LDA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:2021                 CMP     #ATASCI_9+1
GAME:2023                 BEQ     KQ
GAME:2025                 RTS
GAME:2026 ; ---------------------------------------------------------------------------
GAME:2026
GAME:2026 KQ:                                     ; CODE XREF: SPD__SPEED_CHANGE+4F↑j
GAME:2026                 LDA     #_0|_C_BLUE
GAME:2028                 STA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:202B                 INC     SC_STATUS_LINE.line_1.speed_digit_100
GAME:202E                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:2031                 STA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:2034                 RTS
GAME:2035 ; ---------------------------------------------------------------------------
GAME:2035
GAME:2035 KN:                                     ; CODE XREF: SPD__SPEED_CHANGE+15↑j
GAME:2035                                         ; SPD__SPEED_CHANGE+1C↑j ...
GAME:2035                 DEC     SPEED_DELAY_COUNTER ; Decrement speed by 1 with little delay
GAME:2038                 BNE     KO              ; => Return
GAME:203A                 LDA     #2
GAME:203C                 STA     SPEED_DELAY_COUNTER ; Limit speed increment/decrement changes with this counter
GAME:203F
GAME:203F MM:                                     ; CODE XREF: STOPL:ML↓j
GAME:203F                 DEC     SC_STATUS_LINE.line_1.speed_digit_1 ; Decrement speed by 1
GAME:2042                 LDA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:2045                 CMP     #ATASCI_0-1
GAME:2047                 BEQ     KR
GAME:2049                 RTS
GAME:204A ; ---------------------------------------------------------------------------
GAME:204A
GAME:204A KR:                                     ; CODE XREF: SPD__SPEED_CHANGE+73↑j
GAME:204A                 LDA     #_9|_C_BLUE
GAME:204C                 STA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:204F                 DEC     SC_STATUS_LINE.line_1.speed_digit_10
GAME:2052                 LDA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:2055                 CMP     #ATASCI_0-1
GAME:2057                 BEQ     KS
GAME:2059                 RTS
GAME:205A ; ---------------------------------------------------------------------------
GAME:205A
GAME:205A KS:                                     ; CODE XREF: SPD__SPEED_CHANGE+83↑j
GAME:205A                 LDA     #_9|_C_BLUE
GAME:205C                 STA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:205F                 DEC     SC_STATUS_LINE.line_1.speed_digit_100
GAME:2062                 RTS
GAME:2062 ; End of function SPD__SPEED_CHANGE
GAME:2062
GAME:2063
GAME:2063 ; =============== S U B R O U T I N E =======================================
GAME:2063
GAME:2063 ; When enabled, apply gravity to the plane
GAME:2063
GAME:2063 GRAV__APPLY_GRAVITY:                    ; CODE XREF: COMMON+42↑p
GAME:2063                 LDA     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:2066                 BEQ     FK              ; => Return
GAME:2068                 LDA     STICK0          ; JOYSTICK 0 RAM CELL
GAME:206B                 CMP     DIRECTION_A
GAME:206E                 BEQ     FK              ; => Return
GAME:2070                 CMP     DIRECTION_B
GAME:2073                 BNE     HD
GAME:2075
GAME:2075 FK:                                     ; CODE XREF: GRAV__APPLY_GRAVITY+3↑j
GAME:2075                                         ; GRAV__APPLY_GRAVITY+B↑j ...
GAME:2075                 RTS                     ; => Return
GAME:2076 ; ---------------------------------------------------------------------------
GAME:2076
GAME:2076 HD:                                     ; CODE XREF: GRAV__APPLY_GRAVITY+10↑j
GAME:2076                 DEC     GRAVITY_COUNT   ; When enabled, this counter pulls the plane down every 40 ticks
GAME:2079                 BNE     FK              ; => Return
GAME:207B                 LDA     #40
GAME:207D                 STA     GRAVITY_COUNT   ; When enabled, this counter pulls the plane down every 40 ticks
GAME:2080                 JMP     KK              ; Move Plane down, if possible
GAME:2080 ; End of function GRAV__APPLY_GRAVITY
GAME:2080
GAME:2083
GAME:2083 ; =============== S U B R O U T I N E =======================================
GAME:2083
GAME:2083
GAME:2083 PLFWD:                                  ; CODE XREF: SRT+F↑p
GAME:2083                                         ; CITY+6↓p
GAME:2083
GAME:2083 ; FUNCTION CHUNK AT GAME:2113 SIZE 000000B7 BYTES
GAME:2083 ; FUNCTION CHUNK AT GAME:21CA SIZE 00000012 BYTES
GAME:2083 ; FUNCTION CHUNK AT GAME:21ED SIZE 0000002A BYTES
GAME:2083
GAME:2083                 LDA     byte_FD
GAME:2085                 CMP     #3
GAME:2087                 BNE     LM              ; => Return
GAME:2089                 LDA     VAR_UNKNOWN_STATE
GAME:208C                 CMP     #UNKNOWNS_STATE_10
GAME:208E                 BEQ     LF
GAME:2090                 CMP     #UNKNOWNS_STATE_11
GAME:2092                 BEQ     LF
GAME:2094                 CMP     #UNKNOWNS_STATE_7
GAME:2096                 BEQ     KW
GAME:2098                 CMP     #UNKNOWNS_STATE_8
GAME:209A                 BEQ     KD
GAME:209C                 JMP     LN
GAME:209F ; ---------------------------------------------------------------------------
GAME:209F
GAME:209F KW:                                     ; CODE XREF: PLFWD+13↑j
GAME:209F                 JMP     LQ
GAME:20A2 ; ---------------------------------------------------------------------------
GAME:20A2
GAME:20A2 KD:                                     ; CODE XREF: PLFWD+17↑j
GAME:20A2                 LDA     byte_C4
GAME:20A4                 BNE     P4
GAME:20A6                 LDA     #COLOR_INTENSITY_12|COLOR_DARK_PURPLE
GAME:20A8                 STA     PCOLR2          ; P2 COLOR
GAME:20AB                 DEC     byte_C4
GAME:20AD                 JMP     P5
GAME:20B0 ; ---------------------------------------------------------------------------
GAME:20B0
GAME:20B0 P4:                                     ; CODE XREF: PLFWD+21↑j
GAME:20B0                 LDA     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:20B2                 STA     PCOLR2          ; P2 COLOR
GAME:20B5
GAME:20B5 P5:                                     ; CODE XREF: PLFWD+2A↑j
GAME:20B5                 LDA     RANDOM          ; Random Number Generator
GAME:20B8                 AND     #11111b
GAME:20BA                 ADC     #170
GAME:20BC                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:20BF                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:20C2                 STA     ENEMY_X_POS     ; Enemy X position
GAME:20C4
GAME:20C4                 LDY     #15
GAME:20C6                 STY     byte_C2
GAME:20C8                 STY     ENEMY_Y_POS     ; Enemy Y position
GAME:20CA                 LDX     #10
GAME:20CC
GAME:20CC KU:                                     ; CODE XREF: PLFWD+51↓j
GAME:20CC                 LDA     SHDW-1,X        ; enemy plane shadow flying towards player
GAME:20CF                 STA     P3+9,Y          ; Enemy (second color)
GAME:20D2                 DEY
GAME:20D3                 DEX
GAME:20D4                 BNE     KU
GAME:20D6                 INC     VAR_UNKNOWN_STATE
GAME:20D9                 LDA     RANDOM          ; Random Number Generator
GAME:20DC                 AND     #11111b
GAME:20DE                 ORA     #$C
GAME:20E0                 ADC     #3
GAME:20E2                 STA     byte_62F
GAME:20E5                 RTS
GAME:20E5 ; End of function PLFWD
GAME:20E5
GAME:20E6
GAME:20E6 ; =============== S U B R O U T I N E =======================================
GAME:20E6
GAME:20E6
GAME:20E6 KV:                                     ; CODE XREF: L6:OY↓j
GAME:20E6                 LDA     #UNKNOWNS_STATE_7
GAME:20E8                 STA     VAR_UNKNOWN_STATE
GAME:20EB                 LDA     #3
GAME:20ED                 STA     byte_FD
GAME:20EF
GAME:20EF LM:                                     ; CODE XREF: PLFWD+4↑j
GAME:20EF                 RTS                     ; => Return
GAME:20EF ; End of function KV
GAME:20EF
GAME:20F0
GAME:20F0 ; =============== S U B R O U T I N E =======================================
GAME:20F0
GAME:20F0
GAME:20F0 LF:                                     ; CODE XREF: PLFWD+B↑j
GAME:20F0                                         ; PLFWD+F↑j
GAME:20F0
GAME:20F0 ; FUNCTION CHUNK AT GAME:2113 SIZE 000000B7 BYTES
GAME:20F0
GAME:20F0                 JSR     XP2
GAME:20F3                 JSR     COLP02
GAME:20F6                 JSR     TRIGF
GAME:20F9                 JSR     FTURN
GAME:20FC                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:20FE                 CPY     #186
GAME:2100                 BCC     LG
GAME:2100 ; End of function LF
GAME:2100
GAME:2102
GAME:2102 ; =============== S U B R O U T I N E =======================================
GAME:2102
GAME:2102
GAME:2102 UZ:                                     ; CODE XREF: PLFWD+9D↓j
GAME:2102                                         ; XP2+4D↓p
GAME:2102                 LDA     #0
GAME:2104                 LDX     #15
GAME:2106
GAME:2106 LH:                                     ; CODE XREF: UZ+C↓j
GAME:2106                 STA     P2+$C,Y         ; Enemy (first color)
GAME:2109                 STA     P3+$B,Y         ; Enemy (second color)
GAME:210C                 DEY
GAME:210D                 DEX
GAME:210E                 BNE     LH
GAME:2110                 STA     byte_FD
GAME:2112                 RTS
GAME:2112 ; End of function UZ
GAME:2112
GAME:2113 ; ---------------------------------------------------------------------------
GAME:2113 ; START OF FUNCTION CHUNK FOR PLFWD
GAME:2113 ;   ADDITIONAL PARENT FUNCTION LF
GAME:2113
GAME:2113 LG:                                     ; CODE XREF: LF+10↑j
GAME:2113                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:2115                 CMP     #30
GAME:2117                 BCS     loc_2123
GAME:2119                 LDY     byte_C2
GAME:211B                 JSR     LD
GAME:211E                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:2120                 JMP     UZ
GAME:2123 ; ---------------------------------------------------------------------------
GAME:2123
GAME:2123 loc_2123:                               ; CODE XREF: PLFWD+94↑j
GAME:2123                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:2126                 CMP     #TURN_MODE_RIGHT
GAME:2128                 BEQ     loc_215A
GAME:212A                 LDX     #13
GAME:212C
GAME:212C loc_212C:                               ; CODE XREF: PLFWD+B7↓j
GAME:212C                 LDA     P2+9,Y          ; Enemy (first color)
GAME:212F                 STA     P2+$B,Y         ; Enemy (first color)
GAME:2132                 LDA     P3+9,Y          ; Enemy (second color)
GAME:2135                 STA     P3+$B,Y         ; Enemy (second color)
GAME:2138                 DEY
GAME:2139                 DEX
GAME:213A                 BNE     loc_212C
GAME:213C                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:213E                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:2140                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:2143                 BNE     loc_215A
GAME:2145                 DEC     byte_637
GAME:2148                 BNE     loc_214F
GAME:214A                 LDA     #4
GAME:214C                 STA     byte_637
GAME:214F
GAME:214F loc_214F:                               ; CODE XREF: PLFWD+C5↑j
GAME:214F                 LDA     byte_637
GAME:2152                 CMP     #4
GAME:2154                 BEQ     loc_216A
GAME:2156                 CMP     #2
GAME:2158                 BEQ     loc_2179
GAME:215A
GAME:215A loc_215A:                               ; CODE XREF: PLFWD+A5↑j
GAME:215A                                         ; PLFWD+C0↑j ...
GAME:215A                 LDA     VAR_UNKNOWN_STATE
GAME:215D                 CMP     #UNKNOWNS_STATE_11
GAME:215F                 BEQ     LP
GAME:2161                 JSR     LINE            ; Check line of sight: enemy plane at the same altitude?
GAME:2164                 JSR     COLM02          ; If Player is at the same altitude as the enemey plane, check if that one got hit
GAME:2167                 JMP     loc_21AD
GAME:216A ; ---------------------------------------------------------------------------
GAME:216A
GAME:216A loc_216A:                               ; CODE XREF: PLFWD+D1↑j
GAME:216A                 LDX     #4
GAME:216C
GAME:216C loc_216C:                               ; CODE XREF: PLFWD+F1↓j
GAME:216C                 LDA     PROPIM-1,X      ; enemy plane propeller animations (0-3 and 4-7)
GAME:216F                 STA     P2+$17,Y        ; Enemy (first color)
GAME:2172                 DEY
GAME:2173                 DEX
GAME:2174                 BNE     loc_216C
GAME:2176                 JMP     loc_215A
GAME:2179 ; ---------------------------------------------------------------------------
GAME:2179
GAME:2179 loc_2179:                               ; CODE XREF: PLFWD+D5↑j
GAME:2179                 LDX     #4
GAME:217B
GAME:217B loc_217B:                               ; CODE XREF: PLFWD+100↓j
GAME:217B                 LDA     PROPIM+3,X      ; enemy plane propeller animations (0-3 and 4-7)
GAME:217E                 STA     P2+$17,Y        ; Enemy (first color)
GAME:2181                 DEY
GAME:2182                 DEX
GAME:2183                 BNE     loc_217B
GAME:2185                 JMP     loc_215A
GAME:2188 ; ---------------------------------------------------------------------------
GAME:2188
GAME:2188 LN:                                     ; CODE XREF: PLFWD+19↑j
GAME:2188                 DEC     byte_62F
GAME:218B                 BNE     loc_21AD
GAME:218D
GAME:218D                 INC     VAR_UNKNOWN_STATE
GAME:2190                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:2192                 LDA     #10000b
GAME:2194                 STA     P3+4,Y          ; Enemy (second color)
GAME:2197                 LDA     #1000000b
GAME:2199                 STA     P3+5,Y          ; Enemy (second color)
GAME:219C                 LDA     #1100000b
GAME:219E                 STA     P3+6,Y          ; Enemy (second color)
GAME:21A1                 LDX     #10
GAME:21A3
GAME:21A3 loc_21A3:                               ; CODE XREF: PLFWD+128↓j
GAME:21A3                 LDA     PLANE1-1,X      ; enemy plane flying towards player
GAME:21A6                 STA     P2+9,Y          ; Enemy (first color)
GAME:21A9                 DEY
GAME:21AA                 DEX
GAME:21AB                 BNE     loc_21A3
GAME:21AD
GAME:21AD loc_21AD:                               ; CODE XREF: PLFWD+E4↑j
GAME:21AD                                         ; PLFWD+108↑j
GAME:21AD                 LDY     byte_C2
GAME:21AF                 CPY     #190
GAME:21B1                 BCS     LD
GAME:21B3                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:21B6                 CMP     #TURN_MODE_RIGHT
GAME:21B8                 BEQ     loc_21D1
GAME:21BA                 LDX     #10
GAME:21BC
GAME:21BC loc_21BC:                               ; CODE XREF: PLFWD+141↓j
GAME:21BC                 LDA     P3+7,Y          ; Enemy (second color)
GAME:21BF                 STA     P3+9,Y          ; Enemy (second color)
GAME:21C2                 DEY
GAME:21C3                 DEX
GAME:21C4                 BNE     loc_21BC
GAME:21C6                 INC     byte_C2
GAME:21C8                 INC     byte_C2
GAME:21C8 ; END OF FUNCTION CHUNK FOR PLFWD
GAME:21CA ; START OF FUNCTION CHUNK FOR LD
GAME:21CA ;   ADDITIONAL PARENT FUNCTION PLFWD
GAME:21CA
GAME:21CA LP:                                     ; CODE XREF: PLFWD+DC↑j
GAME:21CA                                         ; LD+E↓j
GAME:21CA                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:21CD                 CMP     #TURN_MODE_LEFT
GAME:21CF                 BEQ     locret_21DB     ; => Return
GAME:21D1
GAME:21D1 loc_21D1:                               ; CODE XREF: PLFWD+135↑j
GAME:21D1                 DEC     ENEMY_X_POS     ; Enemy X position
GAME:21D3                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:21D5                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:21D8                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:21DB
GAME:21DB locret_21DB:                            ; CODE XREF: LD-D↑j
GAME:21DB                 RTS                     ; => Return
GAME:21DB ; END OF FUNCTION CHUNK FOR LD
GAME:21DC
GAME:21DC ; =============== S U B R O U T I N E =======================================
GAME:21DC
GAME:21DC
GAME:21DC LD:                                     ; CODE XREF: PLFWD+98↑p
GAME:21DC                                         ; PLFWD+12E↑j
GAME:21DC
GAME:21DC ; FUNCTION CHUNK AT GAME:21CA SIZE 00000012 BYTES
GAME:21DC
GAME:21DC                 LDA     #0
GAME:21DE                 LDX     #8
GAME:21E0
GAME:21E0 LE:                                     ; CODE XREF: LD+9↓j
GAME:21E0                 STA     P3+7,Y          ; Enemy (second color)
GAME:21E3                 DEY
GAME:21E4                 DEX
GAME:21E5                 BNE     LE
GAME:21E7                 INC     VAR_UNKNOWN_STATE
GAME:21EA                 JMP     LP
GAME:21EA ; End of function LD
GAME:21EA
GAME:21ED ; ---------------------------------------------------------------------------
GAME:21ED ; START OF FUNCTION CHUNK FOR PLFWD
GAME:21ED
GAME:21ED LQ:                                     ; CODE XREF: PLFWD:KW↑j
GAME:21ED                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:21EF                 BEQ     loc_21F2
GAME:21F1                 RTS
GAME:21F2 ; ---------------------------------------------------------------------------
GAME:21F2
GAME:21F2 loc_21F2:                               ; CODE XREF: PLFWD+16C↑j
GAME:21F2                 DEC     byte_636
GAME:21F5                 BNE     loc_21FB
GAME:21F7                 INC     VAR_UNKNOWN_STATE
GAME:21FA                 RTS
GAME:21FB ; ---------------------------------------------------------------------------
GAME:21FB
GAME:21FB loc_21FB:                               ; CODE XREF: PLFWD+172↑j
GAME:21FB                 LDA     byte_636
GAME:21FE                 CMP     #13
GAME:2200                 BCC     NF              ; => Return
GAME:2202                 LSR     A
GAME:2203                 BCC     loc_220E
GAME:2205                 LDA     #_SPACE|_C_BLACK
GAME:2207                 STA     SC_STATUS_LINE.line_1.enemy_plane_warning ; "P" character
GAME:220A                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:220D                 RTS
GAME:220E ; ---------------------------------------------------------------------------
GAME:220E
GAME:220E loc_220E:                               ; CODE XREF: PLFWD+180↑j
GAME:220E                 LDA     #_P|_C_ORANGE
GAME:2210                 STA     SC_STATUS_LINE.line_1.enemy_plane_warning ; "P" character
GAME:2213                 JSR     WARN
GAME:2216                 RTS
GAME:2216 ; END OF FUNCTION CHUNK FOR PLFWD
GAME:2217
GAME:2217 ; =============== S U B R O U T I N E =======================================
GAME:2217
GAME:2217
GAME:2217 KMKZ:                                   ; CODE XREF: COMMON+24↑p
GAME:2217                 DEC     byte_643
GAME:221A                 BNE     PP
GAME:221C                 LDA     #20
GAME:221E                 STA     byte_643
GAME:2221                 LDA     AUDC1_SHADOW
GAME:2224                 CMP     #AUDIO_CONTROL_DIST_6
GAME:2226                 BEQ     PP
GAME:2228                 JSR     PO
GAME:222B
GAME:222B PP:                                     ; CODE XREF: KMKZ+3↑j
GAME:222B                                         ; KMKZ+F↑j
GAME:222B                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:222D                 CMP     DIRECTION_A
GAME:2230                 BNE     NC
GAME:2232                 JSR     KK              ; Move Plane down, if possible
GAME:2235
GAME:2235 NC:                                     ; CODE XREF: KMKZ+19↑j
GAME:2235                 DEC     FUEL_TIMER
GAME:2238                 BEQ     NE
GAME:223A                 RTS
GAME:223B ; ---------------------------------------------------------------------------
GAME:223B
GAME:223B NE:                                     ; CODE XREF: KMKZ+21↑j
GAME:223B                 LDA     #4
GAME:223D                 STA     FUEL_TIMER
GAME:2240                 JSR     KK              ; Move Plane down, if possible
GAME:2243                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:2245                 CMP     #JOYSTICK_DOWN_RIGHT
GAME:2247                 BEQ     loc_2251
GAME:2249                 CMP     #JOYSTICK_UP_LEFT
GAME:224B                 BNE     NF              ; => Return
GAME:224D                 JSR     CE
GAME:2250
GAME:2250 NF:                                     ; CODE XREF: PLFWD+17D↑j
GAME:2250                                         ; KMKZ+34↑j
GAME:2250                 RTS                     ; => Return
GAME:2251 ; ---------------------------------------------------------------------------
GAME:2251
GAME:2251 loc_2251:                               ; CODE XREF: KMKZ+30↑j
GAME:2251                 JSR     CD
GAME:2254                 RTS
GAME:2254 ; End of function KMKZ
GAME:2254
GAME:2255
GAME:2255 ; =============== S U B R O U T I N E =======================================
GAME:2255
GAME:2255 ; Use fuel, update the display as well
GAME:2255
GAME:2255 FUEL:                                   ; CODE XREF: EB+A4↑p
GAME:2255                                         ; COMMON+48↑p ...
GAME:2255                 LDA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:2258                 BEQ     NP              ; => Return
GAME:225A                 LDA     SC_STATUS_LINE.line_0.fuel_leak ; "F" character
GAME:225D                 BNE     SD              ; A leak doubles the speed of using fuel
GAME:225F                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:2261                 CMP     #JOYSTICK_UP_RIGHT
GAME:2263                 BNE     MP
GAME:2265
GAME:2265 SD:                                     ; CODE XREF: FUEL+8↑j
GAME:2265                 DEC     FUEL_TIMER      ; A leak doubles the speed of using fuel
GAME:2268
GAME:2268 MP:                                     ; CODE XREF: FUEL+E↑j
GAME:2268                 DEC     FUEL_TIMER
GAME:226B                 BMI     MQ
GAME:226D
GAME:226D NP:                                     ; CODE XREF: FUEL+3↑j
GAME:226D                 RTS                     ; => Return
GAME:226E ; ---------------------------------------------------------------------------
GAME:226E
GAME:226E MQ:                                     ; CODE XREF: FUEL+16↑j
GAME:226E                 LDA     #40
GAME:2270                 STA     FUEL_TIMER
GAME:2273                 DEC     SC_STATUS_LINE.line_0.fuel_digit_1
GAME:2276                 LDA     SC_STATUS_LINE.line_0.fuel_digit_1
GAME:2279                 CMP     #KEYCODE_0-1
GAME:227B                 BEQ     MR
GAME:227D                 RTS
GAME:227E ; ---------------------------------------------------------------------------
GAME:227E
GAME:227E MR:                                     ; CODE XREF: FUEL+26↑j
GAME:227E                 LDA     SC_STATUS_LINE.line_0.fuel_digit_10
GAME:2281                 CMP     #_0|_C_BLUE
GAME:2283                 BNE     MS
GAME:2285                 LDA     SC_STATUS_LINE.line_0.fuel_digit_100
GAME:2288                 CMP     #_0|_C_BLUE
GAME:228A                 BNE     MS
GAME:228C                 STA     SC_STATUS_LINE.line_0.fuel_digit_1
GAME:228F                 LDX     #0
GAME:2291                 STX     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:2294                 INX
GAME:2295                 STX     byte_643
GAME:2298                 RTS
GAME:2299 ; ---------------------------------------------------------------------------
GAME:2299
GAME:2299 MS:                                     ; CODE XREF: FUEL+2E↑j
GAME:2299                                         ; FUEL+35↑j
GAME:2299                 LDA     #_9|_C_BLUE
GAME:229B                 STA     SC_STATUS_LINE.line_0.fuel_digit_1
GAME:229E                 DEC     SC_STATUS_LINE.line_0.fuel_digit_10
GAME:22A1                 LDA     SC_STATUS_LINE.line_0.fuel_digit_10
GAME:22A4                 CMP     #_QUESTIONMARK|_C_BLUE
GAME:22A6                 BEQ     MT
GAME:22A8                 RTS
GAME:22A9 ; ---------------------------------------------------------------------------
GAME:22A9
GAME:22A9 MT:                                     ; CODE XREF: FUEL+51↑j
GAME:22A9                 LDA     #_9|_C_BLUE
GAME:22AB                 STA     SC_STATUS_LINE.line_0.fuel_digit_10
GAME:22AE                 DEC     SC_STATUS_LINE.line_0.fuel_digit_100
GAME:22B1                 RTS
GAME:22B1 ; End of function FUEL
GAME:22B1
GAME:22B2
GAME:22B2 ; =============== S U B R O U T I N E =======================================
GAME:22B2
GAME:22B2
GAME:22B2 REFUEL:                                 ; CODE XREF: STOPL+E6↓p
GAME:22B2                 LDA     SC_STATUS_LINE.line_0.fuel_digit_100
GAME:22B5                 CMP     #_3|_C_BLUE
GAME:22B7                 BNE     MU
GAME:22B9                 INC     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:22BC
GAME:22BC MV:                                     ; CODE XREF: REFUEL:AGB↓j
GAME:22BC                 JSR     INCBMB          ; Increment/Reload bombs during refuel
GAME:22BF                 LDA     #_B|_C_LBLUE
GAME:22C1                 STA     SC_STATUS_LINE.line_0.bomb_B
GAME:22C4
GAME:22C4 SB:                                     ; CODE XREF: REFUEL+53↓j
GAME:22C4                 LDA     WORKING_PARTS   ; # of working part (4): fuel, bomb, maneuverabiity, gun
GAME:22C7                 CMP     #4
GAME:22C9                 BCS     N4
GAME:22CB                 LDA     #90
GAME:22CD                 STA     RIVER_BRIDGE_ROW
GAME:22CF
GAME:22CF SA:                                     ; CODE XREF: REFUEL+3B↓j
GAME:22CF                                         ; REFUEL+47↓j
GAME:22CF                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:22D2                 JSR     PBMB
GAME:22D5                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:22D8                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:22DB                 JSR     TRIGC__TRIGGER_COUNT ; Count individual button presses during a landing
GAME:22DE                 LDA     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:22E1                 CMP     #3
GAME:22E3                 BCS     ADO
GAME:22E5                 DEC     RIVER_BRIDGE_ROW
GAME:22E7                 BEQ     N8
GAME:22E9                 LDA     RIVER_BRIDGE_ROW
GAME:22EB                 CMP     #20
GAME:22ED                 BCS     SA
GAME:22EF                 LDA     #SND_FREQ_21
GAME:22F1                 STA     AUDF4           ; Audio 4 Frequency Register
GAME:22F4                 LDA     #AUDIO_CONTROL_VOL_2|AUDIO_CONTROL_DIST_4
GAME:22F6                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:22F9                 JMP     SA
GAME:22FC ; ---------------------------------------------------------------------------
GAME:22FC
GAME:22FC N8:                                     ; CODE XREF: REFUEL+35↑j
GAME:22FC                 JSR     FIX             ; Fix one broken part per call (F, B, M, G)
GAME:22FF                 STA     AUDF4           ; Audio 4 Frequency Register
GAME:2302                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:2305                 JMP     SB
GAME:2308 ; ---------------------------------------------------------------------------
GAME:2308
GAME:2308 ADO:                                    ; CODE XREF: REFUEL+31↑j
GAME:2308                 LDA     #0
GAME:230A                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:230D
GAME:230D N4:                                     ; CODE XREF: REFUEL+17↑j
GAME:230D                 PLA
GAME:230E                 PLA
GAME:230F                 LDA     #COLOR_INTENSITY_14|COLOR_GRAY
GAME:2311                 STA     PCOLR0          ; P0 COLOR
GAME:2314                 STA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:2317                 STA     RIVER_BRIDGE_ROW
GAME:2319
GAME:2319 NA:                                     ; CODE XREF: REFUEL+78↓j
GAME:2319                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:231C                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:231F                 JSR     PBMB
GAME:2322                 JSR     ROAR
GAME:2325                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:2328                 DEC     RIVER_BRIDGE_ROW
GAME:232A                 BNE     NA
GAME:232C                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:232E                 AND     #3
GAME:2330                 BNE     _1
GAME:2332                 STA     byte_6B0
GAME:2335
GAME:2335 _1:                                     ; CODE XREF: REFUEL+7E↑j
GAME:2335                 JMP     MZ
GAME:2338 ; ---------------------------------------------------------------------------
GAME:2338
GAME:2338 MU:                                     ; CODE XREF: REFUEL+5↑j
GAME:2338                 JSR     TRIGC__TRIGGER_COUNT ; Count individual button presses during a landing
GAME:233B                 LDA     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:233E                 CMP     #1
GAME:2340                 BCS     AGB
GAME:2342                 JSR     PBMB
GAME:2345                 DEC     FUEL_TIMER
GAME:2348                 BEQ     MW
GAME:234A                 RTS
GAME:234B ; ---------------------------------------------------------------------------
GAME:234B
GAME:234B AGB:                                    ; CODE XREF: REFUEL+8E↑j
GAME:234B                 JMP     MV
GAME:234E ; ---------------------------------------------------------------------------
GAME:234E
GAME:234E MW:                                     ; CODE XREF: REFUEL+96↑j
GAME:234E                 LDA     #2
GAME:2350                 STA     FUEL_TIMER
GAME:2353                 LDA     #_F|_C_BLACK
GAME:2355                 STA     SC_STATUS_LINE.line_0.fuel_F
GAME:2358                 INC     SC_STATUS_LINE.line_0.fuel_digit_1
GAME:235B                 LDA     SC_STATUS_LINE.line_0.fuel_digit_1
GAME:235E                 CMP     #_COLON|_C_BLUE
GAME:2360                 BEQ     MX
GAME:2362                 RTS
GAME:2363 ; ---------------------------------------------------------------------------
GAME:2363
GAME:2363 MX:                                     ; CODE XREF: REFUEL+AE↑j
GAME:2363                 LDA     #_0|_C_BLUE
GAME:2365                 STA     SC_STATUS_LINE.line_0.fuel_digit_1
GAME:2368                 INC     SC_STATUS_LINE.line_0.fuel_digit_10
GAME:236B                 LDA     SC_STATUS_LINE.line_0.fuel_digit_10
GAME:236E                 CMP     #_COLON|_C_BLUE
GAME:2370                 BEQ     MY
GAME:2372                 RTS
GAME:2373 ; ---------------------------------------------------------------------------
GAME:2373
GAME:2373 MY:                                     ; CODE XREF: REFUEL+BE↑j
GAME:2373                 LDA     #_0|_C_BLUE
GAME:2375                 STA     SC_STATUS_LINE.line_0.fuel_digit_10
GAME:2378                 INC     SC_STATUS_LINE.line_0.fuel_digit_100
GAME:237B                 RTS
GAME:237B ; End of function REFUEL
GAME:237B
GAME:237C
GAME:237C ; =============== S U B R O U T I N E =======================================
GAME:237C
GAME:237C ; Decrement speed, except if we are at 100
GAME:237C
GAME:237C SPDL:                                   ; CODE XREF: CKLAND+22↓p
GAME:237C                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:237F                 CMP     #_1|_C_BLUE
GAME:2381                 BNE     MH
GAME:2383                 LDA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:2386                 CMP     #_0|_C_BLUE
GAME:2388                 BNE     MH
GAME:238A                 LDA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:238D                 CMP     #_0|_C_BLUE
GAME:238F                 BNE     MH
GAME:2391                 RTS
GAME:2392 ; ---------------------------------------------------------------------------
GAME:2392
GAME:2392 MH:                                     ; CODE XREF: SPDL+5↑j
GAME:2392                                         ; SPDL+C↑j ...
GAME:2392                 JMP     KN              ; Decrement speed by 1 with little delay
GAME:2392 ; End of function SPDL
GAME:2392
GAME:2395 ; ---------------------------------------------------------------------------
GAME:2395 ; START OF FUNCTION CHUNK FOR STOPL
GAME:2395
GAME:2395 ML:                                     ; CODE XREF: STOPL+5↓j
GAME:2395                                         ; STOPL+C↓j ...
GAME:2395                 JMP     MM              ; Decrement speed by 1
GAME:2395 ; END OF FUNCTION CHUNK FOR STOPL
GAME:2398
GAME:2398 ; =============== S U B R O U T I N E =======================================
GAME:2398
GAME:2398 ; Decrement speed till we hit 000 (= we landed)
GAME:2398
GAME:2398 STOPL:                                  ; CODE XREF: CKLAND+72↓p
GAME:2398
GAME:2398 ; FUNCTION CHUNK AT GAME:2395 SIZE 00000003 BYTES
GAME:2398 ; FUNCTION CHUNK AT GAME:2478 SIZE 00000019 BYTES
GAME:2398
GAME:2398                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:239B                 CMP     #_0|_C_BLUE
GAME:239D                 BNE     ML
GAME:239F                 LDA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:23A2                 CMP     #_0|_C_BLUE
GAME:23A4                 BNE     ML
GAME:23A6                 LDA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:23A9                 CMP     #_0|_C_BLUE
GAME:23AB                 BNE     ML
GAME:23AD
GAME:23AD                 LDA     #SETVBV_VVBLKD
GAME:23AF                 LDX     #>XSND          ; Deferred interrupt for sound
GAME:23B1                 LDY     #<XSND          ; Deferred interrupt for sound
GAME:23B3                 JSR     SETVBV          ; SET SYSTEM TIMERS ROUTINE
GAME:23B6                 LDA     #$C0
GAME:23B8                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:23BB                 PLA
GAME:23BC                 PLA
GAME:23BD                 LDA     #150
GAME:23BF                 STA     FUEL_TIMER
GAME:23C2                 LDA     GAME_COMPLETION_MASK
GAME:23C5                 CMP     #FINAL_TARGET_ALL
GAME:23C7                 BNE     _1
GAME:23C9                 PLA
GAME:23CA                 PLA
GAME:23CB
GAME:23CB _2:                                     ; CODE XREF: STOPL+3F↓j
GAME:23CB                                         ; STOPL+54↓j
GAME:23CB                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:23CE                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:23D1                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:23D4                 DEC     FUEL_TIMER
GAME:23D7                 BNE     _2
GAME:23D9                 LDY     AUDC1_SHADOW
GAME:23DC                 CPY     #AUDIO_CONTROL_DIST_6
GAME:23DE                 BEQ     _35
GAME:23E0                 DEY
GAME:23E1                 DEC     AUDC1_SHADOW
GAME:23E4                 STY     AUDC1           ; Audio 1 Channel Control Register
GAME:23E7                 LDA     #15
GAME:23E9                 STA     FUEL_TIMER
GAME:23EC                 JMP     _2
GAME:23EF ; ---------------------------------------------------------------------------
GAME:23EF
GAME:23EF _35:                                    ; CODE XREF: STOPL+46↑j
GAME:23EF                 JSR     PLAY_IT         ; Sound: Start playing the title music
GAME:23F2
GAME:23F2 _3:
GAME:23F2                 PLA
GAME:23F3                 PLA
GAME:23F4                 JSR     RNK__DISPLAY_RANK ; Display the rank based on difficulty and score
GAME:23F7
GAME:23F7 _69:                                    ; CODE XREF: STOPL+62↓j
GAME:23F7                 JSR     CNSL__CONSOLE   ; Console for option selection and to start the game
GAME:23FA                 JMP     _69             ; => endless loop. It is exited via the subroutine
GAME:23FD ; ---------------------------------------------------------------------------
GAME:23FD
GAME:23FD _1:                                     ; CODE XREF: STOPL+2F↑j
GAME:23FD                 JMP     GROUND
GAME:23FD ; End of function STOPL
GAME:23FD
GAME:2400
GAME:2400 ; =============== S U B R O U T I N E =======================================
GAME:2400
GAME:2400 ; Check if the player wants to land the plane while being over the runway
GAME:2400
GAME:2400 CKLAND:                                 ; CODE XREF: SRT+1E↑p
GAME:2400                 LDA     CAN_LAND_FLAG   ; =0 => plane can land (runway reached)
GAME:2403                 BEQ     MF
GAME:2405                 RTS
GAME:2406 ; ---------------------------------------------------------------------------
GAME:2406
GAME:2406 MF:                                     ; CODE XREF: CKLAND+3↑j
GAME:2406                 LDA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:2408                 BEQ     MG              ; => button is pressed!
GAME:240A                 RTS
GAME:240B ; ---------------------------------------------------------------------------
GAME:240B
GAME:240B MG:                                     ; CODE XREF: CKLAND+8↑j
GAME:240B                 LDY     #_L|_C_LBLUE
GAME:240D                 STY     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:2410                 STY     byte_6B6
GAME:2413
GAME:2413 LAND:                                   ; CODE XREF: CKLAND+3B↓j
GAME:2413                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:2416                 JSR     DRAW            ; Draw river/gras on the map
GAME:2419                 JSR     DRUN__DRAW_RUNWAY ; Draw the runway on the map
GAME:241C                 JSR     COMMON
GAME:241F                 JSR     RUNSND
GAME:2422                 JSR     SPDL            ; Decrement speed, except if we are at 100
GAME:2425                 JSR     CKCOL           ; Check collision?!?
GAME:2428                 JSR     FBRGN           ; Fire Gun
GAME:242B                 JSR     FBTGN
GAME:242E                 LDA     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:2431                 BNE     MK
GAME:2433                 RTS
GAME:2434 ; ---------------------------------------------------------------------------
GAME:2434
GAME:2434 MK:                                     ; CODE XREF: CKLAND+31↑j
GAME:2434                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:2436                 SEC
GAME:2437                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:2439                 CMP     #3              ; plane low enough to land?
GAME:243B                 BNE     LAND
GAME:243D
GAME:243D                 LDA     #0
GAME:243F                 STA     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:2442                 STA     DL_IRQ_BACKGROUND_COLOR ; Color back to BLACK
GAME:2445                 STA     SC_STATUS_LINE.line_1.wind_factor_warning ; "W" character
GAME:2448                 STA     WIND_DURATION   ; Duration during which Wind is in effect
GAME:244A                 STA     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:244D                 STA     byte_6B6
GAME:2450
GAME:2450                 LDA     P1PF_HPOSM1     ; Missile 1 Horizontal Position / Player 1 to Playfield Collision
GAME:2453                 CMP     #1000b          ; Player hit the playfield
GAME:2455                 BEQ     MJ
GAME:2457                 JMP     CRASH           ; Plane was crashed
GAME:245A ; ---------------------------------------------------------------------------
GAME:245A
GAME:245A MJ:                                     ; CODE XREF: CKLAND+55↑j
GAME:245A                                         ; CKLAND+75↓j
GAME:245A                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:245D                 STA     DL_IRQ_BACKGROUND_COLOR ; Color back to BLACK
GAME:2460                 JSR     DRAW            ; Draw river/gras on the map
GAME:2463                 JSR     DRUN__DRAW_RUNWAY ; Draw the runway on the map
GAME:2466                 JSR     DRTR__DRAW_TREE ; Draw trees into the map. Needs to be the last draw function to be called.
GAME:2469                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:246C                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:246F                 JSR     XPLSN
GAME:2472                 JSR     STOPL           ; Decrement speed till we hit 000 (= we landed)
GAME:2475                 JMP     MJ
GAME:2475 ; End of function CKLAND
GAME:2475
GAME:2478 ; ---------------------------------------------------------------------------
GAME:2478 ; START OF FUNCTION CHUNK FOR STOPL
GAME:2478
GAME:2478 GROUND:                                 ; CODE XREF: STOPL:_1↑j
GAME:2478                                         ; STOPL+F1↓j ...
GAME:2478                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:247B                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:247E                 JSR     REFUEL
GAME:2481                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:2484                 LDA     AUDC1_SHADOW
GAME:2487                 CMP     #AUDIO_CONTROL_VOL_2|AUDIO_CONTROL_DIST_6
GAME:2489                 BCC     GROUND
GAME:248B                 JSR     PO
GAME:248E                 JMP     GROUND
GAME:248E ; END OF FUNCTION CHUNK FOR STOPL
GAME:2491
GAME:2491 ; =============== S U B R O U T I N E =======================================
GAME:2491
GAME:2491 ; Loop to manage takeoff
GAME:2491
GAME:2491 TAKOF__TAKEOFF_LOOP:                    ; CODE XREF: EB+D1↑p
GAME:2491                                         ; TAKOF__TAKEOFF_LOOP+5C↓j
GAME:2491                 JSR     DRAW            ; Draw river/gras on the map
GAME:2494                 JSR     DRUN__DRAW_RUNWAY ; Draw the runway on the map
GAME:2497                 JSR     DRTR__DRAW_TREE ; Draw trees into the map. Needs to be the last draw function to be called.
GAME:249A                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:249D                 JSR     PBMB
GAME:24A0                 JSR     XPLSN
GAME:24A3                 JSR     FUEL            ; Use fuel, update the display as well
GAME:24A6                 JSR     CNSL__CONSOLE   ; Console for option selection and to start the game
GAME:24A9                 JSR     DTKOF__DEMO_TAKE_OFF ; Demo: plane take-off at speed 100
GAME:24AC                 JSR     ROAR
GAME:24AF                 LDA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:24B2                 CMP     #_D|_C_BLUE
GAME:24B4                 BCS     _8
GAME:24B6                 JSR     SPD__SPEED_CHANGE ; Change the speed of the plane up/down based on the joystick
GAME:24B9                 JMP     _1
GAME:24BC ; ---------------------------------------------------------------------------
GAME:24BC
GAME:24BC _8:                                     ; CODE XREF: TAKOF__TAKEOFF_LOOP+23↑j
GAME:24BC                 JSR     TKOSPD__INCREMENT_SPEED ; Increment Speed
GAME:24BF                 LDA     byte_6B0
GAME:24C2                 BNE     _1
GAME:24C4                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:24C7                 CMP     #_1|_C_BLUE
GAME:24C9                 BCS     _1
GAME:24CB                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:24CE                 LSR     A
GAME:24CF                 BCC     _1
GAME:24D1                 JSR     TKOSPD__INCREMENT_SPEED ; Increment Speed
GAME:24D4
GAME:24D4 _1:                                     ; CODE XREF: TAKOF__TAKEOFF_LOOP+28↑j
GAME:24D4                                         ; TAKOF__TAKEOFF_LOOP+31↑j ...
GAME:24D4                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:24D7                 LDA     STICK0          ; JOYSTICK 0 RAM CELL
GAME:24DA                 CMP     #JOYSTICK_NOTHING
GAME:24DC                 BEQ     DI
GAME:24DE                 CMP     DIRECTION_B
GAME:24E1                 BEQ     DJ
GAME:24E3
GAME:24E3 DK:                                     ; CODE XREF: TAKOF__TAKEOFF_LOOP+5A↓j
GAME:24E3                                         ; TAKOF__TAKEOFF_LOOP+64↓j
GAME:24E3                 JMP     CRASH           ; Plane was crashed
GAME:24E6 ; ---------------------------------------------------------------------------
GAME:24E6
GAME:24E6 DI:                                     ; CODE XREF: TAKOF__TAKEOFF_LOOP+4B↑j
GAME:24E6                 LDA     P0PF_HPOSM0     ; Player Machine Gun Bullet (Horizontal Position)
GAME:24E9                 AND     #1
GAME:24EB                 BNE     DK
GAME:24ED                 JMP     TAKOF__TAKEOFF_LOOP ; Loop to manage takeoff
GAME:24F0 ; ---------------------------------------------------------------------------
GAME:24F0
GAME:24F0 DJ:                                     ; CODE XREF: TAKOF__TAKEOFF_LOOP+50↑j
GAME:24F0                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:24F3                 CMP     #_D|_C_BLUE
GAME:24F5                 BCS     DK
GAME:24F7                 RTS
GAME:24F7 ; End of function TAKOF__TAKEOFF_LOOP
GAME:24F7
GAME:24F8
GAME:24F8 ; =============== S U B R O U T I N E =======================================
GAME:24F8
GAME:24F8 ; Deferred interrupt for sound
GAME:24F8
GAME:24F8 XSND:                                   ; CODE XREF: VBIR__DEFERRED_VBL_DRAW+9↑j
GAME:24F8                                         ; VBIR__DEFERRED_VBL_DRAW+24↑j ...
GAME:24F8                 LDA     AUDIO3_SOUND_COUNTER
GAME:24FB                 BEQ     PV              ; => Exit
GAME:24FD                 LDA     RANDOM          ; Random Number Generator
GAME:2500                 AND     #3
GAME:2502                 ORA     AUDIO3_SOUND_COUNTER
GAME:2505                 ADC     #16
GAME:2507                 STA     AUDF3           ; Audio 3 Frequency Register
GAME:250A                 INC     AUDIO3_SOUND_COUNTER
GAME:250D                 LDA     AUDIO3_SOUND_COUNTER
GAME:2510                 CMP     AUDIO3_COUNTER_TRIGGER
GAME:2513                 BCC     PV              ; => Exit
GAME:2515                 LDA     AUDIO3_CONTROL
GAME:2518                 CMP     #64
GAME:251A                 BEQ     PY
GAME:251C                 DEC     AUDIO3_CONTROL_COUNTER
GAME:251F                 BNE     PV              ; => Exit
GAME:2521                 LDA     #4
GAME:2523                 STA     AUDIO3_CONTROL_COUNTER
GAME:2526                 DEC     AUDIO3_CONTROL
GAME:2529                 LDA     AUDIO3_CONTROL
GAME:252C                 STA     AUDC3           ; Audio 3 Channel Control Register
GAME:252F
GAME:252F PV:                                     ; CODE XREF: XSND+3↑j
GAME:252F                                         ; XSND+1B↑j ...
GAME:252F                 JMP     XITVBV          ; => Exit
GAME:2532 ; ---------------------------------------------------------------------------
GAME:2532
GAME:2532 PY:                                     ; CODE XREF: XSND+22↑j
GAME:2532                 LDA     #0
GAME:2534                 STA     AUDIO3_SOUND_COUNTER
GAME:2537                 JMP     XITVBV          ; => Exit
GAME:2537 ; End of function XSND
GAME:2537
GAME:253A
GAME:253A ; =============== S U B R O U T I N E =======================================
GAME:253A
GAME:253A ; Start Audio 3 sound effect
GAME:253A
GAME:253A XXX:                                    ; CODE XREF: TURN+7C↑p
GAME:253A                                         ; XPLSN+8B↑j ...
GAME:253A                 STA     AUDIO3_COUNTER_TRIGGER
GAME:253D                 STX     AUDIO3_CONTROL
GAME:2540                 STX     AUDC3           ; Audio 3 Channel Control Register
GAME:2543                 LDA     #1
GAME:2545                 STA     AUDIO3_SOUND_COUNTER
GAME:2548                 STA     AUDIO3_CONTROL_COUNTER
GAME:254B                 RTS
GAME:254B ; End of function XXX
GAME:254B
GAME:254C
GAME:254C ; =============== S U B R O U T I N E =======================================
GAME:254C
GAME:254C ; Bomb drop sound
GAME:254C
GAME:254C DRPSND:                                 ; CODE XREF: BOMB+AF↑p
GAME:254C                                         ; CDRP+D↓j
GAME:254C                 DEC     AUDIO2_DROPSND_COUNTER
GAME:254F                 LDA     AUDIO2_DROPSND_COUNTER
GAME:2552                 LSR     A
GAME:2553                 BCC     _1              ; => Return
GAME:2555                 INC     AUDIO2_DROPSND_FREQ
GAME:2558                 LDA     AUDIO2_DROPSND_FREQ
GAME:255B                 STA     AUDIO2_DROPSND_FREQ_SAVED
GAME:255E                 STA     AUDF2           ; Audio 2 Frequency Register
GAME:2561                 LDA     #AUDIO_CONTROL_VOL_2|AUDIO_CONTROL_DIST_4
GAME:2563                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:2566
GAME:2566 _1:                                     ; CODE XREF: DRPSND+7↑j
GAME:2566                 RTS                     ; => Return
GAME:2566 ; End of function DRPSND
GAME:2566
GAME:2567
GAME:2567 ; =============== S U B R O U T I N E =======================================
GAME:2567
GAME:2567 ; Gun sound from the plane
GAME:2567
GAME:2567 GUNSND:                                 ; CODE XREF: COMMON+3C↑p
GAME:2567                 LDX     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:256A                 BEQ     QA              ; => Return
GAME:256C                 DEC     PLANE_GUN_SOUND_TIMER_2 ; Timer 2 for the repeating gun sound from the plane
GAME:256F                 LDA     PLANE_GUN_SOUND_TIMER_2 ; Timer 2 for the repeating gun sound from the plane
GAME:2572                 LSR     A
GAME:2573                 BCC     QA              ; => Return
GAME:2575                 LDA     #SND_FREQ_50
GAME:2577                 STA     AUDF4           ; Audio 4 Frequency Register
GAME:257A                 CPX     #255
GAME:257C                 BEQ     QC
GAME:257E                 CPX     #254
GAME:2580                 BEQ     QD
GAME:2582                 DEC     PLANE_GUN_SOUND_TIMER_3 ; Timer 3 for the repeating gun sound from the plane
GAME:2585                 LDA     PLANE_GUN_SOUND_TIMER_3 ; Timer 3 for the repeating gun sound from the plane
GAME:2588                 LSR     A
GAME:2589                 BCC     QB
GAME:258B                 LDA     #AUDIO_CONTROL_VOL_5|AUDIO_CONTROL_DIST_2
GAME:258D                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:2590
GAME:2590 QA:                                     ; CODE XREF: GUNSND+3↑j
GAME:2590                                         ; GUNSND+C↑j
GAME:2590                 RTS                     ; => Return
GAME:2591 ; ---------------------------------------------------------------------------
GAME:2591
GAME:2591 QB:                                     ; CODE XREF: GUNSND+22↑j
GAME:2591                 LDA     #AUDIO_CONTROL_DIST_2
GAME:2593                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:2596                 RTS
GAME:2597 ; ---------------------------------------------------------------------------
GAME:2597
GAME:2597 QC:                                     ; CODE XREF: GUNSND+15↑j
GAME:2597                 LDA     #AUDIO_CONTROL_VOL_5|AUDIO_CONTROL_DIST_1
GAME:2599                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:259C                 DEC     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:259F                 RTS
GAME:25A0 ; ---------------------------------------------------------------------------
GAME:25A0
GAME:25A0 QD:                                     ; CODE XREF: GUNSND+19↑j
GAME:25A0                 LDA     #0
GAME:25A2                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:25A5                 STA     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:25A8                 RTS
GAME:25A8 ; End of function GUNSND
GAME:25A8
GAME:25A9
GAME:25A9 ; =============== S U B R O U T I N E =======================================
GAME:25A9
GAME:25A9
GAME:25A9 ROAR:                                   ; CODE XREF: EB+AD↑p
GAME:25A9                                         ; COMMON+33↑p ...
GAME:25A9
GAME:25A9 ; FUNCTION CHUNK AT GAME:25CC SIZE 0000001B BYTES
GAME:25A9
GAME:25A9                 DEC     byte_643
GAME:25AC                 BNE     PQ              ; => Return
GAME:25AE                 LDA     #20
GAME:25B0                 STA     byte_643
GAME:25B3                 LDA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:25B5                 CMP     #JOYSTICK_UP_RIGHT
GAME:25B7                 BEQ     PR
GAME:25B9                 LDA     AUDC1_SHADOW
GAME:25BC                 CMP     #AUDIO_CONTROL_VOL_4|AUDIO_CONTROL_DIST_6
GAME:25BE                 BEQ     PQ              ; => Return
GAME:25C0                 BCC     PS
GAME:25C0 ; End of function ROAR
GAME:25C0
GAME:25C2
GAME:25C2 ; =============== S U B R O U T I N E =======================================
GAME:25C2
GAME:25C2
GAME:25C2 PO:                                     ; CODE XREF: KMKZ+11↑p
GAME:25C2                                         ; STOPL+F3↑p
GAME:25C2                 DEC     AUDC1_SHADOW
GAME:25C5                 LDA     AUDC1_SHADOW
GAME:25C8                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:25CB                 RTS
GAME:25CB ; End of function PO
GAME:25CB
GAME:25CC ; ---------------------------------------------------------------------------
GAME:25CC ; START OF FUNCTION CHUNK FOR ROAR
GAME:25CC
GAME:25CC PS:                                     ; CODE XREF: ROAR+17↑j
GAME:25CC                 INC     AUDC1_SHADOW
GAME:25CF                 LDA     AUDC1_SHADOW
GAME:25D2                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:25D5
GAME:25D5 PQ:                                     ; CODE XREF: ROAR+3↑j
GAME:25D5                                         ; ROAR+15↑j ...
GAME:25D5                 RTS                     ; => Return
GAME:25D6 ; ---------------------------------------------------------------------------
GAME:25D6
GAME:25D6 PR:                                     ; CODE XREF: ROAR+E↑j
GAME:25D6                 LDA     AUDC1_SHADOW
GAME:25D9                 CMP     #AUDIO_CONTROL_VOL_8|AUDIO_CONTROL_DIST_6
GAME:25DB                 BEQ     PQ              ; => Return
GAME:25DD                 INC     AUDC1_SHADOW
GAME:25E0                 LDA     AUDC1_SHADOW
GAME:25E3                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:25E6                 RTS
GAME:25E6 ; END OF FUNCTION CHUNK FOR ROAR
GAME:25E7
GAME:25E7 ; =============== S U B R O U T I N E =======================================
GAME:25E7
GAME:25E7
GAME:25E7 WARN:                                   ; CODE XREF: PLFWD+190↑p
GAME:25E7                                         ; L6+80↓p
GAME:25E7                 LDX     #0
GAME:25E9                 STX     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:25EC                 INX
GAME:25ED                 STX     AUDF4           ; Audio 4 Frequency Register
GAME:25F0                 LDA     #AUDIO_CONTROL_VOL_2|AUDIO_CONTROL_DIST_0
GAME:25F2                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:25F5                 RTS
GAME:25F5 ; End of function WARN
GAME:25F5
GAME:25F6
GAME:25F6 ; =============== S U B R O U T I N E =======================================
GAME:25F6
GAME:25F6 ; Increment/Reload bombs during refuel
GAME:25F6
GAME:25F6 INCBMB:                                 ; CODE XREF: REFUEL:MV↑p
GAME:25F6                 LDA     #_F|_C_LBLUE
GAME:25F8                 STA     SC_STATUS_LINE.line_0.fuel_F
GAME:25FB                 LDA     #_B|_C_BLACK
GAME:25FD                 STA     SC_STATUS_LINE.line_0.bomb_B
GAME:2600                 STA     RIVER_BRIDGE_ROW
GAME:2602
GAME:2602 PF:                                     ; CODE XREF: INCBMB+24↓j
GAME:2602                                         ; INCBMB+39↓j ...
GAME:2602                 JSR     PROP            ; Update the propeller graphics for rotation
GAME:2605                 JSR     TURN            ; Check for the joystick and set the plane graphics. Check for too low altitude as well and then crash the plane.
GAME:2608                 JSR     TRIGC__TRIGGER_COUNT ; Count individual button presses during a landing
GAME:260B                 JSR     PBMB
GAME:260E                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:2611
GAME:2611                 LDA     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:2614                 CMP     #2
GAME:2616                 BCS     PG              ; => Return
GAME:2618                 DEC     RIVER_BRIDGE_ROW
GAME:261A                 BNE     PF
GAME:261C                 LDA     #8
GAME:261E                 STA     RIVER_BRIDGE_ROW
GAME:2620
GAME:2620                 LDA     SC_STATUS_LINE.line_0.bomb_digit_10
GAME:2623                 CMP     #_3|_C_BLUE
GAME:2625                 BEQ     ADN
GAME:2627                 INC     SC_STATUS_LINE.line_0.bomb_digit_1
GAME:262A                 LDA     SC_STATUS_LINE.line_0.bomb_digit_1
GAME:262D                 CMP     #_COLON|_C_BLUE
GAME:262F                 BNE     PF
GAME:2631                 LDA     #_0|_C_BLUE
GAME:2633                 STA     SC_STATUS_LINE.line_0.bomb_digit_1
GAME:2636                 INC     SC_STATUS_LINE.line_0.bomb_digit_10
GAME:2639                 JMP     PF
GAME:263C ; ---------------------------------------------------------------------------
GAME:263C
GAME:263C ADN:                                    ; CODE XREF: INCBMB+2F↑j
GAME:263C                 INC     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:263F
GAME:263F PG:                                     ; CODE XREF: INCBMB+20↑j
GAME:263F                 RTS                     ; => Return
GAME:263F ; End of function INCBMB
GAME:263F
GAME:2640
GAME:2640 ; =============== S U B R O U T I N E =======================================
GAME:2640
GAME:2640
GAME:2640 RUNSND:                                 ; CODE XREF: SRT+21↑p
GAME:2640                                         ; CKLAND+1F↑p
GAME:2640                 LDA     RUN_SOUND_COUNTER ; 0=Run sound off, otherwise a count down timer for the effect
GAME:2643                 BEQ     QE              ; => Return
GAME:2645                 DEC     RUN_SOUND_COUNTER ; 0=Run sound off, otherwise a count down timer for the effect
GAME:2648                 LDA     RUN_SOUND_COUNTER ; 0=Run sound off, otherwise a count down timer for the effect
GAME:264B                 BEQ     QF
GAME:264D                 LSR     A
GAME:264E                 BCC     QG
GAME:2650                 LDA     #SND_FREQ_10
GAME:2652                 STA     AUDF4           ; Audio 4 Frequency Register
GAME:2655
GAME:2655 QE:                                     ; CODE XREF: RUNSND+3↑j
GAME:2655                                         ; PLBCK+6↓j
GAME:2655                 RTS                     ; => Return
GAME:2656 ; ---------------------------------------------------------------------------
GAME:2656
GAME:2656 QG:                                     ; CODE XREF: RUNSND+E↑j
GAME:2656                 LDA     #SND_FREQ_25
GAME:2658                 STA     AUDF4           ; Audio 4 Frequency Register
GAME:265B                 LDA     #AUDIO_CONTROL_VOL_4|AUDIO_CONTROL_DIST_4
GAME:265D
GAME:265D QF:                                     ; CODE XREF: RUNSND+B↑j
GAME:265D                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:2660                 RTS
GAME:2660 ; End of function RUNSND
GAME:2660
GAME:2661
GAME:2661 ; =============== S U B R O U T I N E =======================================
GAME:2661
GAME:2661
GAME:2661 PLBCK:                                  ; CODE XREF: SRT+C↑p
GAME:2661                                         ; CITY+9↓p
GAME:2661                 LDA     byte_FD
GAME:2663                 BEQ     OB
GAME:2665                 CMP     #2
GAME:2667                 BNE     QE              ; => Return
GAME:2669                 LDA     byte_6A8
GAME:266C                 BEQ     L6
GAME:266E                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:2671                 LSR     A
GAME:2672                 BCC     L6
GAME:2674                 JSR     XP2
GAME:2677                 JSR     TRIGB
GAME:267A                 LDA     VAR_UNKNOWN_STATE
GAME:267D                 CMP     #UNKNOWNS_STATE_5
GAME:267F                 BCC     _1              ; => Return
GAME:2681                 JSR     COLM02          ; If Player is at the same altitude as the enemey plane, check if that one got hit
GAME:2684
GAME:2684 _1:                                     ; CODE XREF: PLBCK+1E↑j
GAME:2684                 RTS                     ; => Return
GAME:2684 ; End of function PLBCK
GAME:2684
GAME:2685
GAME:2685 ; =============== S U B R O U T I N E =======================================
GAME:2685
GAME:2685
GAME:2685 L6:                                     ; CODE XREF: PLBCK+B↑j
GAME:2685                                         ; PLBCK+11↑j ...
GAME:2685
GAME:2685 ; FUNCTION CHUNK AT GAME:2758 SIZE 00000091 BYTES
GAME:2685 ; FUNCTION CHUNK AT GAME:27F7 SIZE 00000037 BYTES
GAME:2685
GAME:2685                 LDA     VAR_UNKNOWN_STATE
GAME:2688                 CMP     #UNKNOWNS_STATE_2
GAME:268A                 BEQ     OD
GAME:268C                 CMP     #UNKNOWNS_STATE_3
GAME:268E                 BEQ     OG
GAME:2690                 CMP     #UNKNOWNS_STATE_4
GAME:2692                 BEQ     OI
GAME:2694                 CMP     #UNKNOWNS_STATE_5
GAME:2696                 BEQ     OJ
GAME:2698                 JMP     OR
GAME:269B ; ---------------------------------------------------------------------------
GAME:269B
GAME:269B OI:                                     ; CODE XREF: L6+D↑j
GAME:269B                 JMP     OW
GAME:269E ; ---------------------------------------------------------------------------
GAME:269E
GAME:269E OJ:                                     ; CODE XREF: L6+11↑j
GAME:269E                 JSR     XP2
GAME:26A1                 JSR     LINE            ; Check line of sight: enemy plane at the same altitude?
GAME:26A4                 JSR     COLM02          ; If Player is at the same altitude as the enemey plane, check if that one got hit
GAME:26A7                 JMP     OX
GAME:26AA ; ---------------------------------------------------------------------------
GAME:26AA
GAME:26AA OB:                                     ; CODE XREF: PLBCK+2↑j
GAME:26AA                 LDA     RANDOM          ; Random Number Generator
GAME:26AD                 AND     #$1F
GAME:26AF                 BNE     OC              ; => Return
GAME:26B1                 STA     byte_6A8
GAME:26B4                 STA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:26B7
GAME:26B7                 LDA     byte_6A6
GAME:26BA                 BNE     OC              ; => Return
GAME:26BC                 LDA     #23
GAME:26BE                 STA     byte_636
GAME:26C1                 LDA     RANDOM          ; Random Number Generator
GAME:26C4                 LSR     A
GAME:26C5                 BCC     OY
GAME:26C7                 LDA     #UNKNOWNS_STATE_2
GAME:26C9                 STA     byte_FD
GAME:26CB                 STA     VAR_UNKNOWN_STATE
GAME:26CE                 LDA     CURRENT_GAME_PHASE
GAME:26D0                 CMP     #GAME_PHASE_ROAD_HARD_RIGHT_3
GAME:26D2                 BCS     OC              ; => Return
GAME:26D4                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:26D6                 LSR     A
GAME:26D7                 BCC     OC              ; => Return
GAME:26D9                 INC     byte_6A8
GAME:26DC                 RTS
GAME:26DD ; ---------------------------------------------------------------------------
GAME:26DD
GAME:26DD OY:                                     ; CODE XREF: L6+40↑j
GAME:26DD                 JMP     KV
GAME:26E0 ; ---------------------------------------------------------------------------
GAME:26E0
GAME:26E0 OD:                                     ; CODE XREF: L6+5↑j
GAME:26E0                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:26E2                 BNE     OC              ; => Return
GAME:26E4                 DEC     byte_636
GAME:26E7                 BNE     OE
GAME:26E9                 INC     VAR_UNKNOWN_STATE
GAME:26EC
GAME:26EC OC:                                     ; CODE XREF: L6+2A↑j
GAME:26EC                                         ; L6+35↑j ...
GAME:26EC                 RTS                     ; => Return
GAME:26ED ; ---------------------------------------------------------------------------
GAME:26ED
GAME:26ED OE:                                     ; CODE XREF: L6+62↑j
GAME:26ED                 LDA     byte_636
GAME:26F0                 CMP     #13
GAME:26F2                 BCC     OC              ; => Return
GAME:26F4                 LSR     A
GAME:26F5                 BCC     OF
GAME:26F7                 LDA     #_SPACE|_C_BLACK
GAME:26F9                 STA     SC_STATUS_LINE.line_1.enemy_plane_warning ; "P" character
GAME:26FC                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:26FF                 RTS
GAME:2700 ; ---------------------------------------------------------------------------
GAME:2700
GAME:2700 OF:                                     ; CODE XREF: L6+70↑j
GAME:2700                 LDA     #_P|_C_ORANGE
GAME:2702                 STA     SC_STATUS_LINE.line_1.enemy_plane_warning ; "P" character
GAME:2705                 JSR     WARN
GAME:2708                 RTS
GAME:2708 ; End of function L6
GAME:2708
GAME:2709
GAME:2709 ; =============== S U B R O U T I N E =======================================
GAME:2709
GAME:2709
GAME:2709 OG:                                     ; CODE XREF: L6+9↑j
GAME:2709                                         ; PBMB+22↓p
GAME:2709                 LDY     #186
GAME:270B                 STY     ENEMY_Y_POS     ; Enemy Y position
GAME:270D                 STY     byte_C2
GAME:270F                 LDX     #10
GAME:2711
GAME:2711 OH:                                     ; CODE XREF: OG+10↓j
GAME:2711                 LDA     BUF+1,X
GAME:2714                 STA     P2+9,Y          ; Enemy (first color)
GAME:2717                 DEY
GAME:2718                 DEX
GAME:2719                 BNE     OH
GAME:271B                 LDA     #1100b
GAME:271D                 STA     P3+$BC          ; Enemy (second color)
GAME:2720                 LDA     #100b
GAME:2722                 STA     P3+$BD          ; Enemy (second color)
GAME:2725                 LDA     #10000b
GAME:2727                 STA     P3+$BE          ; Enemy (second color)
GAME:272A                 LDA     RANDOM          ; Random Number Generator
GAME:272D                 AND     #$3F ; '?'
GAME:272F                 ORA     #$18
GAME:2731                 ADC     #6
GAME:2733                 STA     byte_62F
GAME:2736                 LDA     RANDOM          ; Random Number Generator
GAME:2739                 AND     #$3F ; '?'
GAME:273B                 STA     ENEMY_X_POS     ; Enemy X position
GAME:273D                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:2740                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:2743                 INC     VAR_UNKNOWN_STATE
GAME:2746                 LDA     byte_C4
GAME:2748                 BNE     Q3
GAME:274A                 LDA     #COLOR_INTENSITY_12|COLOR_DARK_PURPLE
GAME:274C                 STA     PCOLR2          ; P2 COLOR
GAME:274F                 DEC     byte_C4
GAME:2751                 RTS
GAME:2752 ; ---------------------------------------------------------------------------
GAME:2752
GAME:2752 Q3:                                     ; CODE XREF: OG+3F↑j
GAME:2752                 LDA     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:2754                 STA     PCOLR2          ; P2 COLOR
GAME:2757                 RTS
GAME:2757 ; End of function OG
GAME:2757
GAME:2758 ; ---------------------------------------------------------------------------
GAME:2758 ; START OF FUNCTION CHUNK FOR L6
GAME:2758
GAME:2758 OW:                                     ; CODE XREF: L6:OI↑j
GAME:2758                 DEC     byte_62F
GAME:275B                 BNE     OX
GAME:275D                 INC     VAR_UNKNOWN_STATE
GAME:2760                 LDY     byte_C2
GAME:2762                 LDX     #8
GAME:2764
GAME:2764 OK:                                     ; CODE XREF: L6+E7↓j
GAME:2764                 LDA     P1IMAGE-1,X     ; plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)
GAME:2767                 STA     P3+7,Y          ; Enemy (second color)
GAME:276A                 DEY
GAME:276B                 DEX
GAME:276C                 BNE     OK
GAME:276E
GAME:276E OX:                                     ; CODE XREF: L6+22↑j
GAME:276E                                         ; L6+D6↑j
GAME:276E                 LDA     byte_FD
GAME:2770                 CMP     #254
GAME:2772                 BEQ     _1
GAME:2774                 JSR     COLP02
GAME:2777                 JSR     TRIGB
GAME:277A                 JSR     BTURN
GAME:277D                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:2780                 CMP     #TURN_MODE_RIGHT
GAME:2782                 BEQ     OR
GAME:2784
GAME:2784 _1:                                     ; CODE XREF: L6+ED↑j
GAME:2784                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:2786                 CPY     #14
GAME:2788                 BCS     OL
GAME:278A                 LDA     #0
GAME:278C
GAME:278C K1:                                     ; CODE XREF: L6+17F↓j
GAME:278C                 LDX     #10
GAME:278E
GAME:278E OM:                                     ; CODE XREF: L6+111↓j
GAME:278E                 STA     P2+9,Y          ; Enemy (first color)
GAME:2791                 STA     P3+9,Y          ; Enemy (second color)
GAME:2794                 DEY
GAME:2795                 DEX
GAME:2796                 BNE     OM
GAME:2798                 JSR     AEL
GAME:279B                 INC     VAR_UNKNOWN_STATE
GAME:279E                 JMP     OR
GAME:27A1 ; ---------------------------------------------------------------------------
GAME:27A1
GAME:27A1 OL:                                     ; CODE XREF: L6+103↑j
GAME:27A1                 LDX     #12
GAME:27A3
GAME:27A3 ON:                                     ; CODE XREF: L6+12C↓j
GAME:27A3                 LDA     P2,Y            ; Enemy (first color)
GAME:27A6                 STA     P1+$FF,Y        ; Player Plane (BLACK parts)
GAME:27A9                 LDA     P3,Y            ; Enemy (second color)
GAME:27AC                 STA     P2+$FF,Y        ; Enemy (first color)
GAME:27AF                 INY
GAME:27B0                 DEX
GAME:27B1                 BNE     ON
GAME:27B3                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:27B6                 BNE     OQ
GAME:27B8                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:27BA                 LDA     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:27BD                 LDX     #3
GAME:27BF                 CMP     #3
GAME:27C1                 BCC     OP
GAME:27C3
GAME:27C3 OO:                                     ; CODE XREF: L6+146↓j
GAME:27C3                 LDA     P0IMAGE+9,X     ; regular plane (0-9), contrast color (10-12), contrast color (13-15)
GAME:27C6                 STA     P2+1,Y          ; Enemy (first color)
GAME:27C9                 DEY
GAME:27CA                 DEX
GAME:27CB                 BNE     OO
GAME:27CD                 JMP     OQ
GAME:27D0 ; ---------------------------------------------------------------------------
GAME:27D0
GAME:27D0 OP:                                     ; CODE XREF: L6+13C↑j
GAME:27D0                                         ; L6+153↓j
GAME:27D0                 LDA     P0IMAGE+$C,X    ; regular plane (0-9), contrast color (10-12), contrast color (13-15)
GAME:27D3                 STA     P2+1,Y          ; Enemy (first color)
GAME:27D6                 DEY
GAME:27D7                 DEX
GAME:27D8                 BNE     OP
GAME:27DA
GAME:27DA OQ:                                     ; CODE XREF: L6+131↑j
GAME:27DA                                         ; L6+148↑j
GAME:27DA                 DEC     ENEMY_Y_POS     ; Enemy Y position
GAME:27DC                 LDA     VAR_UNKNOWN_STATE
GAME:27DF                 CMP     #UNKNOWNS_STATE_5
GAME:27E1                 BNE     OV
GAME:27E3
GAME:27E3 OR:                                     ; CODE XREF: L6+13↑j
GAME:27E3                                         ; L6+FD↑j ...
GAME:27E3                 LDY     byte_C2
GAME:27E5                 CPY     #12
GAME:27E7                 BCS     OS
GAME:27E7 ; END OF FUNCTION CHUNK FOR L6
GAME:27E9
GAME:27E9 ; =============== S U B R O U T I N E =======================================
GAME:27E9
GAME:27E9
GAME:27E9 K0:                                     ; CODE XREF: L6+178↓p
GAME:27E9                 LDA     #0
GAME:27EB                 LDX     #8
GAME:27ED
GAME:27ED OT:                                     ; CODE XREF: K0+9↓j
GAME:27ED                 STA     P3+7,Y          ; Enemy (second color)
GAME:27F0                 DEY
GAME:27F1                 DEX
GAME:27F2                 BNE     OT
GAME:27F4                 STA     byte_FD
GAME:27F6                 RTS
GAME:27F6 ; End of function K0
GAME:27F6
GAME:27F7 ; ---------------------------------------------------------------------------
GAME:27F7 ; START OF FUNCTION CHUNK FOR L6
GAME:27F7
GAME:27F7 OS:                                     ; CODE XREF: L6+162↑j
GAME:27F7                 LDX     ENEMY_X_POS     ; Enemy X position
GAME:27F9                 CPX     #220
GAME:27FB                 BCC     J9
GAME:27FD                 JSR     K0
GAME:2800                 STA     byte_C2
GAME:2802                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:2804                 JMP     K1
GAME:2807 ; ---------------------------------------------------------------------------
GAME:2807
GAME:2807 J9:                                     ; CODE XREF: L6+176↑j
GAME:2807                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:280A                 CMP     #TURN_MODE_RIGHT
GAME:280C                 BEQ     OV
GAME:280E                 LDX     #9
GAME:2810
GAME:2810 OU:                                     ; CODE XREF: L6+193↓j
GAME:2810                 LDA     P3,Y            ; Enemy (second color)
GAME:2813                 STA     P2+$FF,Y        ; Enemy (first color)
GAME:2816                 INY
GAME:2817                 DEX
GAME:2818                 BNE     OU
GAME:281A                 DEC     byte_C2
GAME:281C
GAME:281C OV:                                     ; CODE XREF: L6+15C↑j
GAME:281C                                         ; L6+187↑j
GAME:281C                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:281F                 CMP     #TURN_MODE_LEFT
GAME:2821                 BEQ     K8              ; => Return
GAME:2823                 INC     ENEMY_X_POS     ; Enemy X position
GAME:2825                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:2827                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:282A                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:282D
GAME:282D K8:                                     ; CODE XREF: L6+19C↑j
GAME:282D                 RTS                     ; => Return
GAME:282D ; END OF FUNCTION CHUNK FOR L6
GAME:282E
GAME:282E ; =============== S U B R O U T I N E =======================================
GAME:282E
GAME:282E ; Splash sound effect on channel 2
GAME:282E
GAME:282E SPLASH:                                 ; CODE XREF: COMMON+3F↑p
GAME:282E                                         ; TURN+127↑p ...
GAME:282E                 LDA     AUDIO2_DURATION_COUNTER
GAME:2831                 BEQ     QH              ; => Return
GAME:2833                 DEC     AUDIO2_DURATION_COUNTER
GAME:2836                 LDA     AUDIO2_DURATION_COUNTER
GAME:2839                 LSR     A
GAME:283A                 BCS     QH              ; => Return
GAME:283C                 CMP     #3
GAME:283E                 BCC     QI
GAME:2840                 CMP     #7
GAME:2842                 BCC     QH              ; => Return
GAME:2844                 CMP     #14
GAME:2846                 BCC     QJ
GAME:2848                 INC     AUDIO2_FREQ_COUNTER
GAME:284B
GAME:284B QK:                                     ; CODE XREF: SPLASH+27↓j
GAME:284B                 LDA     AUDIO2_FREQ_COUNTER
GAME:284E                 STA     AUDF2           ; Audio 2 Frequency Register
GAME:2851                 RTS
GAME:2852 ; ---------------------------------------------------------------------------
GAME:2852
GAME:2852 QJ:                                     ; CODE XREF: SPLASH+18↑j
GAME:2852                 DEC     AUDIO2_FREQ_COUNTER
GAME:2855                 JMP     QK
GAME:2858 ; ---------------------------------------------------------------------------
GAME:2858
GAME:2858 QI:                                     ; CODE XREF: SPLASH+10↑j
GAME:2858                 DEC     AUDIO2_EFFECT_COUNTER
GAME:285B                 LDA     AUDIO2_EFFECT_COUNTER
GAME:285E                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:2861
GAME:2861 QH:                                     ; CODE XREF: SPLASH+3↑j
GAME:2861                                         ; SPLASH+C↑j ...
GAME:2861                 RTS                     ; => Return
GAME:2861 ; End of function SPLASH
GAME:2861
GAME:2862
GAME:2862 ; =============== S U B R O U T I N E =======================================
GAME:2862
GAME:2862
GAME:2862 DRTNK:                                  ; CODE XREF: SRT+12↑p
GAME:2862                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:2864                 BEQ     QL
GAME:2866                 RTS
GAME:2867 ; ---------------------------------------------------------------------------
GAME:2867
GAME:2867 QL:                                     ; CODE XREF: DRTNK+2↑j
GAME:2867                 LDA     byte_650
GAME:286A                 BEQ     QM
GAME:286C                 DEC     byte_650
GAME:286F                 RTS
GAME:2870 ; ---------------------------------------------------------------------------
GAME:2870
GAME:2870 QM:                                     ; CODE XREF: DRTNK+8↑j
GAME:2870                 LDA     BUILDING_ROW_COUNTER
GAME:2873                 BNE     QN              ; construct a 5x2 building wit up to 6 tanks in front of it and an anti-aircraft gun
GAME:2875                 LDA     byte_638
GAME:2878                 CMP     #20
GAME:287A                 BCS     QQ
GAME:287C                 LDA     #60
GAME:287E                 STA     byte_650
GAME:2881                 RTS
GAME:2882 ; ---------------------------------------------------------------------------
GAME:2882
GAME:2882 QQ:                                     ; CODE XREF: DRTNK+18↑j
GAME:2882                 LDA     byte_FE
GAME:2884                 CMP     #8
GAME:2886                 BCS     QR
GAME:2888                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:288A                 CMP     #25
GAME:288C                 BCC     QR
GAME:288E                 LDA     #10
GAME:2890                 STA     byte_650
GAME:2893                 RTS
GAME:2894 ; ---------------------------------------------------------------------------
GAME:2894
GAME:2894 QR:                                     ; CODE XREF: DRTNK+24↑j
GAME:2894                                         ; DRTNK+2A↑j
GAME:2894                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:2896                 CMP     #36
GAME:2898                 BCC     QS
GAME:289A                 LDA     #3
GAME:289C                 STA     byte_610
GAME:289F                 RTS
GAME:289F ; End of function DRTNK
GAME:289F
GAME:28A0
GAME:28A0 ; =============== S U B R O U T I N E =======================================
GAME:28A0
GAME:28A0
GAME:28A0 QS:                                     ; CODE XREF: DRTNK+36↑j
GAME:28A0                                         ; TNKC+14↓j
GAME:28A0                 LDA     #8
GAME:28A2                 STA     BUILDING_ROW_COUNTER
GAME:28A5                 LDX     #0
GAME:28A7                 STX     byte_B6
GAME:28A9                 STX     byte_676
GAME:28AC                 LDA     RANDOM          ; Random Number Generator
GAME:28AF                 LSR     A
GAME:28B0                 BCC     QT
GAME:28B2                 STX     BUILDING_COLOR_OFFSET
GAME:28B5                 RTS
GAME:28B6 ; ---------------------------------------------------------------------------
GAME:28B6
GAME:28B6 QT:                                     ; CODE XREF: QS+10↑j
GAME:28B6                 LDA     #L_GRAS|L_C_1
GAME:28B8                 STA     BUILDING_COLOR_OFFSET
GAME:28BB                 RTS
GAME:28BB ; End of function QS
GAME:28BB
GAME:28BC
GAME:28BC ; =============== S U B R O U T I N E =======================================
GAME:28BC
GAME:28BC ; construct a 5x2 building wit up to 6 tanks in front of it and an anti-aircraft gun
GAME:28BC
GAME:28BC QN:                                     ; CODE XREF: DRTNK+11↑j
GAME:28BC                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:28BE
GAME:28BE TT:                                     ; CODE XREF: TNKC+1A↓j
GAME:28BE                 INY
GAME:28BF                 INY
GAME:28C0                 DEC     BUILDING_ROW_COUNTER
GAME:28C3                 LDA     BUILDING_ROW_COUNTER
GAME:28C6                 BEQ     RE__BUILDING_ROW_0
GAME:28C8                 CMP     #1
GAME:28CA                 BEQ     RB__BUILDING_ROW_1
GAME:28CC                 CMP     #2
GAME:28CE                 BEQ     QY__BUILDING_ROW_2 ; Build a base row of the building
GAME:28D0                 CMP     #4
GAME:28D2                 BCC     QX__BUILDING_ROW_3
GAME:28D4
GAME:28D4                 LDA     byte_676
GAME:28D7                 BNE     WE              ; up ro 6 tanks in front of the building
GAME:28D9                 LDA     #2
GAME:28DB                 STA     byte_B6
GAME:28DD
GAME:28DD WE:                                     ; CODE XREF: QN+1B↑j
GAME:28DD                 LDX     #6              ; up ro 6 tanks in front of the building
GAME:28DF
GAME:28DF QW:                                     ; CODE XREF: QN+3C↓j
GAME:28DF                 INY
GAME:28E0                 LDA     RANDOM          ; Random Number Generator
GAME:28E3                 LSR     A
GAME:28E4                 BCC     QU
GAME:28E6                 LDA     #L_TANK_LEFT_A|L_C_1
GAME:28E8                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:28EA                 INY
GAME:28EB                 LDA     #L_TANK_RIGHT_A|L_C_1
GAME:28ED                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:28EF                 JMP     QV
GAME:28F2 ; ---------------------------------------------------------------------------
GAME:28F2
GAME:28F2 QU:                                     ; CODE XREF: QN+28↑j
GAME:28F2                 INY
GAME:28F3                 LDA     #L_GRAS_BEFORE_BUILDING|L_C_0
GAME:28F5                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:28F7
GAME:28F7 QV:                                     ; CODE XREF: QN+33↑j
GAME:28F7                 DEX
GAME:28F8                 BNE     QW
GAME:28FA                 RTS
GAME:28FB ; ---------------------------------------------------------------------------
GAME:28FB
GAME:28FB RB__BUILDING_ROW_1:                     ; CODE XREF: QN+E↑j
GAME:28FB                 JMP     RC              ; Build a center row of the building
GAME:28FE ; ---------------------------------------------------------------------------
GAME:28FE
GAME:28FE RE__BUILDING_ROW_0:                     ; CODE XREF: QN+A↑j
GAME:28FE                 JMP     RF              ; Building create roof
GAME:2901 ; ---------------------------------------------------------------------------
GAME:2901
GAME:2901 QX__BUILDING_ROW_3:                     ; CODE XREF: QN+16↑j
GAME:2901                 LDA     #0
GAME:2903                 STA     byte_B6
GAME:2905                 STA     byte_676
GAME:2908                 JSR     DFTNK
GAME:290B                 RTS
GAME:290C ; ---------------------------------------------------------------------------
GAME:290C
GAME:290C QY__BUILDING_ROW_2:                     ; CODE XREF: QN+12↑j
GAME:290C                 PHA                     ; Build a base row of the building
GAME:290D                 INY
GAME:290E                 INY
GAME:290F                 INY
GAME:2910                 STY     BUILDING_X_START_POS
GAME:2913                 INY
GAME:2914
GAME:2914 RD:                                     ; CODE XREF: QN+91↓j
GAME:2914                 LDX     #5
GAME:2916                 LDA     #L_BUILDING_WINDOW|L_C_0
GAME:2918                 CLC
GAME:2919                 ADC     BUILDING_COLOR_OFFSET
GAME:291C
GAME:291C QZ:                                     ; CODE XREF: QN+64↓j
GAME:291C                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:291E                 INY
GAME:291F                 DEX
GAME:2920                 BNE     QZ
GAME:2922                 PLA
GAME:2923                 CMP     #1
GAME:2925                 BEQ     RA
GAME:2927                 LDA     #L_BUILDING_WALL_A|L_C_0
GAME:2929                 CLC
GAME:292A                 ADC     BUILDING_COLOR_OFFSET
GAME:292D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:292F
GAME:292F                 LDA     #11
GAME:2931                 STA     byte_6A3
GAME:2934                 JSR     B5
GAME:2937                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_1
GAME:2939                 LDY     BUILDING_X_START_POS
GAME:293C                 DEY                     ; anti-aircraft gun to the left of the building
GAME:293D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:293F                 RTS
GAME:2940 ; ---------------------------------------------------------------------------
GAME:2940
GAME:2940 RA:                                     ; CODE XREF: QN+69↑j
GAME:2940                 LDA     #L_RUNWAY_CENTER_12|L_C_0
GAME:2942                 CLC
GAME:2943                 ADC     BUILDING_COLOR_OFFSET
GAME:2946                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2948                 RTS
GAME:2949 ; ---------------------------------------------------------------------------
GAME:2949
GAME:2949 RC:                                     ; CODE XREF: QN:RB__BUILDING_ROW_1↑j
GAME:2949                 PHA                     ; Build a center row of the building
GAME:294A                 LDY     BUILDING_X_START_POS
GAME:294D                 JMP     RD
GAME:2950 ; ---------------------------------------------------------------------------
GAME:2950
GAME:2950 RF:                                     ; CODE XREF: QN:RE__BUILDING_ROW_0↑j
GAME:2950                 LDY     BUILDING_X_START_POS ; Building create roof
GAME:2953                 DEY
GAME:2954                 LDA     #L_BUILDING_ROOF_TOP_LEFT|L_C_1
GAME:2956                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2958                 INY
GAME:2959                 LDX     #4
GAME:295B                 LDA     #L_BUILDING_ROOF_CENTER|L_C_1
GAME:295D
GAME:295D RG:                                     ; CODE XREF: QN+A5↓j
GAME:295D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:295F                 INY
GAME:2960                 DEX
GAME:2961                 BNE     RG
GAME:2963                 LDA     #L_BUILDING_ROOF_TOP_RIGHT|L_C_0
GAME:2965                 CLC
GAME:2966                 ADC     BUILDING_COLOR_OFFSET
GAME:2969                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:296B                 LDY     byte_676
GAME:296E                 BNE     WF
GAME:2970                 DEY
GAME:2971                 STY     byte_B6
GAME:2973
GAME:2973 WF:                                     ; CODE XREF: QN+B2↑j
GAME:2973                 LDA     RANDOM          ; Random Number Generator
GAME:2976                 AND     #$F
GAME:2978                 ADC     #26
GAME:297A                 STA     byte_650
GAME:297D                 LDA     byte_C4
GAME:297F                 CMP     #5
GAME:2981                 BNE     Q0              ; => Return
GAME:2983                 LDA     #PRIMARY_TARGET_SUBTYPE_BUILDING
GAME:2985                 STA     VAR_PRIMARY_TARGET_SUBTYPE
GAME:2988                 LDY     #11
GAME:298A                 LDA     BUILDING_X_START_POS
GAME:298D                 CLC
GAME:298E                 ADC     #14
GAME:2990                 JMP     GNSGHT
GAME:2993 ; ---------------------------------------------------------------------------
GAME:2993
GAME:2993 Q0:                                     ; CODE XREF: QN+C5↑j
GAME:2993                 RTS                     ; => Return
GAME:2993 ; End of function QN
GAME:2993
GAME:2994
GAME:2994 ; =============== S U B R O U T I N E =======================================
GAME:2994
GAME:2994
GAME:2994 COLM20:                                 ; CODE XREF: TRIGF-12↓p
GAME:2994                 LDA     M2PL_SIZEP2     ; Missle to Player 2 Collision / Player 2 Size
GAME:2997                 AND     #1
GAME:2999                 CMP     #1
GAME:299B                 BEQ     RS
GAME:299D
GAME:299D RU:                                     ; CODE XREF: COLM20+1E↓j
GAME:299D                                         ; COLM20+26↓j
GAME:299D                 RTS                     ; => Return
GAME:299E ; ---------------------------------------------------------------------------
GAME:299E
GAME:299E RS:                                     ; CODE XREF: COLM20+7↑j
GAME:299E                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:29A0                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:29A2                 SBC     DIFF.field_5    ; Difficulty for the level
GAME:29A5                 STA     byte_658
GAME:29A8                 LDA     byte_C2
GAME:29AA                 SBC     ENEMY_Y_POS     ; Enemy Y position
GAME:29AC                 SBC     byte_658
GAME:29AF                 CMP     DIFF.field_6    ; Difficulty for the level
GAME:29B2                 BCS     RU              ; => Return
GAME:29B4
GAME:29B4 DAMAGE:
GAME:29B4                 JSR     RO
GAME:29B7
GAME:29B7 SV:                                     ; CODE XREF: COLM30+23↓p
GAME:29B7                                         ; CLG20+36↓p
GAME:29B7                 LDA     byte_6F7
GAME:29BA                 BNE     RU              ; => Return
GAME:29BC                 LDA     #35
GAME:29BE                 STA     byte_6F7
GAME:29C1                 LDX     #72
GAME:29C3                 STA     PLANE_HIT_FLASH_COUNTER ; !=0 => counter to signal damage via flashing
GAME:29C5                 LDA     #15
GAME:29C7                 JSR     XXX             ; Start Audio 3 sound effect
GAME:29CA                 LDX     WORKING_PARTS   ; # of working part (4): fuel, bomb, maneuverabiity, gun
GAME:29CD                 BNE     RV              ; Damage a random part in the plane
GAME:29CF                 STX     IS_DEMO_MODE    ; Disable demo mode, when plane is completely damaged – to allow it to crash
GAME:29D2                 INX
GAME:29D3                 STX     byte_643
GAME:29D6                 INX
GAME:29D7                 STX     PCOLR0          ; P0 COLOR
GAME:29DA                 RTS
GAME:29DB ; ---------------------------------------------------------------------------
GAME:29DB
GAME:29DB RV:                                     ; CODE XREF: COLM20+39↑j
GAME:29DB                 DEC     WORKING_PARTS   ; Damage a random part in the plane
GAME:29DE
GAME:29DE RZ:                                     ; CODE XREF: COLM20+5C↓j
GAME:29DE                                         ; COLM20+67↓j ...
GAME:29DE                 LDA     RANDOM          ; Random Number Generator
GAME:29E1                 AND     #3
GAME:29E3                 BEQ     RW
GAME:29E5                 CMP     #1
GAME:29E7                 BEQ     RX
GAME:29E9                 CMP     #2
GAME:29EB                 BEQ     RY
GAME:29ED                 LDA     SC_STATUS_LINE.line_0.machine_gun_damaged ; "G" character
GAME:29F0                 BNE     RZ
GAME:29F2                 LDA     #_G|_C_ORANGE
GAME:29F4                 STA     SC_STATUS_LINE.line_0.machine_gun_damaged ; "G" character
GAME:29F7                 RTS
GAME:29F8 ; ---------------------------------------------------------------------------
GAME:29F8
GAME:29F8 RW:                                     ; CODE XREF: COLM20+4F↑j
GAME:29F8                 LDA     SC_STATUS_LINE.line_0.fuel_leak ; "F" character
GAME:29FB                 BNE     RZ
GAME:29FD                 LDA     #_F|_C_ORANGE
GAME:29FF                 STA     SC_STATUS_LINE.line_0.fuel_leak ; "F" character
GAME:2A02                 RTS
GAME:2A03 ; ---------------------------------------------------------------------------
GAME:2A03
GAME:2A03 RX:                                     ; CODE XREF: COLM20+53↑j
GAME:2A03                 LDA     SC_STATUS_LINE.line_0.bomb_gear_damaged ; "B" character
GAME:2A06                 BNE     RZ
GAME:2A08                 LDA     #_B|_C_ORANGE
GAME:2A0A                 STA     SC_STATUS_LINE.line_0.bomb_gear_damaged ; "B" character
GAME:2A0D                 RTS
GAME:2A0E ; ---------------------------------------------------------------------------
GAME:2A0E
GAME:2A0E RY:                                     ; CODE XREF: COLM20+57↑j
GAME:2A0E                 LDA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:2A11                 BNE     RZ
GAME:2A13                 LDA     #_M|_C_ORANGE
GAME:2A15                 STA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:2A18                 RTS
GAME:2A18 ; End of function COLM20
GAME:2A18
GAME:2A19
GAME:2A19 ; =============== S U B R O U T I N E =======================================
GAME:2A19
GAME:2A19
GAME:2A19 TRIGB:                                  ; CODE XREF: PLBCK+16↑p
GAME:2A19                                         ; L6+F2↑p
GAME:2A19
GAME:2A19 ; FUNCTION CHUNK AT GAME:2A54 SIZE 0000001C BYTES
GAME:2A19
GAME:2A19                 LDY     byte_656
GAME:2A1C                 BNE     RR
GAME:2A1E                 LDA     byte_C2
GAME:2A20                 SBC     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:2A22                 BMI     RM              ; => Return
GAME:2A24                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:2A26                 CMP     #170
GAME:2A28                 BCS     RM              ; => Return
GAME:2A2A                 LDA     RANDOM          ; Random Number Generator
GAME:2A2D                 CMP     DIFF.field_2    ; Difficulty for the level
GAME:2A30                 BCS     RM              ; => Return
GAME:2A32                 LDA     VAR_UNKNOWN_STATE
GAME:2A35                 CMP     #UNKNOWNS_STATE_5
GAME:2A37                 BNE     RM              ; => Return
GAME:2A39                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:2A3B                 CLC
GAME:2A3C                 ADC     #6
GAME:2A3E                 STA     byte_657
GAME:2A41                 STA     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:2A44                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:2A46                 INY
GAME:2A47                 INY
GAME:2A47 ; End of function TRIGB
GAME:2A47
GAME:2A48 ; START OF FUNCTION CHUNK FOR TRIGF
GAME:2A48
GAME:2A48 RN:                                     ; CODE XREF: TRIGF+22↓j
GAME:2A48                 STY     byte_656
GAME:2A4B                 LDA     #110000b
GAME:2A4D                 STA     MISSLE,Y
GAME:2A50                 STA     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:2A53
GAME:2A53 RM:                                     ; CODE XREF: TRIGB+9↑j
GAME:2A53                                         ; TRIGB+F↑j ...
GAME:2A53                 RTS                     ; => Return
GAME:2A53 ; END OF FUNCTION CHUNK FOR TRIGF
GAME:2A54 ; ---------------------------------------------------------------------------
GAME:2A54 ; START OF FUNCTION CHUNK FOR TRIGB
GAME:2A54
GAME:2A54 RR:                                     ; CODE XREF: TRIGB+3↑j
GAME:2A54                 CPY     #30
GAME:2A56                 BCC     RO
GAME:2A58                 LDA     byte_657
GAME:2A5B                 CMP     #205
GAME:2A5D                 BCS     RO
GAME:2A5F                 CLC
GAME:2A60                 ADC     #3
GAME:2A62                 STA     byte_657
GAME:2A65                 STA     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:2A68                 LDA     #0
GAME:2A6A                 STA     MISSLE,Y
GAME:2A6D                 DEY
GAME:2A6E                 DEY
GAME:2A6F                 DEY
GAME:2A6F ; END OF FUNCTION CHUNK FOR TRIGB
GAME:2A70 ; START OF FUNCTION CHUNK FOR TRIGF
GAME:2A70
GAME:2A70 RP:                                     ; CODE XREF: TRIGF+42↓j
GAME:2A70                 STY     byte_656
GAME:2A73                 LDA     #110000b
GAME:2A75                 STA     MISSLE,Y
GAME:2A78                 JSR     COLM20
GAME:2A7B                 RTS
GAME:2A7B ; END OF FUNCTION CHUNK FOR TRIGF
GAME:2A7C
GAME:2A7C ; =============== S U B R O U T I N E =======================================
GAME:2A7C
GAME:2A7C
GAME:2A7C RO:                                     ; CODE XREF: COLM20:DAMAGE↑p
GAME:2A7C                                         ; TRIGB+3D↑j ...
GAME:2A7C                 LDA     #0
GAME:2A7E                 STA     byte_656
GAME:2A81                 STA     MISSLE,Y
GAME:2A84                 LDX     #255
GAME:2A86                 STX     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:2A89
GAME:2A89 SG:                                     ; CODE XREF: TRIGF+9↓j
GAME:2A89                                         ; TRIGF+11↓j
GAME:2A89                 RTS                     ; => Return
GAME:2A89 ; End of function RO
GAME:2A89
GAME:2A8A
GAME:2A8A ; =============== S U B R O U T I N E =======================================
GAME:2A8A
GAME:2A8A
GAME:2A8A TRIGF:                                  ; CODE XREF: LF+6↑p
GAME:2A8A
GAME:2A8A ; FUNCTION CHUNK AT GAME:2A48 SIZE 0000000C BYTES
GAME:2A8A ; FUNCTION CHUNK AT GAME:2A70 SIZE 0000000C BYTES
GAME:2A8A
GAME:2A8A                 LDY     byte_656
GAME:2A8D                 BNE     loc_2AAF
GAME:2A8F                 LDA     byte_C2
GAME:2A91                 CMP     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:2A93                 BCS     SG              ; => Return
GAME:2A95                 LDA     RANDOM          ; Random Number Generator
GAME:2A98                 CMP     DIFF.field_2    ; Difficulty for the level
GAME:2A9B                 BCS     SG              ; => Return
GAME:2A9D                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:2A9F                 SBC     #2
GAME:2AA1                 STA     byte_657
GAME:2AA4                 STA     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:2AA7                 LDA     ENEMY_Y_POS     ; Enemy Y position
GAME:2AA9                 ADC     #11
GAME:2AAB                 TAY
GAME:2AAC                 JMP     RN
GAME:2AAF ; ---------------------------------------------------------------------------
GAME:2AAF
GAME:2AAF loc_2AAF:                               ; CODE XREF: TRIGF+3↑j
GAME:2AAF                 CPY     #185
GAME:2AB1                 BCS     RO
GAME:2AB3                 LDA     byte_657
GAME:2AB6                 CMP     #55
GAME:2AB8                 BCC     RO
GAME:2ABA                 CLC
GAME:2ABB                 SBC     #2
GAME:2ABD                 STA     byte_657
GAME:2AC0                 STA     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:2AC3                 LDA     #0
GAME:2AC5                 STA     MISSLE,Y
GAME:2AC8                 INY
GAME:2AC9                 INY
GAME:2ACA                 INY
GAME:2ACB                 INY
GAME:2ACC                 JMP     RP
GAME:2ACC ; End of function TRIGF
GAME:2ACC
GAME:2ACF
GAME:2ACF ; =============== S U B R O U T I N E =======================================
GAME:2ACF
GAME:2ACF
GAME:2ACF BRGPOS:                                 ; CODE XREF: COMMON+4E↑p
GAME:2ACF                 LDA     byte_661
GAME:2AD2                 BNE     loc_2ADB
GAME:2AD4                 RTS
GAME:2AD5 ; ---------------------------------------------------------------------------
GAME:2AD5
GAME:2AD5 loc_2AD5:                               ; CODE XREF: BRGPOS+1D↓j
GAME:2AD5                 LDA     #0
GAME:2AD7                 STA     byte_661
GAME:2ADA                 RTS
GAME:2ADB ; ---------------------------------------------------------------------------
GAME:2ADB
GAME:2ADB loc_2ADB:                               ; CODE XREF: BRGPOS+3↑j
GAME:2ADB                 LDA     byte_664
GAME:2ADE                 BEQ     loc_2AE4
GAME:2AE0                 DEC     byte_664
GAME:2AE3                 RTS
GAME:2AE4 ; ---------------------------------------------------------------------------
GAME:2AE4
GAME:2AE4 loc_2AE4:                               ; CODE XREF: BRGPOS+F↑j
GAME:2AE4                 INC     byte_65D
GAME:2AE7                 LDY     byte_65D
GAME:2AEA                 CPY     #210
GAME:2AEC                 BEQ     loc_2AD5
GAME:2AEE                 DEC     byte_65E
GAME:2AF1                 LDA     byte_65E
GAME:2AF4                 LSR     A
GAME:2AF5                 BCS     SP              ; => Return
GAME:2AF7                 DEC     MISSLE_3_X_POS2
GAME:2AFA
GAME:2AFA SP:                                     ; CODE XREF: BRGPOS+26↑j
GAME:2AFA                                         ; FBRGN+2↓j ...
GAME:2AFA                 RTS                     ; => Return
GAME:2AFA ; End of function BRGPOS
GAME:2AFA
GAME:2AFB
GAME:2AFB ; =============== S U B R O U T I N E =======================================
GAME:2AFB
GAME:2AFB ; Fire Gun
GAME:2AFB
GAME:2AFB FBRGN:                                  ; CODE XREF: SRT+24↑p
GAME:2AFB                                         ; CKLAND+28↑p
GAME:2AFB
GAME:2AFB ; FUNCTION CHUNK AT GAME:2B3F SIZE 00000010 BYTES
GAME:2AFB ; FUNCTION CHUNK AT GAME:2B4F SIZE 00000049 BYTES
GAME:2AFB
GAME:2AFB                 LDA     byte_BF
GAME:2AFD                 BNE     SP              ; => Return
GAME:2AFF                 LDY     byte_65F
GAME:2B02                 BNE     SM
GAME:2B04                 JSR     CKFGN
GAME:2B07                 LDX     MISSLE_3_X_POS2
GAME:2B0A                 CPX     #185
GAME:2B0C                 BCS     TA
GAME:2B0E                 CPX     #161
GAME:2B10                 BCS     SY
GAME:2B12                 CPX     #65
GAME:2B14                 BCC     SP              ; => Return
GAME:2B16
GAME:2B16 ZW:                                     ; CODE XREF: FBRGN+48↓j
GAME:2B16                 JMP     G3
GAME:2B16 ; End of function FBRGN
GAME:2B16
GAME:2B19
GAME:2B19 ; =============== S U B R O U T I N E =======================================
GAME:2B19
GAME:2B19
GAME:2B19 ZZ:
GAME:2B19                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_LEFT
GAME:2B1B
GAME:2B1B A1:
GAME:2B1B                 STA     VAR_MISSLE_3_STATE
GAME:2B1E
GAME:2B1E SX:                                     ; CODE XREF: FTNKGN-1E1↓j
GAME:2B1E                 STX     P3PF_HPOSM3     ; Set missile 3 X position
GAME:2B21                 STX     MISSLE_3_X_POS
GAME:2B24                 STY     byte_65F
GAME:2B27                 LDA     #10000000b
GAME:2B29                 STA     MISSLE,Y
GAME:2B2C                 STA     MISSLE-1,Y
GAME:2B2F                 LDA     RANDOM          ; Random Number Generator
GAME:2B32                 AND     #15
GAME:2B34                 ADC     #15
GAME:2B36                 STA     byte_660
GAME:2B39                 LDA     #12
GAME:2B3B                 STA     AUDIO4_GUN_SND_COUNTER
GAME:2B3E                 RTS
GAME:2B3E ; End of function ZZ
GAME:2B3E
GAME:2B3F ; ---------------------------------------------------------------------------
GAME:2B3F ; START OF FUNCTION CHUNK FOR FBRGN
GAME:2B3F
GAME:2B3F SY:                                     ; CODE XREF: FBRGN+15↑j
GAME:2B3F                 LDA     RANDOM          ; Random Number Generator
GAME:2B42                 LSR     A
GAME:2B43                 BCC     ZW
GAME:2B45
GAME:2B45 TA:                                     ; CODE XREF: FBRGN+11↑j
GAME:2B45                 TXA
GAME:2B46                 SEC
GAME:2B47                 SBC     #96
GAME:2B49                 STA     MISSLE_3_X_POS2
GAME:2B4C                 JMP     G3
GAME:2B4C ; END OF FUNCTION CHUNK FOR FBRGN
GAME:2B4F ; ---------------------------------------------------------------------------
GAME:2B4F ; START OF FUNCTION CHUNK FOR FTNKGN
GAME:2B4F ;   ADDITIONAL PARENT FUNCTION FBRGN
GAME:2B4F
GAME:2B4F SM:                                     ; CODE XREF: FBRGN+7↑j
GAME:2B4F                                         ; FTNKGN:A7↓j
GAME:2B4F                 LDA     VAR_MISSLE_3_STATE
GAME:2B52                 BEQ     ZV
GAME:2B54                 CMP     #ENEMY_BULLET_MOVEMENT_TYPES_LEFT2
GAME:2B56                 BNE     ZX
GAME:2B58                 DEC     MISSLE_3_X_POS
GAME:2B5B
GAME:2B5B ZV:                                     ; CODE XREF: FTNKGN-C5D↑j
GAME:2B5B                                         ; FTNKGN-C36↓j
GAME:2B5B                 DEC     MISSLE_3_X_POS
GAME:2B5E
GAME:2B5E G5:                                     ; CODE XREF: FTNKGN-C3D↓j
GAME:2B5E                 LDA     MISSLE_3_X_POS
GAME:2B61                 STA     P3PF_HPOSM3     ; Missile 3 Horizontal Position / Player 3 to Playfield Collision
GAME:2B64                 JMP     SW
GAME:2B67 ; ---------------------------------------------------------------------------
GAME:2B67
GAME:2B67 ZX:                                     ; CODE XREF: FTNKGN-C59↑j
GAME:2B67                 CMP     #ENEMY_BULLET_MOVEMENT_TYPES_NOTHING
GAME:2B69                 BEQ     SW
GAME:2B6B                 CMP     #ENEMY_BULLET_MOVEMENT_TYPES_RIGHT
GAME:2B6D                 BNE     G4
GAME:2B6F                 INC     MISSLE_3_X_POS
GAME:2B72                 JMP     G5
GAME:2B75 ; ---------------------------------------------------------------------------
GAME:2B75
GAME:2B75 G4:                                     ; CODE XREF: FTNKGN-C42↑j
GAME:2B75                 LDA     byte_65E
GAME:2B78                 LSR     A
GAME:2B79                 BCC     ZV
GAME:2B7B
GAME:2B7B SW:                                     ; CODE XREF: FTNKGN-C4B↑j
GAME:2B7B                                         ; FTNKGN-C46↑j
GAME:2B7B                 LDA     byte_660
GAME:2B7E                 BEQ     SN
GAME:2B80                 DEC     byte_660
GAME:2B83                 BNE     SQ
GAME:2B85                 LDA     AUDIO3_SOUND_COUNTER
GAME:2B88                 BNE     WD
GAME:2B8A                 LDA     #2
GAME:2B8C                 LDX     #AUDIO_CONTROL_VOL_7|AUDIO_CONTROL_DIST_1
GAME:2B8E                 JSR     XXX             ; Start Audio 3 sound effect
GAME:2B91
GAME:2B91 WD:                                     ; CODE XREF: FTNKGN-C27↑j
GAME:2B91                 LDA     #25
GAME:2B93                 STA     byte_662
GAME:2B96                 LDA     #10000000b
GAME:2B96 ; END OF FUNCTION CHUNK FOR FTNKGN
GAME:2B98 ; START OF FUNCTION CHUNK FOR FM2GN
GAME:2B98
GAME:2B98 D3:                                     ; CODE XREF: FM2GN+AB↓j
GAME:2B98                 STA     MISL-2,Y
GAME:2B9B                 STA     MISL-4,Y
GAME:2B9E                 LSR     A
GAME:2B9F                 STA     MISL-1,Y
GAME:2BA2                 STA     MISL-3,Y
GAME:2BA5                 RTS
GAME:2BA5 ; END OF FUNCTION CHUNK FOR FM2GN
GAME:2BA6 ; ---------------------------------------------------------------------------
GAME:2BA6 ; START OF FUNCTION CHUNK FOR FTNKGN
GAME:2BA6
GAME:2BA6 SQ:                                     ; CODE XREF: FTNKGN-C2C↑j
GAME:2BA6                 LDA     #0
GAME:2BA8                 STA     MISSLE,Y
GAME:2BAB                 DEY
GAME:2BAC                 STA     MISSLE,Y
GAME:2BAF                 DEY
GAME:2BB0                 STY     byte_65F
GAME:2BB3                 LDA     #10000000b
GAME:2BB5                 STA     MISSLE,Y
GAME:2BB8                 STA     MISL-1,Y
GAME:2BBB                 JSR     COLM30
GAME:2BBE                 RTS
GAME:2BBE ; END OF FUNCTION CHUNK FOR FTNKGN
GAME:2BBF
GAME:2BBF ; =============== S U B R O U T I N E =======================================
GAME:2BBF
GAME:2BBF
GAME:2BBF SR:                                     ; CODE XREF: FTNKGN-BCD↓j
GAME:2BBF                                         ; COLM30+20↓p
GAME:2BBF                 LDA     #0
GAME:2BC1                 STA     MISSLE,Y
GAME:2BC4                 STA     MISL-1,Y
GAME:2BC7                 STA     byte_65F
GAME:2BCA                 STA     MISL-2,Y
GAME:2BCD                 STA     MISL-3,Y
GAME:2BD0                 STA     MISL-4,Y
GAME:2BD3                 LDA     #111100b
GAME:2BD5                 AND     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:2BD8                 STA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:2BDB                 STA     SIZEM           ; Missle Size
GAME:2BDE                 RTS
GAME:2BDE ; End of function SR
GAME:2BDE
GAME:2BDF ; ---------------------------------------------------------------------------
GAME:2BDF ; START OF FUNCTION CHUNK FOR FTNKGN
GAME:2BDF
GAME:2BDF SN:                                     ; CODE XREF: FTNKGN-C31↑j
GAME:2BDF                 DEC     byte_662
GAME:2BE2                 BEQ     SR
GAME:2BE4                 LDA     byte_65E
GAME:2BE7                 LSR     A
GAME:2BE8                 LSR     A
GAME:2BE9                 LSR     A
GAME:2BEA                 BCC     SS
GAME:2BEC                 JSR     COLM30
GAME:2BEF                 RTS
GAME:2BF0 ; ---------------------------------------------------------------------------
GAME:2BF0
GAME:2BF0 SS:                                     ; CODE XREF: FTNKGN-BC5↑j
GAME:2BF0                 LDA     #11000000b
GAME:2BF2                 ORA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:2BF5                 STA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:2BF8                 STA     SIZEM           ; Missle Size
GAME:2BFB                 RTS
GAME:2BFB ; END OF FUNCTION CHUNK FOR FTNKGN
GAME:2BFC
GAME:2BFC ; =============== S U B R O U T I N E =======================================
GAME:2BFC
GAME:2BFC
GAME:2BFC COLM30:                                 ; CODE XREF: FTNKGN-BF4↑p
GAME:2BFC                                         ; FTNKGN-BC3↑p
GAME:2BFC                 LDA     M3PL_SIZEP3     ; Missle to Player 3 Collision / Player 3 Size
GAME:2BFF                 AND     #1
GAME:2C01                 BNE     ST
GAME:2C03                 LDA     #111111b
GAME:2C05                 AND     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:2C08                 STA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:2C0B                 STA     SIZEM           ; Missle Size
GAME:2C0E
GAME:2C0E SU:                                     ; CODE XREF: COLM30+1E↓j
GAME:2C0E                 RTS                     ; => Return
GAME:2C0F ; ---------------------------------------------------------------------------
GAME:2C0F
GAME:2C0F ST:                                     ; CODE XREF: COLM30+5↑j
GAME:2C0F                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:2C11                 ADC     DIFF.field_3    ; Difficulty for the level
GAME:2C14                 SBC     byte_65D
GAME:2C17                 CMP     DIFF.field_4    ; Difficulty for the level
GAME:2C1A                 BCS     SU              ; => Return
GAME:2C1C                 JSR     SR
GAME:2C1F                 JSR     SV
GAME:2C22                 RTS
GAME:2C22 ; End of function COLM30
GAME:2C22
GAME:2C23 ; ---------------------------------------------------------------------------
GAME:2C23 ; START OF FUNCTION CHUNK FOR ENRUN
GAME:2C23
GAME:2C23 TY:                                     ; CODE XREF: ENRUN+19↓j
GAME:2C23                 LDA     #36
GAME:2C25                 STA     ENEMY_RUNWAY_LENGTH ; Length/current line of the enemy runway (default length=36)
GAME:2C28                 LDA     byte_676
GAME:2C2B                 CMP     #2
GAME:2C2D                 BNE     WI
GAME:2C2F                 LDA     #255
GAME:2C31                 STA     byte_B6
GAME:2C33
GAME:2C33 WI:                                     ; CODE XREF: ENRUN-11↑j
GAME:2C33                 LDA     RANDOM          ; Random Number Generator
GAME:2C36                 AND     #127
GAME:2C38                 ORA     #64
GAME:2C3A                 STA     ENEMY_RUNWAY_START ; How many lines till the enemy runway will appear
GAME:2C3D                 RTS
GAME:2C3D ; END OF FUNCTION CHUNK FOR ENRUN
GAME:2C3E
GAME:2C3E ; =============== S U B R O U T I N E =======================================
GAME:2C3E
GAME:2C3E ; Draw the enemy runway, when visible
GAME:2C3E
GAME:2C3E ENRUN:                                  ; CODE XREF: DROAD+42↓p
GAME:2C3E
GAME:2C3E ; FUNCTION CHUNK AT GAME:2C23 SIZE 0000001B BYTES
GAME:2C3E
GAME:2C3E                 LDA     ENEMY_RUNWAY_START ; How many lines till the enemy runway will appear
GAME:2C41                 BEQ     TX
GAME:2C43                 DEC     ENEMY_RUNWAY_START ; How many lines till the enemy runway will appear
GAME:2C46
GAME:2C46 XE:                                     ; CODE XREF: ENRUN+14↓j
GAME:2C46                 RTS                     ; => Return
GAME:2C47 ; ---------------------------------------------------------------------------
GAME:2C47
GAME:2C47 TX:                                     ; CODE XREF: ENRUN+3↑j
GAME:2C47                 LDA     ENEMY_RUNWAY_LENGTH ; Length/current line of the enemy runway (default length=36)
GAME:2C4A                 CMP     #36             ; first row of the runway appearing?
GAME:2C4C                 BNE     WX
GAME:2C4E                 LDA     CURRENT_GAME_PHASE
GAME:2C50                 CMP     #GAME_PHASE_DIAGNOAL_ROAD_2 ; not before level 3
GAME:2C52                 BCS     XE              ; => Return
GAME:2C54
GAME:2C54 WX:                                     ; CODE XREF: ENRUN+E↑j
GAME:2C54                 DEC     ENEMY_RUNWAY_LENGTH ; Length/current line of the enemy runway (default length=36)
GAME:2C57                 BEQ     TY
GAME:2C59                 LDA     ENEMY_RUNWAY_LENGTH ; Length/current line of the enemy runway (default length=36)
GAME:2C5C                 CMP     #35
GAME:2C5E                 BNE     TZ
GAME:2C60                 STA     byte_6F9
GAME:2C63
GAME:2C63 UD:                                     ; CODE XREF: ENRUN+8E↓j
GAME:2C63                 LDY     #0
GAME:2C65                 STY     byte_B6
GAME:2C67                 LDA     #2
GAME:2C69                 STA     byte_676
GAME:2C6C                 JMP     DFHNGR          ; Define Hangar – restore the font characters for the hangar
GAME:2C6F ; ---------------------------------------------------------------------------
GAME:2C6F
GAME:2C6F TZ:                                     ; CODE XREF: ENRUN+20↑j
GAME:2C6F                 LDA     byte_676
GAME:2C72                 CMP     #2
GAME:2C74                 BNE     WH
GAME:2C76                 STA     byte_B6
GAME:2C78
GAME:2C78 WH:                                     ; CODE XREF: ENRUN+36↑j
GAME:2C78                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:2C7B                 SEC
GAME:2C7C                 SBC     #7
GAME:2C7E                 TAY
GAME:2C7F                 LDX     #11
GAME:2C81
GAME:2C81 UA:                                     ; CODE XREF: ENRUN+4A↓j
GAME:2C81                 DEY
GAME:2C82                 LDA     ENRNIM-1,X      ; Enemy runway
GAME:2C85                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2C87                 DEX
GAME:2C88                 BNE     UA
GAME:2C8A
GAME:2C8A                 INY
GAME:2C8B                 LDA     ENEMY_RUNWAY_PLANE_FLAG
GAME:2C8E                 BEQ     UB
GAME:2C90                 LDA     #L_RUNWAY_PLANE_TOP_LEFT|L_C_1
GAME:2C92                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2C94                 INY
GAME:2C95                 LDA     #L_RUNWAY_PLANE_TOP_RIGHT|L_C_1
GAME:2C97                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2C99                 LDA     #0
GAME:2C9B                 STA     ENEMY_RUNWAY_PLANE_FLAG
GAME:2C9E                 JMP     UC
GAME:2CA1 ; ---------------------------------------------------------------------------
GAME:2CA1
GAME:2CA1 UB:                                     ; CODE XREF: ENRUN+50↑j
GAME:2CA1                 LDA     ENEMY_RUNWAY_LENGTH ; Length/current line of the enemy runway (default length=36)
GAME:2CA4                 CMP     #4
GAME:2CA6                 BCC     UC
GAME:2CA8                 CMP     #33
GAME:2CAA                 BCS     UC
GAME:2CAC
GAME:2CAC                 LDA     RANDOM          ; Random Number Generator
GAME:2CAF                 AND     #7
GAME:2CB1                 BNE     UC              ; 12.5% chance of a plane
GAME:2CB3                 INY
GAME:2CB4                 LDA     #L_RUNWAY_PLANE_BOTTOM_LEFT|L_C_1
GAME:2CB6                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2CB8                 INY
GAME:2CB9                 LDA     #L_RUNWAY_PLANE_BOTTOM_RIGHT|L_C_1
GAME:2CBB                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2CBD                 STA     ENEMY_RUNWAY_PLANE_FLAG
GAME:2CC0
GAME:2CC0 UC:                                     ; CODE XREF: ENRUN+60↑j
GAME:2CC0                                         ; ENRUN+68↑j ...
GAME:2CC0                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:2CC3                 SEC
GAME:2CC4                 SBC     #19
GAME:2CC6                 TAY
GAME:2CC7                 LDA     ENEMY_RUNWAY_LENGTH ; Length/current line of the enemy runway (default length=36)
GAME:2CCA                 CMP     #20
GAME:2CCC                 BEQ     UD
GAME:2CCE                 CMP     #19
GAME:2CD0                 BEQ     UE              ; Draw HNGR1 - first row of the hangar
GAME:2CD2                 CMP     #18
GAME:2CD4                 BEQ     UF              ; Draw HNGR2 - second row of the hangar
GAME:2CD6                 CMP     #17
GAME:2CD8                 BEQ     UG              ; Draw HNGR3 - center part
GAME:2CDA                 CMP     #16
GAME:2CDC                 BEQ     UG              ; Draw HNGR3 - center part
GAME:2CDE                 CMP     #15
GAME:2CE0                 BEQ     UH              ; Draw HNGR3 - second to last row
GAME:2CE2                 CMP     #14
GAME:2CE4                 BEQ     UI              ; Draw HNGR5 - last row
GAME:2CE6                 CMP     #34
GAME:2CE8                 BEQ     H0              ; Add Anti-Aircraft-Battery
GAME:2CEA                 CMP     #9
GAME:2CEC                 BEQ     H0              ; Add Anti-Aircraft-Battery
GAME:2CEE                 RTS
GAME:2CEF ; ---------------------------------------------------------------------------
GAME:2CEF
GAME:2CEF UE:                                     ; CODE XREF: ENRUN+92↑j
GAME:2CEF                                         ; DRUN__DRAW_RUNWAY+12D↓j
GAME:2CEF                 LDX     #5              ; Draw HNGR1 - first row of the hangar
GAME:2CF1
GAME:2CF1 UJ:                                     ; CODE XREF: ENRUN+BA↓j
GAME:2CF1                 LDA     HNGR1-1,X
GAME:2CF4                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2CF6                 DEY
GAME:2CF7                 DEX
GAME:2CF8                 BNE     UJ
GAME:2CFA                 RTS
GAME:2CFB ; ---------------------------------------------------------------------------
GAME:2CFB
GAME:2CFB UF:                                     ; CODE XREF: ENRUN+96↑j
GAME:2CFB                                         ; DRUN__DRAW_RUNWAY:FC↓j
GAME:2CFB                 LDX     #6              ; Draw HNGR2 - second row of the hangar
GAME:2CFD
GAME:2CFD UK:                                     ; CODE XREF: ENRUN+C6↓j
GAME:2CFD                 LDA     HNGR2-1,X
GAME:2D00                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2D02                 DEY
GAME:2D03                 DEX
GAME:2D04                 BNE     UK
GAME:2D06                 RTS
GAME:2D07 ; ---------------------------------------------------------------------------
GAME:2D07
GAME:2D07 UG:                                     ; CODE XREF: ENRUN+9A↑j
GAME:2D07                                         ; ENRUN+9E↑j ...
GAME:2D07                 LDX     #6              ; Draw HNGR3 - center part
GAME:2D09
GAME:2D09 UM:                                     ; CODE XREF: ENRUN+D2↓j
GAME:2D09                                         ; ENRUN+D8↓j
GAME:2D09                 LDA     HNGR3-1,X
GAME:2D0C                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2D0E                 DEY
GAME:2D0F                 DEX
GAME:2D10                 BNE     UM
GAME:2D12                 RTS
GAME:2D13 ; ---------------------------------------------------------------------------
GAME:2D13
GAME:2D13 UH:                                     ; CODE XREF: ENRUN+A2↑j
GAME:2D13                                         ; DRUN__DRAW_RUNWAY:FF↓j
GAME:2D13                 LDX     #5              ; Draw HNGR3 - second to last row
GAME:2D15                 DEY
GAME:2D16                 JMP     UM
GAME:2D19 ; ---------------------------------------------------------------------------
GAME:2D19
GAME:2D19 UI:                                     ; CODE XREF: ENRUN+A6↑j
GAME:2D19                                         ; DRUN__DRAW_RUNWAY:FE↓j
GAME:2D19                 LDX     #4              ; Draw HNGR5 - last row
GAME:2D1B                 DEY
GAME:2D1C                 DEY
GAME:2D1D
GAME:2D1D UN:                                     ; CODE XREF: ENRUN+E6↓j
GAME:2D1D                 LDA     HNGR5-1,X
GAME:2D20                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2D22                 DEY
GAME:2D23                 DEX
GAME:2D24                 BNE     UN
GAME:2D26
GAME:2D26 R0:                                     ; => Return
GAME:2D26                 RTS
GAME:2D27 ; ---------------------------------------------------------------------------
GAME:2D27
GAME:2D27 H0:                                     ; CODE XREF: ENRUN+AA↑j
GAME:2D27                                         ; ENRUN+AE↑j
GAME:2D27                 LDA     ROAD_RIGHT_X_POS ; Add Anti-Aircraft-Battery
GAME:2D2A                 SEC
GAME:2D2B                 SBC     #7
GAME:2D2D                 TAY
GAME:2D2E                 LDA     RANDOM          ; Random Number Generator
GAME:2D31                 LSR     A
GAME:2D32                 BCC     H1
GAME:2D34                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_0
GAME:2D36                 JMP     H2
GAME:2D39 ; ---------------------------------------------------------------------------
GAME:2D39
GAME:2D39 H1:                                     ; CODE XREF: ENRUN+F4↑j
GAME:2D39                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_1
GAME:2D3B
GAME:2D3B H2:                                     ; CODE XREF: ENRUN+F8↑j
GAME:2D3B                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2D3D                 LDA     #0
GAME:2D3F                 STA     byte_6A3
GAME:2D42                 LDA     byte_FD
GAME:2D44                 BNE     H4
GAME:2D46                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:2D49                 JMP     H3
GAME:2D4C ; ---------------------------------------------------------------------------
GAME:2D4C
GAME:2D4C H4:                                     ; CODE XREF: ENRUN+106↑j
GAME:2D4C                 JMP     B5
GAME:2D4C ; End of function ENRUN
GAME:2D4C
GAME:2D4F
GAME:2D4F ; =============== S U B R O U T I N E =======================================
GAME:2D4F
GAME:2D4F
GAME:2D4F AREA:                                   ; CODE XREF: CITY+3↓p
GAME:2D4F                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:2D51                 CPY     #2
GAME:2D53                 BCC     TC
GAME:2D55                 CPY     #87
GAME:2D57                 BCC     TD
GAME:2D59
GAME:2D59 TC:                                     ; CODE XREF: AREA+4↑j
GAME:2D59                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:2D5B                 BNE     TU              ; => Return
GAME:2D5D                 JSR     B7              ; Advance to next row of the level
GAME:2D60                 LDA     CURRENT_GAME_PHASE
GAME:2D62                 CMP     #GAME_PHASE_5
GAME:2D64                 BCC     WW
GAME:2D66                 CMP     #GAME_PHASE_8
GAME:2D68                 BCC     TU              ; => Return
GAME:2D6A
GAME:2D6A WW:                                     ; CODE XREF: AREA+15↑j
GAME:2D6A                 JSR     DROAD
GAME:2D6D                 JSR     TNKC
GAME:2D70                 JSR     TNKC1
GAME:2D73                 JSR     GUNC
GAME:2D76
GAME:2D76 TU:                                     ; CODE XREF: AREA+C↑j
GAME:2D76                                         ; AREA+19↑j
GAME:2D76                 RTS                     ; => Return
GAME:2D77 ; ---------------------------------------------------------------------------
GAME:2D77
GAME:2D77 TD:                                     ; CODE XREF: AREA+8↑j
GAME:2D77                 CPY     #40
GAME:2D79                 BCC     TE
GAME:2D7B                 LDA     #$80
GAME:2D7D                 STA     byte_610
GAME:2D80                 JMP     TF
GAME:2D83 ; ---------------------------------------------------------------------------
GAME:2D83
GAME:2D83 TE:                                     ; CODE XREF: AREA+2A↑j
GAME:2D83                 LDA     #$FF
GAME:2D85                 STA     byte_610
GAME:2D88
GAME:2D88 TF:                                     ; CODE XREF: AREA+31↑j
GAME:2D88                 JMP     DRAW            ; Draw river/gras on the map
GAME:2D88 ; End of function AREA
GAME:2D88
GAME:2D8B
GAME:2D8B ; =============== S U B R O U T I N E =======================================
GAME:2D8B
GAME:2D8B ; Clear one row of playfield with default character
GAME:2D8B
GAME:2D8B CLEAR:                                  ; CODE XREF: CITY↓p
GAME:2D8B                                         ; B7+9D↓p
GAME:2D8B                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:2D8D                 BNE     TN              ; => Return
GAME:2D8F                 LDY     #64
GAME:2D91                 LDA     CURRENT_GAME_PHASE
GAME:2D93                 CMP     #GAME_PHASE_5
GAME:2D95                 BCC     XD
GAME:2D97                 CMP     #GAME_PHASE_8
GAME:2D99                 BCS     XD
GAME:2D9B                 LDA     #L_SOLID_WALL|L_C_1
GAME:2D9D                 JMP     TG
GAME:2DA0 ; ---------------------------------------------------------------------------
GAME:2DA0
GAME:2DA0 XD:                                     ; CODE XREF: CLEAR+A↑j
GAME:2DA0                                         ; CLEAR+E↑j
GAME:2DA0                 LDA     #L_GRAS|L_C_0
GAME:2DA2
GAME:2DA2 TG:                                     ; CODE XREF: CLEAR+12↑j
GAME:2DA2                                         ; CLEAR+1A↓j
GAME:2DA2                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2DA4                 DEY
GAME:2DA5                 BNE     TG
GAME:2DA7                 RTS
GAME:2DA7 ; End of function CLEAR
GAME:2DA7
GAME:2DA8
GAME:2DA8 ; =============== S U B R O U T I N E =======================================
GAME:2DA8
GAME:2DA8
GAME:2DA8 DROAD:                                  ; CODE XREF: AREA:WW↑p
GAME:2DA8                 LDA     byte_668
GAME:2DAB                 BEQ     TM
GAME:2DAD                 DEC     byte_668
GAME:2DB0
GAME:2DB0 TN:                                     ; CODE XREF: CLEAR+2↑j
GAME:2DB0                                         ; TNKC+12↓j
GAME:2DB0                 RTS                     ; => Return
GAME:2DB1 ; ---------------------------------------------------------------------------
GAME:2DB1
GAME:2DB1 TM:                                     ; CODE XREF: DROAD+3↑j
GAME:2DB1                 LDY     byte_669
GAME:2DB4                 CPY     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:2DB7                 BEQ     TO
GAME:2DB9                 LDA     #COLOR_INTENSITY_10|COLOR_ORANGE
GAME:2DBB                 STA     COLOR1
GAME:2DBE                 STA     SAVED_COLOR0_3+1
GAME:2DC1                 LDX     #7
GAME:2DC3
GAME:2DC3 TR:                                     ; CODE XREF: DROAD+2A↓j
GAME:2DC3                 CPY     #65
GAME:2DC5                 BCS     TP
GAME:2DC7                 CPY     #0
GAME:2DC9                 BEQ     TQ
GAME:2DCB                 LDA     ROADR-1,X
GAME:2DCE                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2DD0
GAME:2DD0 TP:                                     ; CODE XREF: DROAD+1D↑j
GAME:2DD0                 DEY
GAME:2DD1                 DEX
GAME:2DD2                 BNE     TR
GAME:2DD4
GAME:2DD4 TQ:                                     ; CODE XREF: DROAD+21↑j
GAME:2DD4                 INC     byte_669
GAME:2DD7                 RTS
GAME:2DD8 ; ---------------------------------------------------------------------------
GAME:2DD8
GAME:2DD8 TO:                                     ; CODE XREF: DROAD+F↑j
GAME:2DD8                 DEY
GAME:2DD9                 LDX     #5
GAME:2DDB
GAME:2DDB TS:                                     ; CODE XREF: DROAD+3A↓j
GAME:2DDB                 DEY
GAME:2DDC                 LDA     ROADS-1,X
GAME:2DDF                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:2DE1                 DEX
GAME:2DE2                 BNE     TS
GAME:2DE4                 JSR     DRCAR           ; Draw a car in the middle of a vertial/diagnal road
GAME:2DE7                 JSR     BLDG
GAME:2DEA                 JSR     ENRUN           ; Draw the enemy runway, when visible
GAME:2DED                 RTS
GAME:2DED ; End of function DROAD
GAME:2DED
GAME:2DEE
GAME:2DEE ; =============== S U B R O U T I N E =======================================
GAME:2DEE
GAME:2DEE
GAME:2DEE TNKC:                                   ; CODE XREF: AREA+1E↑p
GAME:2DEE                 LDA     byte_650
GAME:2DF1                 BEQ     TV
GAME:2DF3                 DEC     byte_650
GAME:2DF6                 RTS
GAME:2DF7 ; ---------------------------------------------------------------------------
GAME:2DF7
GAME:2DF7 TV:                                     ; CODE XREF: TNKC+3↑j
GAME:2DF7                 LDA     BUILDING_ROW_COUNTER
GAME:2DFA                 BNE     TW
GAME:2DFC                 LDA     CURRENT_GAME_PHASE
GAME:2DFE                 CMP     #GAME_PHASE_ROAD_HARD_RIGHT_3
GAME:2E00                 BCS     TN              ; => Return
GAME:2E02                 JMP     QS
GAME:2E05 ; ---------------------------------------------------------------------------
GAME:2E05
GAME:2E05 TW:                                     ; CODE XREF: TNKC+C↑j
GAME:2E05                 LDY     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:2E08                 JMP     TT
GAME:2E08 ; End of function TNKC
GAME:2E08
GAME:2E0B
GAME:2E0B ; =============== S U B R O U T I N E =======================================
GAME:2E0B
GAME:2E0B
GAME:2E0B CITY:                                   ; CODE XREF: EB+153↑j
GAME:2E0B                                         ; CITY+34↓j
GAME:2E0B                 JSR     CLEAR           ; Clear one row of playfield with default character
GAME:2E0E                 JSR     AREA
GAME:2E11                 JSR     PLFWD
GAME:2E14                 JSR     PLBCK
GAME:2E17                 JSR     BLDGC
GAME:2E1A                 JSR     BLDGL
GAME:2E1D                 JSR     PRIOR__
GAME:2E20                 JSR     CTYGN
GAME:2E23                 LDA     byte_638
GAME:2E26                 BNE     _7
GAME:2E28                 JSR     DRUN__DRAW_RUNWAY ; Draw the runway on the map
GAME:2E2B
GAME:2E2B _7:                                     ; CODE XREF: CITY+1B↑j
GAME:2E2B                 JSR     COMMON
GAME:2E2E                 JSR     CKCOL           ; Check collision?!?
GAME:2E31                 JSR     CPTL
GAME:2E34                 JSR     SPD__SPEED_CHANGE ; Change the speed of the plane up/down based on the joystick
GAME:2E37                 JSR     CDRP
GAME:2E3A                 JSR     TIMER           ; Wait for Timer 3. Sync gameplay to 60Hz
GAME:2E3D                 STA     ATRACT          ; ATRACT FLAG
GAME:2E3F                 JMP     CITY
GAME:2E3F ; End of function CITY
GAME:2E3F
GAME:2E42
GAME:2E42 ; =============== S U B R O U T I N E =======================================
GAME:2E42
GAME:2E42
GAME:2E42 ASTRSK:                                 ; CODE XREF: LINE:_1↓p
GAME:2E42                 LDY     SC_STATUS_LINE.line_1.speed_digit_100
GAME:2E45                 CPY     #_2|_C_BLUE
GAME:2E47                 BCC     _4              ; => Return
GAME:2E49                 LDY     #_ASTERIX|_C_ORANGE
GAME:2E4B                 LDA     byte_C2
GAME:2E4D                 SBC     ENEMY_Y_POS     ; Enemy Y position
GAME:2E4F                 CMP     TEMP_B0
GAME:2E51                 BCC     _1
GAME:2E53                 STY     SC_STATUS_LINE.line_0.enemy_above_warning ; red "*" character
GAME:2E56
GAME:2E56 _4:                                     ; CODE XREF: ASTRSK+5↑j
GAME:2E56                 RTS                     ; => Return
GAME:2E57 ; ---------------------------------------------------------------------------
GAME:2E57
GAME:2E57 _1:                                     ; CODE XREF: ASTRSK+F↑j
GAME:2E57                 STY     SC_STATUS_LINE.line_2.field_14 ; "*" character
GAME:2E5A                 RTS
GAME:2E5A ; End of function ASTRSK
GAME:2E5A
GAME:2E5B
GAME:2E5B ; =============== S U B R O U T I N E =======================================
GAME:2E5B
GAME:2E5B
GAME:2E5B AEL:                                    ; CODE XREF: L6+113↑p
GAME:2E5B                                         ; LINE+4↓j
GAME:2E5B                 LDA     #_SPACE|_C_BLACK
GAME:2E5D                 STA     SC_STATUS_LINE.line_0.enemy_above_warning ; red "*" character
GAME:2E60                 STA     SC_STATUS_LINE.line_2.field_14 ; "*" character
GAME:2E63                 JMP     UO
GAME:2E63 ; End of function AEL
GAME:2E63
GAME:2E66
GAME:2E66 ; =============== S U B R O U T I N E =======================================
GAME:2E66
GAME:2E66 ; Check line of sight: enemy plane at the same altitude?
GAME:2E66
GAME:2E66 LINE:                                   ; CODE XREF: PLFWD+DE↑p
GAME:2E66                                         ; L6+1C↑p
GAME:2E66                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:2E68                 CMP     byte_C2
GAME:2E6A                 BCC     AEL
GAME:2E6C                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:2E6E                 SBC     #7
GAME:2E70                 STA     TEMP_B0
GAME:2E72                 LDA     byte_C2
GAME:2E74                 SBC     ENEMY_Y_POS     ; Enemy Y position
GAME:2E76                 SBC     TEMP_B0
GAME:2E78                 CMP     #14
GAME:2E7A                 BCS     _1
GAME:2E7C
GAME:2E7C                 LDA     #_SPACE|_C_BLACK
GAME:2E7E                 STA     SC_STATUS_LINE.line_0.enemy_above_warning ; red "*" character
GAME:2E81                 STA     SC_STATUS_LINE.line_2.field_14 ; "*" character
GAME:2E84                 LDA     #COLOR_INTENSITY_2|COLOR_LIGHT_BLUE ; at same altitude as enemy plane - can now be destroyed
GAME:2E86                 STA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:2E89
GAME:2E89                 LDA     TEMP_B0
GAME:2E8B                 CMP     #18
GAME:2E8D                 BCS     _5
GAME:2E8F                 LDA     #0
GAME:2E91                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:2E94
GAME:2E94 _5:                                     ; CODE XREF: LINE+27↑j
GAME:2E94                 LDA     AUDIO3_SOUND_COUNTER
GAME:2E97                 BNE     UU              ; => Return
GAME:2E99                 DEC     byte_6A4
GAME:2E9C                 LDA     byte_6A4
GAME:2E9F                 CMP     #235
GAME:2EA1                 BCC     F6
GAME:2EA3                 LDA     #SND_FREQ_15
GAME:2EA5                 STA     AUDF3           ; Audio 3 Frequency Register
GAME:2EA8                 LDA     #AUDIO_CONTROL_VOL_2|AUDIO_CONTROL_DIST_4
GAME:2EAA                 STA     AUDC3           ; Audio 3 Channel Control Register
GAME:2EAD                 RTS
GAME:2EAE ; ---------------------------------------------------------------------------
GAME:2EAE
GAME:2EAE _1:                                     ; CODE XREF: LINE+14↑j
GAME:2EAE                 JSR     ASTRSK
GAME:2EAE ; End of function LINE
GAME:2EAE
GAME:2EB1
GAME:2EB1 ; =============== S U B R O U T I N E =======================================
GAME:2EB1
GAME:2EB1
GAME:2EB1 UO:                                     ; CODE XREF: AEL+8↑j
GAME:2EB1                                         ; COLM02+2C↓p
GAME:2EB1                 LDA     #0
GAME:2EB3                 STA     byte_6A4
GAME:2EB6                 STA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:2EB9
GAME:2EB9 F6:                                     ; CODE XREF: LINE+3B↑j
GAME:2EB9                 LDA     AUDIO3_SOUND_COUNTER
GAME:2EBC                 BNE     UU              ; => Return
GAME:2EBE                 LDA     #0
GAME:2EC0                 STA     AUDC3           ; Audio 3 Channel Control Register
GAME:2EC3                 RTS
GAME:2EC3 ; End of function UO
GAME:2EC3
GAME:2EC4
GAME:2EC4 ; =============== S U B R O U T I N E =======================================
GAME:2EC4
GAME:2EC4 ; If Player is at the same altitude as the enemey plane, check if that one got hit
GAME:2EC4
GAME:2EC4 COLM02:                                 ; CODE XREF: PLFWD+E1↑p
GAME:2EC4                                         ; PLBCK+20↑p ...
GAME:2EC4                 LDA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:2EC7                 CMP     #COLOR_INTENSITY_2|COLOR_LIGHT_BLUE ; Is the enemy plane at the same altitude as the player plane?
GAME:2EC9                 BEQ     UT              ; => Yes
GAME:2ECB
GAME:2ECB UU:                                     ; CODE XREF: LINE+31↑j
GAME:2ECB                                         ; UO+B↑j ...
GAME:2ECB                 RTS                     ; => Return
GAME:2ECC ; ---------------------------------------------------------------------------
GAME:2ECC
GAME:2ECC UT:                                     ; CODE XREF: COLM02+5↑j
GAME:2ECC                 LDY     PLANE_BULLET_Y_POS ; No bullet flying?
GAME:2ECE                 BEQ     UU              ; => Return
GAME:2ED0
GAME:2ED0                 LDA     M0PL            ; Missle to Player 0 Collision
GAME:2ED3                 AND     #100b           ; Player bullet collision with an enemy?
GAME:2ED5                 CMP     #100b           ; no collision?
GAME:2ED7                 BNE     UU              ; => Return
GAME:2ED9
GAME:2ED9                 LDA     PCOLR2          ; P2 COLOR
GAME:2EDC                 CMP     #COLOR_INTENSITY_12|COLOR_DARK_PURPLE ; Is the target a primary one?
GAME:2EDE                 BEQ     V4
GAME:2EE0                 CMP     #COLOR_INTENSITY_8|COLOR_TURQUOISE
GAME:2EE2                 BNE     U6              ; => regular target
GAME:2EE4
GAME:2EE4 V4:                                     ; CODE XREF: COLM02+1A↑j
GAME:2EE4                 INC     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:2EE7                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:2EEA                 JSR     S100__SCORE_ADD_100 ; +200 extra points for a primary target
GAME:2EED
GAME:2EED U6:                                     ; CODE XREF: COLM02+1E↑j
GAME:2EED                 JSR     HG              ; Remove plane bullet
GAME:2EF0                 JSR     UO
GAME:2EF3
GAME:2EF3                 LDA     byte_FD
GAME:2EF5                 CMP     #2
GAME:2EF7                 BEQ     _1
GAME:2EF9                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:2EFC                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:2EFF
GAME:2EFF _1:                                     ; CODE XREF: COLM02+33↑j
GAME:2EFF                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:2F02
GAME:2F02                 LDA     #0
GAME:2F04                 STA     byte_B1
GAME:2F06                 LDY     byte_C2
GAME:2F08                 LDX     #8
GAME:2F0A
GAME:2F0A VB:                                     ; CODE XREF: COLM02+4B↓j
GAME:2F0A                 STA     P3+7,Y          ; Enemy (second color)
GAME:2F0D                 DEY
GAME:2F0E                 DEX
GAME:2F0F                 BNE     VB
GAME:2F11                 JSR     DG
GAME:2F14                 LDA     #100
GAME:2F16                 STA     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:2F19                 LDY     byte_656
GAME:2F1C                 JSR     RO
GAME:2F1F                 PLA
GAME:2F20                 PLA
GAME:2F21                 JSR     ABA             ; Save current color palette, because we start the flashing animation
GAME:2F24                 STX     QUAKE_ANIMATION_COUNTER ; Quake, shake via the scroll register, timer
GAME:2F27                 LDA     #50
GAME:2F29                 LDX     #AUDIO_CONTROL_VOL_12|AUDIO_CONTROL_DIST_1
GAME:2F2B                 JMP     XXX             ; Start Audio 3 sound effect
GAME:2F2B ; End of function COLM02
GAME:2F2B
GAME:2F2E
GAME:2F2E ; =============== S U B R O U T I N E =======================================
GAME:2F2E
GAME:2F2E
GAME:2F2E XP2:                                    ; CODE XREF: LF↑p
GAME:2F2E                                         ; PLBCK+13↑p ...
GAME:2F2E                 LDA     byte_B1
GAME:2F30                 BEQ     US
GAME:2F32                 RTS
GAME:2F33 ; ---------------------------------------------------------------------------
GAME:2F33
GAME:2F33 US:                                     ; CODE XREF: XP2+2↑j
GAME:2F33                 DEC     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:2F36                 BEQ     UV
GAME:2F38                 LDA     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:2F3B                 CMP     #30
GAME:2F3D                 BCS     UY
GAME:2F3F                 LDA     #COLOR_INTENSITY_2|COLOR_RED_ORANGE
GAME:2F41                 JMP     UX
GAME:2F44 ; ---------------------------------------------------------------------------
GAME:2F44
GAME:2F44 UY:                                     ; CODE XREF: XP2+F↑j
GAME:2F44                 LSR     A
GAME:2F45                 LSR     A
GAME:2F46                 LSR     A
GAME:2F47                 BCC     UW
GAME:2F49                 LDA     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:2F4B                 JMP     UX
GAME:2F4E ; ---------------------------------------------------------------------------
GAME:2F4E
GAME:2F4E UW:                                     ; CODE XREF: XP2+19↑j
GAME:2F4E                 LDA     #COLOR_INTENSITY_6|COLOR_RED_ORANGE
GAME:2F50
GAME:2F50 UX:                                     ; CODE XREF: XP2+13↑j
GAME:2F50                                         ; XP2+1D↑j
GAME:2F50                 STA     PCOLR2          ; P2 COLOR
GAME:2F53                 LDA     byte_FD
GAME:2F55                 CMP     #3
GAME:2F57                 BNE     VD
GAME:2F59                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:2F5B                 CPY     #187
GAME:2F5D                 BCS     UV
GAME:2F5F                 LDX     #15
GAME:2F61
GAME:2F61 VE:                                     ; CODE XREF: XP2+41↓j
GAME:2F61                 LDA     P2+$A,Y         ; Enemy (first color)
GAME:2F64                 STA     P2+$B,Y         ; Enemy (first color)
GAME:2F67                 LDA     P3+$A,Y         ; Enemy (second color)
GAME:2F6A                 STA     P3+$B,Y         ; Enemy (second color)
GAME:2F6D                 DEY
GAME:2F6E                 DEX
GAME:2F6F                 BNE     VE
GAME:2F71                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:2F73
GAME:2F73 VD:                                     ; CODE XREF: XP2+29↑j
GAME:2F73                 JSR     COLP02
GAME:2F76                 PLA
GAME:2F77                 PLA
GAME:2F78                 RTS
GAME:2F79 ; ---------------------------------------------------------------------------
GAME:2F79
GAME:2F79 UV:                                     ; CODE XREF: XP2+8↑j
GAME:2F79                                         ; XP2+2F↑j
GAME:2F79                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:2F7B                 JSR     UZ
GAME:2F7E                 LDA     #10
GAME:2F80                 STA     byte_B1
GAME:2F82                 PLA
GAME:2F83                 PLA
GAME:2F84                 RTS
GAME:2F84 ; End of function XP2
GAME:2F84
GAME:2F85
GAME:2F85 ; =============== S U B R O U T I N E =======================================
GAME:2F85
GAME:2F85 ; DL IRQ triggered when the control display is reached
GAME:2F85
GAME:2F85 VDSLST_ROUTINE:                         ; DATA XREF: RESET+E8↑t
GAME:2F85                                         ; RESET+ED↑t
GAME:2F85                 PHA
GAME:2F86                 TXA
GAME:2F87                 PHA
GAME:2F88                 LDA     #COLOR_INTENSITY_0|COLOR_ORANGE_GREEN
GAME:2F8A                 LDX     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:2F8D                 STA     WSYNC           ; Wait for Horizontal Blank Synchronisation
GAME:2F90                 STX     COLBK           ; Background Color
GAME:2F93                 STA     CHBASE          ; Character Address Base Register
GAME:2F96                 LDA     #COLOR_INTENSITY_8|COLOR_LIGHT_BLUE
GAME:2F98                 LDX     DL_IRQ_COLPF1   ; COLPF1 color set in the DL IRQ
GAME:2F9B                 STA     COLPF3          ; Playfield Color 3
GAME:2F9E                 STX     COLPF1          ; Playfield Color 1
GAME:2FA1                 LDA     #COLOR_INTENSITY_6|COLOR_RED_ORANGE
GAME:2FA3                 STA     COLPF2          ; Playfield Color 2
GAME:2FA6                 PLA
GAME:2FA7                 TAX
GAME:2FA8                 PLA
GAME:2FA9                 RTI
GAME:2FA9 ; End of function VDSLST_ROUTINE
GAME:2FA9
GAME:2FAA
GAME:2FAA ; =============== S U B R O U T I N E =======================================
GAME:2FAA
GAME:2FAA
GAME:2FAA BLDG:                                   ; CODE XREF: DROAD+3F↑p
GAME:2FAA                 LDA     byte_B2
GAME:2FAC                 BEQ     loc_2FB6
GAME:2FAE                 DEC     byte_B2
GAME:2FB0                 RTS
GAME:2FB1 ; ---------------------------------------------------------------------------
GAME:2FB1
GAME:2FB1 loc_2FB1:                               ; CODE XREF: BLDG+33↓j
GAME:2FB1                 LDA     #15
GAME:2FB3                 STA     byte_B2
GAME:2FB5
GAME:2FB5 locret_2FB5:                            ; CODE XREF: BLDG+15↓j
GAME:2FB5                 RTS                     ; => Return
GAME:2FB6 ; ---------------------------------------------------------------------------
GAME:2FB6
GAME:2FB6 loc_2FB6:                               ; CODE XREF: BLDG+2↑j
GAME:2FB6                 LDA     byte_674
GAME:2FB9                 BEQ     loc_2FEA
GAME:2FBB                 LDA     CURRENT_GAME_PHASE
GAME:2FBD                 CMP     #GAME_PHASE_ROAD_HARD_RIGHT_3
GAME:2FBF                 BCS     locret_2FB5     ; => Return
GAME:2FC1                 LDA     RANDOM          ; Random Number Generator
GAME:2FC4                 AND     #7
GAME:2FC6                 ORA     #3
GAME:2FC8                 STA     byte_671
GAME:2FCB                 LDA     RANDOM          ; Random Number Generator
GAME:2FCE                 LSR     A
GAME:2FCF                 BCC     loc_2FD8
GAME:2FD1                 LDA     ENEMY_RUNWAY_START ; How many lines till the enemy runway will appear
GAME:2FD4                 CMP     #20
GAME:2FD6                 BCS     loc_2FED
GAME:2FD8
GAME:2FD8 loc_2FD8:                               ; CODE XREF: BLDG+25↑j
GAME:2FD8                 LDA     byte_650
GAME:2FDB                 CMP     #10
GAME:2FDD                 BCC     loc_2FB1
GAME:2FDF                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:2FE2                 ADC     #3
GAME:2FE4                 ADC     byte_671
GAME:2FE7                 JMP     loc_2FF2
GAME:2FEA ; ---------------------------------------------------------------------------
GAME:2FEA
GAME:2FEA loc_2FEA:                               ; CODE XREF: BLDG+F↑j
GAME:2FEA                 JMP     loc_3048
GAME:2FED ; ---------------------------------------------------------------------------
GAME:2FED
GAME:2FED loc_2FED:                               ; CODE XREF: BLDG+2C↑j
GAME:2FED                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:2FF0                 SBC     #9
GAME:2FF2
GAME:2FF2 loc_2FF2:                               ; CODE XREF: BLDG+3D↑j
GAME:2FF2                 STA     byte_670
GAME:2FF5                 LDX     #3
GAME:2FF7                 LDA     RANDOM          ; Random Number Generator
GAME:2FFA                 LSR     A
GAME:2FFB                 BCC     loc_2FFE
GAME:2FFD                 INX
GAME:2FFE
GAME:2FFE loc_2FFE:                               ; CODE XREF: BLDG+51↑j
GAME:2FFE                 STX     byte_672
GAME:3001                 LDA     RANDOM          ; Random Number Generator
GAME:3004                 AND     #1
GAME:3006                 CLC
GAME:3007                 ADC     #2
GAME:3009                 STA     byte_673
GAME:300C
GAME:300C                 LDA     byte_670
GAME:300F                 CMP     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:3012                 BCS     loc_301F
GAME:3014                 LDA     RANDOM          ; Random Number Generator
GAME:3017                 LSR     A
GAME:3018                 BCS     loc_301F
GAME:301A                 LDA     #$86
GAME:301C                 JMP     loc_3032
GAME:301F ; ---------------------------------------------------------------------------
GAME:301F
GAME:301F loc_301F:                               ; CODE XREF: BLDG+68↑j
GAME:301F                                         ; BLDG+6E↑j
GAME:301F                 LDA     CURRENT_GAME_PHASE
GAME:3021                 CMP     #GAME_PHASE_DIAGNOAL_ROAD_2
GAME:3023                 BCS     loc_302B
GAME:3025                 LDA     RANDOM          ; Random Number Generator
GAME:3028                 LSR     A
GAME:3029                 BCC     loc_3030
GAME:302B
GAME:302B loc_302B:                               ; CODE XREF: BLDG+79↑j
GAME:302B                 LDA     #6
GAME:302D                 JMP     loc_3032
GAME:3030 ; ---------------------------------------------------------------------------
GAME:3030
GAME:3030 loc_3030:                               ; CODE XREF: BLDG+7F↑j
GAME:3030                 LDA     #0
GAME:3032
GAME:3032 loc_3032:                               ; CODE XREF: BLDG+72↑j
GAME:3032                                         ; BLDG+83↑j
GAME:3032                 STA     SKYSCRAPER_TILE_OFFSET
GAME:3034                 LDY     #0
GAME:3036                 STY     byte_B4
GAME:3038                 STY     byte_B6
GAME:303A                 STY     byte_674
GAME:303D                 STY     byte_675
GAME:3040                 INY
GAME:3041                 STY     byte_676
GAME:3044                 JSR     DFBLDG          ; Final target phase: define skyscraper buildings
GAME:3047                 RTS
GAME:3048 ; ---------------------------------------------------------------------------
GAME:3048
GAME:3048 loc_3048:                               ; CODE XREF: BLDG:loc_2FEA↑j
GAME:3048                 INC     byte_B4
GAME:304A                 LDX     byte_B4
GAME:304C                 CPX     byte_672
GAME:304F                 BCS     loc_30CC
GAME:3051                 LDY     byte_670
GAME:3054                 LDA     #L_SKYSCRAPER_54|L_C_0
GAME:3056                 CLC
GAME:3057                 ADC     SKYSCRAPER_TILE_OFFSET
GAME:3059                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:305B                 ADC     #2
GAME:305D                 DEY
GAME:305E                 CPX     #1
GAME:3060                 BEQ     loc_306E
GAME:3062                 CPX     #2
GAME:3064                 BEQ     loc_3069
GAME:3066                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3068                 DEY
GAME:3069
GAME:3069 loc_3069:                               ; CODE XREF: BLDG+BA↑j
GAME:3069                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:306B                 JMP     loc_30BF
GAME:306E ; ---------------------------------------------------------------------------
GAME:306E
GAME:306E loc_306E:                               ; CODE XREF: BLDG+B6↑j
GAME:306E                 LDX     byte_671
GAME:3071                 LDA     #L_SKYSCRAPER_57|L_C_0
GAME:3073                 CLC
GAME:3074                 ADC     SKYSCRAPER_TILE_OFFSET
GAME:3076
GAME:3076 loc_3076:                               ; CODE XREF: BLDG+D0↓j
GAME:3076                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3078                 DEY
GAME:3079                 DEX
GAME:307A                 BNE     loc_3076
GAME:307C                 LDA     byte_676
GAME:307F                 CMP     #1
GAME:3081                 BNE     loc_3087
GAME:3083                 LDA     #2
GAME:3085                 STA     byte_B6
GAME:3087
GAME:3087 loc_3087:                               ; CODE XREF: BLDG+D7↑j
GAME:3087                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:308A                 CMP     byte_670
GAME:308D                 BCC     loc_309A
GAME:308F                 SEC
GAME:3090                 SBC     #8
GAME:3092                 LDY     #255
GAME:3094                 STY     byte_6A3
GAME:3097                 JMP     loc_30A2
GAME:309A ; ---------------------------------------------------------------------------
GAME:309A
GAME:309A loc_309A:                               ; CODE XREF: BLDG+E3↑j
GAME:309A                 CLC
GAME:309B                 ADC     #2
GAME:309D                 LDY     #9
GAME:309F                 STY     byte_6A3
GAME:30A2
GAME:30A2 loc_30A2:                               ; CODE XREF: BLDG+ED↑j
GAME:30A2                 TAY
GAME:30A3                 LDA     RANDOM          ; Random Number Generator
GAME:30A6                 LSR     A
GAME:30A7                 BCC     loc_30AE
GAME:30A9                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_0
GAME:30AB                 JMP     loc_30B0
GAME:30AE ; ---------------------------------------------------------------------------
GAME:30AE
GAME:30AE loc_30AE:                               ; CODE XREF: BLDG+FD↑j
GAME:30AE                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_1
GAME:30B0
GAME:30B0 loc_30B0:                               ; CODE XREF: BLDG+101↑j
GAME:30B0                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:30B2                 LDA     byte_FD
GAME:30B4                 BNE     loc_30BC
GAME:30B6                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:30B9                 JMP     H3
GAME:30BC ; ---------------------------------------------------------------------------
GAME:30BC
GAME:30BC loc_30BC:                               ; CODE XREF: BLDG+10A↑j
GAME:30BC                 JMP     B5
GAME:30BF ; ---------------------------------------------------------------------------
GAME:30BF
GAME:30BF loc_30BF:                               ; CODE XREF: BLDG+C1↑j
GAME:30BF                                         ; BLDG+13D↓j
GAME:30BF                 LDX     byte_671
GAME:30C2                 CLC
GAME:30C3                 ADC     #1
GAME:30C5
GAME:30C5 loc_30C5:                               ; CODE XREF: BLDG+11F↓j
GAME:30C5                 DEY
GAME:30C6                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:30C8                 DEX
GAME:30C9                 BNE     loc_30C5
GAME:30CB                 RTS
GAME:30CC ; ---------------------------------------------------------------------------
GAME:30CC
GAME:30CC loc_30CC:                               ; CODE XREF: BLDG+A5↑j
GAME:30CC                 DEC     byte_670
GAME:30CF                 LDY     byte_670
GAME:30D2                 CPX     byte_673
GAME:30D5                 BCS     loc_30EA
GAME:30D7                 LDX     byte_672
GAME:30DA                 DEX
GAME:30DB                 LDA     #L_SKYSCRAPER_56|L_C_0
GAME:30DD                 CLC
GAME:30DE                 ADC     SKYSCRAPER_TILE_OFFSET
GAME:30E0
GAME:30E0 loc_30E0:                               ; CODE XREF: BLDG+13A↓j
GAME:30E0                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:30E2                 DEY
GAME:30E3                 DEX
GAME:30E4                 BNE     loc_30E0
GAME:30E6                 INY
GAME:30E7                 JMP     loc_30BF
GAME:30EA ; ---------------------------------------------------------------------------
GAME:30EA
GAME:30EA loc_30EA:                               ; CODE XREF: BLDG+12B↑j
GAME:30EA                 INC     byte_675
GAME:30ED                 LDA     byte_672
GAME:30F0                 CMP     byte_675
GAME:30F3                 BEQ     loc_3122
GAME:30F5                 SEC
GAME:30F6                 SBC     #1
GAME:30F8                 SBC     byte_675
GAME:30FB                 BEQ     loc_3109
GAME:30FD                 TAX
GAME:30FE                 LDA     #L_SKYSCRAPER_56|L_C_0
GAME:3100                 CLC
GAME:3101                 ADC     SKYSCRAPER_TILE_OFFSET
GAME:3103
GAME:3103 loc_3103:                               ; CODE XREF: BLDG+15D↓j
GAME:3103                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3105                 DEY
GAME:3106                 DEX
GAME:3107                 BNE     loc_3103
GAME:3109
GAME:3109 loc_3109:                               ; CODE XREF: BLDG+151↑j
GAME:3109                 LDA     #L_SKYSCRAPER_58|L_C_0
GAME:310B                 CLC
GAME:310C                 ADC     SKYSCRAPER_TILE_OFFSET
GAME:310E                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3110                 LDX     byte_671
GAME:3113                 DEY
GAME:3114                 DEX
GAME:3115                 LDA     #L_SKYSCRAPER_55|L_C_0
GAME:3117
GAME:3117 loc_3117:                               ; CODE XREF: BLDG+171↓j
GAME:3117                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3119                 DEY
GAME:311A                 DEX
GAME:311B                 BNE     loc_3117
GAME:311D                 LDA     #L_SKYSCRAPER_59|L_C_0
GAME:311F                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3121                 RTS
GAME:3122 ; ---------------------------------------------------------------------------
GAME:3122
GAME:3122 loc_3122:                               ; CODE XREF: BLDG+149↑j
GAME:3122                 LDX     #255
GAME:3124                 STX     byte_B6
GAME:3126                 STX     byte_674
GAME:3129                 LDA     RANDOM          ; Random Number Generator
GAME:312C                 AND     #11111b
GAME:312E                 ADC     #25
GAME:3130                 STA     byte_B2
GAME:3132                 LDA     byte_C4
GAME:3134                 CMP     #5
GAME:3136                 BNE     Q9              ; => Return
GAME:3138                 LDA     #PRIMARY_TARGET_SUBTYPE_SKYSCRAPER
GAME:313A                 STA     VAR_PRIMARY_TARGET_SUBTYPE
GAME:313D                 LDY     #17
GAME:313F                 LDA     byte_670
GAME:3142                 CLC
GAME:3143                 ADC     #10
GAME:3145                 JMP     GNSGHT
GAME:3148 ; ---------------------------------------------------------------------------
GAME:3148
GAME:3148 Q9:                                     ; CODE XREF: BLDG+18C↑j
GAME:3148                 RTS                     ; => Return
GAME:3148 ; End of function BLDG
GAME:3148
GAME:3149 ; ---------------------------------------------------------------------------
GAME:3149 ; START OF FUNCTION CHUNK FOR B7
GAME:3149
GAME:3149 WY:                                     ; CODE XREF: B7+A↓j
GAME:3149                 INC     byte_677
GAME:314C                 LDA     byte_677
GAME:314F                 CMP     #2
GAME:3151                 BEQ     WZ
GAME:3153                 CMP     #3
GAME:3155                 BEQ     XS
GAME:3157                 LDA     #72
GAME:3159                 STA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:315C                 LDY     byte_669
GAME:315F                 INY
GAME:3160                 CPY     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:3163                 BEQ     XC
GAME:3165                 RTS
GAME:3166 ; ---------------------------------------------------------------------------
GAME:3166
GAME:3166 ADL:                                    ; CODE XREF: B7+2A↓j
GAME:3166                 JMP     WT              ; Game phase: 6
GAME:3169 ; ---------------------------------------------------------------------------
GAME:3169
GAME:3169 XC:                                     ; CODE XREF: B7-38↑j
GAME:3169                 LDA     #GAME_PHASE_RIVER_PHASE_0
GAME:316B                 STA     CURRENT_GAME_PHASE
GAME:316D                 LDA     #COLOR_INTENSITY_4|COLOR_LIGHT_BLUE
GAME:316F                 STA     COLOR1
GAME:3172                 STA     SAVED_COLOR0_3+1
GAME:3175                 LSR     A
GAME:3176                 STA     byte_FE
GAME:3178                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:317A                 ORA     #$20 ; ' '
GAME:317C                 AND     #$3F ; '?'
GAME:317E                 STA     byte_638
GAME:3181                 PLA
GAME:3182                 PLA
GAME:3183                 PLA
GAME:3184                 PLA
GAME:3185                 JSR     AKA
GAME:3188                 JMP     SRT
GAME:318B ; ---------------------------------------------------------------------------
GAME:318B
GAME:318B YM:                                     ; CODE XREF: B7+22↓j
GAME:318B                 JMP     U8              ; Game phase: 7
GAME:318E ; ---------------------------------------------------------------------------
GAME:318E
GAME:318E U9:                                     ; CODE XREF: B7+26↓j
GAME:318E                 JMP     WV              ; Game phase: 8
GAME:3191 ; ---------------------------------------------------------------------------
GAME:3191
GAME:3191 WZ:                                     ; CODE XREF: B7-4A↑j
GAME:3191                 INC     CURRENT_GAME_PHASE
GAME:3193                 JMP     WS              ; phase is 24 rows long
GAME:3196 ; ---------------------------------------------------------------------------
GAME:3196
GAME:3196 XS:                                     ; CODE XREF: B7-46↑j
GAME:3196                 INC     CURRENT_GAME_PHASE
GAME:3198                 JMP     XB
GAME:3198 ; END OF FUNCTION CHUNK FOR B7
GAME:319B
GAME:319B ; =============== S U B R O U T I N E =======================================
GAME:319B
GAME:319B ; Advance to next row of the level
GAME:319B
GAME:319B B7:                                     ; CODE XREF: AREA+E↑p
GAME:319B
GAME:319B ; FUNCTION CHUNK AT GAME:3149 SIZE 00000052 BYTES
GAME:319B
GAME:319B                 LDA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:319D                 BEQ     WN              ; end of this phase reached? => advance to next one!
GAME:319F                 DEC     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:31A1                 RTS
GAME:31A2 ; ---------------------------------------------------------------------------
GAME:31A2
GAME:31A2 WN:                                     ; CODE XREF: B7+2↑j
GAME:31A2                 LDA     byte_677
GAME:31A5                 BNE     WY
GAME:31A7
GAME:31A7                 INC     CURRENT_GAME_PHASE
GAME:31A9                 LDA     CURRENT_GAME_PHASE
GAME:31AB                 CMP     #GAME_PHASE_DIAGNOAL_ROAD_2
GAME:31AD                 BEQ     WO              ; Game phase: 2
GAME:31AF                 CMP     #GAME_PHASE_ROAD_HARD_RIGHT_3
GAME:31B1                 BEQ     WP              ; Game phase: 3
GAME:31B3                 CMP     #GAME_PHASE_4
GAME:31B5                 BEQ     WQ              ; Game phase: 4
GAME:31B7                 CMP     #GAME_PHASE_5
GAME:31B9                 BEQ     WR              ; Game phase: 5
GAME:31BB                 CMP     #GAME_PHASE_7
GAME:31BD                 BEQ     YM              ; Game phase: 7
GAME:31BF                 CMP     #GAME_PHASE_8
GAME:31C1                 BEQ     U9              ; Game phase: 8
GAME:31C3                 CMP     #GAME_PHASE_6
GAME:31C5                 BEQ     ADL             ; Game phase: 6
GAME:31C7
GAME:31C7 ; Game phase: 0 or 1
GAME:31C7
GAME:31C7 U7:                                     ; CODE XREF: B7+5E↓j
GAME:31C7                 JSR     DFGN            ; Restore anti-airgraft gun battery graphics at character $31
GAME:31CA                 LDY     #GAME_PHASE_DIAGNOAL_ROAD_1
GAME:31CC                 STY     CURRENT_GAME_PHASE
GAME:31CE                 STY     byte_677
GAME:31D1                 STY     byte_B6
GAME:31D3                 DEY
GAME:31D4                 STY     COLOR4
GAME:31D7                 LDA     #COLOR_INTENSITY_2|COLOR_YELLOW_GREEN
GAME:31D9                 STA     COLOR2
GAME:31DC                 STA     SAVED_COLOR0_3+2
GAME:31DF                 LDA     RANDOM          ; Random Number Generator
GAME:31E2                 AND     #63
GAME:31E4                 ORA     #64             ; Length: 64-127 rows
GAME:31E6                 STA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:31E8                 LDA     #COLOR_INTENSITY_10|COLOR_ORANGE
GAME:31EA                 STA     COLOR1
GAME:31ED                 STA     SAVED_COLOR0_3+1
GAME:31F0                 RTS
GAME:31F1 ; ---------------------------------------------------------------------------
GAME:31F1
GAME:31F1 WO:                                     ; CODE XREF: B7+12↑j
GAME:31F1                 LDA     #61             ; Game phase: 2
GAME:31F3                 STA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:31F5                 RTS
GAME:31F6 ; ---------------------------------------------------------------------------
GAME:31F6
GAME:31F6 WP:                                     ; CODE XREF: B7+16↑j
GAME:31F6                 LDY     byte_6AE        ; Game phase: 3
GAME:31F9                 BEQ     U7
GAME:31FB                 LDY     #1
GAME:31FD                 STY     byte_B6
GAME:31FF                 STY     byte_684
GAME:3202                 STY     byte_67D
GAME:3205                 STY     byte_694
GAME:3208                 STY     byte_68A
GAME:320B                 STY     byte_68E
GAME:320E                 DEY
GAME:320F                 STY     COLOR1
GAME:3212                 INC     byte_6A6
GAME:3215                 STY     SAVED_COLOR0_3+1
GAME:3218
GAME:3218 XB:                                     ; CODE XREF: B7-3↑j
GAME:3218                 LDA     #13
GAME:321A                 STA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:321C                 RTS
GAME:321D ; ---------------------------------------------------------------------------
GAME:321D
GAME:321D WQ:                                     ; CODE XREF: B7+1A↑j
GAME:321D                 LDA     #0              ; Game phase: 4
GAME:321F                 STA     byte_B6
GAME:3221                 STA     byte_BA
GAME:3223                 STA     byte_690
GAME:3226
GAME:3226 WS:                                     ; CODE XREF: B7-8↑j
GAME:3226                                         ; B7+B4↓j ...
GAME:3226                 LDA     #24             ; phase is 24 rows long
GAME:3228                 STA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:322A                 RTS
GAME:322B ; ---------------------------------------------------------------------------
GAME:322B
GAME:322B WR:                                     ; CODE XREF: B7+1E↑j
GAME:322B                 LDA     #COLOR_INTENSITY_6|COLOR_GRAY ; Game phase: 5
GAME:322D                 STA     COLOR2
GAME:3230                 STA     SAVED_COLOR0_3+2
GAME:3233                 LDA     #COLOR_INTENSITY_4|COLOR_GRAY
GAME:3235                 STA     COLOR4
GAME:3238
GAME:3238                 JSR     CLEAR           ; Clear one row of playfield with default character
GAME:323B                 JSR     DFHNGR          ; Define Hangar – restore the font characters for the hangar
GAME:323E                 JSR     DFTNK
GAME:3241                 JSR     DFBLDG          ; Final target phase: define skyscraper buildings
GAME:3244
GAME:3244                 LDX     #7              ; Set new anti-airgraft gun battery graphics at character $31
GAME:3246
GAME:3246 _1:                                     ; CODE XREF: B7+B2↓j
GAME:3246                 LDA     ADJ,X           ; Final city anti-aircraft gun battery. Replaces character $31 (standard anti-aircraft gun battery)
GAME:3249                 STA     ADK,X           ; $31: Anti-Aircraft Battery
GAME:324C                 DEX
GAME:324D                 BPL     _1
GAME:324F                 JMP     WS              ; phase is 24 rows long
GAME:3252 ; ---------------------------------------------------------------------------
GAME:3252
GAME:3252 WT:                                     ; CODE XREF: B7:ADL↑j
GAME:3252                 LDA     #COLOR_INTENSITY_0|COLOR_GOLD ; Game phase: 6
GAME:3254                 STA     COLOR3
GAME:3257                 STA     SAVED_COLOR0_3+3
GAME:325A                 LDA     #COLOR_INTENSITY_0|COLOR_RED_ORANGE
GAME:325C                 STA     COLOR0          ; COLOR 0
GAME:325F                 STA     SAVED_COLOR0_3
GAME:3262
GAME:3262                 LDA     RANDOM          ; Random Number Generator
GAME:3265                 AND     #31
GAME:3267                 ORA     #64             ; Length: 64-95 rows
GAME:3269                 STA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:326B                 RTS
GAME:326C ; ---------------------------------------------------------------------------
GAME:326C
GAME:326C U8:                                     ; CODE XREF: B7:YM↑j
GAME:326C                 LDA     #36             ; Game phase: 7
GAME:326E                 STA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:3270                 RTS
GAME:3271 ; ---------------------------------------------------------------------------
GAME:3271
GAME:3271 WV:                                     ; CODE XREF: B7:U9↑j
GAME:3271                 LDA     #COLOR_INTENSITY_4|COLOR_GREEN ; Game phase: 8
GAME:3273                 STA     COLOR0          ; COLOR 0
GAME:3276                 STA     SAVED_COLOR0_3
GAME:3279                 LDA     #COLOR_INTENSITY_4|COLOR_GRAY
GAME:327B                 STA     SAVED_COLOR0_3+3
GAME:327E                 STA     COLOR3
GAME:3281
GAME:3281                 DEC     byte_6A6
GAME:3284                 PLA
GAME:3285                 PLA
GAME:3286                 JMP     WS              ; phase is 24 rows long
GAME:3286 ; End of function B7
GAME:3286
GAME:3289
GAME:3289 ; =============== S U B R O U T I N E =======================================
GAME:3289
GAME:3289 ; Check if Wind Warnings are possible and randomly trigger it.
GAME:3289
GAME:3289 WIND:                                   ; CODE XREF: COMMON+D↑p
GAME:3289                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:328B                 BEQ     _1
GAME:328D                 RTS
GAME:328E ; ---------------------------------------------------------------------------
GAME:328E
GAME:328E _1:                                     ; CODE XREF: WIND+2↑j
GAME:328E                 LDA     WIND_DURATION   ; Duration during which Wind is in effect
GAME:3290                 BNE     ZP
GAME:3292                 LDA     RANDOM          ; Random Number Generator
GAME:3295                 CMP     DIFF.wind_probability ; Difficulty for the level
GAME:3298                 BCS     ZQ              ; => Return
GAME:329A                 LDA     RANDOM          ; Random Number Generator
GAME:329D                 AND     #11111b
GAME:329F                 ORA     #7
GAME:32A1                 ADC     DIFF.wind_minimum_duration ; Difficulty for the level
GAME:32A4                 STA     WIND_DURATION   ; Duration during which Wind is in effect
GAME:32A6                 LDA     #_W|_C_BLUE
GAME:32A8                 STA     SC_STATUS_LINE.line_1.wind_factor_warning ; "W" character
GAME:32AB                 LDA     RANDOM          ; Random Number Generator
GAME:32AE                 LSR     A
GAME:32AF                 BCC     ZR
GAME:32B1                 LDA     #0
GAME:32B3                 STA     WIND_ENABLED    ; 50% chance that wind is in effect
GAME:32B6                 RTS
GAME:32B7 ; ---------------------------------------------------------------------------
GAME:32B7
GAME:32B7 ZR:                                     ; CODE XREF: WIND+26↑j
GAME:32B7                 STA     WIND_ENABLED    ; 50% chance that wind is in effect
GAME:32BA
GAME:32BA ZQ:                                     ; CODE XREF: WIND+F↑j
GAME:32BA                                         ; WIND+45↓j ...
GAME:32BA                 RTS                     ; => Return
GAME:32BB ; ---------------------------------------------------------------------------
GAME:32BB
GAME:32BB ZP:                                     ; CODE XREF: WIND+7↑j
GAME:32BB                 DEC     WIND_DURATION   ; Duration during which Wind is in effect
GAME:32BD                 BNE     ZS
GAME:32BF                 LDA     #_SPACE|_C_BLACK
GAME:32C1                 STA     SC_STATUS_LINE.line_1.wind_factor_warning ; "W" character
GAME:32C4                 RTS
GAME:32C5 ; ---------------------------------------------------------------------------
GAME:32C5
GAME:32C5 ZS:                                     ; CODE XREF: WIND+34↑j
GAME:32C5                 LDA     WIND_ENABLED    ; 50% chance that wind is in effect
GAME:32C8                 BNE     ZT
GAME:32CA                 LDY     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:32CC                 CPY     #PLANE_MAX_X_POSITION ; max. allowed X position for the plane
GAME:32CE                 BEQ     ZQ              ; => Return
GAME:32D0                 INC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:32D2                 INY
GAME:32D3
GAME:32D3 ZU:                                     ; CODE XREF: WIND+5A↓j
GAME:32D3                 STY     HPOSP0          ; Player Plane (Horizontal Position – first color)
GAME:32D6                 STY     HPOSP1          ; Player Plane (Horizontal Position – second color)
GAME:32D9                 RTS
GAME:32DA ; ---------------------------------------------------------------------------
GAME:32DA
GAME:32DA ZT:                                     ; CODE XREF: WIND+3F↑j
GAME:32DA                 LDY     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:32DC                 CPY     #PLANE_MIN_XorY_POSITION ; min. allowed X position for the plane
GAME:32DE                 BEQ     ZQ              ; => Return
GAME:32E0                 DEC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:32E2                 DEY
GAME:32E3                 JMP     ZU
GAME:32E3 ; End of function WIND
GAME:32E3
GAME:32E6
GAME:32E6 ; =============== S U B R O U T I N E =======================================
GAME:32E6
GAME:32E6
GAME:32E6 BLDGL:                                  ; CODE XREF: CITY+F↑p
GAME:32E6                 LDA     CURRENT_GAME_PHASE
GAME:32E8                 CMP     #5
GAME:32EA                 BCC     YY              ; => Return
GAME:32EC                 CMP     #8
GAME:32EE                 BCC     YZ
GAME:32F0
GAME:32F0 YY:                                     ; CODE XREF: BLDGL+4↑j
GAME:32F0                                         ; BLDGL+D↓j
GAME:32F0                 RTS                     ; => Return
GAME:32F1 ; ---------------------------------------------------------------------------
GAME:32F1
GAME:32F1 YZ:                                     ; CODE XREF: BLDGL+8↑j
GAME:32F1                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:32F3                 BNE     YY              ; => Return
GAME:32F5                 LDX     #4
GAME:32F7
GAME:32F7 ZA:                                     ; CODE XREF: BLDGL+1C↓j
GAME:32F7                 LDA     DIRECTION_A,X
GAME:32FA                 PHA
GAME:32FB                 LDA     byte_686,X
GAME:32FE                 STA     DIRECTION_A,X
GAME:3301                 DEX
GAME:3302                 BNE     ZA
GAME:3304                 LDX     #4
GAME:3306
GAME:3306 ZB:                                     ; CODE XREF: BLDGL+2B↓j
GAME:3306                 LDA     DIRECTION_B,X
GAME:3309                 PHA
GAME:330A                 LDA     byte_68A,X
GAME:330D                 STA     DIRECTION_B,X
GAME:3310                 DEX
GAME:3311                 BNE     ZB
GAME:3313                 LDX     #5
GAME:3315
GAME:3315 ZC:                                     ; CODE XREF: BLDGL+38↓j
GAME:3315                 LDA     GAME_PHASE_ROWS,X ; Length of a game phase in remaining rows
GAME:3317                 PHA
GAME:3318                 LDA     byte_68E,X
GAME:331B                 STA     GAME_PHASE_ROWS,X ; Length of a game phase in remaining rows
GAME:331D                 DEX
GAME:331E                 BNE     ZC
GAME:3320                 DEC     byte_694
GAME:3323                 JSR     ZE
GAME:3326                 INC     byte_694
GAME:3329                 LDX     #0
GAME:332B
GAME:332B ZF:                                     ; CODE XREF: BLDGL+50↓j
GAME:332B                 LDA     byte_B9,X
GAME:332D                 STA     byte_68F,X
GAME:3330                 PLA
GAME:3331                 STA     byte_B9,X
GAME:3333                 INX
GAME:3334                 CPX     #5
GAME:3336                 BNE     ZF
GAME:3338                 LDX     #0
GAME:333A
GAME:333A ZG:                                     ; CODE XREF: BLDGL+61↓j
GAME:333A                 LDA     byte_681,X
GAME:333D                 STA     byte_68B,X
GAME:3340                 PLA
GAME:3341                 STA     byte_681,X
GAME:3344                 INX
GAME:3345                 CPX     #4
GAME:3347                 BNE     ZG
GAME:3349                 LDX     #0
GAME:334B
GAME:334B ZH:                                     ; CODE XREF: BLDGL+72↓j
GAME:334B                 LDA     byte_67A,X
GAME:334E                 STA     byte_687,X
GAME:3351                 PLA
GAME:3352                 STA     byte_67A,X
GAME:3355                 INX
GAME:3356                 CPX     #4
GAME:3358                 BNE     ZH
GAME:335A                 RTS
GAME:335A ; End of function BLDGL
GAME:335A
GAME:335B
GAME:335B ; =============== S U B R O U T I N E =======================================
GAME:335B
GAME:335B
GAME:335B SHBNE:                                  ; CODE XREF: PRIOR__:loc_33BE↓p
GAME:335B                 LDX     #8
GAME:335D                 LDA     #0
GAME:335F                 LDY     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:3361
GAME:3361 ZL:                                     ; CODE XREF: SHBNE+B↓j
GAME:3361                 STA     P1+7,Y          ; Player Plane (BLACK parts)
GAME:3364                 DEY
GAME:3365                 DEX
GAME:3366                 BNE     ZL
GAME:3368                 RTS
GAME:3368 ; End of function SHBNE
GAME:3368
GAME:3369
GAME:3369 ; =============== S U B R O U T I N E =======================================
GAME:3369
GAME:3369
GAME:3369 PRIOR__:                                ; CODE XREF: CITY+12↑p
GAME:3369                 LDA     byte_685
GAME:336C                 BEQ     loc_3380
GAME:336E                 LDA     CURRENT_GAME_PHASE
GAME:3370                 CMP     #GAME_PHASE_5
GAME:3372                 BCC     locret_339F     ; => Return
GAME:3374                 LDA     P1PF_HPOSM1     ; Missile 1 Horizontal Position / Player 1 to Playfield Collision
GAME:3377                 AND     #1001b
GAME:3379                 BNE     locret_339F     ; => Return
GAME:337B                 STA     byte_685
GAME:337E                 STA     byte_C5
GAME:3380
GAME:3380 loc_3380:                               ; CODE XREF: PRIOR__+3↑j
GAME:3380                 LDA     byte_686
GAME:3383                 BNE     locret_339F     ; => Return
GAME:3385                 LDA     CURRENT_GAME_PHASE
GAME:3387                 CMP     #GAME_PHASE_8
GAME:3389                 BCC     loc_33A0
GAME:338B                 LDA     P0PF_HPOSM0     ; Player Machine Gun Bullet (Horizontal Position)
GAME:338E                 AND     #1001b
GAME:3390                 BEQ     loc_33A0
GAME:3392                 LDA     #1
GAME:3394                 STA     byte_686
GAME:3397                 STA     GPRIOR          ; PRIO = Players first, then Playfield
GAME:339A                 STA     byte_C5
GAME:339C                 JSR     SHDW_SUB        ; Copy Plane Shadow into P1
GAME:339F
GAME:339F locret_339F:                            ; CODE XREF: PRIOR__+9↑j
GAME:339F                                         ; PRIOR__+10↑j ...
GAME:339F                 RTS                     ; => Return
GAME:33A0 ; ---------------------------------------------------------------------------
GAME:33A0
GAME:33A0 loc_33A0:                               ; CODE XREF: PRIOR__+20↑j
GAME:33A0                                         ; PRIOR__+27↑j
GAME:33A0                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:33A2                 LSR     A
GAME:33A3                 CLC
GAME:33A4                 ADC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:33A6                 STA     byte_6EA
GAME:33A9                 CMP     #213
GAME:33AB                 BCC     loc_33BA
GAME:33AD                 CMP     #243
GAME:33AF                 BCS     loc_33BE
GAME:33B1                 JSR     SHDW_SUB        ; Copy Plane Shadow into P1
GAME:33B4                 LDA     #4
GAME:33B6                 STA     GPRIOR          ; PRIO = Playfield first, then Players
GAME:33B9                 RTS
GAME:33BA ; ---------------------------------------------------------------------------
GAME:33BA
GAME:33BA loc_33BA:                               ; CODE XREF: PRIOR__+42↑j
GAME:33BA                 CMP     #150
GAME:33BC                 BCS     loc_33D9
GAME:33BE
GAME:33BE loc_33BE:                               ; CODE XREF: PRIOR__+46↑j
GAME:33BE                 JSR     SHBNE
GAME:33C1                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:33C3                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:33C5                 CMP     #82
GAME:33C7                 BCS     loc_33DC
GAME:33C9                 LDX     P0PF_HPOSM0     ; Player Machine Gun Bullet (Horizontal Position)
GAME:33CC                 BEQ     loc_33DC
GAME:33CE                 SBC     #2
GAME:33D0                 STA     byte_654
GAME:33D3                 JSR     SHDW_SUB        ; Copy Plane Shadow into P1
GAME:33D6                 JMP     CRASH           ; Plane was crashed
GAME:33D9 ; ---------------------------------------------------------------------------
GAME:33D9
GAME:33D9 loc_33D9:                               ; CODE XREF: PRIOR__+53↑j
GAME:33D9                 JSR     SHDW_SUB        ; Copy Plane Shadow into P1
GAME:33DC
GAME:33DC loc_33DC:                               ; CODE XREF: PRIOR__+5E↑j
GAME:33DC                                         ; PRIOR__+63↑j
GAME:33DC                 LDA     #1
GAME:33DE                 STA     GPRIOR          ; PRIO = Players first, then Playfield
GAME:33E1                 RTS
GAME:33E1 ; End of function PRIOR__
GAME:33E1
GAME:33E2
GAME:33E2 ; =============== S U B R O U T I N E =======================================
GAME:33E2
GAME:33E2
GAME:33E2 BLDGC:                                  ; CODE XREF: CITY+C↑p
GAME:33E2                 LDA     CURRENT_GAME_PHASE
GAME:33E4                 CMP     #GAME_PHASE_5
GAME:33E6                 BCC     YE              ; => Return
GAME:33E8                 CMP     #GAME_PHASE_8
GAME:33EA                 BCC     YF
GAME:33EC
GAME:33EC YE:                                     ; CODE XREF: BLDGC+4↑j
GAME:33EC                                         ; BLDGC+D↓j
GAME:33EC                 RTS                     ; => Return
GAME:33ED ; ---------------------------------------------------------------------------
GAME:33ED
GAME:33ED YF:                                     ; CODE XREF: BLDGC+8↑j
GAME:33ED                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:33EF                 BNE     YE              ; => Return
GAME:33EF ; End of function BLDGC
GAME:33EF
GAME:33F1
GAME:33F1 ; =============== S U B R O U T I N E =======================================
GAME:33F1
GAME:33F1
GAME:33F1 ZE:                                     ; CODE XREF: BLDGL+3D↑p
GAME:33F1
GAME:33F1 ; FUNCTION CHUNK AT GAME:3464 SIZE 00000097 BYTES
GAME:33F1
GAME:33F1                 LDA     byte_67D
GAME:33F4                 BEQ     YG
GAME:33F6                 DEC     byte_67D
GAME:33F9                 RTS
GAME:33FA ; ---------------------------------------------------------------------------
GAME:33FA
GAME:33FA YG:                                     ; CODE XREF: ZE+3↑j
GAME:33FA                 LDA     byte_BA
GAME:33FC                 BNE     YL
GAME:33FE                 JSR     END
GAME:3401                 LDA     #6
GAME:3403                 STA     byte_67B
GAME:3406                 STA     byte_BA
GAME:3408
GAME:3408 YL:                                     ; CODE XREF: ZE+B↑j
GAME:3408                 INC     byte_B9
GAME:340A                 LDX     byte_B9
GAME:340C                 CPX     #4
GAME:340E                 BCC     XK
GAME:3410                 LDA     byte_684
GAME:3413                 BNE     YQ
GAME:3415                 JSR     B77
GAME:3418                 CPX     #7
GAME:341A                 BNE     loc_3473
GAME:341C                 LDA     #100
GAME:341E                 STA     byte_67D
GAME:3421                 RTS
GAME:3422 ; ---------------------------------------------------------------------------
GAME:3422
GAME:3422 YQ:                                     ; CODE XREF: ZE+22↑j
GAME:3422                 DEC     byte_67A
GAME:3425                 LDY     byte_67A
GAME:3428                 LDA     #L_RUNWAY_CENTER_12|L_C_0
GAME:342A                 CLC
GAME:342B                 ADC     byte_BB
GAME:342D                 LDX     #3
GAME:342F
GAME:342F XO:                                     ; CODE XREF: ZE+42↓j
GAME:342F                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3431                 DEY
GAME:3432                 DEX
GAME:3433                 BNE     XO
GAME:3435                 JSR     XYZ
GAME:3438                 LDX     byte_B9
GAME:343A                 CPX     #7
GAME:343C                 BNE     XQ
GAME:343E                 STX     byte_BA
GAME:343E ; End of function ZE
GAME:343E
GAME:3440
GAME:3440 ; =============== S U B R O U T I N E =======================================
GAME:3440
GAME:3440
GAME:3440 YI:                                     ; CODE XREF: ZE+7E↓j
GAME:3440                                         ; ZE+E4↓p
GAME:3440                 LDX     byte_67B
GAME:3443
GAME:3443 XR:                                     ; CODE XREF: YI+7↓j
GAME:3443                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3445                 DEY
GAME:3446                 DEX
GAME:3447                 BNE     XR
GAME:3449                 LDA     byte_BA
GAME:344B                 CMP     #6
GAME:344D                 BEQ     YH              ; => Return
GAME:344F                 LDA     CURRENT_GAME_PHASE
GAME:3451                 CMP     #GAME_PHASE_7
GAME:3453                 BNE     YS
GAME:3455                 LDA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:3457                 CMP     #13
GAME:3459                 BCS     YS
GAME:345B                 LDA     #0
GAME:345D                 STA     byte_684
GAME:3460
GAME:3460 YS:                                     ; CODE XREF: YI+13↑j
GAME:3460                                         ; YI+19↑j
GAME:3460                 JSR     END
GAME:3463
GAME:3463 YH:                                     ; CODE XREF: YI+D↑j
GAME:3463                 RTS                     ; => Return
GAME:3463 ; End of function YI
GAME:3463
GAME:3464 ; ---------------------------------------------------------------------------
GAME:3464 ; START OF FUNCTION CHUNK FOR ZE
GAME:3464
GAME:3464 XK:                                     ; CODE XREF: ZE+1D↑j
GAME:3464                 JMP     loc_34A3
GAME:3467 ; ---------------------------------------------------------------------------
GAME:3467
GAME:3467 XQ:                                     ; CODE XREF: ZE+4B↑j
GAME:3467                 PHA
GAME:3468                 LDA     byte_BA
GAME:346A                 CMP     #7
GAME:346C                 BEQ     loc_3472
GAME:346E                 PLA
GAME:346F                 JMP     YI
GAME:3472 ; ---------------------------------------------------------------------------
GAME:3472
GAME:3472 loc_3472:                               ; CODE XREF: ZE+7B↑j
GAME:3472                 PLA
GAME:3473
GAME:3473 loc_3473:                               ; CODE XREF: ZE+29↑j
GAME:3473                 CPX     #6
GAME:3475                 BEQ     loc_3487
GAME:3477                 LDA     #18
GAME:3479                 CLC
GAME:347A                 ADC     byte_681+1
GAME:347D                 CPX     #5
GAME:347F                 BEQ     loc_3484
GAME:3481                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3483                 DEY
GAME:3484
GAME:3484 loc_3484:                               ; CODE XREF: ZE+8E↑j
GAME:3484                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3486                 DEY
GAME:3487
GAME:3487 loc_3487:                               ; CODE XREF: ZE+84↑j
GAME:3487                 LDA     #L_65|L_C_0
GAME:3489                 CLC
GAME:348A                 ADC     byte_681
GAME:348D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:348F                 DEY
GAME:3490                 LDX     byte_67C
GAME:3493                 INX
GAME:3494                 INX
GAME:3495                 INX
GAME:3496                 LDA     #L_WATER_60|L_C_0
GAME:3498
GAME:3498 loc_3498:                               ; CODE XREF: ZE+AB↓j
GAME:3498                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:349A                 DEY
GAME:349B                 DEX
GAME:349C                 BNE     loc_3498
GAME:349E                 LDA     #L_61|L_C_0
GAME:34A0                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:34A2                 RTS
GAME:34A3 ; ---------------------------------------------------------------------------
GAME:34A3
GAME:34A3 loc_34A3:                               ; CODE XREF: ZE:XK↑j
GAME:34A3                 LDY     byte_67A
GAME:34A6                 LDA     byte_684
GAME:34A9                 BNE     loc_34B1
GAME:34AB                 JSR     B77
GAME:34AE                 JMP     loc_34D9
GAME:34B1 ; ---------------------------------------------------------------------------
GAME:34B1
GAME:34B1 loc_34B1:                               ; CODE XREF: ZE+B8↑j
GAME:34B1                 LDA     #L_62|L_C_0
GAME:34B3                 CLC
GAME:34B4                 ADC     byte_BD
GAME:34B6                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:34B8                 DEY
GAME:34B9                 LDA     #L_RUNWAY_CENTER_12|L_C_0
GAME:34BB                 CLC
GAME:34BC                 ADC     byte_BB
GAME:34BE                 CPX     #1
GAME:34C0                 BEQ     loc_34CC
GAME:34C2                 CPX     #2
GAME:34C4                 BEQ     loc_34C9
GAME:34C6                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:34C8                 DEY
GAME:34C9
GAME:34C9 loc_34C9:                               ; CODE XREF: ZE+D3↑j
GAME:34C9                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:34CB                 DEY
GAME:34CC
GAME:34CC loc_34CC:                               ; CODE XREF: ZE+CF↑j
GAME:34CC                 JSR     XYZ
GAME:34CF                 LDX     byte_BA
GAME:34D1                 CPX     #6
GAME:34D3                 BNE     loc_34D9
GAME:34D5                 JSR     YI
GAME:34D8                 RTS
GAME:34D9 ; ---------------------------------------------------------------------------
GAME:34D9
GAME:34D9 loc_34D9:                               ; CODE XREF: ZE+BD↑j
GAME:34D9                                         ; ZE+E2↑j
GAME:34D9                 LDA     #L_RUNWAY_CENTER_12|L_C_0
GAME:34DB                 CLC
GAME:34DC                 ADC     byte_681+1
GAME:34DF                 LDX     #3
GAME:34E1
GAME:34E1 loc_34E1:                               ; CODE XREF: ZE+F4↓j
GAME:34E1                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:34E3                 DEY
GAME:34E4                 DEX
GAME:34E5                 BNE     loc_34E1
GAME:34E7                 LDA     byte_67C
GAME:34EA                 CLC
GAME:34EB                 ADC     #4
GAME:34ED                 TAX
GAME:34EE                 LDA     #L_64|L_C_0
GAME:34F0                 CLC
GAME:34F1                 ADC     byte_681+2
GAME:34F4
GAME:34F4 loc_34F4:                               ; CODE XREF: ZE+107↓j
GAME:34F4                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:34F6                 DEY
GAME:34F7                 DEX
GAME:34F8                 BNE     loc_34F4
GAME:34FA                 RTS
GAME:34FA ; END OF FUNCTION CHUNK FOR ZE
GAME:34FB
GAME:34FB ; =============== S U B R O U T I N E =======================================
GAME:34FB
GAME:34FB
GAME:34FB XYZ:                                    ; CODE XREF: ZE+44↑p
GAME:34FB                                         ; ZE:loc_34CC↑p
GAME:34FB                 LDA     #L_64|L_C_0
GAME:34FD                 LDX     #4
GAME:34FF                 CLC
GAME:3500                 ADC     byte_BC
GAME:3502
GAME:3502 loc_3502:                               ; CODE XREF: XYZ+B↓j
GAME:3502                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3504                 DEY
GAME:3505                 DEX
GAME:3506                 BNE     loc_3502
GAME:3508                 RTS
GAME:3508 ; End of function XYZ
GAME:3508
GAME:3509
GAME:3509 ; =============== S U B R O U T I N E =======================================
GAME:3509
GAME:3509
GAME:3509 END:                                    ; CODE XREF: ZE+D↑p
GAME:3509                                         ; YI:YS↑p
GAME:3509                 LDA     byte_67B
GAME:350C                 STA     byte_67C
GAME:350F                 LDA     byte_BD
GAME:3511                 STA     byte_681
GAME:3514                 LDA     byte_BB
GAME:3516                 STA     byte_681+1
GAME:3519                 LDA     byte_BC
GAME:351B                 STA     byte_681+2
GAME:351E                 LDA     #$3D ; '='
GAME:3520                 LDX     byte_694
GAME:3523                 BNE     loc_3528
GAME:3525                 SEC
GAME:3526                 SBC     #$25 ; '%'
GAME:3528
GAME:3528 loc_3528:                               ; CODE XREF: END+1A↑j
GAME:3528                 STA     byte_67A
GAME:352B                 LDA     RANDOM          ; Random Number Generator
GAME:352E                 AND     #3
GAME:3530                 CLC
GAME:3531                 ADC     #3
GAME:3533                 STA     byte_67B
GAME:3536                 LDA     #0
GAME:3538                 STA     byte_B9
GAME:353A                 LDA     RANDOM          ; Random Number Generator
GAME:353D                 LSR     A
GAME:353E                 BCC     loc_3546
GAME:3540                 LDX     CURRENT_GAME_PHASE
GAME:3542                 CPX     #GAME_PHASE_6
GAME:3544                 BEQ     loc_3560
GAME:3546
GAME:3546 loc_3546:                               ; CODE XREF: END+35↑j
GAME:3546                 AND     #3
GAME:3548                 BNE     loc_3555
GAME:354A                 LDA     #0
GAME:354C                 STA     byte_BD
GAME:354E                 STA     byte_BC
GAME:3550                 LDA     #$51 ; 'Q'
GAME:3552                 STA     byte_BB
GAME:3554                 RTS
GAME:3555 ; ---------------------------------------------------------------------------
GAME:3555
GAME:3555 loc_3555:                               ; CODE XREF: END+3F↑j
GAME:3555                 LDA     #4
GAME:3557                 STA     byte_BD
GAME:3559                 LDA     #0
GAME:355B                 STA     byte_BC
GAME:355D                 STA     byte_BB
GAME:355F                 RTS
GAME:3560 ; ---------------------------------------------------------------------------
GAME:3560
GAME:3560 loc_3560:                               ; CODE XREF: END+3B↑j
GAME:3560                 AND     #3
GAME:3562                 BEQ     loc_3577
GAME:3564                 CMP     #1
GAME:3566                 BEQ     loc_3582
GAME:3568                 CMP     #2
GAME:356A                 BEQ     loc_358D
GAME:356C                 LDA     #$80
GAME:356E                 STA     byte_BD
GAME:3570                 STA     byte_BC
GAME:3572                 LDA     #$D1
GAME:3574                 STA     byte_BB
GAME:3576                 RTS
GAME:3577 ; ---------------------------------------------------------------------------
GAME:3577
GAME:3577 loc_3577:                               ; CODE XREF: END+59↑j
GAME:3577                 LDA     #$84
GAME:3579                 STA     byte_BD
GAME:357B                 LDA     #$80
GAME:357D                 STA     byte_BB
GAME:357F                 STA     byte_BC
GAME:3581                 RTS
GAME:3582 ; ---------------------------------------------------------------------------
GAME:3582
GAME:3582 loc_3582:                               ; CODE XREF: END+5D↑j
GAME:3582                 LDA     #6
GAME:3584                 STA     byte_BD
GAME:3586                 STA     byte_BC
GAME:3588                 LDA     #$55 ; 'U'
GAME:358A                 STA     byte_BB
GAME:358C                 RTS
GAME:358D ; ---------------------------------------------------------------------------
GAME:358D
GAME:358D loc_358D:                               ; CODE XREF: END+61↑j
GAME:358D                 LDA     #$86
GAME:358F                 STA     byte_BD
GAME:3591                 STA     byte_BC
GAME:3593                 LDA     #$D5
GAME:3595                 STA     byte_BB
GAME:3597                 RTS
GAME:3597 ; End of function END
GAME:3597
GAME:3598
GAME:3598 ; =============== S U B R O U T I N E =======================================
GAME:3598
GAME:3598
GAME:3598 B77:                                    ; CODE XREF: ZE+24↑p
GAME:3598                                         ; ZE+BA↑p
GAME:3598                 LDY     byte_67A
GAME:359B                 INX
GAME:359C                 INX
GAME:359D                 INX
GAME:359E                 INX
GAME:359F
GAME:359F loc_359F:                               ; CODE XREF: B77+9↓j
GAME:359F                 DEY
GAME:35A0                 DEX
GAME:35A1                 BNE     loc_359F
GAME:35A3                 LDX     byte_B9
GAME:35A5                 RTS
GAME:35A5 ; End of function B77
GAME:35A5
GAME:35A6
GAME:35A6 ; =============== S U B R O U T I N E =======================================
GAME:35A6
GAME:35A6
GAME:35A6 FBTGN:                                  ; CODE XREF: SRT+27↑p
GAME:35A6                                         ; CKLAND+2B↑p
GAME:35A6
GAME:35A6 ; FUNCTION CHUNK AT GAME:35AD SIZE 00000035 BYTES
GAME:35A6
GAME:35A6                 LDA     byte_BF
GAME:35A8                 CMP     #188
GAME:35AA                 BEQ     A3
GAME:35AC                 RTS
GAME:35AC ; End of function FBTGN
GAME:35AC
GAME:35AD ; ---------------------------------------------------------------------------
GAME:35AD ; START OF FUNCTION CHUNK FOR FTNKGN
GAME:35AD ;   ADDITIONAL PARENT FUNCTION FBTGN
GAME:35AD
GAME:35AD A3:                                     ; CODE XREF: FBTGN+4↑j
GAME:35AD                                         ; FTNKGN:B4↓j
GAME:35AD                 LDY     byte_65F
GAME:35B0                 BNE     A7
GAME:35B2                 JSR     CKFGN
GAME:35B5
GAME:35B5 G3:                                     ; CODE XREF: FBRGN:ZW↑j
GAME:35B5                                         ; FBRGN+51↑j
GAME:35B5                 LDA     MISSLE_3_X_POS2
GAME:35B8                 SEC
GAME:35B9                 SBC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:35BB                 BCC     A4
GAME:35BD                 CMP     #20
GAME:35BF                 BCS     A9
GAME:35C1                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_LEFT
GAME:35C3                 JMP     A6
GAME:35C6 ; ---------------------------------------------------------------------------
GAME:35C6
GAME:35C6 A9:                                     ; CODE XREF: FTNKGN-1F0↑j
GAME:35C6                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_LEFT2
GAME:35C8
GAME:35C8 A6:                                     ; CODE XREF: FTNKGN-1EC↑j
GAME:35C8                                         ; FTNKGN-1D8↓j ...
GAME:35C8                 STA     VAR_MISSLE_3_STATE
GAME:35CB                 LDX     MISSLE_3_X_POS2
GAME:35CE                 JMP     SX              ; Set missile 3 X position
GAME:35D1 ; ---------------------------------------------------------------------------
GAME:35D1
GAME:35D1 A4:                                     ; CODE XREF: FTNKGN-1F4↑j
GAME:35D1                 CMP     #240
GAME:35D3                 BCC     G1
GAME:35D5                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_NOTHING
GAME:35D7                 JMP     A6
GAME:35DA ; ---------------------------------------------------------------------------
GAME:35DA
GAME:35DA G1:                                     ; CODE XREF: FTNKGN-1DC↑j
GAME:35DA                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_RIGHT
GAME:35DC                 JMP     A6
GAME:35DF ; ---------------------------------------------------------------------------
GAME:35DF
GAME:35DF A7:                                     ; CODE XREF: FTNKGN-1FF↑j
GAME:35DF                 JMP     SM
GAME:35DF ; END OF FUNCTION CHUNK FOR FTNKGN
GAME:35E2
GAME:35E2 ; =============== S U B R O U T I N E =======================================
GAME:35E2
GAME:35E2
GAME:35E2 CKFGN:                                  ; CODE XREF: FBRGN+9↑p
GAME:35E2                                         ; FTNKGN-1FD↑p
GAME:35E2                 LDX     byte_661
GAME:35E5                 BEQ     A5
GAME:35E7                 LDA     byte_664
GAME:35EA                 BNE     A5
GAME:35EC                 LDY     byte_65D
GAME:35EF                 CPY     #166
GAME:35F1                 BCS     A5
GAME:35F3                 CPY     #70
GAME:35F5                 BCC     A5
GAME:35F7                 RTS
GAME:35F8 ; ---------------------------------------------------------------------------
GAME:35F8
GAME:35F8 A5:                                     ; CODE XREF: CKFGN+3↑j
GAME:35F8                                         ; CKFGN+8↑j ...
GAME:35F8                 PLA
GAME:35F9                 PLA
GAME:35FA                 RTS
GAME:35FA ; End of function CKFGN
GAME:35FA
GAME:35FB
GAME:35FB ; =============== S U B R O U T I N E =======================================
GAME:35FB
GAME:35FB
GAME:35FB B3:                                     ; CODE XREF: B5+2E↓p
GAME:35FB                                         ; GUNC-5C4↓j ...
GAME:35FB                 ASL     A
GAME:35FC                 ASL     A
GAME:35FD                 STA     MSHIP_BULLET_X_POS
GAME:3600                 STA     byte_698
GAME:3603                 LDA     #50
GAME:3605                 STA     byte_699
GAME:3608                 LDA     #45
GAME:360A                 STA     byte_69A
GAME:360D                 RTS
GAME:360D ; End of function B3
GAME:360D
GAME:360E
GAME:360E ; =============== S U B R O U T I N E =======================================
GAME:360E
GAME:360E
GAME:360E M2GPOS:                                 ; CODE XREF: COMMON+54↑p
GAME:360E                 LDA     byte_698
GAME:3611                 BNE     B6
GAME:3613                 RTS
GAME:3614 ; ---------------------------------------------------------------------------
GAME:3614
GAME:3614 B8:                                     ; CODE XREF: M2GPOS+1D↓j
GAME:3614                                         ; M2GPOS+24↓j
GAME:3614                 LDA     #0
GAME:3616                 STA     byte_698
GAME:3619                 RTS
GAME:361A ; ---------------------------------------------------------------------------
GAME:361A
GAME:361A B6:                                     ; CODE XREF: M2GPOS+3↑j
GAME:361A                 LDA     byte_699
GAME:361D                 BEQ     B9
GAME:361F                 DEC     byte_699
GAME:3622                 RTS
GAME:3623 ; ---------------------------------------------------------------------------
GAME:3623
GAME:3623 B9:                                     ; CODE XREF: M2GPOS+F↑j
GAME:3623                 INC     byte_69A
GAME:3626                 LDY     byte_69A
GAME:3629                 CPY     #210
GAME:362B                 BEQ     B8
GAME:362D                 LDA     MSHIP_BULLET_X_POS
GAME:3630                 CMP     #50
GAME:3632                 BCC     B8
GAME:3634                 DEC     byte_69B
GAME:3637                 LDA     byte_69B
GAME:363A                 LSR     A
GAME:363B                 BCS     C0              ; => Return
GAME:363D                 DEC     MSHIP_BULLET_X_POS
GAME:3640
GAME:3640 C0:                                     ; CODE XREF: M2GPOS+2D↑j
GAME:3640                 RTS                     ; => Return
GAME:3640 ; End of function M2GPOS
GAME:3640
GAME:3641
GAME:3641 ; =============== S U B R O U T I N E =======================================
GAME:3641
GAME:3641
GAME:3641 CKFM2:                                  ; CODE XREF: FM2GN+5↓p
GAME:3641                 LDA     byte_FD
GAME:3643                 BEQ     loc_364D
GAME:3645                 CMP     #20
GAME:3647                 BEQ     loc_364D
GAME:3649                 CMP     #5
GAME:364B                 BNE     loc_366E
GAME:364D
GAME:364D loc_364D:                               ; CODE XREF: CKFM2+2↑j
GAME:364D                                         ; CKFM2+6↑j
GAME:364D                 LDX     byte_698
GAME:3650                 BEQ     loc_366E
GAME:3652                 LDY     byte_69A
GAME:3655                 CPY     #166
GAME:3657                 BCS     loc_366E
GAME:3659                 CPY     #70
GAME:365B                 BCC     loc_366E
GAME:365D                 LDA     byte_699
GAME:3660                 BNE     loc_366E
GAME:3662                 LDA     byte_FD
GAME:3664                 CMP     #20
GAME:3666                 BEQ     locret_366D     ; => Return
GAME:3668                 LDA     #COLOR_INTENSITY_0|COLOR_GRAY
GAME:366A                 STA     PCOLR2          ; P2 COLOR
GAME:366D
GAME:366D locret_366D:                            ; CODE XREF: CKFM2+25↑j
GAME:366D                 RTS                     ; => Return
GAME:366E ; ---------------------------------------------------------------------------
GAME:366E
GAME:366E loc_366E:                               ; CODE XREF: CKFM2+A↑j
GAME:366E                                         ; CKFM2+F↑j ...
GAME:366E                 PLA
GAME:366F                 PLA
GAME:3670                 RTS
GAME:3670 ; End of function CKFM2
GAME:3670
GAME:3671
GAME:3671 ; =============== S U B R O U T I N E =======================================
GAME:3671
GAME:3671
GAME:3671 FM2GN:                                  ; CODE XREF: COMMON+57↑p
GAME:3671
GAME:3671 ; FUNCTION CHUNK AT GAME:2B98 SIZE 0000000E BYTES
GAME:3671 ; FUNCTION CHUNK AT GAME:3758 SIZE 0000001D BYTES
GAME:3671
GAME:3671                 LDY     ENEMY_BULLET_Y_POS ; Y position of an enemy bullet (0=none)
GAME:3674                 BNE     C2
GAME:3676
GAME:3676                 JSR     CKFM2
GAME:3679                 LDA     CURRENT_GAME_PHASE
GAME:367B                 CMP     #GAME_PHASE_6
GAME:367D                 BCC     _1
GAME:367F                 CMP     #GAME_PHASE_8
GAME:3681                 BCS     _1
GAME:3683                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_RIGHT
GAME:3685                 JMP     C5
GAME:3688 ; ---------------------------------------------------------------------------
GAME:3688
GAME:3688 _1:                                     ; CODE XREF: FM2GN+C↑j
GAME:3688                                         ; FM2GN+10↑j
GAME:3688                 LDA     MSHIP_BULLET_X_POS
GAME:368B
GAME:368B loc_368B:                               ; CODE XREF: FSHGN+1C↓j
GAME:368B                 SEC
GAME:368C                 SBC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:368E                 BCC     C3
GAME:3690                 CMP     #20
GAME:3692                 BCS     C4
GAME:3694                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_LEFT
GAME:3696                 JMP     C5
GAME:3699 ; ---------------------------------------------------------------------------
GAME:3699
GAME:3699 C4:                                     ; CODE XREF: FM2GN+21↑j
GAME:3699                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_LEFT2
GAME:369B
GAME:369B C5:                                     ; CODE XREF: FM2GN+14↑j
GAME:369B                                         ; FM2GN+25↑j ...
GAME:369B                 STA     ENEMY_BULLET_MOVEMENT ; Movement pattern (state machine) for the bullet
GAME:369E                 LDX     MSHIP_BULLET_X_POS
GAME:36A1                 JMP     C6
GAME:36A4 ; ---------------------------------------------------------------------------
GAME:36A4
GAME:36A4 C3:                                     ; CODE XREF: FM2GN+1D↑j
GAME:36A4                 CMP     #240
GAME:36A6                 BCC     G2
GAME:36A8                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_NOTHING
GAME:36AA                 JMP     C5
GAME:36AD ; ---------------------------------------------------------------------------
GAME:36AD
GAME:36AD G2:                                     ; CODE XREF: FM2GN+35↑j
GAME:36AD                 LDA     #ENEMY_BULLET_MOVEMENT_TYPES_RIGHT
GAME:36AF                 JMP     C5
GAME:36B2 ; ---------------------------------------------------------------------------
GAME:36B2
GAME:36B2 C6:                                     ; CODE XREF: FM2GN+30↑j
GAME:36B2                 STX     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:36B5                 STX     ENEMY_BULLET_X_POS ; X position of an enemy bullet (0=none)
GAME:36B8                 STY     ENEMY_BULLET_Y_POS ; Y position of an enemy bullet (0=none)
GAME:36BB                 LDA     #100000b
GAME:36BD                 STA     MISSLE,Y
GAME:36C0                 STA     MISSLE-1,Y
GAME:36C3                 LDA     RANDOM          ; Random Number Generator
GAME:36C6                 AND     #1111b
GAME:36C8                 ADC     #15
GAME:36CA                 STA     byte_69F
GAME:36CD                 LDA     #12
GAME:36CF                 STA     AUDIO4_GUN_SND_COUNTER
GAME:36D2                 RTS
GAME:36D3 ; ---------------------------------------------------------------------------
GAME:36D3
GAME:36D3 C2:                                     ; CODE XREF: FM2GN+3↑j
GAME:36D3                 LDA     ENEMY_BULLET_MOVEMENT ; Movement pattern (state machine) for the bullet
GAME:36D6                 BEQ     C7
GAME:36D8                 CMP     #ENEMY_BULLET_MOVEMENT_TYPES_LEFT2
GAME:36DA                 BNE     C8
GAME:36DC                 DEC     ENEMY_BULLET_X_POS ; X position of an enemy bullet (0=none)
GAME:36DF
GAME:36DF C7:                                     ; CODE XREF: FM2GN+65↑j
GAME:36DF                                         ; FM2GN+8C↓j
GAME:36DF                 DEC     ENEMY_BULLET_X_POS ; X position of an enemy bullet (0=none)
GAME:36E2
GAME:36E2 G6:                                     ; CODE XREF: FM2GN+85↓j
GAME:36E2                 LDA     ENEMY_BULLET_X_POS ; X position of an enemy bullet (0=none)
GAME:36E5                 STA     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:36E8                 JMP     C9
GAME:36EB ; ---------------------------------------------------------------------------
GAME:36EB
GAME:36EB C8:                                     ; CODE XREF: FM2GN+69↑j
GAME:36EB                 CMP     #ENEMY_BULLET_MOVEMENT_TYPES_NOTHING
GAME:36ED                 BEQ     C9
GAME:36EF                 CMP     #ENEMY_BULLET_MOVEMENT_TYPES_RIGHT
GAME:36F1                 BNE     G7
GAME:36F3                 INC     ENEMY_BULLET_X_POS ; X position of an enemy bullet (0=none)
GAME:36F6                 JMP     G6
GAME:36F9 ; ---------------------------------------------------------------------------
GAME:36F9
GAME:36F9 G7:                                     ; CODE XREF: FM2GN+80↑j
GAME:36F9                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:36FC                 LSR     A
GAME:36FD                 BCC     C7
GAME:36FF
GAME:36FF C9:                                     ; CODE XREF: FM2GN+77↑j
GAME:36FF                                         ; FM2GN+7C↑j
GAME:36FF                 LDA     byte_69F
GAME:3702                 BEQ     D0
GAME:3704                 DEC     byte_69F
GAME:3707                 BNE     D1
GAME:3709                 LDA     AUDIO3_SOUND_COUNTER
GAME:370C                 BNE     D2
GAME:370E                 LDA     #2
GAME:3710                 LDX     #AUDIO_CONTROL_VOL_7|AUDIO_CONTROL_DIST_1
GAME:3712                 JSR     XXX             ; Start Audio 3 sound effect
GAME:3715
GAME:3715 D2:                                     ; CODE XREF: FM2GN+9B↑j
GAME:3715                 LDA     #25
GAME:3717                 STA     byte_6A0
GAME:371A                 LDA     #100000b
GAME:371C                 JMP     D3
GAME:371F ; ---------------------------------------------------------------------------
GAME:371F
GAME:371F D1:                                     ; CODE XREF: FM2GN+96↑j
GAME:371F                 LDA     #0
GAME:3721                 STA     MISSLE,Y
GAME:3724                 DEY
GAME:3725                 STA     MISSLE,Y
GAME:3728                 DEY
GAME:3729                 STY     ENEMY_BULLET_Y_POS ; Y position of an enemy bullet (0=none)
GAME:372C                 LDA     #100000b
GAME:372E                 STA     MISSLE,Y
GAME:3731                 STA     MISSLE-1,Y
GAME:3734                 JSR     CLG20
GAME:3737                 RTS
GAME:3737 ; End of function FM2GN
GAME:3737
GAME:3738
GAME:3738 ; =============== S U B R O U T I N E =======================================
GAME:3738
GAME:3738 ; Remove bullet image at Y
GAME:3738
GAME:3738 D4:                                     ; CODE XREF: FM2GN+EA↓j
GAME:3738                                         ; CLG20:ADH↓p ...
GAME:3738                 LDA     #0
GAME:373A                 STA     MISSLE,Y
GAME:373D                 STA     MISSLE-1,Y
GAME:3740                 STA     ENEMY_BULLET_Y_POS ; Y position of an enemy bullet (0=none)
GAME:3743                 STA     MISSLE-2,Y
GAME:3746                 STA     MISSLE-3,Y
GAME:3749                 STA     MISSLE-4,Y
GAME:374C                 LDA     #11001111b
GAME:374E                 AND     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:3751                 STA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:3754                 STA     SIZEM           ; Missle Size
GAME:3757                 RTS
GAME:3757 ; End of function D4
GAME:3757
GAME:3758 ; ---------------------------------------------------------------------------
GAME:3758 ; START OF FUNCTION CHUNK FOR FM2GN
GAME:3758
GAME:3758 D0:                                     ; CODE XREF: FM2GN+91↑j
GAME:3758                 DEC     byte_6A0
GAME:375B                 BEQ     D4              ; Remove bullet image at Y
GAME:375D                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:3760                 LSR     A
GAME:3761                 LSR     A
GAME:3762                 LSR     A
GAME:3763                 BCC     D5
GAME:3765                 JSR     CLG20
GAME:3768                 RTS
GAME:3769 ; ---------------------------------------------------------------------------
GAME:3769
GAME:3769 D5:                                     ; CODE XREF: FM2GN+F2↑j
GAME:3769                 LDA     #110000b
GAME:376B                 ORA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:376E                 STA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:3771                 STA     SIZEM           ; Missle Size
GAME:3774                 RTS
GAME:3774 ; END OF FUNCTION CHUNK FOR FM2GN
GAME:3775
GAME:3775 ; =============== S U B R O U T I N E =======================================
GAME:3775
GAME:3775
GAME:3775 CLG20:                                  ; CODE XREF: FM2GN+C3↑p
GAME:3775                                         ; FM2GN+F4↑p
GAME:3775                 LDA     M2PL_SIZEP2     ; Missle to Player 2 Collision / Player 2 Size
GAME:3778                 AND     #1
GAME:377A                 BNE     D6
GAME:377C                 LDA     #11001111b
GAME:377E                 AND     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:3781                 STA     SIZEM_SHADOW    ; Shadow Register for SIZEM
GAME:3784                 STA     SIZEM           ; Missle Size
GAME:3787
GAME:3787 D7:                                     ; CODE XREF: CLG20+31↓j
GAME:3787                 RTS                     ;  => Return
GAME:3788 ; ---------------------------------------------------------------------------
GAME:3788
GAME:3788 D6:                                     ; CODE XREF: CLG20+5↑j
GAME:3788                 LDA     CURRENT_GAME_PHASE
GAME:378A                 CMP     #GAME_PHASE_5
GAME:378C                 BCC     _1
GAME:378E                 CMP     #GAME_PHASE_8
GAME:3790                 BCC     ADH
GAME:3792
GAME:3792 _1:                                     ; CODE XREF: CLG20+17↑j
GAME:3792                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:3794                 ADC     DIFF.field_3    ; Difficulty for the level
GAME:3797                 LDX     byte_FD
GAME:3799                 BNE     J4
GAME:379B                 SBC     byte_69A
GAME:379E                 JMP     J5
GAME:37A1 ; ---------------------------------------------------------------------------
GAME:37A1
GAME:37A1 J4:                                     ; CODE XREF: CLG20+24↑j
GAME:37A1                 SBC     ENEMY_Y_POS     ; Enemy Y position
GAME:37A3
GAME:37A3 J5:                                     ; CODE XREF: CLG20+29↑j
GAME:37A3                 CMP     DIFF.field_4    ; Difficulty for the level
GAME:37A6                 BCS     D7              ;  => Return
GAME:37A8
GAME:37A8 ADH:                                    ; CODE XREF: CLG20+1B↑j
GAME:37A8                 JSR     D4              ; Remove bullet image at Y
GAME:37AB                 JSR     SV
GAME:37AE                 RTS
GAME:37AE ; End of function CLG20
GAME:37AE
GAME:37AF
GAME:37AF ; =============== S U B R O U T I N E =======================================
GAME:37AF
GAME:37AF
GAME:37AF FTNKGN:                                 ; CODE XREF: COMMON+51↑p
GAME:37AF
GAME:37AF ; FUNCTION CHUNK AT GAME:2B4F SIZE 00000049 BYTES
GAME:37AF ; FUNCTION CHUNK AT GAME:2BA6 SIZE 00000019 BYTES
GAME:37AF ; FUNCTION CHUNK AT GAME:2BDF SIZE 0000001D BYTES
GAME:37AF ; FUNCTION CHUNK AT GAME:35AD SIZE 00000035 BYTES
GAME:37AF
GAME:37AF                 LDA     byte_BF
GAME:37B1                 CMP     #45
GAME:37B3                 BEQ     B4
GAME:37B5                 RTS
GAME:37B6 ; ---------------------------------------------------------------------------
GAME:37B6
GAME:37B6 B4:                                     ; CODE XREF: FTNKGN+4↑j
GAME:37B6                 JMP     A3
GAME:37B6 ; End of function FTNKGN
GAME:37B6
GAME:37B9
GAME:37B9 ; =============== S U B R O U T I N E =======================================
GAME:37B9
GAME:37B9
GAME:37B9 B5:                                     ; CODE XREF: QN+78↑p
GAME:37B9                                         ; ENRUN:H4↑j ...
GAME:37B9                 LDA     CURRENT_GAME_PHASE
GAME:37BB                 BEQ     B0
GAME:37BD                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:37C0
GAME:37C0 B2:                                     ; CODE XREF: B5+25↓j
GAME:37C0                 CLC
GAME:37C1                 ADC     byte_6A3
GAME:37C4                 JSR     A2
GAME:37C7                 STA     byte_BF
GAME:37C9                 RTS
GAME:37CA ; ---------------------------------------------------------------------------
GAME:37CA
GAME:37CA B0:                                     ; CODE XREF: B5+2↑j
GAME:37CA                 LDA     byte_FE
GAME:37CC                 CMP     #10
GAME:37CE                 BCC     B1
GAME:37D0                 LDA     RIVER_BOAT_NEXT_COUNTER ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
GAME:37D3                 CMP     #10
GAME:37D5                 BCC     B1
GAME:37D7                 LDA     byte_661
GAME:37DA                 BNE     B1
GAME:37DC                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:37DE                 JMP     B2
GAME:37E1 ; ---------------------------------------------------------------------------
GAME:37E1
GAME:37E1 B1:                                     ; CODE XREF: B5+15↑j
GAME:37E1                                         ; B5+1C↑j ...
GAME:37E1                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:37E3
GAME:37E3 H3:                                     ; CODE XREF: ENRUN+10B↑j
GAME:37E3                                         ; BLDG+10F↑j
GAME:37E3                 CLC
GAME:37E4                 ADC     byte_6A3
GAME:37E7                 JSR     B3
GAME:37EA                 RTS
GAME:37EA ; End of function B5
GAME:37EA
GAME:37EB
GAME:37EB ; =============== S U B R O U T I N E =======================================
GAME:37EB
GAME:37EB ; Draw the runway on the map
GAME:37EB
GAME:37EB DRUN__DRAW_RUNWAY:                      ; CODE XREF: SRT+9↑p
GAME:37EB                                         ; CKLAND+19↑p ...
GAME:37EB                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:37ED                 BEQ     EV
GAME:37EF                 RTS
GAME:37F0 ; ---------------------------------------------------------------------------
GAME:37F0
GAME:37F0 EV:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+2↑j
GAME:37F0                 LDA     byte_638
GAME:37F3                 BEQ     LY
GAME:37F5                 DEC     byte_62C
GAME:37F8                 LDA     byte_62C
GAME:37FB                 LSR     A
GAME:37FC                 BCC     EW              ; => Return
GAME:37FE                 DEC     byte_638
GAME:3801                 RTS
GAME:3802 ; ---------------------------------------------------------------------------
GAME:3802
GAME:3802 MC:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+B7↓j
GAME:3802                 LDY     #255
GAME:3804                 STY     byte_B6
GAME:3806                 INY
GAME:3807                 LDA     byte_FD
GAME:3809                 CMP     #255
GAME:380B                 BNE     PE
GAME:380D                 STY     byte_FD
GAME:380F
GAME:380F PE:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+20↑j
GAME:380F                 LDA     RANDOM          ; Random Number Generator
GAME:3812                 AND     #$1F
GAME:3814                 ADC     byte_6CF
GAME:3817                 STA     byte_638
GAME:381A
GAME:381A EW:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+11↑j
GAME:381A                                         ; DRUN__DRAW_RUNWAY+37↓j ...
GAME:381A                 RTS                     ; => Return
GAME:381B ; ---------------------------------------------------------------------------
GAME:381B
GAME:381B LY:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+8↑j
GAME:381B                 LDA     RUNWAY_POS_Y_INDEX ; Runway is 45 characters long, this is an index used for drawing the correct line
GAME:381E                 BNE     MB
GAME:3820                 LDA     byte_FE
GAME:3822                 BEQ     EW              ; => Return
GAME:3824                 LDA     #100
GAME:3826                 STA     byte_FE
GAME:3828                 LDA     RIVER_BOAT_ROW_FLAG ; !=0 boat top row drawn, ==0 boat bottom row drawn
GAME:382B                 BNE     EW              ; => Return
GAME:382D                 LDA     #120
GAME:382F                 STA     RIVER_BOAT_NEXT_COUNTER ; how many rows, till the next boat might show up? (15 = default, 16-31 after the first one)
GAME:3832                 LDA     byte_FD
GAME:3834                 CMP     #255
GAME:3836                 BEQ     MD
GAME:3838                 CMP     #5
GAME:383A                 BEQ     R3
GAME:383C                 CMP     #0
GAME:383E                 BNE     EW              ; => Return
GAME:3840
GAME:3840 R3:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+4F↑j
GAME:3840                 LDX     #255
GAME:3842                 STX     byte_FD
GAME:3844                 INX
GAME:3845                 STX     CAN_LAND_FLAG   ; set to 0
GAME:3848                 LDA     #_R|_C_BLACK
GAME:384A                 STA     byte_C4
GAME:384C                 STA     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:384F                 STA     byte_6B6
GAME:3852                 LSR     A
GAME:3853                 STA     RUN_SOUND_COUNTER ; 0=Run sound off, otherwise a count down timer for the effect
GAME:3856
GAME:3856 MD:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+4B↑j
GAME:3856                 JSR     FLSH
GAME:3859                 LDY     RIVER_RIGHT_X_POS ; Right position of the river
GAME:385B                 CPY     #40
GAME:385D                 BCS     LZ
GAME:385F                 DEX
GAME:3860                 STX     byte_610
GAME:3863                 CPY     #30
GAME:3865                 BCS     EW              ; => Return
GAME:3867                 JMP     MA
GAME:386A ; ---------------------------------------------------------------------------
GAME:386A
GAME:386A LZ:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+72↑j
GAME:386A                 LDA     #64
GAME:386C                 STA     byte_610
GAME:386F                 CPY     #65
GAME:3871                 BCC     EW              ; => Return
GAME:3873
GAME:3873 MA:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+7C↑j
GAME:3873                 LDA     #2
GAME:3875                 STA     byte_B6
GAME:3877                 LDA     #45
GAME:3879                 STA     RUNWAY_POS_Y_INDEX ; Runway is 45 characters long, this is an index used for drawing the correct line
GAME:387C                 LDA     RANDOM          ; Random Number Generator
GAME:387F                 AND     #7
GAME:3881                 STA     RUNWAY_POS_X_INDEX ; Right position where the runway starts
GAME:3884                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:3886                 CMP     #50
GAME:3888                 BCS     EX
GAME:388A                 LDA     #44
GAME:388C                 ADC     RUNWAY_POS_X_INDEX ; Right position where the runway starts
GAME:388F                 JMP     EY
GAME:3892 ; ---------------------------------------------------------------------------
GAME:3892
GAME:3892 EX:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+9D↑j
GAME:3892                 LDA     #37
GAME:3894                 SBC     RUNWAY_POS_X_INDEX ; Right position where the runway starts
GAME:3897
GAME:3897 EY:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+A4↑j
GAME:3897                 STA     RUNWAY_POS_X_INDEX ; Right position where the runway starts
GAME:389A                 JMP     FI              ; Start hangar creation
GAME:389D ; ---------------------------------------------------------------------------
GAME:389D
GAME:389D MB:                                     ; CODE XREF: EB+3↑p
GAME:389D                                         ; DRUN__DRAW_RUNWAY+33↑j
GAME:389D                 DEC     RUNWAY_POS_Y_INDEX ; Runway is 45 characters long, this is an index used for drawing the correct line
GAME:38A0                 BNE     SH
GAME:38A2                 JMP     MC
GAME:38A5 ; ---------------------------------------------------------------------------
GAME:38A5
GAME:38A5 SH:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+B5↑j
GAME:38A5                 JSR     FLSH
GAME:38A8
GAME:38A8                 LDY     RUNWAY_POS_X_INDEX ; Right position where the runway starts
GAME:38AB                 LDA     #L_RUNWAY_RIGHT_11|L_C_1
GAME:38AD                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:38AF                 DEY
GAME:38B0                 LDX     #9
GAME:38B2                 LDA     RUNWAY_POS_Y_INDEX ; Runway is 45 characters long, this is an index used for drawing the correct line
GAME:38B5                 CMP     #1
GAME:38B7                 BEQ     EZ              ; Draw a horizontal runway marker line
GAME:38B9                 CMP     #4
GAME:38BB                 BEQ     EZ              ; Draw a horizontal runway marker line
GAME:38BD                 CMP     #44
GAME:38BF                 BEQ     NB
GAME:38C1                 LDA     #L_RUNWAY_CENTER|L_C_1
GAME:38C3                 JMP     FA
GAME:38C6 ; ---------------------------------------------------------------------------
GAME:38C6
GAME:38C6 NB:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+D4↑j
GAME:38C6                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:38C8                 CMP     #45
GAME:38CA                 BCS     EZ              ; Draw a horizontal runway marker line
GAME:38CC                 LDA     #255
GAME:38CE                 STA     byte_610
GAME:38D1
GAME:38D1 EZ:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+CC↑j
GAME:38D1                                         ; DRUN__DRAW_RUNWAY+D0↑j ...
GAME:38D1                 LDA     #2              ; Draw a horizontal runway marker line
GAME:38D3                 STA     byte_B6
GAME:38D5                 LDA     #L_RUNWAY_MARKER_14|L_C_1
GAME:38D7
GAME:38D7 FA:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+D8↑j
GAME:38D7                                         ; DRUN__DRAW_RUNWAY+F0↓j
GAME:38D7                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:38D9                 DEY
GAME:38DA                 DEX
GAME:38DB                 BNE     FA
GAME:38DD                 LDA     #L_RUNWAY_LEFT_13|L_C_1
GAME:38DF                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:38E1                 DEY
GAME:38E2
GAME:38E2                 LDA     RUNWAY_POS_Y_INDEX ; Runway is 45 characters long, this is an index used for drawing the correct line
GAME:38E5                 CMP     #26
GAME:38E7                 BEQ     FI              ; Start hangar creation
GAME:38E9                 CMP     #23
GAME:38EB                 BEQ     FB              ; Draw HNGR1
GAME:38ED                 CMP     #22
GAME:38EF                 BEQ     FC              ; Draw HNGR2
GAME:38F1                 CMP     #21
GAME:38F3                 BEQ     FD              ; Draw HNGR3 A
GAME:38F5                 CMP     #20
GAME:38F7                 BEQ     FD              ; Draw HNGR3 A
GAME:38F9                 CMP     #19
GAME:38FB                 BEQ     FD              ; Draw HNGR3 A
GAME:38FD                 CMP     #18
GAME:38FF                 BEQ     FF              ; Draw HNGR3 B
GAME:3901                 CMP     #17
GAME:3903                 BEQ     FE              ; Draw HNGR5
GAME:3905                 CMP     #2
GAME:3907                 BEQ     V2
GAME:3909                 RTS
GAME:390A ; ---------------------------------------------------------------------------
GAME:390A
GAME:390A FI:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+AF↑j
GAME:390A                                         ; DRUN__DRAW_RUNWAY+FC↑j
GAME:390A                 LDA     #0              ; Start hangar creation
GAME:390C                 STA     byte_B6
GAME:390E                 JMP     DFHNGR          ; Define Hangar – restore the font characters for the hangar
GAME:3911 ; ---------------------------------------------------------------------------
GAME:3911
GAME:3911 FB:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+100↑j
GAME:3911                 LDA     #2              ; Draw HNGR1
GAME:3913                 STA     byte_B6
GAME:3915                 STA     byte_6F9
GAME:3918                 JMP     UE              ; Draw HNGR1 - first row of the hangar
GAME:391B ; ---------------------------------------------------------------------------
GAME:391B
GAME:391B FC:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+104↑j
GAME:391B                 JMP     UF              ; Draw HNGR2
GAME:391E ; ---------------------------------------------------------------------------
GAME:391E
GAME:391E FD:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+108↑j
GAME:391E                                         ; DRUN__DRAW_RUNWAY+10C↑j ...
GAME:391E                 JMP     UG              ; Draw HNGR3 A
GAME:3921 ; ---------------------------------------------------------------------------
GAME:3921
GAME:3921 FF:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+114↑j
GAME:3921                 JMP     UH              ; Draw HNGR3 B
GAME:3924 ; ---------------------------------------------------------------------------
GAME:3924
GAME:3924 FE:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+118↑j
GAME:3924                 JMP     UI              ; Draw HNGR5
GAME:3927 ; ---------------------------------------------------------------------------
GAME:3927
GAME:3927 V2:                                     ; CODE XREF: DRUN__DRAW_RUNWAY+11C↑j
GAME:3927                 LDY     #_SPACE|_C_BLACK
GAME:3929                 STY     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:392C                 STY     byte_6B6
GAME:392F                 INY
GAME:3930                 STY     CAN_LAND_FLAG   ; set to 1
GAME:3933                 RTS
GAME:3933 ; End of function DRUN__DRAW_RUNWAY
GAME:3933
GAME:3934
GAME:3934 ; =============== S U B R O U T I N E =======================================
GAME:3934
GAME:3934 ; Flash background of control display to signal damage
GAME:3934
GAME:3934 COLRDM__COLOR_DAMAGE:                   ; CODE XREF: COMMON+60↑p
GAME:3934                 LDA     PLANE_HIT_FLASH_COUNTER ; !=0 => counter to signal damage via flashing
GAME:3936                 BNE     D8
GAME:3938                 RTS
GAME:3939 ; ---------------------------------------------------------------------------
GAME:3939
GAME:3939 D8:                                     ; CODE XREF: COLRDM__COLOR_DAMAGE+2↑j
GAME:3939                 DEC     PLANE_HIT_FLASH_COUNTER ; !=0 => counter to signal damage via flashing
GAME:393B                 BNE     D9              ; Hit by enemy gun or anti-aircraft
GAME:393D                 LDA     #COLOR_INTENSITY_0|COLOR_GRAY
GAME:393F                 JMP     E0
GAME:3942 ; ---------------------------------------------------------------------------
GAME:3942
GAME:3942 D9:                                     ; CODE XREF: COLRDM__COLOR_DAMAGE+7↑j
GAME:3942                 LDA     #COLOR_INTENSITY_0|COLOR_RED_ORANGE ; Hit by enemy gun or anti-aircraft
GAME:3944
GAME:3944 E0:                                     ; CODE XREF: COLRDM__COLOR_DAMAGE+B↑j
GAME:3944                 STA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:3947                 RTS
GAME:3947 ; End of function COLRDM__COLOR_DAMAGE
GAME:3947
GAME:3948
GAME:3948 ; =============== S U B R O U T I N E =======================================
GAME:3948
GAME:3948
GAME:3948 FTURN:                                  ; CODE XREF: LF+9↑p
GAME:3948                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:394B                 BNE     L8
GAME:394D                 LDA     RANDOM          ; Random Number Generator
GAME:3950                 AND     #$3F ; '?'
GAME:3952                 BEQ     L9
GAME:3954
GAME:3954 M0:                                     ; CODE XREF: FTURN+11↓j
GAME:3954                                         ; FTURN+15↓j
GAME:3954                 RTS                     ; => Return
GAME:3955 ; ---------------------------------------------------------------------------
GAME:3955
GAME:3955 L9:                                     ; CODE XREF: FTURN+A↑j
GAME:3955                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3957                 CPY     #35
GAME:3959                 BCC     M0              ; => Return
GAME:395B                 CPY     #130
GAME:395D                 BCS     M0              ; => Return
GAME:395F                 INC     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:3962                 LDX     #10
GAME:3964                 LDA     RANDOM          ; Random Number Generator
GAME:3967                 LSR     A
GAME:3968                 BCC     M1
GAME:396A                 INX
GAME:396B
GAME:396B M8:                                     ; CODE XREF: FTURN+2B↓j
GAME:396B                 LDA     FTL-1,X         ; enemy plane turning left
GAME:396E                 STA     P2+9,Y          ; Enemy (first color)
GAME:3971                 DEY
GAME:3972                 DEX
GAME:3973                 BNE     M8
GAME:3975                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3977                 LDA     #1000000b
GAME:3979                 STA     P3+5,Y          ; Enemy (second color)
GAME:397C                 RTS
GAME:397D ; ---------------------------------------------------------------------------
GAME:397D
GAME:397D M1:                                     ; CODE XREF: FTURN+20↑j
GAME:397D                 INC     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:3980
GAME:3980 N0:                                     ; CODE XREF: FTURN+40↓j
GAME:3980                 LDA     FTR-1,X         ; enemy plane turning right
GAME:3983                 STA     P2+9,Y          ; Enemy (first color)
GAME:3986                 DEY
GAME:3987                 DEX
GAME:3988                 BNE     N0
GAME:398A                 LDX     ENEMY_Y_POS     ; Enemy Y position
GAME:398C                 LSR     P3+4,X          ; Enemy (second color)
GAME:398F                 LSR     P3+6,X          ; Enemy (second color)
GAME:3992                 LDA     #100000b
GAME:3994                 STA     P3+5,X          ; Enemy (second color)
GAME:3997                 RTS
GAME:3998 ; ---------------------------------------------------------------------------
GAME:3998
GAME:3998 L8:                                     ; CODE XREF: FTURN+3↑j
GAME:3998                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:399A                 CMP     #2
GAME:399C                 BNE     M5
GAME:399E                 LDX     #11
GAME:39A0
GAME:39A0 M6:                                     ; CODE XREF: FTURN+66↓j
GAME:39A0                 LDA     P2+9,Y          ; Enemy (first color)
GAME:39A3                 STA     P2+$A,Y         ; Enemy (first color)
GAME:39A6                 LDA     P3+9,Y          ; Enemy (second color)
GAME:39A9                 STA     P3+$A,Y         ; Enemy (second color)
GAME:39AC                 DEY
GAME:39AD                 DEX
GAME:39AE                 BNE     M6
GAME:39B0                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:39B2                 LDY     byte_C2
GAME:39B4                 LDX     #9
GAME:39B6
GAME:39B6 M7:                                     ; CODE XREF: FTURN+76↓j
GAME:39B6                 LDA     P3+7,Y          ; Enemy (second color)
GAME:39B9                 STA     P3+8,Y          ; Enemy (second color)
GAME:39BC                 DEY
GAME:39BD                 DEX
GAME:39BE                 BNE     M7
GAME:39C0                 INC     byte_C2
GAME:39C2                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:39C4                 LDA     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:39C7                 CMP     #3
GAME:39C9                 BCC     N2
GAME:39CB                 LDA     #1010000b
GAME:39CD                 STA     P2+7,Y          ; Enemy (first color)
GAME:39D0                 LDA     #0
GAME:39D2                 STA     P2+8,Y          ; Enemy (first color)
GAME:39D5                 RTS
GAME:39D6 ; ---------------------------------------------------------------------------
GAME:39D6
GAME:39D6 N2:                                     ; CODE XREF: FTURN+81↑j
GAME:39D6                 LDA     #100000b
GAME:39D8                 STA     P2+7,Y          ; Enemy (first color)
GAME:39DB                 STA     P2+8,Y          ; Enemy (first color)
GAME:39DE                 RTS
GAME:39DF ; ---------------------------------------------------------------------------
GAME:39DF
GAME:39DF M5:                                     ; CODE XREF: FTURN+54↑j
GAME:39DF                 LDA     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:39E2                 CMP     #3
GAME:39E4                 BCC     N1
GAME:39E6                 LDA     #10111000b
GAME:39E8                 STA     P2+5,Y          ; Enemy (first color)
GAME:39EB                 LDA     #1001100b
GAME:39ED                 STA     P2+7,Y          ; Enemy (first color)
GAME:39F0                 LDA     #1100b
GAME:39F2                 STA     P2+6,Y          ; Enemy (first color)
GAME:39F5                 RTS
GAME:39F6 ; ---------------------------------------------------------------------------
GAME:39F6
GAME:39F6 N1:                                     ; CODE XREF: FTURN+9C↑j
GAME:39F6                 LDA     #111000b
GAME:39F8                 STA     P2+5,Y          ; Enemy (first color)
GAME:39FB                 LDA     #10001100b
GAME:39FD                 STA     P2+6,Y          ; Enemy (first color)
GAME:3A00                 LDA     #101100b
GAME:3A02                 STA     P2+7,Y          ; Enemy (first color)
GAME:3A05                 RTS
GAME:3A05 ; End of function FTURN
GAME:3A05
GAME:3A06
GAME:3A06 ; =============== S U B R O U T I N E =======================================
GAME:3A06
GAME:3A06
GAME:3A06 BTURN:                                  ; CODE XREF: L6+F5↑p
GAME:3A06                 LDA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:3A09                 BNE     K2
GAME:3A0B                 JSR     TRACK
GAME:3A0E                 LDA     RANDOM          ; Random Number Generator
GAME:3A11                 AND     #$3F ; '?'
GAME:3A13                 BEQ     K3
GAME:3A15
GAME:3A15 L1:                                     ; CODE XREF: BTURN+14↓j
GAME:3A15                 RTS                     ; => Return
GAME:3A16 ; ---------------------------------------------------------------------------
GAME:3A16
GAME:3A16 K3:                                     ; CODE XREF: BTURN+D↑j
GAME:3A16                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3A18                 CPY     #90
GAME:3A1A                 BCS     L1              ; => Return
GAME:3A1C                 LDA     #TURN_MODE_LEFT
GAME:3A1E                 STA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:3A21                 LDX     #10
GAME:3A23                 LDA     RANDOM          ; Random Number Generator
GAME:3A26                 LSR     A
GAME:3A27                 BCC     K4
GAME:3A29
GAME:3A29 K5:                                     ; CODE XREF: BTURN+2B↓j
GAME:3A29                                         ; TRACK:_3↓j
GAME:3A29                 LDA     P1IMAGE+7,X     ; plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)
GAME:3A2C                 STA     P2+9,Y          ; Enemy (first color)
GAME:3A2F                 DEY
GAME:3A30                 DEX
GAME:3A31                 BNE     K5
GAME:3A33                 JMP     K6
GAME:3A36 ; ---------------------------------------------------------------------------
GAME:3A36
GAME:3A36 K4:                                     ; CODE XREF: BTURN+21↑j
GAME:3A36                                         ; BTURN+38↓j ...
GAME:3A36                 LDA     P1IMAGE+$11,X   ; plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)
GAME:3A39                 STA     P2+9,Y          ; Enemy (first color)
GAME:3A3C                 DEY
GAME:3A3D                 DEX
GAME:3A3E                 BNE     K4
GAME:3A40                 INC     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:3A43
GAME:3A43 K6:                                     ; CODE XREF: BTURN+2D↑j
GAME:3A43                 LDY     byte_C2
GAME:3A45                 LDA     #10b
GAME:3A47                 STA     P3,Y            ; Enemy (second color)
GAME:3A4A                 LDA     #1000000b
GAME:3A4C                 STA     P3+7,Y          ; Enemy (second color)
GAME:3A4F                 RTS
GAME:3A50 ; ---------------------------------------------------------------------------
GAME:3A50
GAME:3A50 K2:                                     ; CODE XREF: BTURN+3↑j
GAME:3A50                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3A52                 CMP     #2
GAME:3A54                 BEQ     K7
GAME:3A56                 LDA     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:3A59                 CMP     #3
GAME:3A5B                 BCC     K9
GAME:3A5D                 LDA     #0
GAME:3A5F                 STA     P2,Y            ; Enemy (first color)
GAME:3A62                 LDA     #1000b
GAME:3A64                 STA     P2+1,Y          ; Enemy (first color)
GAME:3A67                 LDA     #10b
GAME:3A69                 STA     P2+2,Y          ; Enemy (first color)
GAME:3A6C                 RTS
GAME:3A6D ; ---------------------------------------------------------------------------
GAME:3A6D
GAME:3A6D K9:                                     ; CODE XREF: BTURN+55↑j
GAME:3A6D                 LDA     #100b
GAME:3A6F                 STA     P2,Y            ; Enemy (first color)
GAME:3A72                 STA     P2+1,Y          ; Enemy (first color)
GAME:3A75                 LDA     #0
GAME:3A77                 STA     P2+2,Y          ; Enemy (first color)
GAME:3A7A                 RTS
GAME:3A7B ; ---------------------------------------------------------------------------
GAME:3A7B
GAME:3A7B K7:                                     ; CODE XREF: BTURN+4E↑j
GAME:3A7B                 LDA     PROPELLER_PHASE ; Propeller phase (typically 0-4)
GAME:3A7E                 CMP     #3
GAME:3A80                 BCC     L0
GAME:3A82                 LDA     #11000000b
GAME:3A84                 STA     P2,Y            ; Enemy (first color)
GAME:3A87                 LDA     #1001000b
GAME:3A89                 STA     P2+1,Y          ; Enemy (first color)
GAME:3A8C                 LDA     #1100010b
GAME:3A8E                 STA     P2+2,Y          ; Enemy (first color)
GAME:3A91                 RTS
GAME:3A92 ; ---------------------------------------------------------------------------
GAME:3A92
GAME:3A92 L0:                                     ; CODE XREF: BTURN+7A↑j
GAME:3A92                 LDA     #11000100b
GAME:3A94                 STA     P2,Y            ; Enemy (first color)
GAME:3A97                 LDA     #1000100b
GAME:3A99                 STA     P2+1,Y          ; Enemy (first color)
GAME:3A9C                 LDA     #1100000b
GAME:3A9E                 STA     P2+2,Y          ; Enemy (first color)
GAME:3AA1                 RTS
GAME:3AA1 ; End of function BTURN
GAME:3AA1
GAME:3AA2
GAME:3AA2 ; =============== S U B R O U T I N E =======================================
GAME:3AA2
GAME:3AA2 ; Draw a car in the middle of a vertial/diagnal road
GAME:3AA2
GAME:3AA2 DRCAR:                                  ; CODE XREF: DROAD+3C↑p
GAME:3AA2                 LDA     RANDOM          ; Random Number Generator
GAME:3AA5                 AND     #1111b
GAME:3AA7                 BEQ     J6
GAME:3AA9
GAME:3AA9 J8:                                     ; CODE XREF: DRCAR+15↓j
GAME:3AA9                 RTS                     ; => Return
GAME:3AAA ; ---------------------------------------------------------------------------
GAME:3AAA
GAME:3AAA J6:                                     ; CODE XREF: DRCAR+5↑j
GAME:3AAA                 LDY     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:3AAD                 DEY
GAME:3AAE                 DEY                     ; x-4 => car is centered on the road
GAME:3AAF                 DEY
GAME:3AB0                 DEY
GAME:3AB1                 LDA     CURRENT_GAME_PHASE
GAME:3AB3                 CMP     #GAME_PHASE_ROAD_HARD_RIGHT_3
GAME:3AB5                 BEQ     J7
GAME:3AB7                 BCS     J8              ; => Return
GAME:3AB9                 CMP     #GAME_PHASE_DIAGNOAL_ROAD_2
GAME:3ABB                 BEQ     J7
GAME:3ABD                 LDA     RANDOM          ; Random Number Generator
GAME:3AC0                 LSR     A
GAME:3AC1                 BCC     J7
GAME:3AC3                 LDA     #L_STREET_CAR_RIGHT_COLOR_A|L_C_1
GAME:3AC5                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3AC7                 DEY
GAME:3AC8                 LDA     #L_STREET_CAR_LEFT_COLOR_A|L_C_1
GAME:3ACA                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3ACC                 RTS
GAME:3ACD ; ---------------------------------------------------------------------------
GAME:3ACD
GAME:3ACD J7:                                     ; CODE XREF: DRCAR+13↑j
GAME:3ACD                                         ; DRCAR+19↑j ...
GAME:3ACD                 LDA     #L_STREET_CAR_RIGHT_COLOR_B|L_C_1
GAME:3ACF                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3AD1                 DEY
GAME:3AD2                 LDA     #L_STREET_CAR_LEFT_COLOR_B|L_C_1
GAME:3AD4                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3AD6                 RTS
GAME:3AD6 ; End of function DRCAR
GAME:3AD6
GAME:3AD7
GAME:3AD7 ; =============== S U B R O U T I N E =======================================
GAME:3AD7
GAME:3AD7 ; Draw a moving ship
GAME:3AD7
GAME:3AD7 SHIP:                                   ; CODE XREF: SRT+18↑p
GAME:3AD7                 LDA     byte_FD
GAME:3AD9                 BEQ     I3
GAME:3ADB                 CMP     #15
GAME:3ADD                 BEQ     I2
GAME:3ADF                 RTS
GAME:3AE0 ; ---------------------------------------------------------------------------
GAME:3AE0
GAME:3AE0 I3:                                     ; CODE XREF: SHIP+2↑j
GAME:3AE0                 LDA     RANDOM          ; Random Number Generator
GAME:3AE3                 AND     #$F
GAME:3AE5                 BNE     I4              ; => Return
GAME:3AE7                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:3AE9                 CMP     #60
GAME:3AEB                 BCS     I4              ; => Return
GAME:3AED                 CMP     #29
GAME:3AEF                 BCC     I4              ; => Return
GAME:3AF1                 LDY     byte_FE
GAME:3AF3                 CPY     #12
GAME:3AF5                 BCC     I4              ; => Return
GAME:3AF7                 CPY     #25
GAME:3AF9                 BCS     I4              ; => Return
GAME:3AFB                 SBC     #6
GAME:3AFD                 ASL     A
GAME:3AFE                 ASL     A
GAME:3AFF                 ADC     #27
GAME:3B01                 STA     ENEMY_X_POS     ; Enemy X position
GAME:3B03                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:3B06                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:3B09                 LDY     #15
GAME:3B0B                 STY     ENEMY_Y_POS     ; Enemy Y position
GAME:3B0D                 STY     byte_FD
GAME:3B0F                 LDX     #12
GAME:3B11
GAME:3B11 I5:                                     ; CODE XREF: SHIP+48↓j
GAME:3B11                 LDA     SHPIM-1,X       ; moving ship
GAME:3B14                 STA     P2,Y            ; Enemy (first color)
GAME:3B17                 LDA     SHPIM1-1,X      ; moving ship black highlight color
GAME:3B1A                 STA     P3+2,Y          ; Enemy (second color)
GAME:3B1D                 DEY
GAME:3B1E                 DEX
GAME:3B1F                 BNE     I5
GAME:3B21                 LDA     byte_C4
GAME:3B23                 BNE     P6
GAME:3B25                 LDA     #COLOR_INTENSITY_2|COLOR_RED_ORANGE
GAME:3B27                 STA     PCOLR2          ; P2 COLOR
GAME:3B2A                 DEC     byte_C4
GAME:3B2C                 JMP     P7
GAME:3B2F ; ---------------------------------------------------------------------------
GAME:3B2F
GAME:3B2F P6:                                     ; CODE XREF: SHIP+4C↑j
GAME:3B2F                 LDA     #COLOR_INTENSITY_2|COLOR_GRAY
GAME:3B31                 STA     PCOLR2          ; P2 COLOR
GAME:3B34
GAME:3B34 P7:                                     ; CODE XREF: SHIP+55↑j
GAME:3B34                 LDA     #3
GAME:3B36                 STA     byte_6DC
GAME:3B39                 LDA     RANDOM          ; Random Number Generator
GAME:3B3C                 LSR     A
GAME:3B3D                 BCC     I6
GAME:3B3F                 STY     MSHIP_VAR_62B
GAME:3B42                 RTS
GAME:3B43 ; ---------------------------------------------------------------------------
GAME:3B43
GAME:3B43 I6:                                     ; CODE XREF: SHIP+66↑j
GAME:3B43                 STX     MSHIP_VAR_62B
GAME:3B46
GAME:3B46 I4:                                     ; CODE XREF: SHIP+E↑j
GAME:3B46                                         ; SHIP+14↑j ...
GAME:3B46                 RTS                     ; => Return
GAME:3B47 ; ---------------------------------------------------------------------------
GAME:3B47
GAME:3B47 I2:                                     ; CODE XREF: SHIP+6↑j
GAME:3B47                 JSR     XSHP
GAME:3B4A                 JSR     FSHGN           ; Fire movable ship gun
GAME:3B4D                 JSR     SHP23
GAME:3B50                 JSR     P0SHP
GAME:3B53                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:3B56                 LSR     A
GAME:3B57                 BCS     I4              ; => Return
GAME:3B59                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3B5B                 CPY     #194
GAME:3B5D                 BCC     I7
GAME:3B5F                 LDX     #15
GAME:3B61                 LDA     #0
GAME:3B63
GAME:3B63 I8:                                     ; CODE XREF: SHIP+94↓j
GAME:3B63                 STA     P2+2,Y          ; Enemy (first color)
GAME:3B66                 STA     P3+2,Y          ; Enemy (second color)
GAME:3B69                 DEY
GAME:3B6A                 DEX
GAME:3B6B                 BNE     I8
GAME:3B6D                 STA     byte_FD
GAME:3B6F                 RTS
GAME:3B70 ; ---------------------------------------------------------------------------
GAME:3B70
GAME:3B70 I7:                                     ; CODE XREF: SHIP+86↑j
GAME:3B70                 LDA     MSHIP_VAR_62B
GAME:3B73                 BNE     J0
GAME:3B75                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:3B77                 BEQ     I4              ; => Return
GAME:3B79                 JMP     MVSHP           ; Move a movable ship: Y+2, X-1
GAME:3B7C ; ---------------------------------------------------------------------------
GAME:3B7C
GAME:3B7C J0:                                     ; CODE XREF: SHIP+9C↑j
GAME:3B7C                 JSR     MVSHP           ; Move a movable ship: Y+2, X-1
GAME:3B7F                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:3B81                 BNE     I4              ; => Return
GAME:3B83                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3B83 ; End of function SHIP
GAME:3B83
GAME:3B85
GAME:3B85 ; =============== S U B R O U T I N E =======================================
GAME:3B85
GAME:3B85 ; Move a movable ship: Y+2, X-1
GAME:3B85
GAME:3B85 MVSHP:                                  ; CODE XREF: SHIP+A2↑j
GAME:3B85                                         ; SHIP:J0↑p ...
GAME:3B85                 LDX     #16
GAME:3B87
GAME:3B87 I9:                                     ; CODE XREF: MVSHP+10↓j
GAME:3B87                 LDA     P2,Y            ; Enemy (first color)
GAME:3B8A                 STA     P2+2,Y          ; Enemy (first color)
GAME:3B8D                 LDA     P3+2,Y          ; Enemy (second color)
GAME:3B90                 STA     P3+4,Y          ; Enemy (second color)
GAME:3B93                 DEY
GAME:3B94                 DEX
GAME:3B95                 BNE     I9
GAME:3B97                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:3B99                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:3B9B                 DEC     ENEMY_X_POS     ; Enemy X position
GAME:3B9D                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:3B9F                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:3BA2                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:3BA5                 RTS
GAME:3BA5 ; End of function MVSHP
GAME:3BA5
GAME:3BA6
GAME:3BA6 ; =============== S U B R O U T I N E =======================================
GAME:3BA6
GAME:3BA6 ; Fire movable ship gun
GAME:3BA6
GAME:3BA6 FSHGN:                                  ; CODE XREF: SHIP+73↑p
GAME:3BA6                 LDY     ENEMY_BULLET_Y_POS ; Y position of an enemy bullet (0=none)
GAME:3BA9                 BEQ     J1
GAME:3BAB
GAME:3BAB J2:                                     ; CODE XREF: FSHGN+A↓j
GAME:3BAB                                         ; FSHGN+E↓j
GAME:3BAB                 RTS                     ; => Return
GAME:3BAC ; ---------------------------------------------------------------------------
GAME:3BAC
GAME:3BAC J1:                                     ; CODE XREF: FSHGN+3↑j
GAME:3BAC                 LDA     ENEMY_Y_POS     ; Enemy Y position
GAME:3BAE                 CMP     #70
GAME:3BB0                 BCC     J2              ; => Return
GAME:3BB2                 CMP     #178
GAME:3BB4                 BCS     J2              ; => Return
GAME:3BB6                 SEC
GAME:3BB7                 SBC     #7
GAME:3BB9                 TAY
GAME:3BBA                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:3BBC                 CLC
GAME:3BBD                 ADC     #2
GAME:3BBF                 STA     MSHIP_BULLET_X_POS
GAME:3BC2                 JMP     loc_368B
GAME:3BC2 ; End of function FSHGN
GAME:3BC2
GAME:3BC5
GAME:3BC5 ; =============== S U B R O U T I N E =======================================
GAME:3BC5
GAME:3BC5
GAME:3BC5 TNK:                                    ; CODE XREF: SRT+15↑p
GAME:3BC5
GAME:3BC5 ; FUNCTION CHUNK AT GAME:3BD3 SIZE 00000006 BYTES
GAME:3BC5 ; FUNCTION CHUNK AT GAME:3BD9 SIZE 0000001C BYTES
GAME:3BC5 ; FUNCTION CHUNK AT GAME:3BF5 SIZE 000000BD BYTES
GAME:3BC5
GAME:3BC5                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:3BC7                 BEQ     E1
GAME:3BC9                 RTS
GAME:3BCA ; ---------------------------------------------------------------------------
GAME:3BCA
GAME:3BCA E1:                                     ; CODE XREF: TNK+2↑j
GAME:3BCA                 LDA     byte_6A1
GAME:3BCD                 BEQ     E9
GAME:3BCF                 DEC     byte_6A1
GAME:3BD2                 RTS
GAME:3BD2 ; End of function TNK
GAME:3BD2
GAME:3BD3 ; ---------------------------------------------------------------------------
GAME:3BD3 ; START OF FUNCTION CHUNK FOR TNKC1
GAME:3BD3 ;   ADDITIONAL PARENT FUNCTION TNK
GAME:3BD3
GAME:3BD3 E2:                                     ; CODE XREF: TNK+1E↓j
GAME:3BD3                                         ; TNK+2E↓j ...
GAME:3BD3                 LDA     #10
GAME:3BD5                 STA     byte_6A1
GAME:3BD8                 RTS
GAME:3BD8 ; END OF FUNCTION CHUNK FOR TNKC1
GAME:3BD9 ; ---------------------------------------------------------------------------
GAME:3BD9 ; START OF FUNCTION CHUNK FOR TNK
GAME:3BD9
GAME:3BD9 E9:                                     ; CODE XREF: TNK+8↑j
GAME:3BD9                 LDA     byte_6A2
GAME:3BDC                 BNE     E3
GAME:3BDE                 LDA     byte_638
GAME:3BE1                 CMP     #4
GAME:3BE3                 BCC     E2
GAME:3BE5                 LDA     byte_FE
GAME:3BE7                 CMP     #2
GAME:3BE9                 BCS     F1
GAME:3BEB                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:3BED                 CMP     #58
GAME:3BEF                 BCS     F1
GAME:3BF1                 CMP     #30
GAME:3BF3                 BCS     E2
GAME:3BF3 ; END OF FUNCTION CHUNK FOR TNK
GAME:3BF5 ; START OF FUNCTION CHUNK FOR TNKC1
GAME:3BF5 ;   ADDITIONAL PARENT FUNCTION TNK
GAME:3BF5
GAME:3BF5 F1:                                     ; CODE XREF: TNK+24↑j
GAME:3BF5                                         ; TNK+2A↑j ...
GAME:3BF5                 LDA     byte_650
GAME:3BF8                 CMP     #2
GAME:3BFA                 BCS     _1
GAME:3BFC                 LDA     CURRENT_GAME_PHASE
GAME:3BFE                 BNE     E2
GAME:3C00                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:3C02                 CMP     #45
GAME:3C04                 BCC     E2
GAME:3C06
GAME:3C06 _1:                                     ; CODE XREF: TNKC1-C1↑j
GAME:3C06                 LDA     byte_6A2
GAME:3C09                 BNE     E3
GAME:3C0B                 INC     byte_6A2
GAME:3C0E                 STA     byte_B6
GAME:3C10                 LDA     #4
GAME:3C12                 STA     byte_676
GAME:3C15                 RTS
GAME:3C16 ; ---------------------------------------------------------------------------
GAME:3C16
GAME:3C16 E3:                                     ; CODE XREF: TNK+17↑j
GAME:3C16                                         ; TNKC1-B2↑j ...
GAME:3C16                 DEC     byte_6A2
GAME:3C19                 LDA     RANDOM          ; Random Number Generator
GAME:3C1C                 AND     #$1F
GAME:3C1E                 ORA     #$10
GAME:3C20                 STA     byte_6A1
GAME:3C23                 LDA     byte_676
GAME:3C26                 CMP     #4
GAME:3C28                 BNE     E4
GAME:3C2A                 LDA     #$FF
GAME:3C2C                 STA     byte_B6
GAME:3C2E
GAME:3C2E E4:                                     ; CODE XREF: TNKC1-93↑j
GAME:3C2E                 LDA     CURRENT_GAME_PHASE
GAME:3C30                 BEQ     F4
GAME:3C32                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:3C35                 CMP     byte_669
GAME:3C38                 BNE     F5
GAME:3C3A                 LDX     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:3C3C                 CPX     #160
GAME:3C3E                 BCC     _1_0
GAME:3C40                 CLC
GAME:3C41                 ADC     #20
GAME:3C43                 LDX     #20
GAME:3C45                 JMP     F0
GAME:3C48 ; ---------------------------------------------------------------------------
GAME:3C48
GAME:3C48 _1_0:                                   ; CODE XREF: TNKC1-7D↑j
GAME:3C48                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:3C4A                 LSR     A
GAME:3C4B                 ADC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:3C4D                 CMP     #120
GAME:3C4F                 BCS     _2
GAME:3C51                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:3C54                 SEC
GAME:3C55                 SBC     #18
GAME:3C57                 LDX     #238
GAME:3C59                 JMP     F0
GAME:3C5C ; ---------------------------------------------------------------------------
GAME:3C5C
GAME:3C5C _2:                                     ; CODE XREF: TNKC1-6C↑j
GAME:3C5C                 LDA     RANDOM          ; Random Number Generator
GAME:3C5F                 LSR     A
GAME:3C60                 BCC     F3
GAME:3C62                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:3C65                 JMP     F5
GAME:3C68 ; ---------------------------------------------------------------------------
GAME:3C68
GAME:3C68 F3:                                     ; CODE XREF: TNKC1-5B↑j
GAME:3C68                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:3C6B                 SEC
GAME:3C6C                 SBC     #8
GAME:3C6E                 LDX     #$F8
GAME:3C70                 JMP     F0
GAME:3C73 ; ---------------------------------------------------------------------------
GAME:3C73
GAME:3C73 F4:                                     ; CODE XREF: TNKC1-8B↑j
GAME:3C73                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:3C75                 CMP     #44
GAME:3C77                 BCS     loc_3C81
GAME:3C79
GAME:3C79 F5:                                     ; CODE XREF: TNKC1-83↑j
GAME:3C79                                         ; TNKC1-56↑j
GAME:3C79                 CLC
GAME:3C7A                 ADC     #10
GAME:3C7C                 LDX     #10
GAME:3C7E                 JMP     F0
GAME:3C81 ; ---------------------------------------------------------------------------
GAME:3C81
GAME:3C81 loc_3C81:                               ; CODE XREF: TNKC1-44↑j
GAME:3C81                 SEC
GAME:3C82                 SBC     #24
GAME:3C84                 LDX     #232
GAME:3C86
GAME:3C86 F0:                                     ; CODE XREF: TNKC1-76↑j
GAME:3C86                                         ; TNKC1-62↑j ...
GAME:3C86                 STX     byte_6A3
GAME:3C89                 TAY
GAME:3C8A                 LDX     #3
GAME:3C8C
GAME:3C8C E8:                                     ; CODE XREF: TNKC1-17↓j
GAME:3C8C                 LDA     RANDOM          ; Random Number Generator
GAME:3C8F                 LSR     A
GAME:3C90                 BCC     E6
GAME:3C92                 LDA     #L_TANK_RIGHT_A|L_C_1
GAME:3C94                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3C96                 LDA     #L_TANK_LEFT_A|L_C_1
GAME:3C98                 JMP     E7
GAME:3C9B ; ---------------------------------------------------------------------------
GAME:3C9B
GAME:3C9B E6:                                     ; CODE XREF: TNKC1-2B↑j
GAME:3C9B                 LDA     #L_GRAS_BEFORE_BUILDING|L_C_0
GAME:3C9D                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3C9F
GAME:3C9F E7:                                     ; CODE XREF: TNKC1-23↑j
GAME:3C9F                 DEY
GAME:3CA0                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3CA2                 DEY
GAME:3CA3                 DEX
GAME:3CA4                 BNE     E8
GAME:3CA6                 DEY
GAME:3CA7                 LDA     RANDOM          ; Random Number Generator
GAME:3CAA                 LSR     A
GAME:3CAB                 BCC     TH
GAME:3CAD                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_0
GAME:3CAF                 JMP     F2
GAME:3CAF ; END OF FUNCTION CHUNK FOR TNKC1
GAME:3CB2 ; ---------------------------------------------------------------------------
GAME:3CB2                 RTS
GAME:3CB3 ; ---------------------------------------------------------------------------
GAME:3CB3 ; START OF FUNCTION CHUNK FOR TNKC1
GAME:3CB3
GAME:3CB3 TH:                                     ; CODE XREF: TNKC1-10↑j
GAME:3CB3                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_1
GAME:3CB5
GAME:3CB5 F2:                                     ; CODE XREF: TNKC1-C↑j
GAME:3CB5                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:3CB7                 JSR     B5
GAME:3CBA                 RTS
GAME:3CBA ; END OF FUNCTION CHUNK FOR TNKC1
GAME:3CBB
GAME:3CBB ; =============== S U B R O U T I N E =======================================
GAME:3CBB
GAME:3CBB
GAME:3CBB TNKC1:                                  ; CODE XREF: AREA+21↑p
GAME:3CBB
GAME:3CBB ; FUNCTION CHUNK AT GAME:3BD3 SIZE 00000006 BYTES
GAME:3CBB ; FUNCTION CHUNK AT GAME:3BF5 SIZE 000000BD BYTES
GAME:3CBB ; FUNCTION CHUNK AT GAME:3CB3 SIZE 00000008 BYTES
GAME:3CBB
GAME:3CBB                 LDA     byte_6A1
GAME:3CBE                 BEQ     TI
GAME:3CC0                 DEC     byte_6A1
GAME:3CC3                 RTS
GAME:3CC4 ; ---------------------------------------------------------------------------
GAME:3CC4
GAME:3CC4 TI:                                     ; CODE XREF: TNKC1+3↑j
GAME:3CC4                 LDA     byte_6A2
GAME:3CC7                 BNE     NI
GAME:3CC9                 LDA     CURRENT_GAME_PHASE
GAME:3CCB                 CMP     #GAME_PHASE_4
GAME:3CCD                 BCS     NO
GAME:3CCF                 LDA     ENEMY_RUNWAY_START ; How many lines till the enemy runway will appear
GAME:3CD2                 CMP     #2
GAME:3CD4                 BCC     NO
GAME:3CD6                 LDA     byte_B2
GAME:3CD8                 CMP     #2
GAME:3CDA                 BCC     NO
GAME:3CDC                 JMP     F1
GAME:3CDF ; ---------------------------------------------------------------------------
GAME:3CDF
GAME:3CDF NI:                                     ; CODE XREF: TNKC1+C↑j
GAME:3CDF                 JMP     E3
GAME:3CE2 ; ---------------------------------------------------------------------------
GAME:3CE2
GAME:3CE2 NO:                                     ; CODE XREF: TNKC1+12↑j
GAME:3CE2                                         ; TNKC1+19↑j ...
GAME:3CE2                 JMP     E2
GAME:3CE2 ; End of function TNKC1
GAME:3CE2
GAME:3CE5
GAME:3CE5 ; =============== S U B R O U T I N E =======================================
GAME:3CE5
GAME:3CE5
GAME:3CE5 AKA:                                    ; CODE XREF: EB+150↑p
GAME:3CE5                                         ; B7-16↑p
GAME:3CE5                 LDA     byte_C4
GAME:3CE7                 CMP     #5
GAME:3CE9                 BNE     locret_3CF1     ; => Return
GAME:3CEB                 LDA     #0
GAME:3CED                 STA     byte_FD
GAME:3CEF                 STA     byte_C4
GAME:3CF1
GAME:3CF1 locret_3CF1:                            ; CODE XREF: AKA+4↑j
GAME:3CF1                 RTS                     ; => Return
GAME:3CF1 ; End of function AKA
GAME:3CF1
GAME:3CF2
GAME:3CF2 ; =============== S U B R O U T I N E =======================================
GAME:3CF2
GAME:3CF2 ; Flicker PCOLR2
GAME:3CF2
GAME:3CF2 TRGTP2:                                 ; CODE XREF: COMMON+6F↑p
GAME:3CF2                 LDA     PCOLR2          ; P2 COLOR
GAME:3CF5                 CMP     #COLOR_INTENSITY_12|COLOR_DARK_PURPLE
GAME:3CF7                 BEQ     _1
GAME:3CF9                 CMP     #COLOR_INTENSITY_8|COLOR_TURQUOISE
GAME:3CFB                 BEQ     _1
GAME:3CFD                 RTS
GAME:3CFE ; ---------------------------------------------------------------------------
GAME:3CFE
GAME:3CFE _1:                                     ; CODE XREF: TRGTP2+5↑j
GAME:3CFE                                         ; TRGTP2+9↑j
GAME:3CFE                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:3D01                 LSR     A
GAME:3D02                 LSR     A
GAME:3D03                 LSR     A
GAME:3D04                 LSR     A
GAME:3D05                 BCC     V6
GAME:3D07                 LDA     #COLOR_INTENSITY_12|COLOR_DARK_PURPLE
GAME:3D09                 JMP     V5
GAME:3D0C ; ---------------------------------------------------------------------------
GAME:3D0C
GAME:3D0C V6:                                     ; CODE XREF: TRGTP2+13↑j
GAME:3D0C                 LDA     #COLOR_INTENSITY_8|COLOR_TURQUOISE
GAME:3D0E
GAME:3D0E V5:                                     ; CODE XREF: TRGTP2+17↑j
GAME:3D0E                 STA     PCOLR2          ; P2 COLOR
GAME:3D11                 RTS
GAME:3D11 ; End of function TRGTP2
GAME:3D11
GAME:3D12
GAME:3D12 ; =============== S U B R O U T I N E =======================================
GAME:3D12
GAME:3D12 ; Select previous tile row
GAME:3D12
GAME:3D12 UPXP:                                   ; CODE XREF: Y7__HIT_RW_PLANE_TR:Z1__HIT_RW_PLANE_BL↓p
GAME:3D12                                         ; X8__HIT_BOAT_TR:Y1__HIT_BOAT_BL↓p ...
GAME:3D12                 LDA     TEMP_PREVIOUS_ROW_PTR
GAME:3D15                 STA     PREVIOUS_TILE_ROW_PTR
GAME:3D17                 LDA     TEMP_PREVIOUS_ROW_PTR+1
GAME:3D1A                 STA     PREVIOUS_TILE_ROW_PTR+1
GAME:3D1C                 RTS
GAME:3D1C ; End of function UPXP
GAME:3D1C
GAME:3D1D
GAME:3D1D ; =============== S U B R O U T I N E =======================================
GAME:3D1D
GAME:3D1D ; Select next tile row (mark, if there is none)
GAME:3D1D
GAME:3D1D DNXP:                                   ; CODE XREF: Y7__HIT_RW_PLANE_TR:Y9__HIT_RW_PLANE_TL↓p
GAME:3D1D                                         ; X8__HIT_BOAT_TR:X9__HIT_BOAT_TL↓p ...
GAME:3D1D                 LDA     byte_639
GAME:3D20                 CMP     #168
GAME:3D22                 BCS     _1
GAME:3D24                 LDA     TEMP_NEXT_ROW_PTR
GAME:3D27                 STA     PREVIOUS_TILE_ROW_PTR
GAME:3D29                 LDA     TEMP_NEXT_ROW_PTR+1
GAME:3D2C                 STA     PREVIOUS_TILE_ROW_PTR+1
GAME:3D2E                 RTS
GAME:3D2F ; ---------------------------------------------------------------------------
GAME:3D2F
GAME:3D2F _1:                                     ; CODE XREF: DNXP+5↑j
GAME:3D2F                 LDA     #255
GAME:3D31                 STA     PREVIOUS_TILE_ROW_PTR+1
GAME:3D33                 RTS
GAME:3D33 ; End of function DNXP
GAME:3D33
GAME:3D34
GAME:3D34 ; =============== S U B R O U T I N E =======================================
GAME:3D34
GAME:3D34
GAME:3D34 Y7__HIT_RW_PLANE_TR:                    ; CODE XREF: CKCHAR+2↓j
GAME:3D34                 DEC     VAR_EXPLOSION_X_POS
GAME:3D37
GAME:3D37 Y9__HIT_RW_PLANE_TL:                    ; CODE XREF: CKCHAR+6↓j
GAME:3D37                 JSR     DNXP            ; Select next tile row (mark, if there is none)
GAME:3D3A                 JMP     Z2
GAME:3D3D ; ---------------------------------------------------------------------------
GAME:3D3D
GAME:3D3D Z0__HIT_RW_PLANE_BR:                    ; CODE XREF: CKCHAR+A↓j
GAME:3D3D                 DEC     VAR_EXPLOSION_X_POS
GAME:3D40
GAME:3D40 Z1__HIT_RW_PLANE_BL:                    ; CODE XREF: CKCHAR+E↓j
GAME:3D40                 JSR     UPXP            ; Select previous tile row
GAME:3D43
GAME:3D43 Z2:                                     ; CODE XREF: Y7__HIT_RW_PLANE_TR+6↑j
GAME:3D43                 PLA
GAME:3D44                 PLA
GAME:3D45                 LDA     #EXPLOSITION_TARGET_RUNWAY_PLANE
GAME:3D47                 STA     VAR_EXPLOSION_TARGET
GAME:3D4A                 JSR     S10__SCORE_ADD_10 ; Score: add 10
GAME:3D4D                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3D50                 JMP     W1
GAME:3D50 ; End of function Y7__HIT_RW_PLANE_TR
GAME:3D50
GAME:3D53
GAME:3D53 ; =============== S U B R O U T I N E =======================================
GAME:3D53
GAME:3D53 ; HIT: fixed boat top-right
GAME:3D53
GAME:3D53 X8__HIT_BOAT_TR:                        ; CODE XREF: CKCHAR+16↓j
GAME:3D53                 DEC     VAR_EXPLOSION_X_POS
GAME:3D56
GAME:3D56 X9__HIT_BOAT_TL:                        ; CODE XREF: CKCHAR+12↓j
GAME:3D56                 JSR     DNXP            ; HIT: fixed boat top-left
GAME:3D59                 JMP     Y4
GAME:3D5C ; ---------------------------------------------------------------------------
GAME:3D5C
GAME:3D5C Y0__HIT_BOAT_BR:                        ; CODE XREF: CKCHAR+1E↓j
GAME:3D5C                 DEC     VAR_EXPLOSION_X_POS ; HIT: fixed boat bottom-right
GAME:3D5F
GAME:3D5F Y1__HIT_BOAT_BL:                        ; CODE XREF: CKCHAR+1A↓j
GAME:3D5F                 JSR     UPXP            ; HIT: fixed boat bottom-left
GAME:3D62
GAME:3D62 Y4:                                     ; CODE XREF: X8__HIT_BOAT_TR+6↑j
GAME:3D62                 JSR     Y8              ; Trigger explosion in water with sound
GAME:3D65                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3D68                 PLA
GAME:3D69                 PLA
GAME:3D6A                 LDA     #EXPLOSITION_TARGET_BOAT
GAME:3D6C                 STA     VAR_EXPLOSION_TARGET
GAME:3D6F                 JMP     W1
GAME:3D6F ; End of function X8__HIT_BOAT_TR
GAME:3D6F
GAME:3D72
GAME:3D72 ; =============== S U B R O U T I N E =======================================
GAME:3D72
GAME:3D72 ; HIT: empty piece of road at high speed
GAME:3D72
GAME:3D72 X5:                                     ; CODE XREF: CKCHAR+25↓j
GAME:3D72                 LDA     #EXPLOSITION_TARGET_EMPTY_ROAD
GAME:3D74                 STA     VAR_EXPLOSION_TARGET
GAME:3D77                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:3D7A                 CMP     #_2|_C_BLUE
GAME:3D7C                 BCC     _1
GAME:3D7E                 JSR     S10__SCORE_ADD_10 ; Score: add 10
GAME:3D81
GAME:3D81 _1:                                     ; CODE XREF: X5+A↑j
GAME:3D81                 PLA
GAME:3D82                 PLA
GAME:3D83                 JMP     W1
GAME:3D83 ; End of function X5
GAME:3D83
GAME:3D86
GAME:3D86 ; =============== S U B R O U T I N E =======================================
GAME:3D86
GAME:3D86 ; Check if a tile based target in A was hit
GAME:3D86
GAME:3D86 CKCHAR:                                 ; CODE XREF: XPLSN+35↑p
GAME:3D86                 CMP     #L_RUNWAY_PLANE_TOP_RIGHT|L_C_1
GAME:3D88                 BEQ     Y7__HIT_RW_PLANE_TR ; HIT: runway plane top-right
GAME:3D8A                 CMP     #L_RUNWAY_PLANE_TOP_LEFT|L_C_1
GAME:3D8C                 BEQ     Y9__HIT_RW_PLANE_TL ; HIT: runway plane top-left
GAME:3D8E                 CMP     #L_RUNWAY_PLANE_BOTTOM_RIGHT|L_C_1
GAME:3D90                 BEQ     Z0__HIT_RW_PLANE_BR ; HIT: runway plane bottom-right
GAME:3D92                 CMP     #L_RUNWAY_PLANE_BOTTOM_LEFT|L_C_1
GAME:3D94                 BEQ     Z1__HIT_RW_PLANE_BL ; HIT: runway plane bottom-left
GAME:3D96                 CMP     #L_FIXED_BOAT_TOP_LEFT|L_C_1
GAME:3D98                 BEQ     X9__HIT_BOAT_TL ; HIT: fixed boat top-left
GAME:3D9A                 CMP     #L_FIXED_BOAT_TOP_RIGHT|L_C_1
GAME:3D9C                 BEQ     X8__HIT_BOAT_TR ; HIT: fixed boat top-right
GAME:3D9E                 CMP     #L_FIXED_BOAT_BOTTOM_LEFT|L_C_1
GAME:3DA0                 BEQ     Y1__HIT_BOAT_BL ; HIT: fixed boat bottom-left
GAME:3DA2                 CMP     #L_FIXED_BOAT_BOTTOM_RIGHT|L_C_1
GAME:3DA4                 BEQ     Y0__HIT_BOAT_BR ; HIT: fixed boat bottom-right
GAME:3DA6
GAME:3DA6                 LDX     #8
GAME:3DA8
GAME:3DA8 _9:                                     ; CODE XREF: CKCHAR+28↓j
GAME:3DA8                 CMP     AAE-1,X         ; Targets: roads
GAME:3DAB                 BEQ     X5              ; HIT: empty piece of road at high speed
GAME:3DAD                 DEX
GAME:3DAE                 BNE     _9
GAME:3DB0                 LDX     #10
GAME:3DB2
GAME:3DB2 T6:                                     ; CODE XREF: CKCHAR+32↓j
GAME:3DB2                 CMP     AAA-1,X         ; Targets: building
GAME:3DB5                 BEQ     W4
GAME:3DB7                 DEX
GAME:3DB8                 BNE     T6
GAME:3DBA                 LDX     #14
GAME:3DBC
GAME:3DBC T8:                                     ; CODE XREF: CKCHAR+3C↓j
GAME:3DBC                 CMP     AAB-1,X         ; Targets: skyscraper
GAME:3DBF                 BEQ     W7
GAME:3DC1                 DEX
GAME:3DC2                 BNE     T8
GAME:3DC4                 LDX     #7
GAME:3DC6
GAME:3DC6 U0:                                     ; CODE XREF: CKCHAR+46↓j
GAME:3DC6                 CMP     AAC-1,X         ; Targets: lower parts of a bridge
GAME:3DC9                 BEQ     T9
GAME:3DCB                 DEX
GAME:3DCC                 BNE     U0
GAME:3DCE                 LDX     #3
GAME:3DD0
GAME:3DD0 _1:                                     ; CODE XREF: CKCHAR+50↓j
GAME:3DD0                 CMP     AAD-1,X         ; Targets: upper parts of a bridge
GAME:3DD3                 BEQ     V9
GAME:3DD5                 DEX
GAME:3DD6                 BNE     _1
GAME:3DD8                 JMP     Z3
GAME:3DDB ; ---------------------------------------------------------------------------
GAME:3DDB
GAME:3DDB W4:                                     ; CODE XREF: CKCHAR+2F↑j
GAME:3DDB                 LDX     VAR_PRIMARY_TARGET_SUBTYPE
GAME:3DDE                 CPX     #PRIMARY_TARGET_SUBTYPE_BUILDING
GAME:3DE0                 BNE     U1
GAME:3DE2                 INC     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:3DE5                 LDY     byte_6AB
GAME:3DE8                 JSR     U2
GAME:3DEB                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3DEE
GAME:3DEE U1:                                     ; CODE XREF: CKCHAR+5A↑j
GAME:3DEE                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3DF1                 PLA
GAME:3DF2                 PLA
GAME:3DF3                 LDA     #EXPLOSITION_TARGET_BUILDING
GAME:3DF5                 STA     VAR_EXPLOSION_TARGET
GAME:3DF8                 JMP     W1
GAME:3DFB ; ---------------------------------------------------------------------------
GAME:3DFB
GAME:3DFB W7:                                     ; CODE XREF: CKCHAR+39↑j
GAME:3DFB                 LDX     VAR_PRIMARY_TARGET_SUBTYPE
GAME:3DFE                 CPX     #PRIMARY_TARGET_SUBTYPE_SKYSCRAPER
GAME:3E00                 BNE     _1_0
GAME:3E02                 INC     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:3E05                 LDY     byte_6AB
GAME:3E08                 JSR     U2
GAME:3E0B                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3E0E
GAME:3E0E _1_0:                                   ; CODE XREF: CKCHAR+7A↑j
GAME:3E0E                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3E11                 PLA
GAME:3E12                 PLA
GAME:3E13                 LDA     #EXPLOSITION_TARGET_SKYSCRAPER
GAME:3E15                 STA     VAR_EXPLOSION_TARGET
GAME:3E18                 JMP     W1
GAME:3E1B ; ---------------------------------------------------------------------------
GAME:3E1B
GAME:3E1B T9:                                     ; CODE XREF: CKCHAR+43↑j
GAME:3E1B                 JSR     UPXP            ; Select previous tile row
GAME:3E1E
GAME:3E1E W0:                                     ; CODE XREF: CKCHAR+C3↓j
GAME:3E1E                 LDA     #EXPLOSITION_TARGET_BRIDGE
GAME:3E20                 STA     VAR_EXPLOSION_TARGET
GAME:3E23                 LDX     VAR_PRIMARY_TARGET_SUBTYPE
GAME:3E26                 CPX     #PRIMARY_TARGET_SUBTYPE_BRIDGE
GAME:3E28                 BNE     U5
GAME:3E2A                 INC     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:3E2D                 LDY     byte_6AB
GAME:3E30                 JSR     U2
GAME:3E33                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3E36
GAME:3E36 U5:                                     ; CODE XREF: CKCHAR+A2↑j
GAME:3E36                 DEC     byte_6F2
GAME:3E39                 BNE     _1_
GAME:3E3B                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3E3E
GAME:3E3E _1_:                                    ; CODE XREF: CKCHAR+B3↑j
GAME:3E3E                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:3E41                 PLA
GAME:3E42                 PLA
GAME:3E43                 JMP     W1
GAME:3E46 ; ---------------------------------------------------------------------------
GAME:3E46
GAME:3E46 V9:                                     ; CODE XREF: CKCHAR+4D↑j
GAME:3E46                 JSR     DNXP            ; Select next tile row (mark, if there is none)
GAME:3E49                 JMP     W0
GAME:3E49 ; End of function CKCHAR
GAME:3E49
GAME:3E4C
GAME:3E4C ; =============== S U B R O U T I N E =======================================
GAME:3E4C
GAME:3E4C
GAME:3E4C XSHP:                                   ; CODE XREF: SHIP:I2↑p
GAME:3E4C                 LDA     byte_B1
GAME:3E4E                 BEQ     S8
GAME:3E50                 RTS
GAME:3E51 ; ---------------------------------------------------------------------------
GAME:3E51
GAME:3E51 S8:                                     ; CODE XREF: XSHP+2↑j
GAME:3E51                 DEC     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:3E54                 BEQ     S9
GAME:3E56                 LDA     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:3E59                 LSR     A
GAME:3E5A                 LSR     A
GAME:3E5B                 LSR     A
GAME:3E5C                 BCC     T0
GAME:3E5E                 LDY     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:3E60                 JMP     T1
GAME:3E63 ; ---------------------------------------------------------------------------
GAME:3E63
GAME:3E63 T0:                                     ; CODE XREF: XSHP+10↑j
GAME:3E63                 LDY     #COLOR_INTENSITY_6|COLOR_RED_ORANGE
GAME:3E65
GAME:3E65 T1:                                     ; CODE XREF: XSHP+14↑j
GAME:3E65                 STY     PCOLR2          ; P2 COLOR
GAME:3E68                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3E6A                 CPY     #194
GAME:3E6C                 BCS     S9
GAME:3E6E                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:3E71                 LSR     A
GAME:3E72                 BCS     T2
GAME:3E74                 PLA
GAME:3E75                 PLA
GAME:3E76                 JMP     MVSHP           ; Move a movable ship: Y+2, X-1
GAME:3E79 ; ---------------------------------------------------------------------------
GAME:3E79
GAME:3E79 S9:                                     ; CODE XREF: XSHP+8↑j
GAME:3E79                                         ; XSHP+20↑j
GAME:3E79                 INC     byte_B1
GAME:3E7B                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3E7D                 LDX     #15
GAME:3E7F                 LDA     #0
GAME:3E81
GAME:3E81 T3:                                     ; CODE XREF: XSHP+3A↓j
GAME:3E81                 STA     P2+2,Y          ; Enemy (first color)
GAME:3E84                 DEY
GAME:3E85                 DEX
GAME:3E86                 BNE     T3
GAME:3E88                 STA     byte_FD
GAME:3E8A
GAME:3E8A T2:                                     ; CODE XREF: XSHP+26↑j
GAME:3E8A                 PLA
GAME:3E8B                 PLA
GAME:3E8C                 RTS
GAME:3E8C ; End of function XSHP
GAME:3E8C
GAME:3E8D
GAME:3E8D ; =============== S U B R O U T I N E =======================================
GAME:3E8D
GAME:3E8D
GAME:3E8D BMBSHP:                                 ; CODE XREF: BOMB:HL↑p
GAME:3E8D                 LDA     byte_FD
GAME:3E8F                 CMP     #15
GAME:3E91                 BNE     S5              ; => Return
GAME:3E93                 LDA     M1PL            ; Missle to Player 1 Collision
GAME:3E96                 AND     #1100b
GAME:3E98                 BEQ     S5              ; => Return
GAME:3E9A
GAME:3E9A                 LDA     #EXPLOSITION_TARGET_WATER
GAME:3E9C                 STA     VAR_EXPLOSION_TARGET
GAME:3E9F                 JSR     ABA             ; Save current color palette, because we start the flashing animation
GAME:3EA2
GAME:3EA2 Z6:                                     ; CODE XREF: SHP23+24↓j
GAME:3EA2                                         ; P0SHP+14↓p
GAME:3EA2                 LDY     ENEMY_Y_POS     ; Set enemy to explosion graphics
GAME:3EA4                 LDX     #13
GAME:3EA6
GAME:3EA6 S6:                                     ; CODE XREF: BMBSHP+26↓j
GAME:3EA6                 LDA     XSHPIM-1,X      ; moving ship explosion
GAME:3EA9                 STA     P2,Y            ; Enemy (first color)
GAME:3EAC                 LDA     #0
GAME:3EAE                 STA     P3+2,Y          ; Enemy (second color)
GAME:3EB1                 DEY
GAME:3EB2                 DEX
GAME:3EB3                 BNE     S6
GAME:3EB5
GAME:3EB5                 LDA     #255
GAME:3EB7                 STA     PLANE_GUN_SOUND_TIMER ; Timer for the repeating gun sound from the plane
GAME:3EBA                 LDY     ENEMY_BULLET_Y_POS ; Y position of an enemy bullet (0=none)
GAME:3EBD                 JSR     D4              ; Remove bullet image at Y
GAME:3EC0                 JSR     SL              ; Trigger explosion sound effect
GAME:3EC3                 JMP     S7              ; X is ==0
GAME:3EC6 ; ---------------------------------------------------------------------------
GAME:3EC6
GAME:3EC6 XP23:                                   ; CODE XREF: DRP23+6↑p
GAME:3EC6                 LDA     byte_B1
GAME:3EC8                 BEQ     R5
GAME:3ECA
GAME:3ECA                 LDA     ENEMY_Y_POS     ; Enemy Y position
GAME:3ECC                 CMP     #70
GAME:3ECE                 BCC     S5              ; => Return
GAME:3ED0                 LDA     P2PF_HPOSM2     ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
GAME:3ED3                 AND     #10b            ; Enemy collision with player?
GAME:3ED5                 BNE     R6              ; Player and enemy collision
GAME:3ED7                 LDA     P3PF_HPOSM3     ; Missile 3 Horizontal Position / Player 3 to Playfield Collision
GAME:3EDA                 AND     #10b            ; Enemy collision with player?
GAME:3EDC                 BNE     R6              ; Player and enemy collision
GAME:3EDE
GAME:3EDE S5:                                     ; CODE XREF: BMBSHP+4↑j
GAME:3EDE                                         ; BMBSHP+B↑j ...
GAME:3EDE                 RTS                     ; => Return
GAME:3EDF ; ---------------------------------------------------------------------------
GAME:3EDF
GAME:3EDF R6:                                     ; CODE XREF: BMBSHP+48↑j
GAME:3EDF                                         ; BMBSHP+4F↑j ...
GAME:3EDF                 LDX     #10             ; Player and enemy collision
GAME:3EE1                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3EE3
GAME:3EE3 R8:                                     ; CODE XREF: BMBSHP+63↓j
GAME:3EE3                 LDA     XCRIM-1,X
GAME:3EE6                 STA     P2+8,Y          ; Enemy (first color)
GAME:3EE9                 LDA     #0
GAME:3EEB                 STA     P3+8,Y          ; Enemy (second color)
GAME:3EEE                 DEY
GAME:3EEF                 DEX
GAME:3EF0                 BNE     R8
GAME:3EF2                 PLA
GAME:3EF3                 PLA
GAME:3EF4
GAME:3EF4 S7:                                     ; CODE XREF: BMBSHP+36↑j
GAME:3EF4                 STX     byte_B1         ; X is ==0
GAME:3EF6                 LDA     PCOLR2          ; P2 COLOR
GAME:3EF9                 CMP     #COLOR_INTENSITY_12|COLOR_DARK_PURPLE
GAME:3EFB                 BEQ     V3              ; Primary target hit
GAME:3EFD                 CMP     #COLOR_INTENSITY_2|COLOR_RED_ORANGE
GAME:3EFF                 BEQ     V3              ; Primary target hit
GAME:3F01                 CMP     #COLOR_INTENSITY_8|COLOR_TURQUOISE
GAME:3F03                 BNE     R7
GAME:3F05
GAME:3F05 V3:                                     ; CODE XREF: BMBSHP+6E↑j
GAME:3F05                                         ; BMBSHP+72↑j
GAME:3F05                 INC     PRIMARY_TARGETS_HIT ; Primary target hit
GAME:3F08                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:3F0B                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:3F0E
GAME:3F0E R7:                                     ; CODE XREF: BMBSHP+76↑j
GAME:3F0E                 LDA     #120
GAME:3F10                 STA     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:3F13                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:3F16                 LDA     #50
GAME:3F18                 LDX     #AUDIO_CONTROL_VOL_12|AUDIO_CONTROL_DIST_1
GAME:3F1A                 JMP     XXX             ; Start Audio 3 sound effect
GAME:3F1D ; ---------------------------------------------------------------------------
GAME:3F1D
GAME:3F1D R5:                                     ; CODE XREF: BMBSHP+3B↑j
GAME:3F1D                 DEC     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:3F20                 BMI     S4
GAME:3F22                 LDA     PCOLR2_FLASH_COUNTER ; Duration for PCOLR2 flash (enemy got hit)
GAME:3F25                 LSR     A
GAME:3F26                 LSR     A
GAME:3F27                 LSR     A
GAME:3F28                 BCC     S0
GAME:3F2A                 LDY     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:3F2C                 JMP     S1
GAME:3F2F ; ---------------------------------------------------------------------------
GAME:3F2F
GAME:3F2F S0:                                     ; CODE XREF: BMBSHP+9B↑j
GAME:3F2F                 LDY     #COLOR_INTENSITY_6|COLOR_RED_ORANGE
GAME:3F31
GAME:3F31 S1:                                     ; CODE XREF: BMBSHP+9F↑j
GAME:3F31                 STY     PCOLR2          ; P2 COLOR
GAME:3F34
GAME:3F34 S4:                                     ; CODE XREF: BMBSHP+93↑j
GAME:3F34                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:3F36                 CPY     #185
GAME:3F38                 BCS     R9
GAME:3F3A                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:3F3D                 LSR     A
GAME:3F3E                 BCC     S2
GAME:3F40                 PLA
GAME:3F41                 PLA
GAME:3F42                 RTS
GAME:3F43 ; ---------------------------------------------------------------------------
GAME:3F43
GAME:3F43 S2:                                     ; CODE XREF: BMBSHP+B1↑j
GAME:3F43                 LDX     #12
GAME:3F45
GAME:3F45 S3:                                     ; CODE XREF: BMBSHP+C0↓j
GAME:3F45                 LDA     P2+8,Y          ; Enemy (first color)
GAME:3F48                 STA     P2+$A,Y         ; Enemy (first color)
GAME:3F4B                 DEY
GAME:3F4C                 DEX
GAME:3F4D                 BNE     S3
GAME:3F4F                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:3F51                 INC     ENEMY_Y_POS     ; Enemy Y position
GAME:3F53                 DEC     ENEMY_X_POS     ; Enemy X position
GAME:3F55                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:3F57                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:3F5A                 PLA
GAME:3F5B                 PLA
GAME:3F5C                 RTS
GAME:3F5D ; ---------------------------------------------------------------------------
GAME:3F5D
GAME:3F5D R9:                                     ; CODE XREF: BMBSHP+AB↑j
GAME:3F5D                 INC     byte_B1
GAME:3F5F                 PLA
GAME:3F60                 PLA
GAME:3F61                 JMP     JG
GAME:3F61 ; End of function BMBSHP
GAME:3F61
GAME:3F64
GAME:3F64 ; =============== S U B R O U T I N E =======================================
GAME:3F64
GAME:3F64
GAME:3F64 GNSGHT:                                 ; CODE XREF: DRBR__DRAW_BRIDGE+87↑j
GAME:3F64                                         ; QN+D4↑j ...
GAME:3F64                 STY     byte_6AB
GAME:3F67                 ASL     A
GAME:3F68                 ASL     A
GAME:3F69                 STA     ENEMY_X_POS     ; Enemy X position
GAME:3F6B                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:3F6E                 LDX     #9
GAME:3F70
GAME:3F70 Q1:                                     ; CODE XREF: GNSGHT+14↓j
GAME:3F70                 LDA     GNST-1,X        ; red-white flashing bullseye target
GAME:3F73                 STA     P2,Y            ; Enemy (first color)
GAME:3F76                 DEY
GAME:3F77                 DEX
GAME:3F78                 BNE     Q1
GAME:3F7A                 LDA     #253
GAME:3F7C                 STA     byte_C4
GAME:3F7E                 INC     byte_FD
GAME:3F80                 RTS
GAME:3F80 ; End of function GNSGHT
GAME:3F80
GAME:3F81
GAME:3F81 ; =============== S U B R O U T I N E =======================================
GAME:3F81
GAME:3F81
GAME:3F81 TRGT:                                   ; CODE XREF: COMMON+10↑p
GAME:3F81                 LDA     byte_C4
GAME:3F83                 CMP     #253
GAME:3F85                 BEQ     N9
GAME:3F87                 CMP     #10
GAME:3F89                 BEQ     Q5
GAME:3F8B                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:3F8D                 BEQ     O0
GAME:3F8F                 RTS
GAME:3F90 ; ---------------------------------------------------------------------------
GAME:3F90
GAME:3F90 N9:                                     ; CODE XREF: TRGT+4↑j
GAME:3F90                 JMP     Z9
GAME:3F93 ; ---------------------------------------------------------------------------
GAME:3F93
GAME:3F93 O0:                                     ; CODE XREF: TRGT+C↑j
GAME:3F93                 LDA     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:3F96                 CMP     REQUIRED_TARGETS ; Number of required primary targets to progress (8 or 9 by random)
GAME:3F99                 BCS     R2              ; => Return
GAME:3F9B                 LDA     byte_6A6
GAME:3F9E                 BNE     R2              ; => Return
GAME:3FA0                 LDA     byte_638
GAME:3FA3                 BEQ     R2              ; => Return
GAME:3FA5                 LDA     byte_C4
GAME:3FA7                 BEQ     R2              ; => Return
GAME:3FA9                 CMP     #5
GAME:3FAB                 BEQ     R2              ; => Return
GAME:3FAD                 LDA     byte_6AA
GAME:3FB0                 BEQ     O2
GAME:3FB2                 DEC     byte_6AA
GAME:3FB5                 RTS
GAME:3FB6 ; ---------------------------------------------------------------------------
GAME:3FB6
GAME:3FB6 O3:                                     ; CODE XREF: TRGT+48↓j
GAME:3FB6                 LDA     #0
GAME:3FB8                 STA     byte_C4
GAME:3FBA
GAME:3FBA O7:                                     ; CODE XREF: TRGT+8D↓j
GAME:3FBA                 LDA     RANDOM          ; Random Number Generator
GAME:3FBD                 ORA     #$40 ; '@'
GAME:3FBF                 AND     #$7F
GAME:3FC1                 STA     byte_6AA
GAME:3FC4                 RTS
GAME:3FC5 ; ---------------------------------------------------------------------------
GAME:3FC5
GAME:3FC5 O2:                                     ; CODE XREF: TRGT+2F↑j
GAME:3FC5                 LDA     RANDOM          ; Random Number Generator
GAME:3FC8                 LSR     A
GAME:3FC9                 BCC     O3
GAME:3FCB
GAME:3FCB Q5:                                     ; CODE XREF: TRGT+8↑j
GAME:3FCB                 LDA     byte_FD
GAME:3FCD                 BEQ     Q6
GAME:3FCF
GAME:3FCF Q7:                                     ; CODE XREF: TRGT+60↓j
GAME:3FCF                                         ; TRGT+6C↓j ...
GAME:3FCF                 LDA     #10
GAME:3FD1                 STA     byte_C4
GAME:3FD3                 LDA     byte_FD
GAME:3FD5                 CMP     #5
GAME:3FD7                 BNE     R2              ; => Return
GAME:3FD9                 LDA     #0
GAME:3FDB                 STA     byte_FD
GAME:3FDD
GAME:3FDD R2:                                     ; CODE XREF: TRGT+18↑j
GAME:3FDD                                         ; TRGT+1D↑j ...
GAME:3FDD                 RTS                     ; => Return
GAME:3FDE ; ---------------------------------------------------------------------------
GAME:3FDE
GAME:3FDE Q6:                                     ; CODE XREF: TRGT+4C↑j
GAME:3FDE                 LDA     byte_650
GAME:3FE1                 BEQ     Q7
GAME:3FE3                 CMP     #20
GAME:3FE5                 BCC     Q2
GAME:3FE7                 LDA     CURRENT_GAME_PHASE
GAME:3FE9                 BNE     Q8
GAME:3FEB                 LDA     byte_FE
GAME:3FED                 BEQ     Q7
GAME:3FEF                 CMP     #15
GAME:3FF1                 BCS     Q7
GAME:3FF3                 LDA     RIVER_RIGHT_X_POS ; Right position of the river
GAME:3FF5                 CMP     #30
GAME:3FF7                 BCC     R2              ; => Return
GAME:3FF9                 CMP     #58
GAME:3FFB                 BCS     R2              ; => Return
GAME:3FFD                 JMP     Q2
GAME:4000 ; ---------------------------------------------------------------------------
GAME:4000
GAME:4000 Q8:                                     ; CODE XREF: TRGT+68↑j
GAME:4000                 LDA     byte_B2
GAME:4002                 BEQ     Q7
GAME:4004                 CMP     #25
GAME:4006                 BCS     Q7
GAME:4008
GAME:4008 Q2:                                     ; CODE XREF: TRGT+64↑j
GAME:4008                                         ; TRGT+7C↑j
GAME:4008                 LDA     #5
GAME:400A                 STA     byte_C4
GAME:400C                 STA     byte_FD
GAME:400E                 JMP     O7
GAME:4011 ; ---------------------------------------------------------------------------
GAME:4011
GAME:4011 Z9:                                     ; CODE XREF: TRGT:N9↑j
GAME:4011                 LDY     byte_6AB
GAME:4014                 CPY     #190
GAME:4016                 BCC     O5
GAME:4018
GAME:4018 U2:                                     ; CODE XREF: CKCHAR+62↑p
GAME:4018                                         ; CKCHAR+82↑p ...
GAME:4018                 DEC     byte_C4
GAME:401A                 LDX     #12
GAME:401C                 LDA     #0
GAME:401E
GAME:401E O6:                                     ; CODE XREF: TRGT+A2↓j
GAME:401E                 STA     P2+1,Y          ; Enemy (first color)
GAME:4021                 DEY
GAME:4022                 DEX
GAME:4023                 BNE     O6
GAME:4025                 STA     byte_FD
GAME:4027                 STA     VAR_PRIMARY_TARGET_SUBTYPE
GAME:402A
GAME:402A O8:                                     ; CODE XREF: TRGT+AE↓j
GAME:402A                 RTS                     ; => Return
GAME:402B ; ---------------------------------------------------------------------------
GAME:402B
GAME:402B O5:                                     ; CODE XREF: TRGT+95↑j
GAME:402B                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:402E                 LSR     A
GAME:402F                 BCS     O8              ; => Return
GAME:4031                 LDX     #11
GAME:4033
GAME:4033 O9:                                     ; CODE XREF: TRGT+BA↓j
GAME:4033                 LDA     P2,Y            ; Enemy (first color)
GAME:4036                 STA     P2+2,Y          ; Enemy (first color)
GAME:4039                 DEY
GAME:403A                 DEX
GAME:403B                 BNE     O9
GAME:403D                 INC     byte_6AB
GAME:4040                 INC     byte_6AB
GAME:4043                 DEC     ENEMY_X_POS     ; Enemy X position
GAME:4045                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:4047                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:404A                 LSR     A
GAME:404B                 LSR     A
GAME:404C                 LSR     A
GAME:404D                 BCC     Q4
GAME:404F                 LDA     #COLOR_INTENSITY_2|COLOR_RED_ORANGE
GAME:4051                 STA     PCOLR2          ; P2 COLOR
GAME:4054                 RTS
GAME:4055 ; ---------------------------------------------------------------------------
GAME:4055
GAME:4055 Q4:                                     ; CODE XREF: TRGT+CC↑j
GAME:4055                 LDA     #COLOR_INTENSITY_14|COLOR_GRAY
GAME:4057                 STA     PCOLR2          ; P2 COLOR
GAME:405A                 RTS
GAME:405A ; End of function TRGT
GAME:405A
GAME:405B
GAME:405B ; =============== S U B R O U T I N E =======================================
GAME:405B
GAME:405B ; Fix one broken part per call (F, B, M, G)
GAME:405B
GAME:405B FIX:                                    ; CODE XREF: REFUEL:N8↑p
GAME:405B                 INC     WORKING_PARTS   ; # of working part (4): fuel, bomb, maneuverabiity, gun
GAME:405E                 LDA     SC_STATUS_LINE.line_0.fuel_leak ; "F" character
GAME:4061                 BEQ     loc_4069
GAME:4063                 LDA     #_SPACE|_C_BLACK
GAME:4065                 STA     SC_STATUS_LINE.line_0.fuel_leak ; "F" character
GAME:4068                 RTS
GAME:4069 ; ---------------------------------------------------------------------------
GAME:4069
GAME:4069 loc_4069:                               ; CODE XREF: FIX+6↑j
GAME:4069                 LDY     SC_STATUS_LINE.line_0.bomb_gear_damaged ; "B" character
GAME:406C                 BEQ     loc_4072
GAME:406E                 STA     SC_STATUS_LINE.line_0.bomb_gear_damaged ; "B" character
GAME:4071                 RTS
GAME:4072 ; ---------------------------------------------------------------------------
GAME:4072
GAME:4072 loc_4072:                               ; CODE XREF: FIX+11↑j
GAME:4072                 LDY     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:4075                 BEQ     loc_407B
GAME:4077                 STA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:407A                 RTS
GAME:407B ; ---------------------------------------------------------------------------
GAME:407B
GAME:407B loc_407B:                               ; CODE XREF: FIX+1A↑j
GAME:407B                 STA     SC_STATUS_LINE.line_0.machine_gun_damaged ; "G" character
GAME:407E                 RTS
GAME:407E ; End of function FIX
GAME:407E
GAME:407F
GAME:407F ; =============== S U B R O U T I N E =======================================
GAME:407F
GAME:407F
GAME:407F TRACK:                                  ; CODE XREF: BTURN+5↑p
GAME:407F                 LDA     VAR_UNKNOWN_STATE
GAME:4082                 CMP     #UNKNOWNS_STATE_5
GAME:4084                 BEQ     _1
GAME:4086
GAME:4086 _2:                                     ; CODE XREF: TRACK+B↓j
GAME:4086                                         ; TRACK+10↓j
GAME:4086                 RTS                     ; => Return
GAME:4087 ; ---------------------------------------------------------------------------
GAME:4087
GAME:4087 _1:                                     ; CODE XREF: TRACK+5↑j
GAME:4087                 LDA     byte_6A8
GAME:408A                 BEQ     _2              ; => Return
GAME:408C                 LDA     byte_6A7
GAME:408F                 BEQ     _2              ; => Return
GAME:4091                 LDA     #TURN_MODE_LEFT
GAME:4093                 STA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:4096                 PLA
GAME:4097                 PLA
GAME:4098                 LDX     #10
GAME:409A                 LDY     ENEMY_Y_POS     ; Enemy Y position
GAME:409C                 LDA     byte_C2
GAME:409E                 CLC
GAME:409F                 ADC     ENEMY_X_POS     ; Enemy X position
GAME:40A1                 BCC     loc_40A5
GAME:40A3                 LDA     #$FF
GAME:40A5
GAME:40A5 loc_40A5:                               ; CODE XREF: TRACK+22↑j
GAME:40A5                 STA     TEMP_B0
GAME:40A7                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:40A9                 CLC
GAME:40AA                 ADC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:40AC                 BCC     _4
GAME:40AE                 LDA     #$FF
GAME:40B0
GAME:40B0 _4:                                     ; CODE XREF: TRACK+2D↑j
GAME:40B0                 CMP     TEMP_B0
GAME:40B2                 BCC     _3
GAME:40B4                 JMP     K4
GAME:40B7 ; ---------------------------------------------------------------------------
GAME:40B7
GAME:40B7 _3:                                     ; CODE XREF: TRACK+33↑j
GAME:40B7                 JMP     K5
GAME:40B7 ; End of function TRACK
GAME:40B7
GAME:40BA
GAME:40BA ; =============== S U B R O U T I N E =======================================
GAME:40BA
GAME:40BA
GAME:40BA CPTL:                                   ; CODE XREF: CITY+26↑p
GAME:40BA                 LDA     CURRENT_GAME_PHASE
GAME:40BC                 CMP     #GAME_PHASE_6
GAME:40BE                 BEQ     _1
GAME:40C0                 CMP     #GAME_PHASE_7
GAME:40C2                 BEQ     _1
GAME:40C4
GAME:40C4 _12:                                    ; CODE XREF: CPTL+17↓j
GAME:40C4                 RTS                     ; => Return
GAME:40C5 ; ---------------------------------------------------------------------------
GAME:40C5
GAME:40C5 _1:                                     ; CODE XREF: CPTL+4↑j
GAME:40C5                                         ; CPTL+8↑j
GAME:40C5                 JSR     XCPTL
GAME:40C8                 LDY     CAPITAL_Y_POS
GAME:40CB                 BNE     _2
GAME:40CD                 LDA     CURRENT_GAME_PHASE
GAME:40CF                 CMP     #GAME_PHASE_7
GAME:40D1                 BEQ     _12             ; => Return
GAME:40D3
GAME:40D3                 LDA     GAME_COMPLETION_MASK
GAME:40D6                 LDX     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:40D8                 CPX     #63
GAME:40DA                 BEQ     _8
GAME:40DC                 CPX     #32
GAME:40DE                 BEQ     _9
GAME:40E0                 CPX     #1
GAME:40E2                 BNE     _3              ; => Return
GAME:40E4                 AND     #FINAL_TARGET_3
GAME:40E6                 BNE     _3              ; => Return
GAME:40E8                 LDA     #COLOR_INTENSITY_0|COLOR_PURPLE_BLUE
GAME:40EA                 JMP     _10
GAME:40ED ; ---------------------------------------------------------------------------
GAME:40ED
GAME:40ED _8:                                     ; CODE XREF: CPTL+20↑j
GAME:40ED                 AND     #FINAL_TARGET_1
GAME:40EF                 BNE     _3              ; => Return
GAME:40F1                 LDA     #COLOR_INTENSITY_2|COLOR_RED_ORANGE
GAME:40F3                 JMP     _10
GAME:40F6 ; ---------------------------------------------------------------------------
GAME:40F6
GAME:40F6 _9:                                     ; CODE XREF: CPTL+24↑j
GAME:40F6                 AND     #FINAL_TARGET_2
GAME:40F8                 BNE     _3              ; => Return
GAME:40FA                 LDA     #COLOR_INTENSITY_0|COLOR_DARK_PURPLE
GAME:40FC
GAME:40FC _10:                                    ; CODE XREF: CPTL+30↑j
GAME:40FC                                         ; CPTL+39↑j
GAME:40FC                 STA     PCOLR2          ; P2 COLOR
GAME:40FF                 LDA     #1
GAME:4101                 STA     M2PL_SIZEP2     ; Missle to Player 2 Collision / Player 2 Size
GAME:4104                 STA     M3PL_SIZEP3     ; Missle to Player 3 Collision / Player 3 Size
GAME:4107                 LDY     #20
GAME:4109                 STY     byte_FD
GAME:410B                 STY     CAPITAL_Y_POS
GAME:410E                 STY     byte_6C1
GAME:4111                 LDX     #13
GAME:4113
GAME:4113 _4:                                     ; CODE XREF: CPTL+67↓j
GAME:4113                 LDA     AAH-1,X         ; final targets (main color)
GAME:4116                 STA     P2,Y            ; Enemy (first color)
GAME:4119                 LDA     AAI-1,X         ; final targets (black color)
GAME:411C                 STA     P3-2,Y          ; Enemy (second color)
GAME:411F                 DEY
GAME:4120                 DEX
GAME:4121                 BNE     _4
GAME:4123                 LDA     #176
GAME:4125                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:4128                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:412B                 STA     ENEMY_X_POS     ; Enemy X position
GAME:412D
GAME:412D _3:                                     ; CODE XREF: CPTL+28↑j
GAME:412D                                         ; CPTL+2C↑j ...
GAME:412D                 RTS                     ; => Return
GAME:412E ; ---------------------------------------------------------------------------
GAME:412E
GAME:412E _2:                                     ; CODE XREF: CPTL+11↑j
GAME:412E                 LDA     VBL_DOWN_COUNTER ; VBL down counter, running countinously during the game
GAME:4131                 LSR     A
GAME:4132                 BCC     _3              ; => Return
GAME:4134                 CPY     #196
GAME:4136                 BCC     _5
GAME:4138                 DEC     byte_6C1
GAME:413B                 BNE     _7
GAME:413D                 LDA     #0
GAME:413F                 STA     CAPITAL_Y_POS
GAME:4142                 STA     M2PL_SIZEP2     ; Missle to Player 2 Collision / Player 2 Size
GAME:4145                 STA     M3PL_SIZEP3     ; Missle to Player 3 Collision / Player 3 Size
GAME:4148                 STA     byte_6C5
GAME:414B                 STA     byte_FD
GAME:414D                 RTS
GAME:414E ; ---------------------------------------------------------------------------
GAME:414E
GAME:414E _7:                                     ; CODE XREF: CPTL+81↑j
GAME:414E                 LDA     #0
GAME:4150                 STA     P2,Y            ; Enemy (first color)
GAME:4153                 STA     P3,Y            ; Enemy (second color)
GAME:4156
GAME:4156 _5:                                     ; CODE XREF: CPTL+7C↑j
GAME:4156                 LDX     #20
GAME:4158
GAME:4158 _6:                                     ; CODE XREF: CPTL+AC↓j
GAME:4158                 LDA     P2,Y            ; Enemy (first color)
GAME:415B                 STA     P2+2,Y          ; Enemy (first color)
GAME:415E                 LDA     P3,Y            ; Enemy (second color)
GAME:4161                 STA     P3+2,Y          ; Enemy (second color)
GAME:4164                 DEY
GAME:4165                 DEX
GAME:4166                 BNE     _6
GAME:4168                 DEC     ENEMY_X_POS     ; Enemy X position
GAME:416A                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:416C                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:416F                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:4172                 LDA     CAPITAL_Y_POS
GAME:4175                 CMP     #196
GAME:4177                 BCS     _3              ; => Return
GAME:4179                 INC     CAPITAL_Y_POS
GAME:417C                 INC     CAPITAL_Y_POS
GAME:417F                 RTS
GAME:417F ; End of function CPTL
GAME:417F
GAME:4180
GAME:4180 ; =============== S U B R O U T I N E =======================================
GAME:4180
GAME:4180 ; Score: add 10
GAME:4180
GAME:4180 S10__SCORE_ADD_10:                      ; CODE XREF: Y7__HIT_RW_PLANE_TR+16↑p
GAME:4180                                         ; X5+C↑p ...
GAME:4180                 INC     SC_STATUS_LINE.line_2.score_digit_1
GAME:4183                 LDA     SC_STATUS_LINE.line_2.score_digit_1
GAME:4186                 CMP     #KEYCODE_9+1
GAME:4188                 BEQ     _1
GAME:418A                 RTS
GAME:418B ; ---------------------------------------------------------------------------
GAME:418B
GAME:418B _1:                                     ; CODE XREF: S10__SCORE_ADD_10+8↑j
GAME:418B                 LDA     #_0|_C_BLUE
GAME:418D                 STA     SC_STATUS_LINE.line_2.score_digit_1
GAME:418D ; End of function S10__SCORE_ADD_10
GAME:418D
GAME:4190
GAME:4190 ; =============== S U B R O U T I N E =======================================
GAME:4190
GAME:4190 ; Score: add 100
GAME:4190
GAME:4190 S100__SCORE_ADD_100:                    ; CODE XREF: TURN+C2↑p
GAME:4190                                         ; COLM02+23↑p ...
GAME:4190                 INC     SC_STATUS_LINE.line_2.score_digit_10
GAME:4193                 LDA     SC_STATUS_LINE.line_2.score_digit_10
GAME:4196                 CMP     #KEYCODE_9+1
GAME:4198                 BEQ     _1
GAME:419A                 RTS
GAME:419B ; ---------------------------------------------------------------------------
GAME:419B
GAME:419B _1:                                     ; CODE XREF: S100__SCORE_ADD_100+8↑j
GAME:419B                 LDA     #_0|_C_BLUE
GAME:419D                 STA     SC_STATUS_LINE.line_2.score_digit_10
GAME:41A0
GAME:41A0 S1000__SCORE_ADD_1000:                  ; CODE XREF: S500__SCORE_ADD_500+14↓j
GAME:41A0                 INC     SC_STATUS_LINE.line_2.score_digit_100
GAME:41A3                 LDA     SC_STATUS_LINE.line_2.score_digit_100
GAME:41A6                 CMP     #KEYCODE_9+1
GAME:41A8                 BEQ     S10000__SCORE_ADD_10000
GAME:41AA                 RTS
GAME:41AB ; ---------------------------------------------------------------------------
GAME:41AB
GAME:41AB S10000__SCORE_ADD_10000:                ; CODE XREF: S100__SCORE_ADD_100+18↑j
GAME:41AB                 LDA     #_0|_C_BLUE
GAME:41AD                 STA     SC_STATUS_LINE.line_2.score_digit_100
GAME:41B0                 LDA     SC_STATUS_LINE.line_2.score_digit_1000
GAME:41B3                 BNE     _1_
GAME:41B5                 LDA     #_0|_C_BLUE
GAME:41B7                 STA     SC_STATUS_LINE.line_2.score_digit_1000
GAME:41BA
GAME:41BA _1_:                                    ; CODE XREF: S100__SCORE_ADD_100+23↑j
GAME:41BA                 INC     SC_STATUS_LINE.line_2.score_digit_1000
GAME:41BD                 RTS
GAME:41BD ; End of function S100__SCORE_ADD_100
GAME:41BD
GAME:41BE
GAME:41BE ; =============== S U B R O U T I N E =======================================
GAME:41BE
GAME:41BE ; Score: add 500
GAME:41BE
GAME:41BE S500__SCORE_ADD_500:                    ; CODE XREF: BMCPTL+33↓p
GAME:41BE                 LDA     SC_STATUS_LINE.line_2.score_digit_10
GAME:41C1                 CLC
GAME:41C2                 ADC     #5
GAME:41C4                 CMP     #KEYCODE_9+1
GAME:41C6                 BCS     _1
GAME:41C8                 STA     SC_STATUS_LINE.line_2.score_digit_10
GAME:41CB                 RTS
GAME:41CC ; ---------------------------------------------------------------------------
GAME:41CC
GAME:41CC _1:                                     ; CODE XREF: S500__SCORE_ADD_500+8↑j
GAME:41CC                 SEC
GAME:41CD                 SBC     #10
GAME:41CF                 STA     SC_STATUS_LINE.line_2.score_digit_10
GAME:41D2                 JMP     S1000__SCORE_ADD_1000
GAME:41D2 ; End of function S500__SCORE_ADD_500
GAME:41D2
GAME:41D5
GAME:41D5 ; =============== S U B R O U T I N E =======================================
GAME:41D5
GAME:41D5 ; Score: add 50
GAME:41D5
GAME:41D5 S50__SCORE_ADD_50:                      ; CODE XREF: Y7__HIT_RW_PLANE_TR+19↑p
GAME:41D5                                         ; X8__HIT_BOAT_TR+12↑p ...
GAME:41D5                 LDA     SC_STATUS_LINE.line_2.score_digit_1
GAME:41D8                 CLC
GAME:41D9                 ADC     #5
GAME:41DB                 CMP     #KEYCODE_9+1
GAME:41DD                 BCS     Z8
GAME:41DF                 STA     SC_STATUS_LINE.line_2.score_digit_1
GAME:41E2                 RTS
GAME:41E3 ; ---------------------------------------------------------------------------
GAME:41E3
GAME:41E3 Z8:                                     ; CODE XREF: S50__SCORE_ADD_50+8↑j
GAME:41E3                                         ; S30__SCORE_ADD_30+8↓j
GAME:41E3                 SEC
GAME:41E4                 SBC     #10
GAME:41E6                 STA     SC_STATUS_LINE.line_2.score_digit_1
GAME:41E9                 JMP     S100__SCORE_ADD_100 ; Score: add 100
GAME:41E9 ; End of function S50__SCORE_ADD_50
GAME:41E9
GAME:41EC
GAME:41EC ; =============== S U B R O U T I N E =======================================
GAME:41EC
GAME:41EC ; Score: add 30
GAME:41EC
GAME:41EC S30__SCORE_ADD_30:                      ; CODE XREF: Z3+3A↓p
GAME:41EC                                         ; Z3:_8↓p
GAME:41EC                 LDA     SC_STATUS_LINE.line_2.score_digit_1
GAME:41EF                 CLC
GAME:41F0                 ADC     #3
GAME:41F2                 CMP     #KEYCODE_9+1
GAME:41F4                 BCS     Z8
GAME:41F6                 STA     SC_STATUS_LINE.line_2.score_digit_1
GAME:41F9                 RTS
GAME:41F9 ; End of function S30__SCORE_ADD_30
GAME:41F9
GAME:41FA
GAME:41FA ; =============== S U B R O U T I N E =======================================
GAME:41FA
GAME:41FA
GAME:41FA SHP23:                                  ; CODE XREF: DRP23+9↑p
GAME:41FA                                         ; SHIP+76↑p
GAME:41FA                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:41FC                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:41FE                 CMP     #28
GAME:4200                 BCC     _1
GAME:4202                 RTS
GAME:4203 ; ---------------------------------------------------------------------------
GAME:4203
GAME:4203 _1:                                     ; CODE XREF: SHP23+6↑j
GAME:4203                 LDA     M0PL            ; Missle to Player 0 Collision
GAME:4206                 AND     #1100b          ; Player bullet collision with an enemy?
GAME:4208                 BNE     _2
GAME:420A
GAME:420A _4:                                     ; CODE XREF: SHP23+22↓j
GAME:420A                 RTS                     ; => Return
GAME:420B ; ---------------------------------------------------------------------------
GAME:420B
GAME:420B _2:                                     ; CODE XREF: SHP23+E↑j
GAME:420B                 LDY     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:420D                 JSR     HG              ; Remove plane bullet
GAME:4210                 LDA     byte_FD
GAME:4212                 CMP     #1
GAME:4214                 BNE     _3
GAME:4216                 JMP     R6              ; Player and enemy collision
GAME:4219 ; ---------------------------------------------------------------------------
GAME:4219
GAME:4219 _3:                                     ; CODE XREF: SHP23+1A↑j
GAME:4219                 DEC     byte_6DC
GAME:421C                 BNE     _4              ; => Return
GAME:421E                 JMP     Z6              ; Set enemy to explosion graphics
GAME:421E ; End of function SHP23
GAME:421E
GAME:4221
GAME:4221 ; =============== S U B R O U T I N E =======================================
GAME:4221
GAME:4221
GAME:4221 P0SHP:                                  ; CODE XREF: SHIP+79↑p
GAME:4221                 LDA     P1PL            ; Player Graphics Register 0
GAME:4224                 AND     #1100b          ; Collisition with the enemy? (Player 2/3)
GAME:4226                 BNE     _1
GAME:4228                 RTS
GAME:4229 ; ---------------------------------------------------------------------------
GAME:4229
GAME:4229 _1:                                     ; CODE XREF: P0SHP+5↑j
GAME:4229                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:422B                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:422D                 CMP     #20             ; too close to the ground?
GAME:422F                 BCC     _2
GAME:4231                 RTS
GAME:4232 ; ---------------------------------------------------------------------------
GAME:4232
GAME:4232 _2:                                     ; CODE XREF: P0SHP+E↑j
GAME:4232                 STA     byte_654
GAME:4235                 JSR     Z6              ; Set enemy to explosion graphics
GAME:4238                 PLA
GAME:4239                 PLA
GAME:423A                 JMP     CRASH           ; Plane was crashed
GAME:423A ; End of function P0SHP
GAME:423A
GAME:423D
GAME:423D ; =============== S U B R O U T I N E =======================================
GAME:423D
GAME:423D ; Flash the screen colors after e.g. a crash
GAME:423D
GAME:423D XFLSH:                                  ; CODE XREF: COMMON+63↑p
GAME:423D                                         ; TURN+121↑p ...
GAME:423D                 LDA     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:4240                 BNE     _1
GAME:4242                 RTS
GAME:4243 ; ---------------------------------------------------------------------------
GAME:4243
GAME:4243 _1:                                     ; CODE XREF: XFLSH+3↑j
GAME:4243                 DEC     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:4246                 LDA     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:4249                 LSR     A
GAME:424A                 LSR     A
GAME:424B                 BCC     _2              ; Restore previously saved color palette
GAME:424D                 LDA     #COLOR_INTENSITY_8|COLOR_RED_ORANGE
GAME:424F                 STA     COLOR3
GAME:4252                 LDA     #COLOR_INTENSITY_14|COLOR_ORANGE
GAME:4254                 STA     COLOR2
GAME:4257                 LDA     RANDOM          ; Random Number Generator
GAME:425A                 LSR     A
GAME:425B                 BCC     _3
GAME:425D                 LDA     #COLOR_INTENSITY_4|COLOR_RED_ORANGE
GAME:425F                 STA     COLOR0          ; COLOR 0
GAME:4262                 LDA     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:4264                 STA     COLOR1
GAME:4267                 RTS
GAME:4268 ; ---------------------------------------------------------------------------
GAME:4268
GAME:4268 _3:                                     ; CODE XREF: XFLSH+1E↑j
GAME:4268                 LDA     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:426A                 STA     COLOR0          ; COLOR 0
GAME:426D                 LDA     #COLOR_INTENSITY_6|COLOR_RED_ORANGE
GAME:426F                 STA     COLOR1
GAME:4272                 RTS
GAME:4273 ; ---------------------------------------------------------------------------
GAME:4273
GAME:4273 _2:                                     ; CODE XREF: XFLSH+E↑j
GAME:4273                 LDX     #4              ; Restore previously saved color palette
GAME:4275
GAME:4275 _4:                                     ; CODE XREF: XFLSH+3F↓j
GAME:4275                 LDA     SAVED_COLOR0_3-1,X
GAME:4278                 STA     COLOR0-1,X      ; COLOR 0
GAME:427B                 DEX
GAME:427C                 BNE     _4
GAME:427E                 RTS
GAME:427E ; End of function XFLSH
GAME:427E
GAME:427F
GAME:427F ; =============== S U B R O U T I N E =======================================
GAME:427F
GAME:427F ; Save current color palette, because we start the flashing animation
GAME:427F
GAME:427F ABA:                                    ; CODE XREF: TURN+7F↑p
GAME:427F                                         ; COLM02+5D↑p ...
GAME:427F                 LDA     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:4282                 BNE     ADF             ; => Return
GAME:4284                 LDA     #COLOR_INTENSITY_12|COLOR_GRAY
GAME:4286                 STA     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:4289                 LDA     #18
GAME:428B                 STA     QUAKE_ANIMATION_COUNTER ; Quake, shake via the scroll register, timer
GAME:428E                 LDX     #4
GAME:4290
GAME:4290 ADG:                                    ; CODE XREF: ABA+18↓j
GAME:4290                 LDA     COLOR0-1,X      ; COLOR 0
GAME:4293                 STA     SAVED_COLOR0_3-1,X
GAME:4296                 DEX
GAME:4297                 BNE     ADG
GAME:4299
GAME:4299 ADF:                                    ; CODE XREF: ABA+3↑j
GAME:4299                 RTS                     ; => Return
GAME:4299 ; End of function ABA
GAME:4299
GAME:429A
GAME:429A ; =============== S U B R O U T I N E =======================================
GAME:429A
GAME:429A
GAME:429A W1:                                     ; CODE XREF: Y7__HIT_RW_PLANE_TR+1C↑j
GAME:429A                                         ; X8__HIT_BOAT_TR+1C↑j ...
GAME:429A                 JSR     ABA             ; Save current color palette, because we start the flashing animation
GAME:429D                 JMP     Z7
GAME:429D ; End of function W1
GAME:429D
GAME:42A0
GAME:42A0 ; =============== S U B R O U T I N E =======================================
GAME:42A0
GAME:42A0
GAME:42A0 Z3:                                     ; CODE XREF: CKCHAR+52↑j
GAME:42A0                 LDX     #12
GAME:42A2
GAME:42A2 _1:                                     ; CODE XREF: Z3+8↓j
GAME:42A2                 CMP     AAF,X           ; Targets: all parts of a hangar
GAME:42A5                 BEQ     _2
GAME:42A7                 DEX
GAME:42A8                 BNE     _1
GAME:42AA
GAME:42AA                 LDX     byte_6EB
GAME:42AD                 BNE     _11
GAME:42AF                 CMP     #254
GAME:42B1                 BEQ     _4
GAME:42B3                 LDX     #2
GAME:42B5                 STX     TEMP_B0
GAME:42B7
GAME:42B7 _9:                                     ; CODE XREF: Z3+26↓j
GAME:42B7                 LDX     #11
GAME:42B9
GAME:42B9 _7:                                     ; CODE XREF: Z3+1F↓j
GAME:42B9                 CMP     AAG-1,X         ; Targets: all cars, tanks, ait-aircraft battery on the playfield
GAME:42BC                 BEQ     _8              ; Hit a minor target (+30 points)
GAME:42BE                 DEX
GAME:42BF                 BNE     _7
GAME:42C1                 INY
GAME:42C2                 LDA     (CURRENT_TILE_ROW_PTR),Y
GAME:42C4                 DEC     TEMP_B0
GAME:42C6                 BNE     _9
GAME:42C8                 DEY
GAME:42C9                 DEY
GAME:42CA                 RTS
GAME:42CB ; ---------------------------------------------------------------------------
GAME:42CB
GAME:42CB _11:                                    ; CODE XREF: Z3+D↑j
GAME:42CB                 CPX     #1
GAME:42CD                 BEQ     _12
GAME:42CF                 LDA     #0
GAME:42D1                 STA     CURRENT_TILE_ROW_PTR+1
GAME:42D3                 JMP     DT
GAME:42D6 ; ---------------------------------------------------------------------------
GAME:42D6
GAME:42D6 _12:                                    ; CODE XREF: Z3+2D↑j
GAME:42D6                 CMP     #96
GAME:42D8                 BNE     _13
GAME:42DA                 JSR     S30__SCORE_ADD_30 ; Score: add 30
GAME:42DD                 LDA     #EXPLOSITION_TARGET_15
GAME:42DF                 STA     VAR_EXPLOSION_TARGET
GAME:42E2                 PLA
GAME:42E3                 PLA
GAME:42E4                 JMP     W1
GAME:42E7 ; ---------------------------------------------------------------------------
GAME:42E7
GAME:42E7 _13:                                    ; CODE XREF: Z3+38↑j
GAME:42E7                 PLA
GAME:42E8                 PLA
GAME:42E9                 LDA     #0
GAME:42EB                 STA     CURRENT_TILE_ROW_PTR+1
GAME:42ED                 LDA     AUDIO2_DROPSND_FREQ_SAVED
GAME:42F0                 STA     AUDIO2_DROPSND_FREQ
GAME:42F3                 INC     byte_6ED
GAME:42F6
GAME:42F6 _78:                                    ; CODE XREF: Z3+5A↓j
GAME:42F6                 RTS                     ; => Return
GAME:42F7 ; ---------------------------------------------------------------------------
GAME:42F7
GAME:42F7 _2:                                     ; CODE XREF: Z3+5↑j
GAME:42F7                 LDA     byte_6F9
GAME:42FA                 BEQ     _78             ; => Return
GAME:42FC                 LDA     #0
GAME:42FE                 STA     byte_6F9
GAME:4301                 PLA
GAME:4302                 PLA
GAME:4303                 LDA     #EXPLOSITION_TARGET_AIRPORT_HANGAR
GAME:4305                 STA     VAR_EXPLOSION_TARGET
GAME:4308                 LDA     COLOR1
GAME:430B                 CMP     #COLOR_INTENSITY_4|COLOR_LIGHT_BLUE
GAME:430D                 BNE     _3
GAME:430F                 LDA     byte_FD
GAME:4311                 CMP     #254
GAME:4313                 BEQ     _77
GAME:4315                 LDA     RANDOM          ; Random Number Generator
GAME:4318                 STA     SDLSTL          ; SAVE DISPLAY LIST LOW BYTE
GAME:431B
GAME:431B _3:                                     ; CODE XREF: Z3+6D↑j
GAME:431B                 JSR     S100__SCORE_ADD_100 ; Score: add 100
GAME:431E
GAME:431E _77:                                    ; CODE XREF: Z3+73↑j
GAME:431E                 JMP     W1
GAME:4321 ; ---------------------------------------------------------------------------
GAME:4321
GAME:4321 _8:                                     ; CODE XREF: Z3+1C↑j
GAME:4321                 JSR     S30__SCORE_ADD_30 ; Hit a minor target (+30 points)
GAME:4324                 JSR     ABA             ; Save current color palette, because we start the flashing animation
GAME:4327                 JMP     U3
GAME:432A ; ---------------------------------------------------------------------------
GAME:432A
GAME:432A _4:                                     ; CODE XREF: Z3+11↑j
GAME:432A                 LDA     #EXPLOSITION_TARGET_10
GAME:432C                 STA     VAR_EXPLOSION_TARGET
GAME:432F                 PLA
GAME:4330                 PLA
GAME:4331                 JMP     Z7
GAME:4331 ; End of function Z3
GAME:4331
GAME:4334
GAME:4334 ; =============== S U B R O U T I N E =======================================
GAME:4334
GAME:4334
GAME:4334 FLSH:                                   ; CODE XREF: DRUN__DRAW_RUNWAY:MD↑p
GAME:4334                                         ; DRUN__DRAW_RUNWAY:SH↑p
GAME:4334                 LDA     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:4337                 CMP     REQUIRED_TARGETS ; Number of required primary targets to progress (8 or 9 by random)
GAME:433A                 BCS     _1
GAME:433C                 RTS
GAME:433D ; ---------------------------------------------------------------------------
GAME:433D
GAME:433D _1:                                     ; CODE XREF: FLSH+6↑j
GAME:433D                 DEC     byte_6B7
GAME:4340                 LDA     byte_6B7
GAME:4343                 LSR     A
GAME:4344                 LSR     A
GAME:4345                 BCC     _2
GAME:4347                 LDA     #_SPACE|_C_BLUE
GAME:4349                 STA     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:434C                 LDA     GAME_COMPLETION_MASK
GAME:434F                 CMP     #FINAL_TARGET_ALL
GAME:4351                 BNE     _4
GAME:4353                 LDA     byte_6B6
GAME:4356                 BEQ     _4
GAME:4358                 LDA     #COLOR_INTENSITY_4|COLOR_GREEN
GAME:435A                 STA     DL_IRQ_BACKGROUND_COLOR ; mission complete! – and land and receive award
GAME:435D
GAME:435D _4:                                     ; CODE XREF: FLSH+1D↑j
GAME:435D                                         ; FLSH+22↑j ...
GAME:435D                 LDA     #0
GAME:435F                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:4362                 RTS
GAME:4363 ; ---------------------------------------------------------------------------
GAME:4363
GAME:4363 _2:                                     ; CODE XREF: FLSH+11↑j
GAME:4363                 LDA     GAME_COMPLETION_MASK
GAME:4366                 CMP     #FINAL_TARGET_ALL
GAME:4368                 BNE     _5
GAME:436A                 LDA     #COLOR_INTENSITY_0|COLOR_GRAY
GAME:436C                 STA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:436F
GAME:436F _5:                                     ; CODE XREF: FLSH+34↑j
GAME:436F                 LDA     byte_6B6
GAME:4372                 STA     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:4375                 BEQ     _4
GAME:4377                 LDA     #AUDIO_CONTROL_VOL_2|AUDIO_CONTROL_DIST_4
GAME:4379                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:437C                 LDA     #AUDIO_CONTROL_VOL_15
GAME:437E                 STA     AUDF4           ; Audio 4 Frequency Register
GAME:4381                 RTS
GAME:4381 ; End of function FLSH
GAME:4381
GAME:4382
GAME:4382 ; =============== S U B R O U T I N E =======================================
GAME:4382
GAME:4382 ; 2x2 water explosion
GAME:4382
GAME:4382 Y6:                                     ; CODE XREF: ID:Y5↑j
GAME:4382                 LDA     EXPLOSION_TILE_ANIMATION
GAME:4385                 CMP     #1
GAME:4387                 BEQ     _2
GAME:4389                 LSR     A
GAME:438A                 LSR     A
GAME:438B                 LSR     A
GAME:438C                 BCC     loc_43A2
GAME:438E                 LDA     #L_EXPLOSION_WATER_4|L_C_1
GAME:4390                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:4392                 INY
GAME:4393                 LDA     #L_EXPLOSION_WATER_3|L_C_1
GAME:4395                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:4397                 JSR     CPBT            ; Check if previous tile row is still visible, exit if not
GAME:439A                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:439C                 DEY
GAME:439D                 LDA     #L_EXPLOSION_STREET_2|L_C_1
GAME:439F                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:43A1                 RTS
GAME:43A2 ; ---------------------------------------------------------------------------
GAME:43A2
GAME:43A2 loc_43A2:                               ; CODE XREF: Y6+A↑j
GAME:43A2                 LDA     #L_EXPLOSION_WATER_2|L_C_0
GAME:43A4                 JMP     X3
GAME:43A7 ; ---------------------------------------------------------------------------
GAME:43A7
GAME:43A7 _2:                                     ; CODE XREF: Y6+5↑j
GAME:43A7                 LDA     #L_WATER|L_C_0
GAME:43A9                 JMP     X3
GAME:43AC ; ---------------------------------------------------------------------------
GAME:43AC
GAME:43AC X7:                                     ; CODE XREF: ID:X6↑j
GAME:43AC                 LDA     EXPLOSION_TILE_ANIMATION ; 2x1 street explosion
GAME:43AF                 LSR     A
GAME:43B0                 LSR     A
GAME:43B1                 LSR     A
GAME:43B2                 BCC     loc_43BC
GAME:43B4                 LDA     #L_EXPLOSION_STREET_1|L_C_1
GAME:43B6                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43B8                 INY
GAME:43B9                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43BB                 RTS
GAME:43BC ; ---------------------------------------------------------------------------
GAME:43BC
GAME:43BC loc_43BC:                               ; CODE XREF: Y6+30↑j
GAME:43BC                 LDA     #L_EXPLOSION_STREET_2|L_C_1
GAME:43BE                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43C0                 INY
GAME:43C1                 LDA     #L_EXPLOSION_STREET_3|L_C_1
GAME:43C3                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43C5                 RTS
GAME:43C6 ; ---------------------------------------------------------------------------
GAME:43C6
GAME:43C6 W6:                                     ; CODE XREF: ID:W5↑j
GAME:43C6                 LDA     EXPLOSION_TILE_ANIMATION ; 2x2 runway tile explosion
GAME:43C9                 LSR     A
GAME:43CA                 LSR     A
GAME:43CB                 LSR     A
GAME:43CC                 BCC     X4
GAME:43CE                 LDA     #L_EXPLOSION_STREET_1|L_C_1
GAME:43D0
GAME:43D0 X3:                                     ; CODE XREF: Y6+22↑j
GAME:43D0                                         ; Y6+27↑j
GAME:43D0                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43D2                 INY
GAME:43D3                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43D5                 JSR     CPBT            ; Check if previous tile row is still visible, exit if not
GAME:43D8                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:43DA                 DEY
GAME:43DB                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:43DD                 RTS
GAME:43DE ; ---------------------------------------------------------------------------
GAME:43DE
GAME:43DE X4:                                     ; CODE XREF: Y6+4A↑j
GAME:43DE                 CLC
GAME:43DF                 LDA     #L_EXPLOSION_STREET_2|L_C_1
GAME:43E1                 JMP     _5
GAME:43E4 ; ---------------------------------------------------------------------------
GAME:43E4
GAME:43E4 _5:                                     ; CODE XREF: Y6+5F↑j
GAME:43E4                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43E6                 ADC     #1
GAME:43E8                 INY
GAME:43E9                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:43EB                 JSR     CPBT            ; Check if previous tile row is still visible, exit if not
GAME:43EE                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:43F0                 DEY
GAME:43F1                 SEC
GAME:43F2                 SBC     #1
GAME:43F4                 STA     (PREVIOUS_TILE_ROW_PTR),Y
GAME:43F6                 RTS
GAME:43F6 ; End of function Y6
GAME:43F6
GAME:43F7
GAME:43F7 ; =============== S U B R O U T I N E =======================================
GAME:43F7
GAME:43F7 ; Check if previous tile row is still visible, exit if not
GAME:43F7
GAME:43F7 CPBT:                                   ; CODE XREF: V8+11↑p
GAME:43F7                                         ; V8+25↑p ...
GAME:43F7                 LDX     PREVIOUS_TILE_ROW_PTR+1
GAME:43F9                 CPX     #255            ; previous row no longer visible?
GAME:43FB                 BNE     _1              ; => Return
GAME:43FD                 PLA
GAME:43FE                 PLA                     ; then leave the subroutine above
GAME:43FF
GAME:43FF _1:                                     ; CODE XREF: CPBT+4↑j
GAME:43FF                 RTS                     ; => Return
GAME:43FF ; End of function CPBT
GAME:43FF
GAME:4400 ; ---------------------------------------------------------------------------
GAME:4400 ; START OF FUNCTION CHUNK FOR GUNC
GAME:4400
GAME:4400 TB:                                     ; CODE XREF: GUNC:ADC↓j
GAME:4400                 DEC     byte_6B1
GAME:4403                 LDA     byte_6B1
GAME:4406                 CMP     #18
GAME:4408                 BEQ     loc_4414
GAME:440A                 CMP     #6
GAME:440C                 BEQ     loc_440F
GAME:440E                 RTS
GAME:440F ; ---------------------------------------------------------------------------
GAME:440F
GAME:440F loc_440F:                               ; CODE XREF: GUNC-5F0↑j
GAME:440F                 LDA     #30
GAME:4411                 STA     byte_6B1
GAME:4414
GAME:4414 loc_4414:                               ; CODE XREF: GUNC-5F4↑j
GAME:4414                 LDA     #45
GAME:4416                 STA     byte_BF
GAME:4418                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:441B                 SEC
GAME:441C                 SBC     #10
GAME:441E                 TAY
GAME:441F                 LDA     #L_FLASHING_MARKER|L_C_1
GAME:4421                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:4423                 TYA
GAME:4424                 CLC
GAME:4425                 ADC     #7
GAME:4427                 JSR     A2
GAME:442A                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:442D                 CLC
GAME:442E                 ADC     #1
GAME:4430                 TAY
GAME:4431                 LDA     #L_FLASHING_MARKER|L_C_1
GAME:4433                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:4435                 TYA
GAME:4436                 ADC     #7
GAME:4438                 JMP     B3
GAME:4438 ; END OF FUNCTION CHUNK FOR GUNC
GAME:443B
GAME:443B ; =============== S U B R O U T I N E =======================================
GAME:443B
GAME:443B ; Player collision with enemy?
GAME:443B
GAME:443B COLCPTL:                                ; CODE XREF: XCPTL↓p
GAME:443B                 LDA     P1PL            ; Player Graphics Register 0
GAME:443E                 AND     #1100b          ; Collisition with the enemy? (Player 2/3)
GAME:4440                 BNE     _1
GAME:4442
GAME:4442 _2:                                     ; CODE XREF: COLCPTL+E↓j
GAME:4442                 RTS                     ; => Return
GAME:4443 ; ---------------------------------------------------------------------------
GAME:4443
GAME:4443 _1:                                     ; CODE XREF: COLCPTL+5↑j
GAME:4443                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4445                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:4447                 CMP     #25
GAME:4449                 BCS     _2              ; => Return
GAME:444B                 STA     byte_654
GAME:444E                 JMP     CRASH           ; Plane was crashed
GAME:444E ; End of function COLCPTL
GAME:444E
GAME:4451
GAME:4451 ; =============== S U B R O U T I N E =======================================
GAME:4451
GAME:4451 ; Check if the plane is too low to the ground. Warn via control display color and sound effect.
GAME:4451
GAME:4451 LOW:                                    ; CODE XREF: COMMON+45↑p
GAME:4451                 LDA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:4454                 BEQ     _5
GAME:4456                 CMP     #COLOR_INTENSITY_6|COLOR_ORANGE ; Flashing yellow = flying too low - a crash is imminent!
GAME:4458                 BEQ     _5
GAME:445A                 CMP     #COLOR_INTENSITY_2|COLOR_GOLD ; strafing altitude
GAME:445C                 BNE     _2              ; => Return
GAME:445E
GAME:445E _5:                                     ; CODE XREF: LOW+3↑j
GAME:445E                                         ; LOW+7↑j
GAME:445E                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4460                 SEC
GAME:4461                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:4463                 CMP     #24
GAME:4465                 BCC     _6              ; 24-29 => strafing altitude
GAME:4467                 CMP     #29
GAME:4469                 BCC     _3
GAME:446B
GAME:446B _8:                                     ; CODE XREF: LOW+35↓j
GAME:446B                 LDA     #COLOR_INTENSITY_0|COLOR_GRAY
GAME:446D                 JMP     _4
GAME:4470 ; ---------------------------------------------------------------------------
GAME:4470
GAME:4470 _3:                                     ; CODE XREF: LOW+18↑j
GAME:4470                 LDA     LOW_SND_FREQ    ; Sound flag when the plane is low to the ground
GAME:4473                 BEQ     _12             ; strafing altitude
GAME:4475                 LDA     #0
GAME:4477                 STA     LOW_SND_FREQ    ; Sound flag when the plane is low to the ground
GAME:447A                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:447D
GAME:447D _12:                                    ; CODE XREF: LOW+22↑j
GAME:447D                 LDA     #COLOR_INTENSITY_2|COLOR_GOLD ; strafing altitude
GAME:447F
GAME:447F _4:                                     ; CODE XREF: LOW+1C↑j
GAME:447F                                         ; LOW+5A↓j ...
GAME:447F                 STA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:4482
GAME:4482 _2:                                     ; CODE XREF: LOW+B↑j
GAME:4482                 RTS                     ; => Return
GAME:4483 ; ---------------------------------------------------------------------------
GAME:4483
GAME:4483 _6:                                     ; CODE XREF: LOW+14↑j
GAME:4483                 LDA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:4486                 BEQ     _8
GAME:4488                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:448A                 LSR     A
GAME:448B                 LSR     A
GAME:448C                 LSR     A
GAME:448D                 LSR     A
GAME:448E                 BCC     _10
GAME:4490                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:4493                 CMP     #_2|_C_BLUE
GAME:4495                 BCC     _10
GAME:4497                 LDA     #0
GAME:4499                 STA     AUDIO2_DURATION_COUNTER
GAME:449C                 LDA     #SND_FREQ_10
GAME:449E                 STA     AUDF2           ; Audio 2 Frequency Register
GAME:44A1                 STA     LOW_SND_FREQ    ; Sound flag when the plane is low to the ground
GAME:44A4                 LDA     #AUDIO_CONTROL_VOL_6|AUDIO_CONTROL_DIST_4
GAME:44A6                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:44A9                 LDA     #COLOR_INTENSITY_6|COLOR_ORANGE ; Flashing yellow = flying too low - a crash is imminent!
GAME:44AB                 BNE     _4
GAME:44AD
GAME:44AD _10:                                    ; CODE XREF: LOW+3D↑j
GAME:44AD                                         ; LOW+44↑j
GAME:44AD                 LDA     #0
GAME:44AF                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:44B2                 BEQ     _4
GAME:44B2 ; End of function LOW
GAME:44B2
GAME:44B4
GAME:44B4 ; =============== S U B R O U T I N E =======================================
GAME:44B4
GAME:44B4 ; Shoot plane bullet. Check if something was hit.
GAME:44B4
GAME:44B4 SHBT:                                   ; CODE XREF: TRIG__TRIGGER_MACHINE_GUN+61↑p
GAME:44B4                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:44B6                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:44B8                 CMP     #28
GAME:44BA                 BCC     _1
GAME:44BC
GAME:44BC _2:                                     ; CODE XREF: SHBT+3D↓j
GAME:44BC                                         ; SHBT+43↓j
GAME:44BC                 RTS                     ; => Return
GAME:44BD ; ---------------------------------------------------------------------------
GAME:44BD
GAME:44BD _1:                                     ; CODE XREF: SHBT+6↑j
GAME:44BD                 LDA     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:44BF                 STA     TEMP_ADR+1
GAME:44C1                 LDA     PLANE_BULLET_X_POS ; X-Position of the current bullet from the plane
GAME:44C4                 STA     TEMP_ADR
GAME:44C6                 JSR     ADA             ; Convert a X/Y position into an address to screen memory
GAME:44C9                 LDA     (TEMP_ADR),Y
GAME:44CB                 CMP     #L_TANK_LEFT_A|L_C_1
GAME:44CD                 BEQ     _7
GAME:44CF                 CMP     #L_TANK_RIGHT_A|L_C_1
GAME:44D1                 BEQ     _6
GAME:44D3                 CMP     #L_STREET_CAR_LEFT_COLOR_A|L_C_1
GAME:44D5                 BEQ     _7
GAME:44D7                 CMP     #L_STREET_CAR_LEFT_COLOR_B|L_C_1
GAME:44D9                 BEQ     _7
GAME:44DB                 CMP     #L_STREET_CAR_RIGHT_COLOR_A|L_C_1
GAME:44DD                 BEQ     _6
GAME:44DF                 CMP     #L_STREET_CAR_RIGHT_COLOR_B|L_C_1
GAME:44E1                 BEQ     _6
GAME:44E3                 CMP     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_0
GAME:44E5                 BEQ     _10
GAME:44E7                 CMP     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_1
GAME:44E9                 BEQ     _10
GAME:44EB                 CMP     #L_FIXED_BOAT_BOTTOM_LEFT|L_C_1
GAME:44ED                 BEQ     _5
GAME:44EF                 CMP     #L_FIXED_BOAT_BOTTOM_RIGHT|L_C_1
GAME:44F1                 BNE     _2              ; => Return
GAME:44F3                 DEY
GAME:44F4
GAME:44F4 _5:                                     ; CODE XREF: SHBT+39↑j
GAME:44F4                 DEC     RIVER_BOAT_HIT_COUNTER ; The boat requires 2 hits to be destroyed
GAME:44F7                 BNE     _2              ; => Return
GAME:44F9                 LDA     #0
GAME:44FB                 STA     byte_661
GAME:44FE                 LDA     DL-3,X
GAME:4501                 STA     PREVIOUS_TILE_ROW_PTR
GAME:4503                 LDA     DL-2,X
GAME:4506                 STA     PREVIOUS_TILE_ROW_PTR+1
GAME:4508                 JSR     S50__SCORE_ADD_50 ; Score: add 50
GAME:450B                 JSR     SL              ; Trigger explosion sound effect
GAME:450E                 LDA     #EXPLOSITION_TARGET_BOAT
GAME:4510
GAME:4510 _8:                                     ; CODE XREF: SHBT+73↓j
GAME:4510                 STA     VAR_EXPLOSION_TARGET
GAME:4513                 JSR     ADP
GAME:4516                 JMP     Z7
GAME:4519 ; ---------------------------------------------------------------------------
GAME:4519
GAME:4519 _10:                                    ; CODE XREF: SHBT+31↑j
GAME:4519                                         ; SHBT+35↑j
GAME:4519                 LDA     #0
GAME:451B                 STA     byte_661
GAME:451E                 STA     byte_698
GAME:4521
GAME:4521 _6:                                     ; CODE XREF: SHBT+1D↑j
GAME:4521                                         ; SHBT+29↑j ...
GAME:4521                 DEY
GAME:4522
GAME:4522 _7:                                     ; CODE XREF: SHBT+19↑j
GAME:4522                                         ; SHBT+21↑j ...
GAME:4522                 JSR     S10__SCORE_ADD_10 ; Score: add 10
GAME:4525                 LDA     #EXPLOSITION_TARGET_GRAS
GAME:4527                 JMP     _8
GAME:4527 ; End of function SHBT
GAME:4527
GAME:452A
GAME:452A ; =============== S U B R O U T I N E =======================================
GAME:452A
GAME:452A
GAME:452A ADP:                                    ; CODE XREF: SHBT+5F↑p
GAME:452A                 STY     VAR_EXPLOSION_X_POS
GAME:452D                 LDA     PLANE_BULLET_Y_POS ; Y-Position of the current bullet from the plane
GAME:452F                 TAY
GAME:4530                 ADC     #30
GAME:4532                 STA     byte_639
GAME:4535                 JSR     HG              ; Remove plane bullet
GAME:4538                 LDA     TEMP_ADR
GAME:453A                 STA     CURRENT_TILE_ROW_PTR
GAME:453C                 LDA     TEMP_ADR+1
GAME:453E                 STA     CURRENT_TILE_ROW_PTR+1
GAME:4540                 JSR     ABA             ; Save current color palette, because we start the flashing animation
GAME:4543                 RTS
GAME:4543 ; End of function ADP
GAME:4543
GAME:4544
GAME:4544 ; =============== S U B R O U T I N E =======================================
GAME:4544
GAME:4544 ; Convert a X/Y position into an address to screen memory
GAME:4544
GAME:4544 ADA:                                    ; CODE XREF: XPLSN+D↑p
GAME:4544                                         ; SHBT+12↑p
GAME:4544                 LDA     TEMP_ADR
GAME:4546                 SEC
GAME:4547                 SBC     #26
GAME:4549                 LSR     A
GAME:454A                 LSR     A
GAME:454B                 SEC
GAME:454C                 SBC     #2
GAME:454E                 TAY
GAME:454F                 LDA     TEMP_ADR+1
GAME:4551                 SEC
GAME:4552                 SBC     #8
GAME:4554                 LSR     A
GAME:4555                 LSR     A
GAME:4556                 LSR     A
GAME:4557                 STA     TEMP_B0
GAME:4559                 ASL     A
GAME:455A                 CLC
GAME:455B                 ADC     TEMP_B0
GAME:455D                 TAX
GAME:455E                 LDA     DL,X
GAME:4561                 STA     TEMP_ADR
GAME:4563                 LDA     DL+1,X
GAME:4566                 STA     TEMP_ADR+1
GAME:4568                 RTS
GAME:4568 ; End of function ADA
GAME:4568
GAME:4569
GAME:4569 ; =============== S U B R O U T I N E =======================================
GAME:4569
GAME:4569
GAME:4569 CKSC:                                   ; CODE XREF: COMMON+66↑p
GAME:4569                 LDY     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:456C                 CPY     #GAME_LEVEL_ADVANCED
GAME:456E                 BEQ     locret_45A4     ; => Return
GAME:4570
GAME:4570                 LDA     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:4573                 LDX     #6
GAME:4575                 CMP     REQUIRED_TARGETS ; Number of required primary targets to progress (8 or 9 by random)
GAME:4578                 BCS     loc_459B
GAME:457A                 LDA     SC_STATUS_LINE.line_2.score_digit_1000
GAME:457D                 BNE     loc_459B
GAME:457F                 LDA     SC_STATUS_LINE.line_2.score_digit_100
GAME:4582                 SEC
GAME:4583                 SBC     #_0|_C_BLUE
GAME:4585                 CLC
GAME:4586                 ADC     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:4589                 BEQ     locret_45A4     ; => Return
GAME:458B                 CMP     #3
GAME:458D                 BCC     loc_45A5
GAME:458F                 CMP     #5
GAME:4591                 BCC     loc_45B3
GAME:4593                 CMP     #7
GAME:4595                 BCC     loc_45C1
GAME:4597                 CMP     #9
GAME:4599                 BCC     loc_45CB
GAME:459B
GAME:459B loc_459B:                               ; CODE XREF: CKSC+F↑j
GAME:459B                                         ; CKSC+14↑j ...
GAME:459B                 LDA     EAS9,X          ; Advanced level variables
GAME:459E                 STA     DIFF,X          ; Difficulty for the level
GAME:45A1                 DEX
GAME:45A2                 BPL     loc_459B
GAME:45A4
GAME:45A4 locret_45A4:                            ; CODE XREF: CKSC+5↑j
GAME:45A4                                         ; CKSC+20↑j ...
GAME:45A4                 RTS                     ; => Return
GAME:45A5 ; ---------------------------------------------------------------------------
GAME:45A5
GAME:45A5 loc_45A5:                               ; CODE XREF: CKSC+24↑j
GAME:45A5                                         ; CKSC+47↓j
GAME:45A5                 CPY     #0
GAME:45A7                 BNE     locret_45A4     ; => Return
GAME:45A9                 LDA     EAS2,X          ; Wind triggered, if RANDOM < value
GAME:45AC                 STA     DIFF,X          ; Difficulty for the level
GAME:45AF                 DEX
GAME:45B0                 BPL     loc_45A5
GAME:45B2                 RTS
GAME:45B3 ; ---------------------------------------------------------------------------
GAME:45B3
GAME:45B3 loc_45B3:                               ; CODE XREF: CKSC+28↑j
GAME:45B3                                         ; CKSC+55↓j
GAME:45B3                 CPY     #0
GAME:45B5                 BNE     locret_45A4     ; => Return
GAME:45B7                 LDA     EAS4,X          ; Wind triggered, if RANDOM < value
GAME:45BA                 STA     DIFF,X          ; Difficulty for the level
GAME:45BD                 DEX
GAME:45BE                 BPL     loc_45B3
GAME:45C0                 RTS
GAME:45C1 ; ---------------------------------------------------------------------------
GAME:45C1
GAME:45C1 loc_45C1:                               ; CODE XREF: CKSC+2C↑j
GAME:45C1                                         ; CKSC+5F↓j
GAME:45C1                 LDA     EAS6,X          ; Intermediate level variables
GAME:45C4                 STA     DIFF,X          ; Difficulty for the level
GAME:45C7                 DEX
GAME:45C8                 BPL     loc_45C1
GAME:45CA                 RTS
GAME:45CB ; ---------------------------------------------------------------------------
GAME:45CB
GAME:45CB loc_45CB:                               ; CODE XREF: CKSC+30↑j
GAME:45CB                                         ; CKSC+69↓j
GAME:45CB                 LDA     EAS8,X          ; Wind triggered, if RANDOM < value
GAME:45CE                 STA     DIFF,X          ; Difficulty for the level
GAME:45D1                 DEX
GAME:45D2                 BPL     loc_45CB
GAME:45D4                 RTS
GAME:45D4 ; End of function CKSC
GAME:45D4
GAME:45D5
GAME:45D5 ; =============== S U B R O U T I N E =======================================
GAME:45D5
GAME:45D5
GAME:45D5 XCPTL:                                  ; CODE XREF: CPTL:_1↑p
GAME:45D5                 JSR     COLCPTL         ; Player collision with enemy?
GAME:45D8                 LDA     byte_6C5
GAME:45DB                 BNE     _1
GAME:45DD                 RTS
GAME:45DE ; ---------------------------------------------------------------------------
GAME:45DE
GAME:45DE _1:                                     ; CODE XREF: XCPTL+6↑j
GAME:45DE                 DEC     byte_6C4
GAME:45E1                 LDA     byte_6C4
GAME:45E4                 LSR     A
GAME:45E5                 LSR     A
GAME:45E6                 BCC     _2
GAME:45E8                 LDX     #COLOR_INTENSITY_0|COLOR_RED_ORANGE
GAME:45EA                 JMP     _3
GAME:45ED ; ---------------------------------------------------------------------------
GAME:45ED
GAME:45ED _2:                                     ; CODE XREF: XCPTL+11↑j
GAME:45ED                 LDX     #COLOR_INTENSITY_12|COLOR_ORANGE
GAME:45EF
GAME:45EF _3:                                     ; CODE XREF: XCPTL+15↑j
GAME:45EF                 STX     PCOLR2          ; P2 COLOR
GAME:45F2                 LDX     byte_6C6
GAME:45F5                 LSR     A
GAME:45F6                 LSR     A
GAME:45F7                 BCC     _4
GAME:45F9                 CPX     #1
GAME:45FB                 BEQ     _6              ; => Return
GAME:45FD                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:45FF                 CLC
GAME:4600                 ADC     #8
GAME:4602                 STA     ENEMY_X_POS     ; Enemy X position
GAME:4604                 LDA     #1
GAME:4606                 JMP     _5
GAME:4609 ; ---------------------------------------------------------------------------
GAME:4609
GAME:4609 _4:                                     ; CODE XREF: XCPTL+22↑j
GAME:4609                 CPX     #3
GAME:460B                 BEQ     _6              ; => Return
GAME:460D                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:460F                 SEC
GAME:4610                 SBC     #8
GAME:4612                 STA     ENEMY_X_POS     ; Enemy X position
GAME:4614                 LDA     #11b
GAME:4616
GAME:4616 _5:                                     ; CODE XREF: XCPTL+31↑j
GAME:4616                 STA     M2PL_SIZEP2     ; Missle to Player 2 Collision / Player 2 Size
GAME:4619                 STA     byte_6C6
GAME:461C
GAME:461C _6:                                     ; CODE XREF: XCPTL+26↑j
GAME:461C                                         ; XCPTL+36↑j
GAME:461C                 RTS                     ; => Return
GAME:461C ; End of function XCPTL
GAME:461C
GAME:461D
GAME:461D ; =============== S U B R O U T I N E =======================================
GAME:461D
GAME:461D
GAME:461D BMCPTL:                                 ; CODE XREF: BOMB+B9↑p
GAME:461D                 LDA     CURRENT_GAME_PHASE
GAME:461F                 CMP     #GAME_PHASE_6
GAME:4621                 BEQ     _1
GAME:4623                 CMP     #GAME_PHASE_7
GAME:4625                 BEQ     _1
GAME:4627
GAME:4627 _2:                                     ; CODE XREF: BMCPTL+10↓j
GAME:4627                                         ; BMCPTL+22↓j
GAME:4627                 RTS                     ; => Return
GAME:4628 ; ---------------------------------------------------------------------------
GAME:4628
GAME:4628 _1:                                     ; CODE XREF: BMCPTL+4↑j
GAME:4628                                         ; BMCPTL+8↑j
GAME:4628                 LDA     M1PL            ; Missle to Player 1 Collision
GAME:462B                 AND     #1100b
GAME:462D                 BEQ     _2              ; => Return
GAME:462F
GAME:462F                 LDA     GAME_COMPLETION_MASK
GAME:4632                 LDX     PCOLR2          ; P2 COLOR
GAME:4635                 CPX     #COLOR_INTENSITY_2|COLOR_RED_ORANGE
GAME:4637                 BEQ     _3
GAME:4639                 CPX     #COLOR_INTENSITY_0|COLOR_DARK_PURPLE
GAME:463B                 BEQ     _4
GAME:463D                 CPX     #COLOR_INTENSITY_0|COLOR_PURPLE_BLUE
GAME:463F                 BNE     _2              ; => Return
GAME:4641                 ORA     #FINAL_TARGET_3
GAME:4643                 JMP     _5
GAME:4646 ; ---------------------------------------------------------------------------
GAME:4646
GAME:4646 _3:                                     ; CODE XREF: BMCPTL+1A↑j
GAME:4646                 ORA     #FINAL_TARGET_1
GAME:4648                 JMP     _5
GAME:464B ; ---------------------------------------------------------------------------
GAME:464B
GAME:464B _4:                                     ; CODE XREF: BMCPTL+1E↑j
GAME:464B                 ORA     #FINAL_TARGET_2
GAME:464D
GAME:464D _5:                                     ; CODE XREF: BMCPTL+26↑j
GAME:464D                                         ; BMCPTL+2B↑j
GAME:464D                 STA     GAME_COMPLETION_MASK
GAME:4650
GAME:4650                 JSR     S500__SCORE_ADD_500 ; Score: add 500
GAME:4653                 LDX     #18
GAME:4655                 LDY     CAPITAL_Y_POS
GAME:4658
GAME:4658 _6:                                     ; CODE XREF: BMCPTL+48↓j
GAME:4658                 LDA     #0
GAME:465A                 STA     P3,Y            ; Enemy (second color)
GAME:465D                 LDA     XCPTLIM-1,X     ; explosion off the final targets
GAME:4660                 STA     P2,Y            ; Enemy (first color)
GAME:4663                 DEY
GAME:4664                 DEX
GAME:4665                 BNE     _6
GAME:4667
GAME:4667                 INC     byte_6C3
GAME:466A                 LDA     #16
GAME:466C                 STA     COLOR_FLASHING  ; Flashing the screen counter (0=flashing disabled, >0:duration of the flashing)
GAME:466F                 STA     byte_6C4
GAME:4672                 STA     byte_6C5
GAME:4675                 LDA     #26
GAME:4677                 STA     QUAKE_ANIMATION_COUNTER ; Quake, shake via the scroll register, timer
GAME:467A                 LDA     #70
GAME:467C                 LDX     #AUDIO_CONTROL_VOL_14|AUDIO_CONTROL_DIST_1
GAME:467E                 JMP     XXX             ; Start Audio 3 sound effect
GAME:467E ; End of function BMCPTL
GAME:467E
GAME:4681
GAME:4681 ; =============== S U B R O U T I N E =======================================
GAME:4681
GAME:4681 ; Skyscraper explosition via tile animation
GAME:4681
GAME:4681 ACL:                                    ; CODE XREF: ID:ACK↑j
GAME:4681                 LDX     #7
GAME:4683                 LDA     EXPLOSION_TILE_ANIMATION
GAME:4686                 LSR     A
GAME:4687                 LSR     A
GAME:4688                 BCC     _1
GAME:468A                 LSR     A
GAME:468B                 BCC     _2
GAME:468D                 JSR     DFBLDG          ; Final target phase: define skyscraper buildings
GAME:4690                 RTS
GAME:4691 ; ---------------------------------------------------------------------------
GAME:4691
GAME:4691 _2:                                     ; CODE XREF: ACL+A↑j
GAME:4691                                         ; ACL+17↓j
GAME:4691                 LDA     ABC,X           ; Tile: explosion 1 on gras
GAME:4694                 JSR     ABV
GAME:4697                 DEX
GAME:4698                 BPL     _2
GAME:469A                 RTS
GAME:469B ; ---------------------------------------------------------------------------
GAME:469B
GAME:469B _1:                                     ; CODE XREF: ACL+7↑j
GAME:469B                                         ; ACL+21↓j
GAME:469B                 LDA     ABD,X           ; Tile: explosion 2 on gras
GAME:469E                 JSR     ABV
GAME:46A1                 DEX
GAME:46A2                 BPL     _1
GAME:46A4                 RTS
GAME:46A4 ; End of function ACL
GAME:46A4
GAME:46A5
GAME:46A5 ; =============== S U B R O U T I N E =======================================
GAME:46A5
GAME:46A5
GAME:46A5 ABV:                                    ; CODE XREF: ACL+13↑p
GAME:46A5                                         ; ACL+1D↑p
GAME:46A5                 STA     ABW,X           ; $54:
GAME:46A8                 STA     ABX,X           ; $56:
GAME:46AB                 STA     ABY,X           ; $58:
GAME:46AE                 STA     ABZ,X           ; $5A:
GAME:46B1                 STA     ACA,X           ; $5C:
GAME:46B4                 STA     ACB,X           ; $5E:
GAME:46B7                 STA     ACC,X           ; $55:
GAME:46BA                 STA     ACD,X           ; $59:
GAME:46BD                 STA     ACE,X           ; $57:
GAME:46C0                 STA     ACF,X           ; $5D:
GAME:46C3                 RTS
GAME:46C3 ; End of function ABV
GAME:46C3
GAME:46C4
GAME:46C4 ; =============== S U B R O U T I N E =======================================
GAME:46C4
GAME:46C4 ; Final target phase: define skyscraper buildings
GAME:46C4
GAME:46C4 DFBLDG:                                 ; CODE XREF: BLDG+9A↑p
GAME:46C4                                         ; B7+A6↑p ...
GAME:46C4                 LDX     #7
GAME:46C6
GAME:46C6 _1:                                     ; CODE XREF: DFBLDG+3F↓j
GAME:46C6                 LDA     ACG,X           ; $01: Water (top), Grass
GAME:46C9                 STA     ABW,X           ; $54:
GAME:46CC                 LDA     ACH,X           ; $02: Water
GAME:46CF                 STA     ABX,X           ; $56:
GAME:46D2                 LDA     ACI,X           ; $60:
GAME:46D5                 STA     ABY,X           ; $58:
GAME:46D8                 LDA     ABO,X           ; Tile: building
GAME:46DB                 STA     ABZ,X           ; $5A:
GAME:46DE                 LDA     ABP,X           ; Tile: building roof
GAME:46E1                 STA     ACA,X           ; $5C:
GAME:46E4                 LDA     ABN,X           ; Tile: building
GAME:46E7                 STA     ACB,X           ; $5E:
GAME:46EA                 LDA     ABR,X           ; 8 zero bytes (used for initialization)
GAME:46ED                 STA     ACC,X           ; $55:
GAME:46F0                 LDA     ABT,X           ; Tile: building
GAME:46F3                 STA     ACD,X           ; $59:
GAME:46F6                 LDA     ACJ,X           ; Tile: target
GAME:46F9                 STA     ACE,X           ; $57:
GAME:46FC                 LDA     ABL,X           ; Tile: building wall/window
GAME:46FF                 STA     ACF,X           ; $5D:
GAME:4702                 DEX
GAME:4703                 BPL     _1
GAME:4705                 RTS
GAME:4705 ; End of function DFBLDG
GAME:4705
GAME:4706
GAME:4706 ; =============== S U B R O U T I N E =======================================
GAME:4706
GAME:4706 ; Buildings explosion via tile animation
GAME:4706
GAME:4706 ABB:                                    ; CODE XREF: ID:ABF↑j
GAME:4706                 LDX     #7
GAME:4708                 LDA     EXPLOSION_TILE_ANIMATION
GAME:470B                 LSR     A
GAME:470C                 LSR     A
GAME:470D                 BCC     _1
GAME:470F                 LSR     A
GAME:4710                 BCC     _2
GAME:4712                 JSR     DFTNK
GAME:4715                 RTS
GAME:4716 ; ---------------------------------------------------------------------------
GAME:4716
GAME:4716 _2:                                     ; CODE XREF: ABB+A↑j
GAME:4716                                         ; ABB+17↓j
GAME:4716                 LDA     ABC,X           ; Tile: explosion 1 on gras
GAME:4719                 JSR     ABK
GAME:471C                 DEX
GAME:471D                 BPL     _2
GAME:471F                 RTS
GAME:4720 ; ---------------------------------------------------------------------------
GAME:4720
GAME:4720 _1:                                     ; CODE XREF: ABB+7↑j
GAME:4720                                         ; ABB+21↓j
GAME:4720                 LDA     ABD,X           ; Tile: explosion 2 on gras
GAME:4723                 JSR     ABK
GAME:4726                 DEX
GAME:4727                 BPL     _1
GAME:4729                 RTS
GAME:4729 ; End of function ABB
GAME:4729
GAME:472A
GAME:472A ; =============== S U B R O U T I N E =======================================
GAME:472A
GAME:472A
GAME:472A ABK:                                    ; CODE XREF: ABB+13↑p
GAME:472A                                         ; ABB+1D↑p
GAME:472A                 STA     ABE,X           ; $45:
GAME:472D                 STA     ABQ,X           ; $3F: Black tile
GAME:4730                 STA     ABG,X           ; $4F:
GAME:4733                 STA     ABH,X           ; $49:
GAME:4736                 STA     ABI,X           ; $4A:
GAME:4739                 STA     ABJ,X           ; $12: Runway, Road
GAME:473C                 STA     ABS,X           ; $7F:
GAME:473F                 RTS
GAME:473F ; End of function ABK
GAME:473F
GAME:4740
GAME:4740 ; =============== S U B R O U T I N E =======================================
GAME:4740
GAME:4740
GAME:4740 DFTNK:                                  ; CODE XREF: QN+4C↑p
GAME:4740                                         ; B7+A3↑p ...
GAME:4740                 LDX     #7
GAME:4742
GAME:4742 _1:                                     ; CODE XREF: DFTNK+2D↓j
GAME:4742                 LDA     ABL,X           ; Tile: building wall/window
GAME:4745                 STA     ABE,X           ; $45:
GAME:4748                 LDA     ABM,X           ; $7D:
GAME:474B                 STA     ABG,X           ; $4F:
GAME:474E                 LDA     ABN,X           ; Tile: building
GAME:4751                 STA     ABH,X           ; $49:
GAME:4754                 LDA     ABO,X           ; Tile: building
GAME:4757                 STA     ABI,X           ; $4A:
GAME:475A                 LDA     ABP,X           ; Tile: building roof
GAME:475D                 STA     ABJ,X           ; $12: Runway, Road
GAME:4760                 LDA     ABR,X           ; 8 zero bytes (used for initialization)
GAME:4763                 STA     ABQ,X           ; $3F: Black tile
GAME:4766                 LDA     ABT,X           ; Tile: building
GAME:4769                 STA     ABS,X           ; $7F:
GAME:476C                 DEX
GAME:476D                 BPL     _1
GAME:476F                 RTS
GAME:476F ; End of function DFTNK
GAME:476F
GAME:4770
GAME:4770 ; =============== S U B R O U T I N E =======================================
GAME:4770
GAME:4770
GAME:4770 XSHIP:                                  ; CODE XREF: TURN+12D↑p
GAME:4770                 LDA     byte_B1
GAME:4772                 BEQ     _1
GAME:4774                 RTS
GAME:4775 ; ---------------------------------------------------------------------------
GAME:4775
GAME:4775 _1:                                     ; CODE XREF: XSHIP+2↑j
GAME:4775                 LDA     CRASH_EXPLOSION_COUNTER ; Duration counter for the plane explosion
GAME:4777                 LSR     A
GAME:4778                 LSR     A
GAME:4779                 LSR     A
GAME:477A                 BCC     _2
GAME:477C                 LDA     #COLOR_INTENSITY_10|COLOR_ORANGE
GAME:477E                 BNE     _3
GAME:4780
GAME:4780 _2:                                     ; CODE XREF: XSHIP+A↑j
GAME:4780                 LDA     #COLOR_INTENSITY_0|COLOR_RED_ORANGE
GAME:4782
GAME:4782 _3:                                     ; CODE XREF: XSHIP+E↑j
GAME:4782                 STA     PCOLR2          ; P2 COLOR
GAME:4785                 RTS
GAME:4785 ; End of function XSHIP
GAME:4785
GAME:4786
GAME:4786 ; =============== S U B R O U T I N E =======================================
GAME:4786
GAME:4786
GAME:4786 PBMB:                                   ; CODE XREF: COMMON+13↑p
GAME:4786                                         ; REFUEL+20↑p ...
GAME:4786                 LDA     byte_FD
GAME:4788                 CMP     #255
GAME:478A                 BEQ     _1
GAME:478C                 CMP     #254
GAME:478E                 BEQ     _2
GAME:4790
GAME:4790 _3:                                     ; CODE XREF: PBMB+13↓j
GAME:4790                                         ; PBMB+1D↓j
GAME:4790                 RTS                     ; => Return
GAME:4791 ; ---------------------------------------------------------------------------
GAME:4791
GAME:4791 _1:                                     ; CODE XREF: PBMB+4↑j
GAME:4791                 STA     VAR_UNKNOWN_STATE
GAME:4794                 LDA     VVBLKD          ; DEFERRED VERTICAL BLANK NMI VECTOR
GAME:4797                 CMP     #>VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:4799                 BEQ     _3              ; => Return
GAME:479B                 JSR     BMBR
GAME:479E                 LDA     RANDOM          ; Random Number Generator
GAME:47A1                 AND     #$3F ; '?'
GAME:47A3                 BNE     _3              ; => Return
GAME:47A5                 STA     ENEMY_TURN_MODE ; 0=none, 1=left, 2=right, >2=any
GAME:47A8                 JSR     OG
GAME:47AB                 LDA     #1
GAME:47AD                 STA     byte_6A8
GAME:47B0                 LDA     #70
GAME:47B2                 STA     byte_62F
GAME:47B5                 LDA     #UNKNOWNS_STATE_4
GAME:47B7                 STA     VAR_UNKNOWN_STATE
GAME:47BA                 LDA     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:47BC                 LSR     A
GAME:47BD                 STA     TEMP_B0
GAME:47BF                 LDA     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:47C1                 LSR     A
GAME:47C2                 ADC     TEMP_B0
GAME:47C4                 ADC     #7
GAME:47C6                 STA     TEMP_B0
GAME:47C8                 SBC     #15
GAME:47CA                 STA     ENEMY_X_POS     ; Enemy X position
GAME:47CC
GAME:47CC _5:                                     ; CODE XREF: PBMB+57↓j
GAME:47CC                                         ; PBMB+61↓j
GAME:47CC                 LDA     RANDOM          ; Random Number Generator
GAME:47CF                 AND     #$7F
GAME:47D1                 STA     byte_6E3
GAME:47D4                 LSR     A
GAME:47D5                 ADC     #93
GAME:47D7                 CMP     ENEMY_X_POS     ; Enemy X position
GAME:47D9                 BCC     _4
GAME:47DB                 CMP     TEMP_B0
GAME:47DD                 BCC     _5
GAME:47DF
GAME:47DF _4:                                     ; CODE XREF: PBMB+53↑j
GAME:47DF                 ADC     #35
GAME:47E1                 CMP     ENEMY_X_POS     ; Enemy X position
GAME:47E3                 BCC     _6
GAME:47E5                 CMP     TEMP_B0
GAME:47E7                 BCC     _5
GAME:47E9
GAME:47E9 _6:                                     ; CODE XREF: PBMB+5D↑j
GAME:47E9                 LDA     byte_6E3
GAME:47EC                 STA     ENEMY_X_POS     ; Enemy X position
GAME:47EE                 STA     HPOSP2          ; Enemy (Horizontal Position – first color)
GAME:47F1                 STA     HPOSP3          ; Enemy (Horizontal Position – second color)
GAME:47F4                 LDA     #254
GAME:47F6                 STA     byte_FD
GAME:47F8                 RTS
GAME:47F9 ; ---------------------------------------------------------------------------
GAME:47F9
GAME:47F9 _2:                                     ; CODE XREF: PBMB+8↑j
GAME:47F9                 LDA     #AUDIO_CONTROL_VOL_3|AUDIO_CONTROL_DIST_6
GAME:47FB                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:47FE                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:4800                 LSR     A
GAME:4801                 BCC     BMBR
GAME:4803                 JSR     L6
GAME:4806                 LDA     byte_FD
GAME:4808                 BNE     BMBR
GAME:480A                 LDA     AUDC1_SHADOW
GAME:480D                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:4810                 LDA     VVBLKD          ; DEFERRED VERTICAL BLANK NMI VECTOR
GAME:4813                 CMP     #>VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:4815                 BEQ     BMBR
GAME:4817                 DEC     byte_FD
GAME:4817 ; End of function PBMB
GAME:4817
GAME:4819
GAME:4819 ; =============== S U B R O U T I N E =======================================
GAME:4819
GAME:4819
GAME:4819 BMBR:                                   ; CODE XREF: PBMB+15↑p
GAME:4819                                         ; PBMB+7B↑j ...
GAME:4819                 JSR     XPLSN
GAME:481C                 JSR     SPLASH          ; Splash sound effect on channel 2
GAME:481F                 JSR     XFLSH           ; Flash the screen colors after e.g. a crash
GAME:4822                 LDY     byte_FA
GAME:4824                 BNE     AFS
GAME:4826                 LDA     VVBLKD          ; DEFERRED VERTICAL BLANK NMI VECTOR
GAME:4829                 CMP     #>VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:482B                 BNE     _33
GAME:482D                 LDA     EXPLOSION_TILE_ANIMATION
GAME:4830                 BEQ     _3              ; => Return
GAME:4832                 LDA     #2
GAME:4834                 STA     EXPLOSION_TILE_ANIMATION
GAME:4837                 RTS
GAME:4838 ; ---------------------------------------------------------------------------
GAME:4838
GAME:4838 _33:                                    ; CODE XREF: BMBR+12↑j
GAME:4838                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:483A                 CMP     #170
GAME:483C                 BCS     _3              ; => Return
GAME:483E                 LDA     VAR_UNKNOWN_STATE
GAME:4841                 CMP     #UNKNOWNS_STATE_5
GAME:4843                 BNE     _3              ; => Return
GAME:4845                 LDA     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:4848                 CMP     #2
GAME:484A                 BCS     _3              ; => Return
GAME:484C                 LDA     RANDOM          ; Random Number Generator
GAME:484F                 AND     #$1F
GAME:4851                 BEQ     _2
GAME:4853
GAME:4853 _3:                                     ; CODE XREF: BMBR+17↑j
GAME:4853                                         ; BMBR+23↑j ...
GAME:4853                 RTS                     ; => Return
GAME:4854 ; ---------------------------------------------------------------------------
GAME:4854
GAME:4854 _2:                                     ; CODE XREF: BMBR+38↑j
GAME:4854                 LDA     ENEMY_X_POS     ; Enemy X position
GAME:4856                 SEC
GAME:4857                 SBC     PLANE_HORI_POS  ; Horizontal Position of the Plane
GAME:4859                 BCC     _82
GAME:485B                 CMP     #12
GAME:485D                 BCS     _82
GAME:485F                 LDA     byte_C2
GAME:4861                 SBC     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4863                 CMP     #20
GAME:4865                 BCS     _3              ; => Return
GAME:4867
GAME:4867 _82:                                    ; CODE XREF: BMBR+40↑j
GAME:4867                                         ; BMBR+44↑j
GAME:4867                 LDX     #2
GAME:4869
GAME:4869 _4_:                                    ; CODE XREF: BMBR+58↓j
GAME:4869                 LDA     PLANE_HORI_POS,X ; Horizontal Position of the Plane
GAME:486B                 PHA
GAME:486C                 LDA     ENEMY_X_POS,X   ; Enemy X position
GAME:486E                 STA     PLANE_HORI_POS,X ; Horizontal Position of the Plane
GAME:4870                 DEX
GAME:4871                 BPL     _4_
GAME:4873                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4875                 SBC     #8
GAME:4877                 STA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4879                 JSR     PC
GAME:487C                 LDX     #0
GAME:487E
GAME:487E _5:                                     ; CODE XREF: BMBR+6B↓j
GAME:487E                 PLA
GAME:487F                 STA     PLANE_HORI_POS,X ; Horizontal Position of the Plane
GAME:4881                 INX
GAME:4882                 CPX     #3
GAME:4884                 BNE     _5
GAME:4886                 RTS
GAME:4887 ; ---------------------------------------------------------------------------
GAME:4887
GAME:4887 AFS:                                    ; CODE XREF: BMBR+B↑j
GAME:4887                 LDA     VVBLKD          ; DEFERRED VERTICAL BLANK NMI VECTOR
GAME:488A                 CMP     #>VBIR__DEFERRED_VBL_DRAW ; Deferred VBL: scroll the playfield and play sound
GAME:488C                 BNE     _1
GAME:488E                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4890                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:4892                 CMP     #20
GAME:4894                 BCS     _8              ; => Return
GAME:4896                 LDA     EXPLOSION_TILE_ANIMATION
GAME:4899                 BEQ     _3_
GAME:489B                 LDA     #1
GAME:489D                 STA     EXPLOSION_TILE_ANIMATION
GAME:48A0
GAME:48A0 _3_:                                    ; CODE XREF: BMBR+80↑j
GAME:48A0                 JSR     BOMB            ; Trigger bomb drop
GAME:48A3                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:48A5                 LSR     A
GAME:48A6                 BCC     _8              ; => Return
GAME:48A8                 DEC     byte_623
GAME:48AB                 LDA     byte_623
GAME:48AE                 STA     P1PF_HPOSM1     ; Missile 1 Horizontal Position / Player 1 to Playfield Collision
GAME:48B1
GAME:48B1 _8:                                     ; CODE XREF: BMBR+7B↑j
GAME:48B1                                         ; BMBR+8D↑j
GAME:48B1                 RTS                     ; => Return
GAME:48B2 ; ---------------------------------------------------------------------------
GAME:48B2
GAME:48B2 _1:                                     ; CODE XREF: BMBR+73↑j
GAME:48B2                 LDA     M1PL            ; Missle to Player 1 Collision
GAME:48B5                 AND     #1
GAME:48B7                 BEQ     _4
GAME:48B9                 PLA
GAME:48BA                 PLA
GAME:48BB                 JMP     CRASH           ; Plane was crashed
GAME:48BE ; ---------------------------------------------------------------------------
GAME:48BE
GAME:48BE _4:                                     ; CODE XREF: BMBR+9E↑j
GAME:48BE                 JMP     BOMB            ; Trigger bomb drop
GAME:48BE ; End of function BMBR
GAME:48BE
GAME:48C1
GAME:48C1 ; =============== S U B R O U T I N E =======================================
GAME:48C1
GAME:48C1
GAME:48C1 CDRP:                                   ; CODE XREF: CITY+2C↑p
GAME:48C1                 LDA     byte_6ED
GAME:48C4                 BNE     _1
GAME:48C6                 RTS
GAME:48C7 ; ---------------------------------------------------------------------------
GAME:48C7
GAME:48C7 _1:                                     ; CODE XREF: CDRP+3↑j
GAME:48C7                 LDA     AUDIO2_DROPSND_FREQ
GAME:48CA                 CMP     #70
GAME:48CC                 BCS     AFF
GAME:48CE                 JMP     DRPSND          ; Bomb drop sound
GAME:48CE ; End of function CDRP
GAME:48CE
GAME:48D1
GAME:48D1 ; =============== S U B R O U T I N E =======================================
GAME:48D1
GAME:48D1
GAME:48D1 AFF:                                    ; CODE XREF: BOMB+24↑p
GAME:48D1                                         ; CDRP+B↑j
GAME:48D1                 LDA     #0
GAME:48D3                 STA     byte_6ED
GAME:48D6                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:48D9                 JMP     AFE
GAME:48D9 ; End of function AFF
GAME:48D9
GAME:48DC
GAME:48DC ; =============== S U B R O U T I N E =======================================
GAME:48DC
GAME:48DC ; 2x1 tile explosion in water
GAME:48DC
GAME:48DC XI:                                     ; CODE XREF: ID:BD↑j
GAME:48DC                 LDA     EXPLOSION_TILE_ANIMATION
GAME:48DF                 LSR     A
GAME:48E0                 LSR     A
GAME:48E1                 BCC     _1
GAME:48E3                 LDA     #L_WATER_60|L_C_0
GAME:48E5                 JMP     _2
GAME:48E8 ; ---------------------------------------------------------------------------
GAME:48E8
GAME:48E8 _1:                                     ; CODE XREF: XI+5↑j
GAME:48E8                 LDA     #L_EXPLOSION_WATER_1|L_C_0
GAME:48EA
GAME:48EA _2:                                     ; CODE XREF: XI+9↑j
GAME:48EA                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:48EC                 INY
GAME:48ED                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:48EF                 RTS
GAME:48EF ; End of function XI
GAME:48EF
GAME:48F0
GAME:48F0 ; =============== S U B R O U T I N E =======================================
GAME:48F0
GAME:48F0
GAME:48F0 AFB:                                    ; CODE XREF: PC+2F↑j
GAME:48F0                 LDA     byte_C5
GAME:48F2                 BEQ     _1
GAME:48F4
GAME:48F4 _2:                                     ; CODE XREF: AFB+12↓j
GAME:48F4                 RTS                     ; => Return
GAME:48F5 ; ---------------------------------------------------------------------------
GAME:48F5
GAME:48F5 _1:                                     ; CODE XREF: AFB+2↑j
GAME:48F5                 LDA     byte_6EA
GAME:48F8                 CMP     #243
GAME:48FA                 BCS     _3
GAME:48FC                 CMP     #150
GAME:48FE                 BCC     _3
GAME:4900                 CMP     #213
GAME:4902                 BCC     _2              ; => Return
GAME:4904                 STA     byte_6EB
GAME:4907                 RTS
GAME:4908 ; ---------------------------------------------------------------------------
GAME:4908
GAME:4908 _3:                                     ; CODE XREF: AFB+A↑j
GAME:4908                                         ; AFB+E↑j
GAME:4908                 LDA     #1
GAME:490A                 STA     byte_6EB
GAME:490D                 LDA     byte_61F
GAME:4910                 SBC     #80
GAME:4912                 STA     byte_61F
GAME:4915                 RTS
GAME:4915 ; End of function AFB
GAME:4915
GAME:4916
GAME:4916 ; =============== S U B R O U T I N E =======================================
GAME:4916
GAME:4916 ; 2x1 tile explosion wall
GAME:4916
GAME:4916 AEI:                                    ; CODE XREF: ID:AEH↑j
GAME:4916                 LDA     EXPLOSION_TILE_ANIMATION
GAME:4919                 LSR     A
GAME:491A                 LSR     A
GAME:491B                 BCC     loc_4922
GAME:491D                 LDA     #L_SOLID_WALL|L_C_1
GAME:491F                 JMP     loc_4924
GAME:4922 ; ---------------------------------------------------------------------------
GAME:4922
GAME:4922 loc_4922:                               ; CODE XREF: AEI+5↑j
GAME:4922                 LDA     #L_EXPLOSION_5F|L_C_0
GAME:4924
GAME:4924 loc_4924:                               ; CODE XREF: AEI+9↑j
GAME:4924                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:4926                 INY
GAME:4927                 STA     (CURRENT_TILE_ROW_PTR),Y
GAME:4929                 RTS
GAME:4929 ; End of function AEI
GAME:4929
GAME:492A
GAME:492A ; =============== S U B R O U T I N E =======================================
GAME:492A
GAME:492A ; Airport hangar explosion via tile animation
GAME:492A
GAME:492A Z5:                                     ; CODE XREF: ID:Z4↑j
GAME:492A                 LDX     #7
GAME:492C                 LDA     EXPLOSION_TILE_ANIMATION
GAME:492F                 LSR     A
GAME:4930                 LSR     A
GAME:4931                 BCC     _1
GAME:4933                 LSR     A
GAME:4934                 BCC     _2
GAME:4936                 JMP     DFHNGR          ; Define Hangar – restore the font characters for the hangar
GAME:4939 ; ---------------------------------------------------------------------------
GAME:4939
GAME:4939 _2:                                     ; CODE XREF: Z5+A↑j
GAME:4939                                         ; Z5+16↓j
GAME:4939                 LDA     ABC,X           ; Tile: explosion 1 on gras
GAME:493C                 JSR     ADR             ; Set line X of the the hangar font characters
GAME:493F                 DEX
GAME:4940                 BPL     _2
GAME:4942                 RTS
GAME:4943 ; ---------------------------------------------------------------------------
GAME:4943
GAME:4943 _1:                                     ; CODE XREF: Z5+7↑j
GAME:4943                                         ; Z5+20↓j
GAME:4943                 LDA     ABD,X           ; Tile: explosion 2 on gras
GAME:4946                 JSR     ADR             ; Set line X of the the hangar font characters
GAME:4949                 DEX
GAME:494A                 BPL     _1
GAME:494C                 RTS
GAME:494C ; End of function Z5
GAME:494C
GAME:494D
GAME:494D ; =============== S U B R O U T I N E =======================================
GAME:494D
GAME:494D ; Set line X of the the hangar font characters
GAME:494D
GAME:494D ADR:                                    ; CODE XREF: Z5+12↑p
GAME:494D                                         ; Z5+1C↑p
GAME:494D                 STA     ADS,X           ; $15: Hangar (A)
GAME:4950                 STA     ADT,X           ; $16: Hangar (B)
GAME:4953                 STA     ADU,X           ; $17: Hangar (C)
GAME:4956                 STA     ADV,X           ; $18: Hangar (D)
GAME:4959                 STA     ADW,X           ; $19: Hangar (E)
GAME:495C                 STA     ADX,X           ; $1A: Hangar (F)
GAME:495F                 STA     ADY,X           ; $1B: Hangar (G)
GAME:4962                 STA     ADZ,X           ; $1D: Hangar (I)
GAME:4965                 STA     AEA,X           ; $1E: Hangar (J)
GAME:4968                 STA     AEB,X           ; $1F: Hangar (K)
GAME:496B                 STA     AEC,X           ; $20: Hangar (L)
GAME:496E                 STA     AED,X           ; $7E: Hangar (M) Black
GAME:4971                 STA     AEE,X           ; $1C: Hangar (H)
GAME:4974                 RTS
GAME:4974 ; End of function ADR
GAME:4974
GAME:4975
GAME:4975 ; =============== S U B R O U T I N E =======================================
GAME:4975
GAME:4975 ; Define Hangar – restore the font characters for the hangar
GAME:4975
GAME:4975 DFHNGR:                                 ; CODE XREF: RESET+277↑p
GAME:4975                                         ; ENRUN+2E↑j ...
GAME:4975                 LDX     #7
GAME:4977
GAME:4977 loc_4977:                               ; CODE XREF: DFHNGR+9↓j
GAME:4977                 LDA     ABR,X           ; 8 zero bytes (used for initialization)
GAME:497A                 STA     AED,X           ; $7E: Hangar (M) Black
GAME:497D                 DEX
GAME:497E                 BPL     loc_4977
GAME:4980                 LDX     #95
GAME:4982
GAME:4982 loc_4982:                               ; CODE XREF: DFHNGR+14↓j
GAME:4982                 LDA     AEG,X           ; Backup of the hangar font characters
GAME:4985                 STA     ADS,X           ; $15: Hangar (A)
GAME:4988                 DEX
GAME:4989                 BPL     loc_4982
GAME:498B                 RTS
GAME:498B ; End of function DFHNGR
GAME:498B
GAME:498C
GAME:498C ; =============== S U B R O U T I N E =======================================
GAME:498C
GAME:498C ; Count individual button presses during a landing
GAME:498C
GAME:498C TRIGC__TRIGGER_COUNT:                   ; CODE XREF: REFUEL+29↑p
GAME:498C                                         ; REFUEL:MU↑p ...
GAME:498C                 LDA     STRIG0          ; JOYSTICK TRIGGER 0
GAME:498F                 CMP     LAST_STRIG0     ; Last STRIG0 value (for debouncing)
GAME:4992                 BNE     _1
GAME:4994
GAME:4994 _2:                                     ; CODE XREF: TRIGC__TRIGGER_COUNT+F↓j
GAME:4994                 RTS                     ; => Return
GAME:4995 ; ---------------------------------------------------------------------------
GAME:4995
GAME:4995 _1:                                     ; CODE XREF: TRIGC__TRIGGER_COUNT+6↑j
GAME:4995                 STA     LAST_STRIG0     ; Last STRIG0 value (for debouncing)
GAME:4998                 LDA     LAST_STRIG0     ; Last STRIG0 value (for debouncing)
GAME:499B                 BNE     _2              ; => Return
GAME:499D                 INC     TRIGGER_COUNT   ; Increment with each button/trigger press
GAME:49A0                 RTS
GAME:49A0 ; End of function TRIGC__TRIGGER_COUNT
GAME:49A0
GAME:49A1
GAME:49A1 ; =============== S U B R O U T I N E =======================================
GAME:49A1
GAME:49A1 ; Restore anti-airgraft gun battery graphics at character $31
GAME:49A1
GAME:49A1 DFGN:                                   ; CODE XREF: RESET+188↑p
GAME:49A1                                         ; B7:U7↑p
GAME:49A1                 LDX     #7
GAME:49A3
GAME:49A3 _1:                                     ; CODE XREF: DFGN+9↓j
GAME:49A3                 LDA     ADI,X           ; Standard anti-aircraft gun battery. Used to restore after the final city anti-aircraft gun battery was used as  character $31.
GAME:49A6                 STA     ADK,X           ; $31: Anti-Aircraft Battery
GAME:49A9                 DEX
GAME:49AA                 BPL     _1
GAME:49AC                 RTS
GAME:49AC ; End of function DFGN
GAME:49AC
GAME:49AD
GAME:49AD ; =============== S U B R O U T I N E =======================================
GAME:49AD
GAME:49AD
GAME:49AD CTYGN:                                  ; CODE XREF: CITY+15↑p
GAME:49AD                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:49AF                 BNE     _2              ; => Return
GAME:49B1                 LDA     CURRENT_GAME_PHASE
GAME:49B3                 CMP     #GAME_PHASE_5
GAME:49B5                 BCC     _2              ; => Return
GAME:49B7                 BEQ     _3
GAME:49B9                 CMP     #GAME_PHASE_8
GAME:49BB                 BCC     _1
GAME:49BD
GAME:49BD _2:                                     ; CODE XREF: CTYGN+2↑j
GAME:49BD                                         ; CTYGN+8↑j ...
GAME:49BD                 RTS                     ; => Return
GAME:49BE ; ---------------------------------------------------------------------------
GAME:49BE
GAME:49BE _3:                                     ; CODE XREF: CTYGN+A↑j
GAME:49BE                 LDA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:49C0                 CMP     #4
GAME:49C2                 BNE     _2              ; => Return
GAME:49C4
GAME:49C4 _5:                                     ; CODE XREF: CTYGN+2A↓j
GAME:49C4                                         ; CTYGN+32↓j ...
GAME:49C4                 LDY     #25
GAME:49C6                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_0
GAME:49C8                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:49CA                 LDA     #32
GAME:49CC                 JMP     A2
GAME:49CF ; ---------------------------------------------------------------------------
GAME:49CF
GAME:49CF _1:                                     ; CODE XREF: CTYGN+E↑j
GAME:49CF                 LDA     GAME_PHASE_ROWS ; Length of a game phase in remaining rows
GAME:49D1                 CMP     #1
GAME:49D3                 BEQ     _4
GAME:49D5                 CMP     #13
GAME:49D7                 BEQ     _5
GAME:49D9                 CMP     #25
GAME:49DB                 BEQ     _4
GAME:49DD                 CMP     #37
GAME:49DF                 BEQ     _5
GAME:49E1                 CMP     #49
GAME:49E3                 BEQ     _4
GAME:49E5                 CMP     #61
GAME:49E7                 BEQ     _5
GAME:49E9                 CMP     #74
GAME:49EB                 BEQ     _4
GAME:49ED                 RTS
GAME:49EE ; ---------------------------------------------------------------------------
GAME:49EE
GAME:49EE _4:                                     ; CODE XREF: CTYGN+26↑j
GAME:49EE                                         ; CTYGN+2E↑j ...
GAME:49EE                 LDY     #25
GAME:49F0                 LDA     #L_ANTI_AIRCRAFT_BATTERY_A|L_C_0
GAME:49F2                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:49F4                 LDA     #32
GAME:49F6                 JMP     B3
GAME:49F6 ; End of function CTYGN
GAME:49F6
GAME:49F9 ; ---------------------------------------------------------------------------
GAME:49F9 ; START OF FUNCTION CHUNK FOR GUNC
GAME:49F9
GAME:49F9 ADC:                                    ; CODE XREF: GUNC+8↓j
GAME:49F9                 JMP     TB
GAME:49F9 ; END OF FUNCTION CHUNK FOR GUNC
GAME:49FC
GAME:49FC ; =============== S U B R O U T I N E =======================================
GAME:49FC
GAME:49FC
GAME:49FC GUNC:                                   ; CODE XREF: AREA+24↑p
GAME:49FC
GAME:49FC ; FUNCTION CHUNK AT GAME:4400 SIZE 0000003B BYTES
GAME:49FC ; FUNCTION CHUNK AT GAME:49F9 SIZE 00000003 BYTES
GAME:49FC
GAME:49FC                 LDA     CURRENT_GAME_PHASE
GAME:49FE                 CMP     #GAME_PHASE_4
GAME:4A00                 BEQ     _1
GAME:4A02                 CMP     #GAME_PHASE_8
GAME:4A04                 BEQ     ADC
GAME:4A06
GAME:4A06 _7:                                     ; CODE XREF: GUNC+1B↓j
GAME:4A06                 RTS                     ; => Return
GAME:4A07 ; ---------------------------------------------------------------------------
GAME:4A07
GAME:4A07 _1:                                     ; CODE XREF: GUNC+4↑j
GAME:4A07                 DEC     byte_6B1
GAME:4A0A                 LDA     byte_6B1
GAME:4A0D                 CMP     #18
GAME:4A0F                 BEQ     _2
GAME:4A11                 CMP     #6
GAME:4A13                 BEQ     _3
GAME:4A15                 CMP     #4
GAME:4A17                 BCC     _7              ; => Return
GAME:4A19                 LDA     RANDOM          ; Random Number Generator
GAME:4A1C                 LSR     A
GAME:4A1D                 BCC     _5
GAME:4A1F                 RTS
GAME:4A20 ; ---------------------------------------------------------------------------
GAME:4A20
GAME:4A20 _3:                                     ; CODE XREF: GUNC+17↑j
GAME:4A20                 LDA     #30
GAME:4A22                 STA     byte_6B1
GAME:4A25
GAME:4A25 _2:                                     ; CODE XREF: GUNC+13↑j
GAME:4A25                 LDA     #45
GAME:4A27                 STA     byte_BF
GAME:4A29                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:4A2C                 SEC
GAME:4A2D                 SBC     #10
GAME:4A2F                 TAY
GAME:4A30                 LDA     #L_ANTI_AIRCRAFT_BATTERY_B|L_C_1
GAME:4A32                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:4A34                 TYA
GAME:4A35                 CLC
GAME:4A36                 ADC     #7
GAME:4A38                 JSR     A2
GAME:4A3B                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:4A3E                 CLC
GAME:4A3F                 ADC     #1
GAME:4A41                 TAY
GAME:4A42                 LDA     #L_ANTI_AIRCRAFT_BATTERY_B|L_C_1
GAME:4A44                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:4A46                 TYA
GAME:4A47                 ADC     #7
GAME:4A49                 JMP     B3
GAME:4A4C ; ---------------------------------------------------------------------------
GAME:4A4C
GAME:4A4C _5:                                     ; CODE XREF: GUNC+21↑j
GAME:4A4C                 LDA     RANDOM          ; Random Number Generator
GAME:4A4F                 AND     #1111b
GAME:4A51                 STA     TEMP_B0
GAME:4A53                 LDA     RANDOM          ; Random Number Generator
GAME:4A56                 LSR     A
GAME:4A57                 BCC     _6
GAME:4A59                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:4A5C                 ADC     TEMP_B0
GAME:4A5E                 JMP     _4
GAME:4A61 ; ---------------------------------------------------------------------------
GAME:4A61
GAME:4A61 _6:                                     ; CODE XREF: GUNC+5B↑j
GAME:4A61                 LDA     ROAD_RIGHT_X_POS ; right X position where the road starts
GAME:4A64                 SBC     #12
GAME:4A66                 SBC     TEMP_B0
GAME:4A68
GAME:4A68 _4:                                     ; CODE XREF: GUNC+62↑j
GAME:4A68                 TAY
GAME:4A69                 LDA     #L_TANK_LEFT_B|L_C_1
GAME:4A6B                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:4A6D                 INY
GAME:4A6E                 LDA     #L_TANK_RIGHT_B|L_C_1
GAME:4A70                 STA     (VBL_NEXT_ROW_PTR),Y ; new row to be draw. Set inside the VBL.
GAME:4A72                 RTS
GAME:4A72 ; End of function GUNC
GAME:4A72
GAME:4A73
GAME:4A73 ; =============== S U B R O U T I N E =======================================
GAME:4A73
GAME:4A73 ; Play gound sound, if enabled
GAME:4A73
GAME:4A73 GGNSND:                                 ; CODE XREF: COMMON+5D↑p
GAME:4A73                 LDA     AUDIO4_GUN_SND_COUNTER
GAME:4A76                 BNE     _1
GAME:4A78                 RTS
GAME:4A79 ; ---------------------------------------------------------------------------
GAME:4A79
GAME:4A79 _1:                                     ; CODE XREF: GGNSND+3↑j
GAME:4A79                 DEC     AUDIO4_GUN_SND_COUNTER
GAME:4A7C                 BEQ     _2
GAME:4A7E                 LDA     AUDIO4_GUN_SND_COUNTER
GAME:4A81                 CMP     #4
GAME:4A83                 BCC     _3
GAME:4A85                 LSR     A
GAME:4A86                 LSR     A
GAME:4A87                 BCC     _2
GAME:4A89                 LDA     #AUDIO_CONTROL_VOL_7|AUDIO_CONTROL_DIST_2
GAME:4A8B                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:4A8E
GAME:4A8E _4:                                     ; CODE XREF: GGNSND+26↓j
GAME:4A8E                 LDA     #SND_FREQ_60
GAME:4A90                 STA     AUDF4           ; Audio 4 Frequency Register
GAME:4A93                 RTS
GAME:4A94 ; ---------------------------------------------------------------------------
GAME:4A94
GAME:4A94 _3:                                     ; CODE XREF: GGNSND+10↑j
GAME:4A94                 LDA     #AUDIO_CONTROL_VOL_5|AUDIO_CONTROL_DIST_1
GAME:4A96                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:4A99                 JMP     _4
GAME:4A9C ; ---------------------------------------------------------------------------
GAME:4A9C
GAME:4A9C _2:                                     ; CODE XREF: GGNSND+9↑j
GAME:4A9C                                         ; GGNSND+14↑j
GAME:4A9C                 LDA     #0
GAME:4A9E                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:4AA1                 RTS
GAME:4AA1 ; End of function GGNSND
GAME:4AA1
GAME:4AA2
GAME:4AA2 ; =============== S U B R O U T I N E =======================================
GAME:4AA2
GAME:4AA2 ; Increment Speed
GAME:4AA2
GAME:4AA2 TKOSPD__INCREMENT_SPEED:                ; CODE XREF: TAKOF__TAKEOFF_LOOP:_8↑p
GAME:4AA2                                         ; TAKOF__TAKEOFF_LOOP+40↑p
GAME:4AA2                 INC     SC_STATUS_LINE.line_1.speed_digit_1
GAME:4AA5                 LDA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:4AA8                 CMP     #_COLON|_C_ORANGE
GAME:4AAA                 BNE     _2              ; => Return
GAME:4AAC                 LDA     #_0|_C_ORANGE
GAME:4AAE                 STA     SC_STATUS_LINE.line_1.speed_digit_1
GAME:4AB1                 INC     SC_STATUS_LINE.line_1.speed_digit_10
GAME:4AB4                 LDA     SC_STATUS_LINE.line_1.speed_digit_10
GAME:4AB7                 CMP     #_COLON|_C_ORANGE
GAME:4AB9                 BNE     _2              ; => Return
GAME:4ABB                 LDX     #_1|_C_BLUE
GAME:4ABD                 STX     SC_STATUS_LINE.line_1.speed_digit_100
GAME:4AC0                 DEX
GAME:4AC1                 STX     SC_STATUS_LINE.line_1.speed_digit_10
GAME:4AC4                 STX     SC_STATUS_LINE.line_1.speed_digit_1
GAME:4AC7
GAME:4AC7 _2:                                     ; CODE XREF: TKOSPD__INCREMENT_SPEED+8↑j
GAME:4AC7                                         ; TKOSPD__INCREMENT_SPEED+17↑j
GAME:4AC7                 RTS                     ; => Return
GAME:4AC7 ; End of function TKOSPD__INCREMENT_SPEED
GAME:4AC7
GAME:4AC8
GAME:4AC8 ; =============== S U B R O U T I N E =======================================
GAME:4AC8
GAME:4AC8 ; Display List IRQ during the menu
GAME:4AC8
GAME:4AC8 DLIR1__DLIST_DURING_MENU:               ; DATA XREF: CNSL__CONSOLE+6F↓t
GAME:4AC8                                         ; CNSL__CONSOLE+74↓t
GAME:4AC8                 PHA
GAME:4AC9                 LDA     #COLOR_INTENSITY_0|COLOR_RED_ORANGE
GAME:4ACB                 STA     WSYNC           ; Wait for Horizontal Blank Synchronisation
GAME:4ACE                 STA     COLBK           ; Background Color
GAME:4AD1                 PLA
GAME:4AD2                 RTI
GAME:4AD2 ; End of function DLIR1__DLIST_DURING_MENU
GAME:4AD2
GAME:4AD3
GAME:4AD3 ; =============== S U B R O U T I N E =======================================
GAME:4AD3
GAME:4AD3 ; Read score from screen memory digits (range: 000-199 in tenths)
GAME:4AD3
GAME:4AD3 CLCSC__READ_SCORE_VALUE:                ; CODE XREF: RNK__DISPLAY_RANK+E↓p
GAME:4AD3                                         ; RNKX__PRINT_RANK_CLASS+11↓p
GAME:4AD3                 LDA     SC_STATUS_LINE.line_2.score_digit_10
GAME:4AD6                 SEC
GAME:4AD7                 SBC     #_0|_C_BLUE     ; Tenth-digit of the screen
GAME:4AD9                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4ADB                 LDA     SC_STATUS_LINE.line_2.score_digit_100
GAME:4ADE                 SBC     #_0|_C_BLUE     ; Hundreds-digit of the screen
GAME:4AE0                 ASL     A
GAME:4AE1                 STA     TEMP_B0
GAME:4AE3                 ASL     A
GAME:4AE4                 ASL     A
GAME:4AE5                 CLC
GAME:4AE6                 ADC     TEMP_B0
GAME:4AE8                 ADC     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4AEA                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4AEC                 LDA     SC_STATUS_LINE.line_2.score_digit_1000
GAME:4AEF                 BEQ     _3              ; Thousands-digit of the screen
GAME:4AF1                 CMP     #_1|_C_BLUE
GAME:4AF3                 BEQ     _2
GAME:4AF5                 LDA     #255
GAME:4AF7                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4AF9                 RTS
GAME:4AFA ; ---------------------------------------------------------------------------
GAME:4AFA
GAME:4AFA _2:                                     ; CODE XREF: CLCSC__READ_SCORE_VALUE+20↑j
GAME:4AFA                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4AFC                 CLC
GAME:4AFD                 ADC     #100
GAME:4AFF                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4B01
GAME:4B01 _3:                                     ; CODE XREF: CLCSC__READ_SCORE_VALUE+1C↑j
GAME:4B01                 RTS                     ; => Return
GAME:4B01 ; End of function CLCSC__READ_SCORE_VALUE
GAME:4B01
GAME:4B02 ; ---------------------------------------------------------------------------
GAME:4B02 ; START OF FUNCTION CHUNK FOR RNK__DISPLAY_RANK
GAME:4B02
GAME:4B02 WORST:                                  ; CODE XREF: RNK__DISPLAY_RANK+1E↓j
GAME:4B02                 JSR     FTG             ; Print "FLYING TIGER" to screen
GAME:4B05                 LDA     #L_RUNWAY_LEFT_13|L_C_0
GAME:4B07                 BNE     AIB
GAME:4B09
GAME:4B09 WORST1:                                 ; CODE XREF: RNK__DISPLAY_RANK+24↓j
GAME:4B09                 JSR     FTG             ; Print "FLYING TIGER" to screen
GAME:4B0C                 LDA     #L_RUNWAY_MARKER_14|L_C_0
GAME:4B0E
GAME:4B0E AIB:                                    ; CODE XREF: RNK__DISPLAY_RANK-B↑j
GAME:4B0E                 STA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:4B11                 RTS
GAME:4B11 ; END OF FUNCTION CHUNK FOR RNK__DISPLAY_RANK
GAME:4B12
GAME:4B12 ; =============== S U B R O U T I N E =======================================
GAME:4B12
GAME:4B12 ; Display the rank based on difficulty and score
GAME:4B12
GAME:4B12 RNK__DISPLAY_RANK:                      ; CODE XREF: STOPL+5C↑p
GAME:4B12
GAME:4B12 ; FUNCTION CHUNK AT GAME:4B02 SIZE 00000010 BYTES
GAME:4B12
GAME:4B12                 JSR     AFH__ERASE_RANK_DISPLAY ; Erase rank text lines
GAME:4B15                 LDX     #10
GAME:4B17
GAME:4B17 loc_4B17:                               ; CODE XREF: RNK__DISPLAY_RANK+C↓j
GAME:4B17                 LDA     RNKI,X          ; "RANK: CLASS"
GAME:4B1A                 STA     SC_STATUS_LINE.line_0.fuel_digit_100,X
GAME:4B1D                 DEX
GAME:4B1E                 BPL     loc_4B17
GAME:4B20                 JSR     CLCSC__READ_SCORE_VALUE ; Read score from screen memory digits (range: 000-199 in tenths)
GAME:4B23                 LDA     RTCLOK+1        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:4B25                 SEC
GAME:4B26                 SBC     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4B28                 BCS     _30
GAME:4B2A                 LDX     RTCLOK          ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:4B2C                 BEQ     _1
GAME:4B2E                 DEC     RTCLOK          ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:4B30                 BNE     WORST
GAME:4B32
GAME:4B32 _30:                                    ; CODE XREF: RNK__DISPLAY_RANK+16↑j
GAME:4B32                 STA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4B34                 LDA     RTCLOK          ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:4B36                 BNE     WORST1
GAME:4B38                 LDA     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:4B3B                 ASL     A
GAME:4B3C                 ASL     A
GAME:4B3D                 CLC
GAME:4B3E                 ADC     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4B41                 ASL     A
GAME:4B42                 ASL     A
GAME:4B43                 STA     TEMP_B0
GAME:4B45                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4B47                 SEC
GAME:4B48                 SBC     TEMP_B0
GAME:4B4A                 BCC     _1
GAME:4B4C                 CMP     #200
GAME:4B4E                 BCS     _10
GAME:4B50                 CMP     #160
GAME:4B52                 BCS     _9
GAME:4B54                 PHA
GAME:4B55                 JSR     SQLD__PRINT_SQUADRON_LEADER ; Print "SQUADRON LEADER" to screen
GAME:4B58                 PLA
GAME:4B59                 CMP     #120
GAME:4B5B                 BCS     _8
GAME:4B5D                 CMP     #100
GAME:4B5F                 BCS     _7
GAME:4B61                 CMP     #80
GAME:4B63                 BCS     _6
GAME:4B65                 CMP     #60
GAME:4B67                 BCS     _5
GAME:4B69                 PHA
GAME:4B6A                 JSR     BLUE__PRINT_RANK_CLASS ; Print "RANK: CLASS" to screen
GAME:4B6D                 JSR     BLMX__PRINT_BLUE_MAX ; Print "BLUE MAX" to screen
GAME:4B70                 PLA
GAME:4B71                 CMP     #40
GAME:4B73                 BCS     _4
GAME:4B75                 CMP     #20
GAME:4B77                 BCS     _3
GAME:4B79                 LDA     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4B7C                 BEQ     _3
GAME:4B7E                 LDA     #_2|_C_LBLUE
GAME:4B80
GAME:4B80 _2:                                     ; CODE XREF: RNK__DISPLAY_RANK+7F↓j
GAME:4B80                                         ; RNK__DISPLAY_RANK+83↓j ...
GAME:4B80                 STA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:4B83                 RTS
GAME:4B84 ; ---------------------------------------------------------------------------
GAME:4B84
GAME:4B84 _1:                                     ; CODE XREF: RNK__DISPLAY_RANK+1A↑j
GAME:4B84                                         ; RNK__DISPLAY_RANK+38↑j
GAME:4B84                 JSR     BLUE__PRINT_RANK_CLASS ; Print "RANK: CLASS" to screen
GAME:4B87                 JSR     BLMX__PRINT_BLUE_MAX ; Print "BLUE MAX" to screen
GAME:4B8A                 LDA     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4B8D                 BEQ     _3
GAME:4B8F                 CMP     #GAME_LEVEL_INTERMEDIATE
GAME:4B91                 BEQ     _2
GAME:4B93                 LDA     #_1|_C_LBLUE
GAME:4B95                 BNE     _2
GAME:4B97
GAME:4B97 _9:                                     ; CODE XREF: RNK__DISPLAY_RANK+40↑j
GAME:4B97                 JSR     FTG             ; Print "FLYING TIGER" to screen
GAME:4B9A                 LDA     #_1|_C_BLACK
GAME:4B9C                 BNE     _2
GAME:4B9E
GAME:4B9E _10:                                    ; CODE XREF: RNK__DISPLAY_RANK+3C↑j
GAME:4B9E                 JSR     FTG             ; Print "FLYING TIGER" to screen
GAME:4BA1                 LDA     #_2|_C_BLACK
GAME:4BA3                 BNE     _2
GAME:4BA5
GAME:4BA5 _8:                                     ; CODE XREF: RNK__DISPLAY_RANK+49↑j
GAME:4BA5                 LDA     #_4|_C_BLACK
GAME:4BA7                 BNE     _2
GAME:4BA9
GAME:4BA9 _7:                                     ; CODE XREF: RNK__DISPLAY_RANK+4D↑j
GAME:4BA9                 LDA     #_3|_C_BLACK
GAME:4BAB                 BNE     _2
GAME:4BAD
GAME:4BAD _6:                                     ; CODE XREF: RNK__DISPLAY_RANK+51↑j
GAME:4BAD                 LDA     #_2|_C_BLACK
GAME:4BAF                 BNE     _2
GAME:4BB1
GAME:4BB1 _5:                                     ; CODE XREF: RNK__DISPLAY_RANK+55↑j
GAME:4BB1                 LDA     #_1|_C_BLACK
GAME:4BB3                 BNE     _2
GAME:4BB5
GAME:4BB5 _4:                                     ; CODE XREF: RNK__DISPLAY_RANK+61↑j
GAME:4BB5                 LDA     #_4|_C_LBLUE
GAME:4BB7                 BNE     _2
GAME:4BB9
GAME:4BB9 _3:                                     ; CODE XREF: RNK__DISPLAY_RANK+65↑j
GAME:4BB9                                         ; RNK__DISPLAY_RANK+6A↑j ...
GAME:4BB9                 LDA     #_3|_C_LBLUE
GAME:4BBB                 BNE     _2
GAME:4BBB ; End of function RNK__DISPLAY_RANK
GAME:4BBB
GAME:4BBD
GAME:4BBD ; =============== S U B R O U T I N E =======================================
GAME:4BBD
GAME:4BBD ; Print "BLUE MAX" to screen
GAME:4BBD
GAME:4BBD BLMX__PRINT_BLUE_MAX:                   ; CODE XREF: RNK__DISPLAY_RANK+5B↑p
GAME:4BBD                                         ; RNK__DISPLAY_RANK+75↑p
GAME:4BBD                 LDX     #15
GAME:4BBF
GAME:4BBF _1:                                     ; CODE XREF: BLMX__PRINT_BLUE_MAX+B↓j
GAME:4BBF                 LDA     DEMI-1,X        ; "BLUE MAX" / "  BY BOB POLIN" / "    (C)SYNSOFT 1983"
GAME:4BC2                 ORA     #_SPACE|_C_LBLUE
GAME:4BC4                 STA     SC_STATUS_LINE.line_1.field_6,X
GAME:4BC7                 DEX
GAME:4BC8                 BNE     _1
GAME:4BCA                 STX     SC_STATUS_LINE.line_1.field_6
GAME:4BCD                 STX     SC_STATUS_LINE.line_1.field_5
GAME:4BD0                 STX     SC_STATUS_LINE.line_1.field_4
GAME:4BD3                 RTS
GAME:4BD3 ; End of function BLMX__PRINT_BLUE_MAX
GAME:4BD3
GAME:4BD4
GAME:4BD4 ; =============== S U B R O U T I N E =======================================
GAME:4BD4
GAME:4BD4 ; Print "RANK: CLASS" to screen
GAME:4BD4
GAME:4BD4 BLUE__PRINT_RANK_CLASS:                 ; CODE XREF: RNK__DISPLAY_RANK+58↑p
GAME:4BD4                                         ; RNK__DISPLAY_RANK:_1↑p
GAME:4BD4                 LDX     #10
GAME:4BD6
GAME:4BD6 _1:                                     ; CODE XREF: BLUE__PRINT_RANK_CLASS+B↓j
GAME:4BD6                 LDA     RNKI,X          ; "RANK: CLASS"
GAME:4BD9                 ORA     #_SPACE|_C_BLUE
GAME:4BDB                 STA     SC_STATUS_LINE.line_0.fuel_digit_100,X
GAME:4BDE                 DEX
GAME:4BDF                 BPL     _1
GAME:4BE1                 RTS
GAME:4BE1 ; End of function BLUE__PRINT_RANK_CLASS
GAME:4BE1
GAME:4BE2
GAME:4BE2 ; =============== S U B R O U T I N E =======================================
GAME:4BE2
GAME:4BE2 ; Print "SQUADRON LEADER" to screen
GAME:4BE2
GAME:4BE2 SQLD__PRINT_SQUADRON_LEADER:            ; CODE XREF: RNK__DISPLAY_RANK+43↑p
GAME:4BE2                 LDX     #14
GAME:4BE4
GAME:4BE4 _1:                                     ; CODE XREF: SQLD__PRINT_SQUADRON_LEADER+9↓j
GAME:4BE4                 LDA     SQLDI,X         ; "SQUADRON LEADER"
GAME:4BE7                 STA     SC_STATUS_LINE.line_1.field_4,X
GAME:4BEA                 DEX
GAME:4BEB                 BPL     _1
GAME:4BED                 RTS
GAME:4BED ; End of function SQLD__PRINT_SQUADRON_LEADER
GAME:4BED
GAME:4BEE
GAME:4BEE ; =============== S U B R O U T I N E =======================================
GAME:4BEE
GAME:4BEE ; Erase rank text lines
GAME:4BEE
GAME:4BEE AFH__ERASE_RANK_DISPLAY:                ; CODE XREF: RNK__DISPLAY_RANK↑p
GAME:4BEE                                         ; RNKX__PRINT_RANK_CLASS↓p
GAME:4BEE                 LDA     #0
GAME:4BF0                 LDX     #43
GAME:4BF2
GAME:4BF2 _1:                                     ; CODE XREF: AFH__ERASE_RANK_DISPLAY+8↓j
GAME:4BF2                 STA     SC_STATUS_LINE.line_0.fuel_F,X
GAME:4BF5                 DEX
GAME:4BF6                 BPL     _1
GAME:4BF8                 STA     SC_STATUS_LINE.line_2.landing_flag ; "L" character
GAME:4BFB                 RTS
GAME:4BFB ; End of function AFH__ERASE_RANK_DISPLAY
GAME:4BFB
GAME:4BFC
GAME:4BFC ; =============== S U B R O U T I N E =======================================
GAME:4BFC
GAME:4BFC ; Print Rank Class on screen
GAME:4BFC
GAME:4BFC RNKX__PRINT_RANK_CLASS:                 ; CODE XREF: TURN:_7↑p
GAME:4BFC                 JSR     AFH__ERASE_RANK_DISPLAY ; Erase rank text lines
GAME:4BFF                 LDX     #10
GAME:4C01
GAME:4C01 _3:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+F↓j
GAME:4C01                 LDA     RNKI,X          ; "RANK: CLASS"
GAME:4C04                 CLC
GAME:4C05                 ADC     #_SPACE|_C_ORANGE
GAME:4C07                 STA     SC_STATUS_LINE.line_0.fuel_digit_100,X
GAME:4C0A                 DEX
GAME:4C0B                 BPL     _3
GAME:4C0D
GAME:4C0D                 JSR     CLCSC__READ_SCORE_VALUE ; Read score from screen memory digits (range: 000-199 in tenths)
GAME:4C10                 LDA     DISABLE_MAP_GENERATION ; !=0 Disable generation of new map data. Reset during VBL scrolling
GAME:4C12                 CMP     #2              ; More than 20 points?
GAME:4C14                 BCS     _88
GAME:4C16                 LDA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:4C19                 BEQ     _88
GAME:4C1B                 LDA     #_1|_C_ORANGE
GAME:4C1D                 STA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:4C20                 LDX     #15
GAME:4C22
GAME:4C22 _2:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+2D↓j
GAME:4C22                 LDA     KMKZI,X         ; "KAMIKAZE TRAINEE"
GAME:4C25                 STA     SC_STATUS_LINE.line_1.field_4,X
GAME:4C28                 DEX
GAME:4C29                 BPL     _2
GAME:4C2B                 RTS
GAME:4C2C ; ---------------------------------------------------------------------------
GAME:4C2C
GAME:4C2C _88:                                    ; CODE XREF: RNKX__PRINT_RANK_CLASS+18↑j
GAME:4C2C                                         ; RNKX__PRINT_RANK_CLASS+1D↑j
GAME:4C2C                 LDA     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:4C2F                 ASL     A
GAME:4C30                 CLC
GAME:4C31                 ADC     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4C34                 ASL     A
GAME:4C35                 ASL     A
GAME:4C36                 ADC     DISABLE_MAP_GENERATION ; Score = Score + (level * 4) + (gravity * 8)
GAME:4C38                 ADC     PRIMARY_TARGETS_HIT ; Number of primary targets hit
GAME:4C3B                 BCC     _1
GAME:4C3D
GAME:4C3D _4:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+4C↓j
GAME:4C3D                 JSR     RD4__PRINT_4    ; Print "4" for class to screen
GAME:4C40                 JMP     FTG             ; Print "FLYING TIGER" to screen
GAME:4C43 ; ---------------------------------------------------------------------------
GAME:4C43
GAME:4C43 _1:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+3F↑j
GAME:4C43                 LDX     GAME_COMPLETION_MASK
GAME:4C46                 CPX     #FINAL_TARGET_ALL
GAME:4C48                 BEQ     _4
GAME:4C4A                 CMP     #3
GAME:4C4C                 BCC     _5
GAME:4C4E                 CMP     #6
GAME:4C50                 BCC     _6
GAME:4C52                 CMP     #10
GAME:4C54                 BCC     _7
GAME:4C56                 CMP     #20
GAME:4C58                 BCC     _8
GAME:4C5A                 CMP     #33
GAME:4C5C                 BCC     _9
GAME:4C5E                 CMP     #48
GAME:4C60                 BCC     _10
GAME:4C62                 CMP     #65
GAME:4C64                 BCC     _11
GAME:4C66                 JSR     RD1__PRINT_1    ; Print "1" for class to screen
GAME:4C69                 BNE     ACDT            ; Print "AIR CADET" to screen
GAME:4C6B
GAME:4C6B _5:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+50↑j
GAME:4C6B                 JSR     RD4__PRINT_4    ; Print "4" for class to screen
GAME:4C6E                 BNE     RSW             ; Print "RUNWAY SWEEPER" to screen
GAME:4C70
GAME:4C70 _6:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+54↑j
GAME:4C70                 JSR     RD3__PRINT_3    ; Print "3" for class to screen
GAME:4C73                 BNE     RSW             ; Print "RUNWAY SWEEPER" to screen
GAME:4C75
GAME:4C75 _7:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+58↑j
GAME:4C75                 JSR     RD2__PRINT_2    ; Print "2" for class to screen
GAME:4C78                 BNE     RSW             ; Print "RUNWAY SWEEPER" to screen
GAME:4C7A
GAME:4C7A _8:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+5C↑j
GAME:4C7A                 JSR     RD1__PRINT_1    ; Print "1" for class to screen
GAME:4C7D                 BNE     RSW             ; Print "RUNWAY SWEEPER" to screen
GAME:4C7F
GAME:4C7F _9:                                     ; CODE XREF: RNKX__PRINT_RANK_CLASS+60↑j
GAME:4C7F                 JSR     RD4__PRINT_4    ; Print "4" for class to screen
GAME:4C82                 BNE     ACDT            ; Print "AIR CADET" to screen
GAME:4C84
GAME:4C84 _10:                                    ; CODE XREF: RNKX__PRINT_RANK_CLASS+64↑j
GAME:4C84                 JSR     RD3__PRINT_3    ; Print "3" for class to screen
GAME:4C87                 BNE     ACDT            ; Print "AIR CADET" to screen
GAME:4C89
GAME:4C89 _11:                                    ; CODE XREF: RNKX__PRINT_RANK_CLASS+68↑j
GAME:4C89                 JSR     RD2__PRINT_2    ; Print "2" for class to screen
GAME:4C8C
GAME:4C8C ACDT:                                   ; CODE XREF: RNKX__PRINT_RANK_CLASS+6D↑j
GAME:4C8C                                         ; RNKX__PRINT_RANK_CLASS+86↑j ...
GAME:4C8C                 LDX     #8              ; Print "AIR CADET" to screen
GAME:4C8E
GAME:4C8E _1_0:                                   ; CODE XREF: RNKX__PRINT_RANK_CLASS+99↓j
GAME:4C8E                 LDA     ACDI,X          ; "AIR CADET"
GAME:4C91                 STA     SC_STATUS_LINE.line_1.speed_digit_100,X
GAME:4C94                 DEX
GAME:4C95                 BPL     _1_0
GAME:4C97                 RTS
GAME:4C98 ; ---------------------------------------------------------------------------
GAME:4C98
GAME:4C98 RSW:                                    ; CODE XREF: RNKX__PRINT_RANK_CLASS+72↑j
GAME:4C98                                         ; RNKX__PRINT_RANK_CLASS+77↑j ...
GAME:4C98                 LDX     #13             ; Print "RUNWAY SWEEPER" to screen
GAME:4C9A
GAME:4C9A _1_1:                                   ; CODE XREF: RNKX__PRINT_RANK_CLASS+A5↓j
GAME:4C9A                 LDA     RSWI,X          ; "RUNWAY SWEEPER"
GAME:4C9D                 STA     SC_STATUS_LINE.line_1.field_4,X
GAME:4CA0                 DEX
GAME:4CA1                 BPL     _1_1
GAME:4CA3                 RTS
GAME:4CA4 ; ---------------------------------------------------------------------------
GAME:4CA4
GAME:4CA4 FTG:                                    ; CODE XREF: RNK__DISPLAY_RANK:WORST↑p
GAME:4CA4                                         ; RNK__DISPLAY_RANK:WORST1↑p ...
GAME:4CA4                 LDX     #11             ; Print "FLYING TIGER" to screen
GAME:4CA6
GAME:4CA6 _1_2:                                   ; CODE XREF: RNKX__PRINT_RANK_CLASS+B1↓j
GAME:4CA6                 LDA     FTGI,X          ; "FLYING TIGER"
GAME:4CA9                 STA     SC_STATUS_LINE.line_1.field_5,X
GAME:4CAC                 DEX
GAME:4CAD                 BPL     _1_2
GAME:4CAF                 RTS
GAME:4CAF ; End of function RNKX__PRINT_RANK_CLASS
GAME:4CAF
GAME:4CB0
GAME:4CB0 ; =============== S U B R O U T I N E =======================================
GAME:4CB0
GAME:4CB0 ; Print "1" for class to screen
GAME:4CB0
GAME:4CB0 RD1__PRINT_1:                           ; CODE XREF: RNKX__PRINT_RANK_CLASS+6A↑p
GAME:4CB0                                         ; RNKX__PRINT_RANK_CLASS:_8↑p
GAME:4CB0                 LDA     #_1|_C_ORANGE
GAME:4CB2                 BNE     BAA
GAME:4CB2 ; End of function RD1__PRINT_1
GAME:4CB2
GAME:4CB4
GAME:4CB4 ; =============== S U B R O U T I N E =======================================
GAME:4CB4
GAME:4CB4 ; Print "2" for class to screen
GAME:4CB4
GAME:4CB4 RD2__PRINT_2:                           ; CODE XREF: RNKX__PRINT_RANK_CLASS:_7↑p
GAME:4CB4                                         ; RNKX__PRINT_RANK_CLASS:_11↑p
GAME:4CB4                 LDA     #_2|_C_ORANGE
GAME:4CB6                 BNE     BAA
GAME:4CB6 ; End of function RD2__PRINT_2
GAME:4CB6
GAME:4CB8
GAME:4CB8 ; =============== S U B R O U T I N E =======================================
GAME:4CB8
GAME:4CB8 ; Print "3" for class to screen
GAME:4CB8
GAME:4CB8 RD3__PRINT_3:                           ; CODE XREF: RNKX__PRINT_RANK_CLASS:_6↑p
GAME:4CB8                                         ; RNKX__PRINT_RANK_CLASS:_10↑p
GAME:4CB8                 LDA     #_3|_C_ORANGE
GAME:4CBA                 BNE     BAA
GAME:4CBA ; End of function RD3__PRINT_3
GAME:4CBA
GAME:4CBC
GAME:4CBC ; =============== S U B R O U T I N E =======================================
GAME:4CBC
GAME:4CBC ; Print "4" for class to screen
GAME:4CBC
GAME:4CBC RD4__PRINT_4:                           ; CODE XREF: RNKX__PRINT_RANK_CLASS:_4↑p
GAME:4CBC                                         ; RNKX__PRINT_RANK_CLASS:_5↑p ...
GAME:4CBC                 LDA     #_4|_C_ORANGE
GAME:4CBE
GAME:4CBE BAA:                                    ; CODE XREF: RD1__PRINT_1+2↑j
GAME:4CBE                                         ; RD2__PRINT_2+2↑j ...
GAME:4CBE                 STA     SC_STATUS_LINE.line_0.decreased_maneuverability ; "M" character
GAME:4CC1                 RTS
GAME:4CC1 ; End of function RD4__PRINT_4
GAME:4CC1
GAME:4CC2
GAME:4CC2 ; =============== S U B R O U T I N E =======================================
GAME:4CC2
GAME:4CC2 ; Clear Player-Missile Graphics
GAME:4CC2
GAME:4CC2 CLRPM__CLEAR_PMGRAPHICS:                ; CODE XREF: RESET+106↑p
GAME:4CC2                                         ; CNSL__CONSOLE+2C↓p
GAME:4CC2                 LDA     #<MISSLE
GAME:4CC4                 STA     byte_FA
GAME:4CC6                 LDA     #>MISSLE
GAME:4CC8                 STA     CURRENT_TILE_ROW_PTR
GAME:4CCA                 LDX     #5
GAME:4CCC                 LDA     #0
GAME:4CCE
GAME:4CCE _1:                                     ; CODE XREF: CLRPM__CLEAR_PMGRAPHICS+16↓j
GAME:4CCE                 LDY     #0
GAME:4CD0
GAME:4CD0 _2:                                     ; CODE XREF: CLRPM__CLEAR_PMGRAPHICS+11↓j
GAME:4CD0                 STA     (byte_FA),Y
GAME:4CD2                 DEY
GAME:4CD3                 BNE     _2
GAME:4CD5                 INC     CURRENT_TILE_ROW_PTR
GAME:4CD7                 DEX
GAME:4CD8                 BNE     _1
GAME:4CDA                 RTS
GAME:4CDA ; End of function CLRPM__CLEAR_PMGRAPHICS
GAME:4CDA
GAME:4CDB
GAME:4CDB ; =============== S U B R O U T I N E =======================================
GAME:4CDB
GAME:4CDB ; Reset deferred vertial blank IRQ
GAME:4CDB
GAME:4CDB XSCRL__RESET_VBL:                       ; CODE XREF: CNSL__CONSOLE:_1↓p
GAME:4CDB                                         ; CNSL__CONSOLE+37↓p
GAME:4CDB                 LDA     #SETVBV_VVBLKD
GAME:4CDD                 LDX     #>XITVBV        ; EXIT VERTICAL BLANK CALCULATIONS
GAME:4CDF                 LDY     #<XITVBV        ; EXIT VERTICAL BLANK CALCULATIONS
GAME:4CE1                 JSR     SETVBV          ; SET SYSTEM TIMERS ROUTINE
GAME:4CE4                 LDA     #$C0
GAME:4CE6                 STA     NMIEN           ; $80: DL IRQ enabled, $40: VBL IRQ enabled
GAME:4CE9                 RTS
GAME:4CE9 ; End of function XSCRL__RESET_VBL
GAME:4CE9
GAME:4CEA
GAME:4CEA ; =============== S U B R O U T I N E =======================================
GAME:4CEA
GAME:4CEA ; Sound: stop all audio output
GAME:4CEA
GAME:4CEA QUIET__STOP_ALL_SOUNDS:                 ; CODE XREF: RESET+18B↑p
GAME:4CEA                                         ; CNSL__CONSOLE+34↓p
GAME:4CEA                 LDA     #0
GAME:4CEC                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:4CEF                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:4CF2                 STA     AUDC3           ; Audio 3 Channel Control Register
GAME:4CF5                 STA     AUDC4           ; Audio 4 Channel Control Register
GAME:4CF8                 RTS
GAME:4CF8 ; End of function QUIET__STOP_ALL_SOUNDS
GAME:4CF8
GAME:4CF9
GAME:4CF9 ; =============== S U B R O U T I N E =======================================
GAME:4CF9
GAME:4CF9 ; Console for option selection and to start the game
GAME:4CF9
GAME:4CF9 CNSL__CONSOLE:                          ; CODE XREF: EB:AFY↑p
GAME:4CF9                                         ; EB+A1↑p ...
GAME:4CF9                 LDA     CONSOL          ; Console Switch Port
GAME:4CFC                 CMP     #110b
GAME:4CFE                 BEQ     _1              ; START key pressed
GAME:4D00                 CMP     #11b
GAME:4D02                 BEQ     _5              ; OPTION key pressed
GAME:4D04                 RTS
GAME:4D05 ; ---------------------------------------------------------------------------
GAME:4D05
GAME:4D05 _1:                                     ; CODE XREF: CNSL__CONSOLE+5↑j
GAME:4D05                 JSR     XSCRL__RESET_VBL ; START key pressed
GAME:4D08                 PLA
GAME:4D09                 PLA
GAME:4D0A                 LDA     #0
GAME:4D0C                 STA     CDTMV1          ; COUNT DOWN TIMER 1 - used for music playback
GAME:4D0F                 STA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:4D12                 LDA     #COLOR_INTENSITY_14|COLOR_LIGHT_BLUE
GAME:4D14                 STA     DL_IRQ_COLPF1   ; COLPF1 color set in the DL IRQ
GAME:4D17                 JMP     START
GAME:4D1A ; ---------------------------------------------------------------------------
GAME:4D1A
GAME:4D1A _5:                                     ; CODE XREF: CNSL__CONSOLE+9↑j
GAME:4D1A                 STA     MENU_LAST_CONSOL_6E9 ; OPTION key pressed
GAME:4D1D                 LDA     #0
GAME:4D1F                 STA     SDMCTL          ; SAVE DMACTL REGISTER
GAME:4D22                 STA     CDTMV1          ; COUNT DOWN TIMER 1 - used for music playback
GAME:4D25                 JSR     CLRPM__CLEAR_PMGRAPHICS ; Clear Player-Missile Graphics
GAME:4D28                 LDA     #$E0
GAME:4D2A                 STA     CHBAS           ; Select the ROM font
GAME:4D2D                 JSR     QUIET__STOP_ALL_SOUNDS ; Sound: stop all audio output
GAME:4D30                 JSR     XSCRL__RESET_VBL ; Reset deferred vertial blank IRQ
GAME:4D33                 LDX     #0
GAME:4D35                 LDA     #_SPACE|_C_BLACK
GAME:4D37                 STA     MENU_OPTION_INDEX_6E8 ; MENU: currently selected option
GAME:4D3A
GAME:4D3A _2:                                     ; CODE XREF: CNSL__CONSOLE+48↓j
GAME:4D3A                 STA     SC-1,X          ; Screen memory
GAME:4D3D                 STA     byte_64C3+5,X
GAME:4D40                 DEX
GAME:4D41                 BNE     _2
GAME:4D43                 LDX     #17
GAME:4D45
GAME:4D45 _6:                                     ; CODE XREF: CNSL__CONSOLE+53↓j
GAME:4D45                 LDA     OPTIM,X         ; Display List for the menu
GAME:4D48                 STA     DL,X
GAME:4D4B                 DEX
GAME:4D4C                 BPL     _6
GAME:4D4E                 LDA     #>SC            ; Screen memory
GAME:4D50                 STA     DL+2
GAME:4D53                 LDA     #<SC            ; Screen memory
GAME:4D55                 STA     DL+3
GAME:4D58                 LDA     #>DL
GAME:4D5A                 STA     DL+$11
GAME:4D5D                 STA     SDLSTL          ; SAVE DISPLAY LIST LOW BYTE
GAME:4D60                 LDA     #<DL
GAME:4D62                 STA     DL+$12
GAME:4D65                 STA     SDLSTH          ; SAVE DISPLAY LIST HI BYTE
GAME:4D68                 LDA     #>DLIR1__DLIST_DURING_MENU ; Display List IRQ during the menu
GAME:4D6A                 STA     VDSLST          ; DISPLAY LIST NMI VECTOR
GAME:4D6D                 LDA     #<DLIR1__DLIST_DURING_MENU ; Display List IRQ during the menu
GAME:4D6F                 STA     VDSLST+1        ; DISPLAY LIST NMI VECTOR
GAME:4D72                 LDA     #COLOR_INTENSITY_0|COLOR_RED_PINK_PURPLE
GAME:4D74                 STA     COLOR4
GAME:4D77                 LDA     #COLOR_INTENSITY_14|COLOR_GRAY
GAME:4D79                 STA     COLOR0          ; COLOR 0
GAME:4D7C                 LDA     #COLOR_INTENSITY_8|COLOR_PURPLE_BLUE
GAME:4D7E                 STA     COLOR1
GAME:4D81                 LDX     #6
GAME:4D83
GAME:4D83 _95:                                    ; CODE XREF: CNSL__CONSOLE+91↓j
GAME:4D83                 LDA     OPTI,X          ; "OPTIONS"
GAME:4D86                 STA     SC+$2E,X        ; Screen memory
GAME:4D89                 DEX
GAME:4D8A                 BPL     _95
GAME:4D8C                 LDA     #$3E ; '>'
GAME:4D8E                 STA     SDMCTL          ; SAVE DMACTL REGISTER
GAME:4D91
GAME:4D91                 LDX     #11
GAME:4D93                 LDA     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4D96                 BEQ     _7
GAME:4D98                 CMP     #GAME_LEVEL_INTERMEDIATE
GAME:4D9A                 BEQ     _14
GAME:4D9C                 JSR     VET__PRINT_ADVANCED ; Print "ADVANCED    " to screen
GAME:4D9F                 JMP     _8
GAME:4DA2 ; ---------------------------------------------------------------------------
GAME:4DA2
GAME:4DA2 _7:                                     ; CODE XREF: CNSL__CONSOLE+9D↑j
GAME:4DA2                 JSR     NOV__PRINT_NOVICE ; Print "NOVICE      " to screen
GAME:4DA5                 JMP     _8
GAME:4DA8 ; ---------------------------------------------------------------------------
GAME:4DA8
GAME:4DA8 _14:                                    ; CODE XREF: CNSL__CONSOLE+A1↑j
GAME:4DA8                 JSR     INT__PRINT_INTERMEDIATE ; Print "INTERMEDIATE" to screen
GAME:4DAB
GAME:4DAB _8:                                     ; CODE XREF: CNSL__CONSOLE+A6↑j
GAME:4DAB                                         ; CNSL__CONSOLE+AC↑j
GAME:4DAB                 LDX     #11
GAME:4DAD                 LDA     DIRECTION_A
GAME:4DB0                 CMP     #13
GAME:4DB2                 BNE     _9
GAME:4DB4                 JSR     NOR__PRINT_NORMAL ; Print "NORMAL CTRL " to screen
GAME:4DB7                 JMP     _10
GAME:4DBA ; ---------------------------------------------------------------------------
GAME:4DBA
GAME:4DBA _9:                                     ; CODE XREF: CNSL__CONSOLE+B9↑j
GAME:4DBA                 JSR     RVS__PRINT_REVERSED_CTRL ; Print "REVERSED CTRL" to screen
GAME:4DBD
GAME:4DBD _10:                                    ; CODE XREF: CNSL__CONSOLE+BE↑j
GAME:4DBD                 LDX     #9
GAME:4DBF                 LDA     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:4DC2                 BNE     _11
GAME:4DC4                 JSR     NGRV__PRINT_NO_GRAVITY ; Print "NO GRAVITY" to screen
GAME:4DC7                 JMP     _12
GAME:4DCA ; ---------------------------------------------------------------------------
GAME:4DCA
GAME:4DCA _11:                                    ; CODE XREF: CNSL__CONSOLE+C9↑j
GAME:4DCA                 JSR     GRV__PRINT_GRAVITY ; Print "GRAVITY   " to screen
GAME:4DCD
GAME:4DCD _12:                                    ; CODE XREF: CNSL__CONSOLE+CE↑j
GAME:4DCD                 LDA     #_ASTERIX|_C_BLUE
GAME:4DCF                 STA     byte_6441+$39
GAME:4DD2
GAME:4DD2 _13:                                    ; CODE XREF: CNSL__CONSOLE+DC↓j
GAME:4DD2                 JSR     MENU__CHECK_KEYS ; Check for keys during the options menu
GAME:4DD5                 JMP     _13             ; Endless menu selection loop. Exit via stack cleanup and JMP
GAME:4DD5 ; End of function CNSL__CONSOLE
GAME:4DD5
GAME:4DD8
GAME:4DD8 ; =============== S U B R O U T I N E =======================================
GAME:4DD8
GAME:4DD8 ; Print "NOVICE      " to screen
GAME:4DD8
GAME:4DD8 NOV__PRINT_NOVICE:                      ; CODE XREF: CNSL__CONSOLE:_7↑p
GAME:4DD8                                         ; NOV__PRINT_NOVICE+7↓j ...
GAME:4DD8                 LDA     NOVI,X          ; "NOVICE      "
GAME:4DDB                 STA     byte_6441+$3B,X
GAME:4DDE                 DEX
GAME:4DDF                 BPL     NOV__PRINT_NOVICE ; Print "NOVICE      " to screen
GAME:4DE1                 RTS
GAME:4DE1 ; End of function NOV__PRINT_NOVICE
GAME:4DE1
GAME:4DE2
GAME:4DE2 ; =============== S U B R O U T I N E =======================================
GAME:4DE2
GAME:4DE2 ; Print "ADVANCED    " to screen
GAME:4DE2
GAME:4DE2 VET__PRINT_ADVANCED:                    ; CODE XREF: CNSL__CONSOLE+A3↑p
GAME:4DE2                                         ; VET__PRINT_ADVANCED+7↓j ...
GAME:4DE2                 LDA     VETI,X          ; "ADVANCED    "
GAME:4DE5                 STA     byte_6441+$3B,X
GAME:4DE8                 DEX
GAME:4DE9                 BPL     VET__PRINT_ADVANCED ; Print "ADVANCED    " to screen
GAME:4DEB                 RTS
GAME:4DEB ; End of function VET__PRINT_ADVANCED
GAME:4DEB
GAME:4DEC
GAME:4DEC ; =============== S U B R O U T I N E =======================================
GAME:4DEC
GAME:4DEC ; Print "INTERMEDIATE" to screen
GAME:4DEC
GAME:4DEC INT__PRINT_INTERMEDIATE:                ; CODE XREF: CNSL__CONSOLE:_14↑p
GAME:4DEC                                         ; INT__PRINT_INTERMEDIATE+7↓j ...
GAME:4DEC                 LDA     INTI,X          ; "INTERMEDIATE"
GAME:4DEF                 STA     byte_6441+$3B,X
GAME:4DF2                 DEX
GAME:4DF3                 BPL     INT__PRINT_INTERMEDIATE ; Print "INTERMEDIATE" to screen
GAME:4DF5                 RTS
GAME:4DF5 ; End of function INT__PRINT_INTERMEDIATE
GAME:4DF5
GAME:4DF6
GAME:4DF6 ; =============== S U B R O U T I N E =======================================
GAME:4DF6
GAME:4DF6 ; Print "NORMAL CTRL " to screen
GAME:4DF6
GAME:4DF6 NOR__PRINT_NORMAL:                      ; CODE XREF: CNSL__CONSOLE+BB↑p
GAME:4DF6                                         ; NOR__PRINT_NORMAL+7↓j ...
GAME:4DF6                 LDA     NORI,X          ; "NORMAL CTRL "
GAME:4DF9                 STA     byte_6482+$36,X
GAME:4DFC                 DEX
GAME:4DFD                 BPL     NOR__PRINT_NORMAL ; Print "NORMAL CTRL " to screen
GAME:4DFF                 RTS
GAME:4DFF ; End of function NOR__PRINT_NORMAL
GAME:4DFF
GAME:4E00
GAME:4E00 ; =============== S U B R O U T I N E =======================================
GAME:4E00
GAME:4E00 ; Print "REVERSED CTRL" to screen
GAME:4E00
GAME:4E00 RVS__PRINT_REVERSED_CTRL:               ; CODE XREF: CNSL__CONSOLE:_9↑p
GAME:4E00                                         ; RVS__PRINT_REVERSED_CTRL+7↓j ...
GAME:4E00                 LDA     RVSI,X          ; "REVERSE CTRL"
GAME:4E03                 STA     byte_6482+$36,X
GAME:4E06                 DEX
GAME:4E07                 BPL     RVS__PRINT_REVERSED_CTRL ; Print "REVERSED CTRL" to screen
GAME:4E09                 RTS
GAME:4E09 ; End of function RVS__PRINT_REVERSED_CTRL
GAME:4E09
GAME:4E0A
GAME:4E0A ; =============== S U B R O U T I N E =======================================
GAME:4E0A
GAME:4E0A ; Print "NO GRAVITY" to screen
GAME:4E0A
GAME:4E0A NGRV__PRINT_NO_GRAVITY:                 ; CODE XREF: CNSL__CONSOLE+CB↑p
GAME:4E0A                                         ; NGRV__PRINT_NO_GRAVITY+7↓j ...
GAME:4E0A                 LDA     NGRVI,X         ; "NO GRAVITY   "
GAME:4E0D                 STA     byte_64C3+$31,X
GAME:4E10                 DEX
GAME:4E11                 BPL     NGRV__PRINT_NO_GRAVITY ; Print "NO GRAVITY" to screen
GAME:4E13                 RTS
GAME:4E13 ; End of function NGRV__PRINT_NO_GRAVITY
GAME:4E13
GAME:4E14
GAME:4E14 ; =============== S U B R O U T I N E =======================================
GAME:4E14
GAME:4E14 ; Print "GRAVITY   " to screen
GAME:4E14
GAME:4E14 GRV__PRINT_GRAVITY:                     ; CODE XREF: CNSL__CONSOLE:_11↑p
GAME:4E14                                         ; GRV__PRINT_GRAVITY+7↓j ...
GAME:4E14                 LDA     NGRVI+3,X       ; "NO GRAVITY   "
GAME:4E17                 STA     byte_64C3+$31,X
GAME:4E1A                 DEX
GAME:4E1B                 BPL     GRV__PRINT_GRAVITY ; Print "GRAVITY   " to screen
GAME:4E1D                 RTS
GAME:4E1D ; End of function GRV__PRINT_GRAVITY
GAME:4E1D
GAME:4E1E
GAME:4E1E ; =============== S U B R O U T I N E =======================================
GAME:4E1E
GAME:4E1E ; Check for keys during the options menu
GAME:4E1E
GAME:4E1E MENU__CHECK_KEYS:                       ; CODE XREF: CNSL__CONSOLE:_13↑p
GAME:4E1E                 LDA     CONSOL          ; Console Switch Port
GAME:4E21                 CMP     MENU_LAST_CONSOL_6E9 ; Last value of CONSOL in the MENU selection
GAME:4E24                 BNE     _1
GAME:4E26                 RTS
GAME:4E27 ; ---------------------------------------------------------------------------
GAME:4E27
GAME:4E27 _1:                                     ; CODE XREF: MENU__CHECK_KEYS+6↑j
GAME:4E27                 STA     MENU_LAST_CONSOL_6E9 ; Last value of CONSOL in the MENU selection
GAME:4E2A                 CMP     #11b
GAME:4E2C                 BEQ     _2              ; OPTION key pressed
GAME:4E2E                 CMP     #110b
GAME:4E30                 BEQ     _3              ; START key pressed
GAME:4E32                 CMP     #101b
GAME:4E34                 BEQ     _6              ; SELECT key pressed
GAME:4E36                 RTS
GAME:4E37 ; ---------------------------------------------------------------------------
GAME:4E37
GAME:4E37 _3:                                     ; CODE XREF: MENU__CHECK_KEYS+12↑j
GAME:4E37                 PLA                     ; START key pressed
GAME:4E38                 PLA                     ; Pop return addresses from stack
GAME:4E39                 PLA
GAME:4E3A                 PLA
GAME:4E3B                 LDA     #0
GAME:4E3D                 STA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:4E40                 LDA     #COLOR_INTENSITY_14|COLOR_LIGHT_BLUE
GAME:4E42                 STA     DL_IRQ_COLPF1   ; COLPF1 color set in the DL IRQ
GAME:4E45                 JMP     START
GAME:4E48 ; ---------------------------------------------------------------------------
GAME:4E48
GAME:4E48 _2:                                     ; CODE XREF: MENU__CHECK_KEYS+E↑j
GAME:4E48                 LDA     MENU_OPTION_INDEX_6E8 ; OPTION key pressed
GAME:4E4B                 BEQ     _4
GAME:4E4D                 CMP     #1
GAME:4E4F                 BEQ     _5
GAME:4E51                 LDA     #0
GAME:4E53                 STA     MENU_OPTION_INDEX_6E8 ; MENU: currently selected option
GAME:4E56                 STA     byte_64C3+$2F
GAME:4E59                 LDA     #_ASTERIX|_C_BLUE
GAME:4E5B                 STA     byte_6441+$39
GAME:4E5E                 RTS
GAME:4E5F ; ---------------------------------------------------------------------------
GAME:4E5F
GAME:4E5F _4:                                     ; CODE XREF: MENU__CHECK_KEYS+2D↑j
GAME:4E5F                 INC     MENU_OPTION_INDEX_6E8 ; MENU: currently selected option
GAME:4E62                 LDA     #_SPACE|_C_BLACK
GAME:4E64                 STA     byte_6441+$39
GAME:4E67                 LDA     #_ASTERIX|_C_BLUE
GAME:4E69                 STA     byte_6482+$34
GAME:4E6C                 RTS
GAME:4E6D ; ---------------------------------------------------------------------------
GAME:4E6D
GAME:4E6D _5:                                     ; CODE XREF: MENU__CHECK_KEYS+31↑j
GAME:4E6D                 INC     MENU_OPTION_INDEX_6E8 ; MENU: currently selected option
GAME:4E70                 LDA     #_SPACE|_C_BLACK
GAME:4E72                 STA     byte_6482+$34
GAME:4E75                 LDA     #_ASTERIX|_C_BLUE
GAME:4E77                 STA     byte_64C3+$2F
GAME:4E7A                 RTS
GAME:4E7B ; ---------------------------------------------------------------------------
GAME:4E7B
GAME:4E7B _6:                                     ; CODE XREF: MENU__CHECK_KEYS+16↑j
GAME:4E7B                 LDA     MENU_OPTION_INDEX_6E8 ; SELECT key pressed
GAME:4E7E                 BEQ     _7              ; Option 0 was selected
GAME:4E80                 CMP     #1
GAME:4E82                 BEQ     _8              ; Option 1 was selected
GAME:4E84                 LDX     #9
GAME:4E86                 LDA     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:4E89                 BEQ     _9
GAME:4E8B                 DEC     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:4E8E                 JMP     NGRV__PRINT_NO_GRAVITY ; Print "NO GRAVITY" to screen
GAME:4E91 ; ---------------------------------------------------------------------------
GAME:4E91
GAME:4E91 _9:                                     ; CODE XREF: MENU__CHECK_KEYS+6B↑j
GAME:4E91                 INC     MODE_GRAVITY_FLAG ; Gravity? 0=No, 1=Yes
GAME:4E94                 JMP     GRV__PRINT_GRAVITY ; Print "GRAVITY   " to screen
GAME:4E97 ; ---------------------------------------------------------------------------
GAME:4E97
GAME:4E97 _7:                                     ; CODE XREF: MENU__CHECK_KEYS+60↑j
GAME:4E97                 LDX     #11             ; Option 0 was selected
GAME:4E99                 LDA     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4E9C                 BEQ     _10
GAME:4E9E                 CMP     #GAME_LEVEL_INTERMEDIATE
GAME:4EA0                 BEQ     _15
GAME:4EA2                 LDA     #0
GAME:4EA4                 STA     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4EA7                 JMP     NOV__PRINT_NOVICE ; Print "NOVICE      " to screen
GAME:4EAA ; ---------------------------------------------------------------------------
GAME:4EAA
GAME:4EAA _10:                                    ; CODE XREF: MENU__CHECK_KEYS+7E↑j
GAME:4EAA                 INC     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4EAD                 JMP     INT__PRINT_INTERMEDIATE ; Print "INTERMEDIATE" to screen
GAME:4EB0 ; ---------------------------------------------------------------------------
GAME:4EB0
GAME:4EB0 _15:                                    ; CODE XREF: MENU__CHECK_KEYS+82↑j
GAME:4EB0                 INC     MODE_LEVEL      ; Level: 0=Novice, 1=Intermediate, 2=Advanced
GAME:4EB3                 JMP     VET__PRINT_ADVANCED ; Print "ADVANCED    " to screen
GAME:4EB6 ; ---------------------------------------------------------------------------
GAME:4EB6
GAME:4EB6 _8:                                     ; CODE XREF: MENU__CHECK_KEYS+64↑j
GAME:4EB6                 LDX     #11             ; Option 1 was selected
GAME:4EB8                 LDA     DIRECTION_A
GAME:4EBB                 LDY     DIRECTION_B
GAME:4EBE                 STA     DIRECTION_B
GAME:4EC1                 STY     DIRECTION_A
GAME:4EC4                 CMP     #JOYSTICK_DOWN
GAME:4EC6                 BEQ     _12
GAME:4EC8                 JMP     NOR__PRINT_NORMAL ; Print "NORMAL CTRL " to screen
GAME:4ECB ; ---------------------------------------------------------------------------
GAME:4ECB
GAME:4ECB _12:                                    ; CODE XREF: MENU__CHECK_KEYS+A8↑j
GAME:4ECB                 JMP     RVS__PRINT_REVERSED_CTRL ; Print "REVERSED CTRL" to screen
GAME:4ECB ; End of function MENU__CHECK_KEYS
GAME:4ECB
GAME:4ECE
GAME:4ECE ; =============== S U B R O U T I N E =======================================
GAME:4ECE
GAME:4ECE ; Demo Bomb release
GAME:4ECE
GAME:4ECE DEMO__DEMO_TRIGGER:                     ; CODE XREF: COMMON+A↑p
GAME:4ECE                 LDA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:4ED1                 BEQ     _1              ; => Return
GAME:4ED3                 JSR     DJOY__DEMO_JOYSTICK_INPUT ; Get Demo Joystick Movement
GAME:4ED6                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:4ED9                 CMP     #_2|_C_BLUE
GAME:4EDB                 BCC     loc_4EE1        ; button is not prssed
GAME:4EDD                 JSR     DBMB__DEMO_BOMB_RELEASE ; Get Demo Bomb Release
GAME:4EE0
GAME:4EE0 _1:                                     ; CODE XREF: DEMO__DEMO_TRIGGER+3↑j
GAME:4EE0                 RTS                     ; => Return
GAME:4EE1 ; ---------------------------------------------------------------------------
GAME:4EE1
GAME:4EE1 loc_4EE1:                               ; CODE XREF: DEMO__DEMO_TRIGGER+D↑j
GAME:4EE1                 LDA     #1              ; button is not prssed
GAME:4EE3                 STA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:4EE5                 RTS
GAME:4EE5 ; End of function DEMO__DEMO_TRIGGER
GAME:4EE5
GAME:4EE6
GAME:4EE6 ; =============== S U B R O U T I N E =======================================
GAME:4EE6
GAME:4EE6 ; Get Demo Bomb Release
GAME:4EE6
GAME:4EE6 DBMB__DEMO_BOMB_RELEASE:                ; CODE XREF: DEMO__DEMO_TRIGGER+F↑p
GAME:4EE6                 LDA     byte_FA
GAME:4EE8                 BEQ     _1
GAME:4EEA                 LDA     #1              ; button is not prssed
GAME:4EEC                 STA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:4EEE                 RTS
GAME:4EEF ; ---------------------------------------------------------------------------
GAME:4EEF
GAME:4EEF _1:                                     ; CODE XREF: DBMB__DEMO_BOMB_RELEASE+2↑j
GAME:4EEF                 LDA     P0PF_HPOSM0     ; Player Machine Gun Bullet (Horizontal Position)
GAME:4EF2                 CMP     #100b
GAME:4EF4                 BEQ     _9
GAME:4EF6                 CMP     #1000b
GAME:4EF8                 BNE     _2              ; button is pressed
GAME:4EFA
GAME:4EFA _9:                                     ; CODE XREF: DBMB__DEMO_BOMB_RELEASE+E↑j
GAME:4EFA                 LDA     DIRECTION_A
GAME:4EFD                 STA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:4EFF                 LDA     #0              ; button is pressed
GAME:4F01                 STA     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:4F03                 RTS
GAME:4F04 ; ---------------------------------------------------------------------------
GAME:4F04
GAME:4F04 _2:                                     ; CODE XREF: DBMB__DEMO_BOMB_RELEASE+12↑j
GAME:4F04                 LDX     #0              ; button is pressed
GAME:4F06                 LDA     DL_IRQ_BACKGROUND_COLOR ; Background color set in the DL IRQ
GAME:4F09                 BNE     _3
GAME:4F0B                 INX                     ; button is not pressed, if color is BLACK
GAME:4F0C
GAME:4F0C _3:                                     ; CODE XREF: DBMB__DEMO_BOMB_RELEASE+23↑j
GAME:4F0C                 STX     STRIG0_COPY     ; 0=: joystick button is pressed, !=0: button is not pressed
GAME:4F0E                 RTS
GAME:4F0E ; End of function DBMB__DEMO_BOMB_RELEASE
GAME:4F0E
GAME:4F0F
GAME:4F0F ; =============== S U B R O U T I N E =======================================
GAME:4F0F
GAME:4F0F ; Get Demo Joystick Movement
GAME:4F0F
GAME:4F0F DJOY__DEMO_JOYSTICK_INPUT:              ; CODE XREF: DEMO__DEMO_TRIGGER+5↑p
GAME:4F0F                 JSR     DFLSH__DEMO_FLASH_BLUEMAX ; Demo: Pulsate "BLUE MAX" in blue
GAME:4F12                 LDA     IS_DEMO_MODE    ; 0=Demo Mode active
GAME:4F15                 BEQ     _10
GAME:4F17                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4F19                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:4F1B                 CMP     #25
GAME:4F1D                 BCS     _2
GAME:4F1F                 JSR     UP              ; Move Plane up, if possible
GAME:4F22                 RTS
GAME:4F23 ; ---------------------------------------------------------------------------
GAME:4F23
GAME:4F23 _2:                                     ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+E↑j
GAME:4F23                 LDA     DEMO_STICK0     ; Demo mode: joystick movement
GAME:4F26                 CMP     #JOYSTICK_NOTHING
GAME:4F28                 BEQ     _3
GAME:4F2A                 LDA     DEMO_STICK0     ; Demo mode: joystick movement
GAME:4F2D                 CMP     DIRECTION_A
GAME:4F30                 BNE     _15
GAME:4F32                 LDA     PLANE_VERT_SHADOW_POS ; Vertical Position of the Plane Shadow
GAME:4F34                 SBC     PLANE_VERT_POS  ; Vertical Position of the Plane
GAME:4F36                 CMP     #27
GAME:4F38                 BCC     _10
GAME:4F3A
GAME:4F3A _15:                                    ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+21↑j
GAME:4F3A                 DEC     DEMO_JOY_TIMER  ; Demo mode: timer for joystick input
GAME:4F3D                 BNE     _6
GAME:4F3F
GAME:4F3F _10:                                    ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+6↑j
GAME:4F3F                                         ; DJOY__DEMO_JOYSTICK_INPUT+29↑j
GAME:4F3F                 LDA     #JOYSTICK_NOTHING
GAME:4F41                 STA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:4F43                 STA     DEMO_STICK0     ; Demo mode: joystick movement
GAME:4F46                 RTS
GAME:4F47 ; ---------------------------------------------------------------------------
GAME:4F47
GAME:4F47 _6:                                     ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+2E↑j
GAME:4F47                 LDA     DEMO_STICK0     ; Demo mode: joystick movement
GAME:4F4A                 STA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:4F4C                 RTS
GAME:4F4D ; ---------------------------------------------------------------------------
GAME:4F4D
GAME:4F4D _3:                                     ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+19↑j
GAME:4F4D                 LDA     RANDOM          ; Random Number Generator
GAME:4F50                 AND     #111111b
GAME:4F52                 BEQ     _31
GAME:4F54                 LDA     #JOYSTICK_NOTHING
GAME:4F56                 BNE     _32
GAME:4F58
GAME:4F58 _31:                                    ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+43↑j
GAME:4F58                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:4F5A                 AND     #11111b
GAME:4F5C                 ADC     #10
GAME:4F5E                 STA     DEMO_JOY_TIMER  ; Demo mode: timer for joystick input
GAME:4F61
GAME:4F61 _5:                                     ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+59↓j
GAME:4F61                                         ; DJOY__DEMO_JOYSTICK_INPUT+5D↓j
GAME:4F61                 LDA     RANDOM          ; Random Number Generator
GAME:4F64                 AND     #1111b
GAME:4F66                 CMP     #JOYSTICK_DOWN_RIGHT
GAME:4F68                 BCC     _5
GAME:4F6A                 CMP     #JOYSTICK_NOTHING
GAME:4F6C                 BEQ     _5
GAME:4F6E
GAME:4F6E _32:                                    ; CODE XREF: DJOY__DEMO_JOYSTICK_INPUT+47↑j
GAME:4F6E                 STA     STICK0_COPY     ; JOYSTICK 0 copy
GAME:4F70                 STA     DEMO_STICK0     ; Demo mode: joystick movement
GAME:4F73                 RTS
GAME:4F73 ; End of function DJOY__DEMO_JOYSTICK_INPUT
GAME:4F73
GAME:4F74
GAME:4F74 ; =============== S U B R O U T I N E =======================================
GAME:4F74
GAME:4F74 ; Demo: Pulsate "BLUE MAX" in blue
GAME:4F74
GAME:4F74 DFLSH__DEMO_FLASH_BLUEMAX:              ; CODE XREF: EB+73↑p
GAME:4F74                                         ; EB+A7↑p ...
GAME:4F74                 LDA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:4F77                 BEQ     _1              ; => Return
GAME:4F79                 LDA     RTCLOK+2        ; REAL TIME CLOCK (IN 16 MSEC UNITS)
GAME:4F7B                 AND     #1110b
GAME:4F7D                 ADC     #COLOR_INTENSITY_0|COLOR_LIGHT_BLUE
GAME:4F7F                 STA     DL_IRQ_COLPF1   ; COLPF1 color set in the DL IRQ
GAME:4F82
GAME:4F82 _1:                                     ; CODE XREF: DFLSH__DEMO_FLASH_BLUEMAX+3↑j
GAME:4F82                 RTS                     ; => Return
GAME:4F82 ; End of function DFLSH__DEMO_FLASH_BLUEMAX
GAME:4F82
GAME:4F83
GAME:4F83 ; =============== S U B R O U T I N E =======================================
GAME:4F83
GAME:4F83 ; Demo: plane take-off at speed 100
GAME:4F83
GAME:4F83 DTKOF__DEMO_TAKE_OFF:                   ; CODE XREF: TAKOF__TAKEOFF_LOOP+18↑p
GAME:4F83                 LDA     DEMO_IS_ACTIVE  ; 0:normal game play, 1=demo mode active
GAME:4F86                 BEQ     _1              ; => Return
GAME:4F88                 JSR     DFLSH__DEMO_FLASH_BLUEMAX ; Demo: Pulsate "BLUE MAX" in blue
GAME:4F8B                 LDA     SC_STATUS_LINE.line_1.speed_digit_100
GAME:4F8E                 CMP     #_1|_C_BLUE     ; Speed 1xx reached?
GAME:4F90                 BNE     _1              ; => Return
GAME:4F92                 JSR     UP              ; Move Plane up, if possible
GAME:4F95                 PLA
GAME:4F96                 PLA
GAME:4F97
GAME:4F97 _1:                                     ; CODE XREF: DTKOF__DEMO_TAKE_OFF+3↑j
GAME:4F97                                         ; DTKOF__DEMO_TAKE_OFF+D↑j
GAME:4F97                 RTS                     ; => Return
GAME:4F97 ; End of function DTKOF__DEMO_TAKE_OFF
GAME:4F97
GAME:4F98
GAME:4F98 ; =============== S U B R O U T I N E =======================================
GAME:4F98
GAME:4F98 ; Sound: Start playing the title music
GAME:4F98
GAME:4F98 PLAY_IT:                                ; CODE XREF: EB+6D↑p
GAME:4F98                                         ; STOPL:_35↑p
GAME:4F98                 LDX     #2
GAME:4F9A
GAME:4F9A _0:                                     ; CODE XREF: PLAY_IT+B↓j
GAME:4F9A                 LDA     #1
GAME:4F9C                 STA     DUR1,X          ; Duration Voice 1
GAME:4F9F                 STA     V_STAT,X        ; Note Status Channel 1-3
GAME:4FA2                 DEX
GAME:4FA3                 BPL     _0
GAME:4FA5                 LDA     #<VOICE_1
GAME:4FA7                 STA     VV1             ; Sound: Voice 1 Music Playback Note Ptr
GAME:4FA9                 LDA     #>VOICE_1
GAME:4FAB                 STA     VV1+1           ; Sound: Voice 1 Music Playback Note Ptr
GAME:4FAD                 LDA     #<VOICE_2
GAME:4FAF                 STA     VV2             ; Sound: Voice 2 Music Playback Note Ptr
GAME:4FB1                 LDA     #>VOICE_2
GAME:4FB3                 STA     VV2+1           ; Sound: Voice 2 Music Playback Note Ptr
GAME:4FB5                 LDA     #<VOICE_3
GAME:4FB7                 STA     VV3             ; Sound: Voice 3 Music Playback Note Ptr
GAME:4FB9                 LDA     #>VOICE_3
GAME:4FBB                 STA     VV3+1           ; Sound: Voice 3 Music Playback Note Ptr
GAME:4FBD                 LDA     #>_1__SOUND_TIMER_IRQ ; Sound: Playback Interrupt via Timer 1
GAME:4FBF                 STA     CDTMA1          ; COUNT DOWN TIMER 1 JSR ADDRESS
GAME:4FC2                 LDA     #<_1__SOUND_TIMER_IRQ ; Sound: Playback Interrupt via Timer 1
GAME:4FC4                 STA     CDTMA1+1        ; COUNT DOWN TIMER 1 JSR ADDRESS
GAME:4FC7                 LDX     #1
GAME:4FC9                 STX     CDTMV1          ; COUNT DOWN TIMER 1 - used for music playback
GAME:4FCC                 DEX
GAME:4FCD                 STX     CDTMV1+1        ; COUNT DOWN TIMER 1 - used for music playback
GAME:4FD0                 RTS
GAME:4FD0 ; End of function PLAY_IT
GAME:4FD0
GAME:4FD1
GAME:4FD1 ; =============== S U B R O U T I N E =======================================
GAME:4FD1
GAME:4FD1 ; Sound: Playback Interrupt via Timer 1
GAME:4FD1
GAME:4FD1 _1__SOUND_TIMER_IRQ:                    ; DATA XREF: PLAY_IT+25↑t
GAME:4FD1                                         ; PLAY_IT+2A↑t
GAME:4FD1                 PHA
GAME:4FD2                 TXA
GAME:4FD3                 PHA
GAME:4FD4                 TYA
GAME:4FD5                 PHA
GAME:4FD6                 LDA     #3
GAME:4FD8                 STA     SKSTAT          ; Serial Port control Register
GAME:4FDB                 LDA     #0
GAME:4FDD                 STA     AUDCTL          ; Audio Control Register
GAME:4FE0                 JSR     PLAY_NOTE       ; Sound: Play a multichannel notes – call via the IRQ
GAME:4FE3                 LDA     #0
GAME:4FE5                 LDX     #2
GAME:4FE7
GAME:4FE7 _2:                                     ; CODE XREF: _1__SOUND_TIMER_IRQ+1A↓j
GAME:4FE7                 ORA     V_STAT,X        ; Note Status Channel 1-3
GAME:4FEA                 DEX
GAME:4FEB                 BPL     _2
GAME:4FED                 STA     CDTMV1          ; COUNT DOWN TIMER 1 - used for music playback
GAME:4FF0                 TAX
GAME:4FF1                 BNE     _3
GAME:4FF3                 JSR     STOP_SN         ; Sound: Stop
GAME:4FF6                 STA     SOUND_MUSIC_ACTIVE_6FF ; Sound: Music playback is active, when != 0
GAME:4FF9
GAME:4FF9 _3:                                     ; CODE XREF: _1__SOUND_TIMER_IRQ+20↑j
GAME:4FF9                 PLA
GAME:4FFA                 TAY
GAME:4FFB                 PLA
GAME:4FFC                 TAX
GAME:4FFD                 PLA
GAME:4FFE                 RTS
GAME:4FFE ; End of function _1__SOUND_TIMER_IRQ
GAME:4FFE
GAME:4FFF
GAME:4FFF ; =============== S U B R O U T I N E =======================================
GAME:4FFF
GAME:4FFF ; Sound: Play a multichannel notes – call via the IRQ
GAME:4FFF
GAME:4FFF PLAY_NOTE:                              ; CODE XREF: _1__SOUND_TIMER_IRQ+F↑p
GAME:4FFF                 LDA     V_STAT          ; Note Status Channel 1-3
GAME:5002                 BEQ     D22
GAME:5004                 DEC     DUR1            ; DO VOICE 0
GAME:5007                 LDA     DUR1            ; Duration Voice 1
GAME:500A                 BNE     DD2
GAME:500C
GAME:500C                 LDY     #0
GAME:500E                 STY     TIE
GAME:5011                 LDA     (VV1),Y         ; Sound: Voice 1 Music Playback Note Ptr
GAME:5013                 CMP     #255
GAME:5015                 BNE     _1_0
GAME:5017                 LDA     #0
GAME:5019                 STA     V_STAT          ; Note Status Channel 1-3
GAME:501C                 JMP     D22
GAME:501F ; ---------------------------------------------------------------------------
GAME:501F
GAME:501F _1_0:                                   ; CODE XREF: PLAY_NOTE+16↑j
GAME:501F                 JSR     GET_AUDF        ; Sound: Get Audio Frequency
GAME:5022                 STA     AUDF1           ; Audio 1 Frequency Register
GAME:5025                 TXA
GAME:5026                 BEQ     _2_
GAME:5028                 ORA     #1000b          ; VOLUME1
GAME:502A
GAME:502A _2_:                                    ; CODE XREF: PLAY_NOTE+27↑j
GAME:502A                 STA     VOL1            ; Volume Voice 1
GAME:502D                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:5030                 INY
GAME:5031                 LDA     (VV1),Y         ; Sound: Voice 1 Music Playback Note Ptr
GAME:5033                 BPL     NOTIE
GAME:5035                 AND     #1111111b
GAME:5037                 LDX     #1
GAME:5039                 STX     TIE
GAME:503C
GAME:503C NOTIE:                                  ; CODE XREF: PLAY_NOTE+34↑j
GAME:503C                 JSR     MULT            ; Sound: Convert Tempo to Duration
GAME:503F                 STA     DUR1            ; Duration Voice 1
GAME:5042                 LDA     VV1             ; Sound: Voice 1 Music Playback Note Ptr
GAME:5044                 CLC
GAME:5045                 ADC     #2
GAME:5047                 STA     VV1             ; Sound: Voice 1 Music Playback Note Ptr
GAME:5049                 LDA     VV1+1           ; Sound: Voice 1 Music Playback Note Ptr
GAME:504B                 ADC     #0
GAME:504D                 STA     VV1+1           ; Sound: Voice 1 Music Playback Note Ptr
GAME:504F                 JMP     D22
GAME:5052 ; ---------------------------------------------------------------------------
GAME:5052
GAME:5052 DD2:                                    ; CODE XREF: PLAY_NOTE+B↑j
GAME:5052                 CMP     #8
GAME:5054                 BCS     D22
GAME:5056                 LDA     TIE
GAME:5059                 BNE     D22
GAME:505B                 LDA     VOL1            ; Volume Voice 1
GAME:505E                 AND     #1111b
GAME:5060                 BEQ     _1_1
GAME:5062                 DEC     VOL1            ; Volume Voice 1
GAME:5065                 LDA     VOL1            ; Volume Voice 1
GAME:5068
GAME:5068 _1_1:                                   ; CODE XREF: PLAY_NOTE+61↑j
GAME:5068                 STA     AUDC1           ; Audio 1 Channel Control Register
GAME:506B
GAME:506B D22:                                    ; CODE XREF: PLAY_NOTE+3↑j
GAME:506B                                         ; PLAY_NOTE+1D↑j ...
GAME:506B                 LDA     V_STAT+1        ; Note Status Channel 1-3
GAME:506E                 BEQ     D33
GAME:5070                 DEC     DUR2            ; Duration Voice 2
GAME:5073                 LDA     DUR2            ; Duration Voice 2
GAME:5076                 BNE     DD3
GAME:5078                 LDY     #0
GAME:507A                 STY     TIE+1
GAME:507D                 LDA     (VV2),Y         ; Sound: Voice 2 Music Playback Note Ptr
GAME:507F                 CMP     #255
GAME:5081                 BNE     _1_2
GAME:5083                 LDA     #0
GAME:5085                 STA     V_STAT+1        ; Note Status Channel 1-3
GAME:5088                 JMP     D33
GAME:508B ; ---------------------------------------------------------------------------
GAME:508B
GAME:508B _1_2:                                   ; CODE XREF: PLAY_NOTE+82↑j
GAME:508B                 JSR     GET_AUDF        ; Sound: Get Audio Frequency
GAME:508E                 STA     AUDF2           ; Audio 2 Frequency Register
GAME:5091                 TXA
GAME:5092                 BEQ     _2__
GAME:5094                 ORA     #101b           ; VOLUME2
GAME:5096
GAME:5096 _2__:                                   ; CODE XREF: PLAY_NOTE+93↑j
GAME:5096                 STA     VOL2            ; Volume Voice 2
GAME:5099                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:509C                 INY
GAME:509D                 LDA     (VV2),Y         ; Sound: Voice 2 Music Playback Note Ptr
GAME:509F                 BPL     NOTI2
GAME:50A1                 AND     #1111111b
GAME:50A3                 LDX     #1
GAME:50A5                 STX     TIE+1
GAME:50A8
GAME:50A8 NOTI2:                                  ; CODE XREF: PLAY_NOTE+A0↑j
GAME:50A8                 JSR     MULT            ; Sound: Convert Tempo to Duration
GAME:50AB                 STA     DUR2            ; Duration Voice 2
GAME:50AE                 LDA     VV2             ; Sound: Voice 2 Music Playback Note Ptr
GAME:50B0                 CLC
GAME:50B1                 ADC     #2
GAME:50B3                 STA     VV2             ; Sound: Voice 2 Music Playback Note Ptr
GAME:50B5                 LDA     VV2+1           ; Sound: Voice 2 Music Playback Note Ptr
GAME:50B7                 ADC     #0
GAME:50B9                 STA     VV2+1           ; Sound: Voice 2 Music Playback Note Ptr
GAME:50BB                 JMP     D33
GAME:50BE ; ---------------------------------------------------------------------------
GAME:50BE
GAME:50BE DD3:                                    ; CODE XREF: PLAY_NOTE+77↑j
GAME:50BE                 CMP     #4
GAME:50C0                 BCS     D33
GAME:50C2                 LDA     TIE+1
GAME:50C5                 BNE     D33
GAME:50C7                 LDA     VOL2            ; Volume Voice 2
GAME:50CA                 BEQ     _1_3
GAME:50CC                 DEC     VOL2            ; Volume Voice 2
GAME:50CF                 LDA     VOL2            ; Volume Voice 2
GAME:50D2
GAME:50D2 _1_3:                                   ; CODE XREF: PLAY_NOTE+CB↑j
GAME:50D2                 STA     AUDC2           ; Audio 2 Channel Control Register
GAME:50D5
GAME:50D5 D33:                                    ; CODE XREF: PLAY_NOTE+6F↑j
GAME:50D5                                         ; PLAY_NOTE+89↑j ...
GAME:50D5                 LDA     V_STAT+2        ; Note Status Channel 1-3
GAME:50D8                 BEQ     D44             ; => Return
GAME:50DA                 DEC     DUR3            ; Duration Voice 3
GAME:50DD                 LDA     DUR3            ; Duration Voice 3
GAME:50E0                 BNE     DD4
GAME:50E2                 LDY     #0
GAME:50E4                 STY     TIE+2
GAME:50E7                 LDA     (VV3),Y         ; Sound: Voice 3 Music Playback Note Ptr
GAME:50E9                 CMP     #255
GAME:50EB                 BNE     _12
GAME:50ED                 LDA     #0
GAME:50EF                 STA     V_STAT+2        ; Note Status Channel 1-3
GAME:50F2                 JMP     D44             ; => Return
GAME:50F5 ; ---------------------------------------------------------------------------
GAME:50F5
GAME:50F5 _12:                                    ; CODE XREF: PLAY_NOTE+EC↑j
GAME:50F5                 JSR     GET_AUDF        ; Sound: Get Audio Frequency
GAME:50F8                 STA     AUDF3           ; Audio 3 Frequency Register
GAME:50FB                 TXA
GAME:50FC                 BEQ     _2
GAME:50FE                 ORA     #11b            ; VOLUME3
GAME:5100
GAME:5100 _2:                                     ; CODE XREF: PLAY_NOTE+FD↑j
GAME:5100                 STA     VOL3            ; Volume Voice 3
GAME:5103                 STA     AUDC3           ; Audio 3 Channel Control Register
GAME:5106                 INY
GAME:5107                 LDA     (VV3),Y         ; Sound: Voice 3 Music Playback Note Ptr
GAME:5109                 BPL     NOTI3
GAME:510B                 AND     #1111111b
GAME:510D                 LDX     #1
GAME:510F                 STX     TIE+2
GAME:5112
GAME:5112 NOTI3:                                  ; CODE XREF: PLAY_NOTE+10A↑j
GAME:5112                 JSR     MULT            ; Sound: Convert Tempo to Duration
GAME:5115                 STA     DUR3            ; Duration Voice 3
GAME:5118                 LDA     VV3             ; Sound: Voice 3 Music Playback Note Ptr
GAME:511A                 CLC
GAME:511B                 ADC     #2
GAME:511D                 STA     VV3             ; Sound: Voice 3 Music Playback Note Ptr
GAME:511F                 LDA     VV3+1           ; Sound: Voice 3 Music Playback Note Ptr
GAME:5121                 ADC     #0
GAME:5123                 STA     VV3+1           ; Sound: Voice 3 Music Playback Note Ptr
GAME:5125                 JMP     D44             ; => Return
GAME:5128 ; ---------------------------------------------------------------------------
GAME:5128
GAME:5128 DD4:                                    ; CODE XREF: PLAY_NOTE+E1↑j
GAME:5128                 CMP     #4
GAME:512A                 BCS     D44             ; => Return
GAME:512C                 LDA     TIE+2
GAME:512F                 BNE     D44             ; => Return
GAME:5131                 LDA     VOL3            ; Volume Voice 3
GAME:5134                 BEQ     _1
GAME:5136                 DEC     VOL3            ; Volume Voice 3
GAME:5139                 LDA     VOL3            ; Volume Voice 3
GAME:513C
GAME:513C _1:                                     ; CODE XREF: PLAY_NOTE+135↑j
GAME:513C                 STA     AUDC3           ; Audio 3 Channel Control Register
GAME:513F
GAME:513F D44:                                    ; CODE XREF: PLAY_NOTE+D9↑j
GAME:513F                                         ; PLAY_NOTE+F3↑j ...
GAME:513F                 RTS                     ; => Return
GAME:513F ; End of function PLAY_NOTE
GAME:513F
GAME:5140
GAME:5140 ; =============== S U B R O U T I N E =======================================
GAME:5140
GAME:5140 ; Sound: Convert Tempo to Duration
GAME:5140
GAME:5140 MULT:                                   ; CODE XREF: PLAY_NOTE:NOTIE↑p
GAME:5140                                         ; PLAY_NOTE:NOTI2↑p ...
GAME:5140                 TAY
GAME:5141                 LSR     A
GAME:5142                 STA     TEMP0           ; Playback tempo
GAME:5145                 TYA
GAME:5146                 LDY     #1
GAME:5148                 BEQ     _2              ; => Return
GAME:514A
GAME:514A _1:                                     ; CODE XREF: MULT+F↓j
GAME:514A                 CLC
GAME:514B                 ADC     TEMP0           ; Playback tempo
GAME:514E                 DEY
GAME:514F                 BNE     _1
GAME:5151
GAME:5151 _2:                                     ; CODE XREF: MULT+8↑j
GAME:5151                 RTS                     ; => Return
GAME:5151 ; End of function MULT
GAME:5151
GAME:5152
GAME:5152 ; =============== S U B R O U T I N E =======================================
GAME:5152
GAME:5152 ; Sound: Get Audio Frequency
GAME:5152
GAME:5152 GET_AUDF:                               ; CODE XREF: PLAY_NOTE:_1_0↑p
GAME:5152                                         ; PLAY_NOTE:_1_2↑p ...
GAME:5152                 PHA
GAME:5153                 AND     #1111b
GAME:5155                 CMP     #15
GAME:5157                 BEQ     _2
GAME:5159                 CLC
GAME:515A                 ADC     #>NOTE_TABLE
GAME:515C                 STA     ADR1            ; Sound: temp addr for sound frequency calculation
GAME:515E                 LDA     #<NOTE_TABLE
GAME:5160                 ADC     #0
GAME:5162                 STA     ADR1+1          ; Sound: temp addr for sound frequency calculation
GAME:5164                 PLA
GAME:5165                 PHA
GAME:5166                 LSR     A
GAME:5167                 LSR     A
GAME:5168                 LSR     A
GAME:5169                 LSR     A
GAME:516A                 TAX
GAME:516B                 LDA     OCTAVE_OFFSET,X
GAME:516E                 CLC
GAME:516F                 ADC     ADR1            ; Sound: temp addr for sound frequency calculation
GAME:5171                 STA     ADR1            ; Sound: temp addr for sound frequency calculation
GAME:5173                 LDA     ADR1+1          ; Sound: temp addr for sound frequency calculation
GAME:5175                 ADC     #0
GAME:5177                 STA     ADR1+1          ; Sound: temp addr for sound frequency calculation
GAME:5179                 LDX     #0
GAME:517B                 LDA     (ADR1,X)        ; Sound: temp addr for sound frequency calculation
GAME:517D                 STA     TEMP0           ; Playback tempo
GAME:5180                 LDX     #$A0
GAME:5182                 PLA
GAME:5183                 CMP     #66
GAME:5185                 BCC     _1
GAME:5187                 LDX     #$C0
GAME:5189
GAME:5189 _1:                                     ; CODE XREF: GET_AUDF+33↑j
GAME:5189                 LDA     TEMP0           ; Playback tempo
GAME:518C                 RTS
GAME:518D ; ---------------------------------------------------------------------------
GAME:518D
GAME:518D _2:                                     ; CODE XREF: GET_AUDF+5↑j
GAME:518D                 PLA
GAME:518E                 LDA     #0
GAME:5190                 TAX
GAME:5191                 RTS
GAME:5191 ; End of function GET_AUDF
GAME:5191
GAME:5192
GAME:5192 ; =============== S U B R O U T I N E =======================================
GAME:5192
GAME:5192 ; Sound: Stop
GAME:5192
GAME:5192 STOP_SN:                                ; CODE XREF: RESET:START↑p
GAME:5192                                         ; _1__SOUND_TIMER_IRQ+22↑p
GAME:5192                 LDX     #7
GAME:5194                 LDA     #0
GAME:5196
GAME:5196 _1:                                     ; CODE XREF: STOP_SN+8↓j
GAME:5196                 STA     AUDF1,X         ; Audio 1 Frequency Register
GAME:5199                 DEX
GAME:519A                 BPL     _1
GAME:519C                 RTS
GAME:519C ; End of function STOP_SN
GAME:519C
GAME:519C ; end of 'GAME'
GAME:519C
DATA:519D ; Pre-initialized data and variables of the game
DATA:519D ; ===========================================================================
DATA:519D
DATA:519D ; Segment type: Pure data
DATA:519D                 ;.segment DATA
DATA:519D                 * =  $519D
DATA:519D NOTE_TABLE:     .BYTE   1,  3,  6,  9, $C, $F,$12,$16,$17,$19,$1A,$1C
DATA:519D                 .BYTE $1D,$1F,$21,$23,$25,$28,$2A,$2D,$2F,$32,$35,$39
DATA:519D                 .BYTE $3C,$40,$44,$48,$4C,$51,$55,$5B,$60,$66,$6C,$72
DATA:519D                 .BYTE $79,$80,$88,$90,$99,$A2,$AD,$B6,$C1,$CC,$D9,$E6
DATA:519D                 .BYTE $F3,$FF,$6E,$74,$7A,$83,$89,$92,$9B,$A7,$AD,$B9
DATA:519D                 .BYTE $C5,$CE,$DD,$E9,$F5,$57,$5B,$61,$66,$6C,$73,$79
DATA:519D                 .BYTE $82
DATA:51E6 OCTAVE_OFFSET:  .BYTE   0, $C,$18,$24,$30,$3C,$48
DATA:51E6                                         ; DATA XREF: GET_AUDF+19↑r
DATA:51ED ; Garbage data (leftover from the assembler) from here on:
DATA:51ED                 .BYTE   0,  0,$81,$42,$45,$51,$81,$52,$57,  0, $B,$E6,  0,$81,$43,$4D
DATA:51ED                 .BYTE $50,$81,$23,$31,  0, $B,$EB,  0,$81,$42,$45,$51,$81,$52,$58,  0
DATA:51ED                 .BYTE  $B,$F0,  0,$81,$43,$4D,$50,$81,$23,$32,  0, $B,$F5,  0,$81,$42
DATA:51ED                 .BYTE $45,$51,$81,$52,$59,  0,$10,$FA,  0,$81,$4C,$44,$41,$81,$53,$43
DATA:51ED                 .BYTE $2B,$24,$36,$35,$38,  0, $B,$FF,  0,$81,$42,$4E,$45,$81,$52,$5A
DATA:51ED                 .BYTE   0, $D,  4,  1,$81,$4C,$44, $D, $A,  0,$2A,$45,$58,$58,$4F,$4E
DATA:51ED                 .BYTE $2E,$31,$36,  0,$16,$64,  0,$54,$4B,$4F,$53,$50,$44,$81,$49,$4E
DATA:51ED                 .BYTE $43,$81,$53,$43,$2B,$24,$36,$36,$37,  0,$10,$69,  0,$81,$4C,$44
DATA:51ED                 .BYTE $41,$81,$53,$43,$2B,$24,$36,$36,$37,  0, $D,$6E,  0,$81,$43,$4D
DATA:51ED                 .BYTE $50,$81,$23
DATA:5280 ; The following data contain variables, but are uninitialized
DATA:5280 DL:             .BYTE $6A,$C9,$50,$D0,$14,$AD,$4B,$6A,$C9,$50,$D0, $D,$8D,$4D,$6A,$A2,  0,$8E,$3F,  6,$E8,$8E,$43,  6,$60,$A9,$59,$8D,$4D,$6A,$CE,$4C,$6A,$AD,$4C,$6A,$C9,$4F,$F0,  1,$60,$A9,$59,$8D,$4C,$6A,$CE,$4B,$6A,$60,$AD,$4B,$6A,$C9,$53,$D0,$7F,$EE,$E0,  6,$20,$F6,$25,$A9,$E2,$8D,$4F,$6A,$AD
DATA:5280                                         ; DATA XREF: RESET+4D↑w
DATA:5280                                         ; RESET:A_↑t ...
DATA:52C5 BOTSCREN:       .WORD WORKING_PARTS     ; DATA XREF: VBIR__DEFERRED_VBL_DRAW+5B↑r
DATA:52C5                                         ; VBIR__DEFERRED_VBL_DRAW+67↑r
DATA:52C5                                         ; # of working part (4): fuel, bomb, maneuverabiity, gun
DATA:52C7 DL_plus_71:     .BYTE $C9,  4,$B0,$42,$A9,$5A,$85,$F8,$20,$74
DATA:52C7                                         ; DATA XREF: RESET+83↑w
DATA:52C7                                         ; RESET+8D↑w ...
DATA:52D1 TOP:            .WORD $2013             ; DATA XREF: RESET+FE↑w
DATA:52D1                                         ; VBIR__DEFERRED_VBL_DRAW+8A↑r ...
DATA:52D1                                         ; First byte of the screen level memory
DATA:52D3 BOTM:           .WORD $4786             ; DATA XREF: RESET+F4↑w
DATA:52D3                                         ; VBIR__DEFERRED_VBL_DRAW+4A↑r ...
DATA:52D3                                         ; Last byte of the screen level memory
DATA:52D5 BUF:            .WORD $5620             ; DATA XREF: VBIR__DEFERRED_VBL_DRAW+50↑w
DATA:52D5                                         ; VBIR__DEFERRED_VBL_DRAW+9B↑r ...
DATA:52D7 ; From here on are initialized data:
DATA:52D7 P0IMAGE:        .BYTE 10000100b         ; DATA XREF: DRP0:BH↑r
DATA:52D7                                         ; PROP:BT↑r ...
DATA:52D7                 .BYTE  1000100b         ; regular plane (0-9), contrast color (10-12), contrast color (13-15)
DATA:52D7                 .BYTE 10100010b
DATA:52D7                 .BYTE  1011000b
DATA:52D7                 .BYTE   101000b
DATA:52D7                 .BYTE 10110100b
DATA:52D7                 .BYTE 11101010b
DATA:52D7                 .BYTE 11000101b
DATA:52D7                 .BYTE       10b
DATA:52D7                 .BYTE         1
DATA:52D7                 .BYTE 10000000b
DATA:52D7                 .BYTE  1001000b
DATA:52D7                 .BYTE 10100010b
DATA:52D7                 .BYTE 10000100b
DATA:52D7                 .BYTE  1000100b
DATA:52D7                 .BYTE 10100000b
DATA:52E7 P1IMAGE:        .BYTE 10000010b         ; DATA XREF: SHDW_SUB:loc_1367↑r
DATA:52E7                                         ; L6:OK↑t ...
DATA:52E7                 .BYTE  1000110b         ; plane shadow (0-7), plane turning left (8-17), plane turning right (18-27)
DATA:52E7                 .BYTE   101100b
DATA:52E7                 .BYTE    11000b
DATA:52E7                 .BYTE   111000b
DATA:52E7                 .BYTE 11100100b
DATA:52E7                 .BYTE 11000010b
DATA:52E7                 .BYTE  1000001b
DATA:52E7                 .BYTE         0
DATA:52E7                 .BYTE         0
DATA:52E7                 .BYTE         0
DATA:52E7                 .BYTE    11000b
DATA:52E7                 .BYTE 11101111b
DATA:52E7                 .BYTE 10110000b
DATA:52E7                 .BYTE 11111111b
DATA:52E7                 .BYTE 11000000b
DATA:52E7                 .BYTE         0
DATA:52E7                 .BYTE         0
DATA:52E7                 .BYTE 11000000b
DATA:52E7                 .BYTE  1000000b
DATA:52E7                 .BYTE  1100000b
DATA:52E7                 .BYTE   111000b
DATA:52E7                 .BYTE   101000b
DATA:52E7                 .BYTE   111000b
DATA:52E7                 .BYTE 11101100b
DATA:52E7                 .BYTE 11000100b
DATA:52E7                 .BYTE  1000110b
DATA:52E7                 .BYTE       10b
DATA:5303 CARRT:          .BYTE    10000b         ; DATA XREF: DRP23:IV↑t
DATA:5303                 .BYTE 10011100b         ; car driving right
DATA:5303                 .BYTE 10011100b
DATA:5303                 .BYTE 11111100b
DATA:5303                 .BYTE 10110100b
DATA:5308 CARLT:          .BYTE   100000b         ; DATA XREF: DRP23:IW↑t
DATA:5308                 .BYTE 11100100b         ; car driving left
DATA:5308                 .BYTE 11100100b
DATA:5308                 .BYTE 11111100b
DATA:5308                 .BYTE 10110100b
DATA:530D TYRRT:          .BYTE  1100000b         ; DATA XREF: DRP23+68↑t
DATA:530D                 .BYTE  1100000b         ; car tyres driving right
DATA:530D                 .BYTE         0
DATA:530D                 .BYTE  1001000b
DATA:530D                 .BYTE  1001000b
DATA:5312 TYRLT:          .BYTE    11000b         ; DATA XREF: DRP23+8F↑t
DATA:5312                 .BYTE    11000b         ; car tyres driving left
DATA:5312                 .BYTE         0
DATA:5312                 .BYTE  1001000b
DATA:5312                 .BYTE  1001000b
DATA:5317 TRRT:           .BYTE 11111100b         ; DATA XREF: DRP23:KA↑t
DATA:5317                 .BYTE 11111100b         ; truck driving right
DATA:5317                 .BYTE       10b
DATA:5317                 .BYTE 11111111b
DATA:5317                 .BYTE       10b
DATA:5317                 .BYTE 10111101b
DATA:531D TYRTRR:         .BYTE         0         ; DATA XREF: DRP23+123↑t
DATA:531D                 .BYTE 11111100b         ; truck tyres driving right
DATA:531D                 .BYTE         0
DATA:531D                 .BYTE 11111100b
DATA:531D                 .BYTE  1000010b
DATA:531D                 .BYTE  1000010b
DATA:5323 TRLT:           .BYTE   111111b         ; DATA XREF: DRP23:KB↑t
DATA:5323                 .BYTE   111111b         ; truck driving left
DATA:5323                 .BYTE  1000000b
DATA:5323                 .BYTE 11111111b
DATA:5323                 .BYTE 11000000b
DATA:5323                 .BYTE 10111101b
DATA:5329 TYRTRL:         .BYTE         0         ; DATA XREF: DRP23+14A↑t
DATA:5329                 .BYTE   111111b         ; truck tyres driving left
DATA:5329                 .BYTE         0
DATA:5329                 .BYTE   111111b
DATA:5329                 .BYTE  1000010b
DATA:5329                 .BYTE  1000010b
DATA:532F SHDW:           .BYTE       10b         ; DATA XREF: PLFWD:KU↑t
DATA:532F                 .BYTE  1000011b         ; enemy plane shadow flying towards player
DATA:532F                 .BYTE   100111b
DATA:532F                 .BYTE    11100b
DATA:532F                 .BYTE    11000b
DATA:532F                 .BYTE   110100b
DATA:532F                 .BYTE  1100010b
DATA:532F                 .BYTE  1000001b
DATA:532F                 .BYTE         0
DATA:532F                 .BYTE         0
DATA:5339 PLANE1:         .BYTE 10000100b         ; DATA XREF: PLFWD:loc_21A3↑t
DATA:5339                 .BYTE  1000100b         ; enemy plane flying towards player
DATA:5339                 .BYTE 10101110b
DATA:5339                 .BYTE  1011100b
DATA:5339                 .BYTE   101000b
DATA:5339                 .BYTE   110100b
DATA:5339                 .BYTE     1010b
DATA:5339                 .BYTE      101b
DATA:5339                 .BYTE       10b
DATA:5339                 .BYTE         1
DATA:5343 PROPIM:         .BYTE 10110100b         ; DATA XREF: PLFWD:loc_216C↑t
DATA:5343                                         ; PLFWD:loc_217B↑r
DATA:5343                 .BYTE     1010b         ; enemy plane propeller animations (0-3 and 4-7)
DATA:5343                 .BYTE  1000101b
DATA:5343                 .BYTE  1000010b
DATA:5343                 .BYTE   110100b
DATA:5343                 .BYTE 10001010b
DATA:5343                 .BYTE   100101b
DATA:5343                 .BYTE       10b
DATA:534B
DATA:534B BR1:            .BYTE L_ANTI_AIRCRAFT_BATTERY_A|L_C_1,L_CLIFF_GRAS_A|L_C_0,L_BRIDGE_J|L_C_1,L_BRIDGE_G|L_C_1
DATA:534B                                         ; DATA XREF: DRBR__DRAW_BRIDGE:FT↑t
DATA:534B                 .BYTE L_BRIDGE_G|L_C_1,L_BRIDGE_G|L_C_1,L_BRIDGE_G|L_C_1,L_BRIDGE_Q|L_C_1
DATA:534B                 .BYTE L_BRIDGE_Q|L_C_1,L_BRIDGE_J|L_C_1,L_BRIDGE_G|L_C_1,L_BRIDGE_G|L_C_1
DATA:534B                 .BYTE L_BRIDGE_G|L_C_1,L_BRIDGE_G|L_C_1,L_BRIDGE_G|L_C_1,L_BRIDGE_Q|L_C_1
DATA:534B                 .BYTE L_BRIDGE_Q|L_C_1,L_BRIDGE_J|L_C_1,L_BRIDGE_G|L_C_1,L_BRIDGE_G|L_C_1
DATA:534B                 .BYTE L_BRIDGE_G|L_C_1,L_BRIDGE_G|L_C_1,L_BRIDGE_H|L_C_1,L_GRAS_BEFORE_BUILDING|L_C_0
DATA:534B                 .BYTE L_ANTI_AIRCRAFT_BATTERY_A|L_C_1
DATA:5364 BR2:            .BYTE L_BRIDGE_C|L_C_1,L_BRIDGE_A|L_C_1,L_BRIDGE_F|L_C_1,L_BRIDGE_F|L_C_1
DATA:5364                                         ; DATA XREF: DRBR__DRAW_BRIDGE:GA↑t
DATA:5364                 .BYTE L_BRIDGE_F|L_C_1,L_BRIDGE_C|L_C_1,L_BRIDGE_C|L_C_1,L_BRIDGE_A|L_C_1
DATA:5364                 .BYTE L_BRIDGE_F|L_C_1,L_BRIDGE_F|L_C_1,L_BRIDGE_F|L_C_1,L_BRIDGE_F|L_C_1
DATA:5364                 .BYTE L_BRIDGE_F|L_C_1,L_BRIDGE_C|L_C_1,L_BRIDGE_C|L_C_1,L_BRIDGE_A|L_C_1
DATA:5364                 .BYTE L_BRIDGE_F|L_C_1,L_BRIDGE_F|L_C_1,L_BRIDGE_F|L_C_1,L_BRIDGE_C|L_C_1
DATA:5364                 .BYTE L_BRIDGE_D|L_C_1
DATA:5379 BR3:            .BYTE L_BRIDGE_P|L_C_1,L_BRIDGE_O|L_C_1,L_BRIDGE_B|L_C_1,L_BRIDGE_B|L_C_1
DATA:5379                                         ; DATA XREF: DRBR__DRAW_BRIDGE+132↑t
DATA:5379                 .BYTE L_BRIDGE_B|L_C_1,L_BRIDGE_P|L_C_1,L_BRIDGE_P|L_C_1,L_BRIDGE_O|L_C_1
DATA:5379                 .BYTE L_BRIDGE_B|L_C_1,L_BRIDGE_B|L_C_1,L_BRIDGE_B|L_C_1,L_BRIDGE_B|L_C_1
DATA:5379                 .BYTE L_BRIDGE_B|L_C_1,L_BRIDGE_P|L_C_1,L_BRIDGE_P|L_C_1,L_BRIDGE_O|L_C_1
DATA:5379                 .BYTE L_BRIDGE_B|L_C_1,L_BRIDGE_B|L_C_1,L_BRIDGE_B|L_C_1,L_BRIDGE_P|L_C_1
DATA:5379                 .BYTE L_BRIDGE_O|L_C_1
DATA:538E
DATA:538E XPL1IM:         .BYTE 10001000b         ; DATA XREF: TURN:_10↑r
DATA:538E                                         ; DG:_1↑r
DATA:538E                 .BYTE   100001b         ; plane explosion
DATA:538E                 .BYTE       10b
DATA:538E                 .BYTE  1010010b
DATA:538E                 .BYTE   100100b
DATA:538E                 .BYTE   101001b
DATA:538E                 .BYTE 10011100b
DATA:538E                 .BYTE   110010b
DATA:538E                 .BYTE   101100b
DATA:538E                 .BYTE 11000000b
DATA:538E                 .BYTE    10100b
DATA:538E                 .BYTE 10000010b
DATA:538E                 .BYTE         1
DATA:539B
DATA:539B ROADR:          .BYTE L_ROAD_DIAG_LEFT_A|L_C_1,L_ROAD_DIAG_LEFT_B|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_ROAD_DIAG_RIGHT_A|L_C_1,L_ROAD_DIAG_RIGHT_B|L_C_1,L_GRAS_BEFORE_BUILDING|L_C_0
DATA:539B                                         ; DATA XREF: DROAD+23↑t
DATA:53A2 ROADS:          .BYTE L_RUNWAY_LEFT|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_RIGHT|L_C_1
DATA:53A2                                         ; DATA XREF: DROAD+34↑t
DATA:53A7 HNGR1:          .BYTE L_HANGAR_A|L_C_1,L_SOLID_WALL|L_C_0,L_SOLID_WALL|L_C_0,L_HANGAR_A|L_C_1,L_HANGAR_F|L_C_1
DATA:53A7                                         ; DATA XREF: ENRUN:UJ↑t
DATA:53AC HNGR2:          .BYTE L_HANGAR_B|L_C_1,L_HANGAR_C|L_C_1,L_HANGAR_D|L_C_1,L_HANGAR_E|L_C_1,L_HANGAR_G|L_C_1,L_HANGAR_F|L_C_1
DATA:53AC                                         ; DATA XREF: ENRUN:UK↑t
DATA:53B2 HNGR3:          .BYTE L_HANGAR_H|L_C_0,L_SOLID_WALL|L_C_0,L_SOLID_WALL|L_C_0,L_SOLID_WALL|L_C_0,L_HANGAR_G|L_C_1,L_HANGAR_F|L_C_1
DATA:53B2                                         ; DATA XREF: ENRUN:UM↑t
DATA:53B8 HNGR5:          .BYTE L_HANGAR_I|L_C_0,L_HANGAR_J|L_C_0,L_HANGAR_K|L_C_0,L_HANGAR_L|L_C_0
DATA:53B8                                         ; DATA XREF: ENRUN:UN↑t
DATA:53BC ENRNIM:         .BYTE L_RUNWAY_LEFT|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_CENTER|L_C_1,L_RUNWAY_RIGHT|L_C_1
DATA:53BC                                         ; DATA XREF: ENRUN+44↑t
DATA:53BC                                         ; Enemy runway
DATA:53C7
DATA:53C7 SHPIM:          .BYTE         0         ; DATA XREF: SHIP:I5↑t
DATA:53C7                 .BYTE      110b         ; moving ship
DATA:53C7                 .BYTE     1010b
DATA:53C7                 .BYTE     1110b
DATA:53C7                 .BYTE    10010b
DATA:53C7                 .BYTE    10100b
DATA:53C7                 .BYTE   110100b
DATA:53C7                 .BYTE    11100b
DATA:53C7                 .BYTE  1011000b
DATA:53C7                 .BYTE  1011000b
DATA:53C7                 .BYTE 10101000b
DATA:53C7                 .BYTE 11110000b
DATA:53D3 SHPIM1:         .BYTE      100b         ; DATA XREF: SHIP+40↑t
DATA:53D3                 .BYTE         0         ; moving ship black highlight color
DATA:53D3                 .BYTE     1100b
DATA:53D3                 .BYTE     1010b
DATA:53D3                 .BYTE     1010b
DATA:53D3                 .BYTE   100000b
DATA:53D3                 .BYTE   100100b
DATA:53D3                 .BYTE   100100b
DATA:53D3                 .BYTE  1010000b
DATA:53D3                 .BYTE     1000b
DATA:53D3                 .BYTE 11111000b
DATA:53D3                 .BYTE 11110000b
DATA:53DF
DATA:53DF DSPLY:          .BYTE _F|_C_LBLUE,_COLON|_C_LBLUE,_3|_C_BLUE,_0|_C_BLUE,_0|_C_BLUE,_SPACE|_C_BLACK,_B|_C_LBLUE,_COLON|_C_LBLUE,_3|_C_BLUE,_0|_C_BLUE,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:53DF                                         ; DATA XREF: RESET:L5↑t
DATA:53DF                                         ; Initial Control Display
DATA:53EE ABR:            .BYTE _SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:53EE                                         ; DATA XREF: DFBLDG+26↑r
DATA:53EE                                         ; DFTNK+20↑r ...
DATA:53EE                                         ; 8 zero bytes (used for initialization)
DATA:53F6                 .BYTE _SPACE|_C_BLACK,_S|_C_LBLUE,_P|_C_LBLUE,_D|_C_LBLUE,_COLON|_C_LBLUE,_0|_C_BLUE,_0|_C_BLUE,_0|_C_BLUE
DATA:53F6                 .BYTE _SPACE|_C_BLACK,_A|_C_LBLUE,_L|_C_LBLUE,_T|_C_LBLUE,_COLON|_C_LBLUE,_0|_C_BLUE,_0|_C_BLUE,_0|_C_BLUE
DATA:53F6                 .BYTE _SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:53F6                 .BYTE _SPACE|_C_BLACK,_S|_C_LBLUE,_C|_C_LBLUE,_O|_C_LBLUE,_R|_C_LBLUE,_E|_C_LBLUE,_COLON|_C_LBLUE,_SPACE|_C_BLACK
DATA:53F6                 .BYTE _0|_C_BLUE,_0|_C_BLUE,_0|_C_BLUE,_0|_C_BLUE,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:53F6                 .BYTE _SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:5421
DATA:5421 FTR:            .BYTE       10b         ; DATA XREF: FTURN:N0↑t
DATA:5421                 .BYTE       10b         ; enemy plane turning right
DATA:5421                 .BYTE      111b
DATA:5421                 .BYTE     1110b
DATA:5421                 .BYTE 11110111b
DATA:5421                 .BYTE    11000b
DATA:5421                 .BYTE 11001111b
DATA:5421                 .BYTE   100000b
DATA:5421                 .BYTE   100000b
DATA:5421                 .BYTE         0
DATA:542B FTL:            .BYTE 11000000b         ; DATA XREF: FTURN:M8↑t
DATA:542B                 .BYTE 11000100b         ; enemy plane turning left
DATA:542B                 .BYTE  1100110b
DATA:542B                 .BYTE  1101110b
DATA:542B                 .BYTE   111100b
DATA:542B                 .BYTE   101000b
DATA:542B                 .BYTE 10111000b
DATA:542B                 .BYTE     1100b
DATA:542B                 .BYTE  1001100b
DATA:542B                 .BYTE      110b
DATA:542B                 .BYTE      110b
DATA:5436 GNST:           .BYTE 11111110b         ; DATA XREF: GNSGHT:Q1↑t
DATA:5436                 .BYTE 10000010b         ; red-white flashing bullseye target
DATA:5436                 .BYTE 10010010b
DATA:5436                 .BYTE    10000b
DATA:5436                 .BYTE  1111100b
DATA:5436                 .BYTE    10000b
DATA:5436                 .BYTE 10010010b
DATA:5436                 .BYTE 10000010b
DATA:5436                 .BYTE 11111110b
DATA:543F XCRIM:          .BYTE 10100001b         ; DATA XREF: BMBSHP:R8↑t
DATA:543F                 .BYTE  1010100b
DATA:543F                 .BYTE 10101010b
DATA:543F                 .BYTE   110110b
DATA:543F                 .BYTE  1111110b
DATA:543F                 .BYTE 11110101b
DATA:543F                 .BYTE 10101111b
DATA:543F                 .BYTE  1010100b
DATA:543F                 .BYTE  1000101b
DATA:543F                 .BYTE 10000010b
DATA:5449 XSHPIM:         .BYTE 10100010b         ; DATA XREF: BMBSHP:S6↑t
DATA:5449                 .BYTE  1001000b         ; moving ship explosion
DATA:5449                 .BYTE     1110b
DATA:5449                 .BYTE  1000101b
DATA:5449                 .BYTE   101010b
DATA:5449                 .BYTE 10010110b
DATA:5449                 .BYTE  1011100b
DATA:5449                 .BYTE    10110b
DATA:5449                 .BYTE 10101101b
DATA:5449                 .BYTE  1111100b
DATA:5449                 .BYTE 11011100b
DATA:5449                 .BYTE 10111100b
DATA:5449                 .BYTE  1110101b
DATA:5456
DATA:5456 AAA:            .BYTE L_BUILDING_ROOF_TOP_RIGHT|L_C_0,L_BUILDING_ROOF_TOP_RIGHT|L_C_1,L_BUILDING_WALL_A|L_C_0,L_BUILDING_WALL_A|L_C_1,L_BUILDING_ROOF_TOP_LEFT|L_C_0,L_BUILDING_ROOF_TOP_LEFT|L_C_1,L_BUILDING_WINDOW|L_C_1,L_BUILDING_WINDOW|L_C_0,L_HANGAR_H|L_C_1,L_BUILDING_ROOF_CENTER|L_C_1
DATA:5456                                         ; DATA XREF: CKCHAR:T6↑t
DATA:5456                                         ; Targets: building
DATA:5460 AAB:            .BYTE L_SKYSCRAPER_58|L_C_0,L_SKYSCRAPER_56|L_C_0,L_SKYSCRAPER_54|L_C_0,L_SKYSCRAPER_B_5E|L_C_0,L_SKYSCRAPER_B_C|L_C_0,L_SKYSCRAPER_B_5A|L_C_0,L_SKYSCRAPER_B_5E|L_C_1,L_SKYSCRAPER_B_C|L_C_1,L_SKYSCRAPER_B_5A|L_C_1,L_SKYSCRAPER_57|L_C_0,L_SKYSCRAPER_B_5D|L_C_0,L_SKYSCRAPER_B_5D|L_C_1,L_SKYSCRAPER_59|L_C_0,L_SKYSCRAPER_55|L_C_0
DATA:5460                                         ; DATA XREF: CKCHAR:T8↑t
DATA:5460                                         ; Targets: skyscraper
DATA:546E AAC:            .BYTE L_BRIDGE_Q|L_C_1,L_BRIDGE_C|L_C_1,L_BRIDGE_D|L_C_1,L_BRIDGE_F|L_C_1,L_BRIDGE_A|L_C_1,L_BRIDGE_J|L_C_1,L_SKYSCRAPER_B_5B|L_C_1
DATA:546E                                         ; DATA XREF: CKCHAR:U0↑t
DATA:546E                                         ; Targets: lower parts of a bridge
DATA:5475 AAD:            .BYTE L_BRIDGE_B|L_C_1,L_BRIDGE_O|L_C_1,L_BRIDGE_P|L_C_1
DATA:5475                                         ; DATA XREF: CKCHAR:_1↑t
DATA:5475                                         ; Targets: upper parts of a bridge
DATA:5478 AAE:            .BYTE L_ROAD_DIAG_LEFT_A|L_C_1,L_ROAD_DIAG_LEFT_B|L_C_1,L_RUNWAY_CENTER|L_C_1,L_ROAD_DIAG_RIGHT_A|L_C_1,L_ROAD_DIAG_RIGHT_B|L_C_1,L_RUNWAY_LEFT|L_C_1,L_BRIDGE_M|L_C_1,L_BRIDGE_N|L_C_1
DATA:5478                                         ; DATA XREF: CKCHAR:_9↑t
DATA:5478                                         ; Targets: roads
DATA:5480 AAF:            .BYTE L_HANGAR_A|L_C_1,L_SOLID_WALL|L_C_0,L_HANGAR_B|L_C_1,L_HANGAR_C|L_C_1,L_HANGAR_D|L_C_1,L_HANGAR_E|L_C_1,L_HANGAR_G|L_C_1,L_HANGAR_H|L_C_0,L_HANGAR_I|L_C_0,L_HANGAR_J|L_C_0,L_HANGAR_K|L_C_0,L_HANGAR_L|L_C_0,L_HANGAR_F|L_C_1
DATA:5480                                         ; DATA XREF: Z3:_1↑r
DATA:5480                                         ; Targets: all parts of a hangar
DATA:548D AAG:            .BYTE L_STREET_CAR_LEFT_COLOR_A|L_C_1,L_STREET_CAR_RIGHT_COLOR_A|L_C_1,L_STREET_CAR_LEFT_COLOR_B|L_C_1,L_STREET_CAR_RIGHT_COLOR_B|L_C_1,L_ANTI_AIRCRAFT_BATTERY_B|L_C_1,L_TANK_LEFT_B|L_C_1,L_TANK_RIGHT_B|L_C_1,L_TANK_LEFT_A|L_C_1,L_TANK_RIGHT_A|L_C_1,L_ANTI_AIRCRAFT_BATTERY_A|L_C_0,L_ANTI_AIRCRAFT_BATTERY_A|L_C_1
DATA:548D                                         ; DATA XREF: Z3:_7↑t
DATA:548D                                         ; Targets: all cars, tanks, ait-aircraft battery on the playfield
DATA:5498
DATA:5498 AAH:            .BYTE     1000b         ; DATA XREF: CPTL:_4↑t
DATA:5498                 .BYTE   111000b         ; final targets (main color)
DATA:5498                 .BYTE   101001b
DATA:5498                 .BYTE   111001b
DATA:5498                 .BYTE   110011b
DATA:5498                 .BYTE       11b
DATA:5498                 .BYTE 11111111b
DATA:5498                 .BYTE 11111111b
DATA:5498                 .BYTE 10110111b
DATA:5498                 .BYTE 10110110b
DATA:5498                 .BYTE 10110110b
DATA:5498                 .BYTE 11111100b
DATA:5498                 .BYTE 11111100b
DATA:54A5 AAI:            .BYTE     1000b         ; DATA XREF: CPTL+5F↑t
DATA:54A5                 .BYTE   111000b         ; final targets (black color)
DATA:54A5                 .BYTE   110111b
DATA:54A5                 .BYTE      111b
DATA:54A5                 .BYTE  1010110b
DATA:54A5                 .BYTE  1000110b
DATA:54A5                 .BYTE 11001100b
DATA:54A5                 .BYTE 11111100b
DATA:54A5                 .BYTE         0
DATA:54A5                 .BYTE         0
DATA:54A5                 .BYTE  1001000b
DATA:54A5                 .BYTE  1001000b
DATA:54A5                 .BYTE  1001000b
DATA:54B2
DATA:54B2 ABC:            .BYTE   4,$11,$40,$11,$40,  4,$40,$41
DATA:54B2                                         ; DATA XREF: ACL:_2↑r
DATA:54B2                                         ; ABB:_2↑r ...
DATA:54B2                                         ; Tile: explosion 1 on gras
DATA:54BA ABD:            .BYTE $45,$54,$15,$51,$44,$55,$15,$51
DATA:54BA                                         ; DATA XREF: ACL:_1↑r
DATA:54BA                                         ; ABB:_1↑r ...
DATA:54BA                                         ; Tile: explosion 2 on gras
DATA:54C2 ABL:            .BYTE $3F,$3F,$3F,  3,  3,  3,$3F,$3F
DATA:54C2                                         ; DATA XREF: DFBLDG+38↑r
DATA:54C2                                         ; DFTNK:_1↑r
DATA:54C2                                         ; Tile: building wall/window
DATA:54CA ABN:            .BYTE   3,  3, $F, $F,$3F,$3F,$FF,$FF
DATA:54CA                                         ; DATA XREF: DFBLDG+20↑r
DATA:54CA                                         ; DFTNK+E↑r
DATA:54CA                                         ; Tile: building
DATA:54D2 ABO:            .BYTE $FC,$FC,$F1,$F1,$C5,$C5,$15,$15
DATA:54D2                                         ; DATA XREF: DFBLDG+14↑r
DATA:54D2                                         ; DFTNK+14↑r
DATA:54D2                                         ; Tile: building
DATA:54DA ABP:            .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
DATA:54DA                                         ; DATA XREF: DFBLDG+1A↑r
DATA:54DA                                         ; DFTNK+1A↑r
DATA:54DA                                         ; Tile: building roof
DATA:54E2 ABT:            .BYTE $54,$54,$50,$50,$40,$40,  0,  0
DATA:54E2                                         ; DATA XREF: DFBLDG+2C↑r
DATA:54E2                                         ; DFTNK+26↑r
DATA:54E2                                         ; Tile: building
DATA:54EA ACJ:            .BYTE $AA,$AA,$BE,$82,$82,$82,$BE,$AA
DATA:54EA                                         ; DATA XREF: DFBLDG+32↑r
DATA:54EA                                         ; Tile: target
DATA:54F2
DATA:54F2 XCPTLIM:        .BYTE    10000b         ; DATA XREF: BMCPTL+40↑t
DATA:54F2                 .BYTE     1000b         ; explosion off the final targets
DATA:54F2                 .BYTE   100100b
DATA:54F2                 .BYTE   101000b
DATA:54F2                 .BYTE 10011001b
DATA:54F2                 .BYTE   111100b
DATA:54F2                 .BYTE   101011b
DATA:54F2                 .BYTE     1010b
DATA:54F2                 .BYTE 11010101b
DATA:54F2                 .BYTE   101010b
DATA:54F2                 .BYTE   110010b
DATA:54F2                 .BYTE 10000101b
DATA:54F2                 .BYTE  1011000b
DATA:54F2                 .BYTE   110101b
DATA:54F2                 .BYTE 10001010b
DATA:54F2                 .BYTE   111011b
DATA:54F2                 .BYTE 11010101b
DATA:54F2                 .BYTE 10100010b
DATA:5504
DATA:5504 EAS0:           DIFF_STRUCT <  4,   2, $10, $14, $28,   9, $12>
DATA:5504                                         ; DATA XREF: EB:_1↑r
DATA:5504                                         ; Novice level variables
DATA:550B                 .BYTE $A5
DATA:550C EAS2:           DIFF_STRUCT <  4,   4, $40, $19, $32,  $A, $14>
DATA:550C                                         ; DATA XREF: CKSC+40↑r
DATA:5513 EAS4:           DIFF_STRUCT <  5,   6, $80, $1E, $3C,  $B, $16>
DATA:5513                                         ; DATA XREF: CKSC+4E↑r
DATA:551A EAS6:           DIFF_STRUCT <  6,   8, $B0, $23, $46,  $C, $18>
DATA:551A                                         ; DATA XREF: EB:_7↑r
DATA:551A                                         ; CKSC:loc_45C1↑r
DATA:551A                                         ; Intermediate level variables
DATA:5521 EAS8:           DIFF_STRUCT <  6,   8, $E0, $28, $50,  $D, $1A>
DATA:5521                                         ; DATA XREF: CKSC:loc_45CB↑r
DATA:5528 EAS9:           DIFF_STRUCT <  7,  $C, $FF, $30, $60,  $E, $1C>
DATA:5528                                         ; DATA XREF: EB:_5↑r
DATA:5528                                         ; CKSC:loc_459B↑r
DATA:5528                                         ; Advanced level variables
DATA:552F
DATA:552F ADI:            .BYTE $51,$51,$51,$51,$40, $C,$34,  0
DATA:552F                                         ; DATA XREF: DFGN:_1↑r
DATA:552F                                         ; Standard anti-aircraft gun battery. Used to restore after the final city anti-aircraft gun battery was used as  character $31.
DATA:5537 ADJ:            .BYTE   0,$20,$20,$20,$EC,$EC,$FC,$FC
DATA:5537                                         ; DATA XREF: B7:_1↑r
DATA:5537                                         ; Final city anti-aircraft gun battery. Replaces character $31 (standard anti-aircraft gun battery)
DATA:553F
DATA:553F OPTIM:          .BYTE $70               ; DATA XREF: CNSL__CONSOLE:_6↑r
DATA:553F                                         ; Display List for the menu
DATA:5540                 .BYTE $47
DATA:5541                 .WORD 0
DATA:5543                 .BYTE 7
DATA:5544                 .BYTE 7
DATA:5545                 .BYTE $87
DATA:5546                 .BYTE 7
DATA:5547                 .BYTE 7
DATA:5548                 .BYTE 6
DATA:5549                 .BYTE 7
DATA:554A                 .BYTE 7
DATA:554B                 .BYTE 6
DATA:554C                 .BYTE 7
DATA:554D                 .BYTE 7
DATA:554E                 .BYTE 6
DATA:554F                 .BYTE $41
DATA:5550
DATA:5550 NOVI:           .BYTE _N|_C_BLACK,_O|_C_BLACK,_V|_C_BLACK,_I|_C_BLACK,_C|_C_BLACK,_E|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:5550                                         ; DATA XREF: NOV__PRINT_NOVICE↑r
DATA:5550                                         ; "NOVICE      "
DATA:555C VETI:           .BYTE _A|_C_BLACK,_D|_C_BLACK,_V|_C_BLACK,_A|_C_BLACK,_N|_C_BLACK,_C|_C_BLACK,_E|_C_BLACK,_D|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:555C                                         ; DATA XREF: VET__PRINT_ADVANCED↑r
DATA:555C                                         ; "ADVANCED    "
DATA:5568 NORI:           .BYTE _N|_C_BLACK,_O|_C_BLACK,_R|_C_BLACK,_M|_C_BLACK,_A|_C_BLACK,_L|_C_BLACK,_SPACE|_C_BLACK,_C|_C_BLACK,_T|_C_BLACK,_R|_C_BLACK,_L|_C_BLACK,_SPACE|_C_BLACK
DATA:5568                                         ; DATA XREF: NOR__PRINT_NORMAL↑r
DATA:5568                                         ; "NORMAL CTRL "
DATA:5574 RVSI:           .BYTE _R|_C_BLACK,_E|_C_BLACK,_V|_C_BLACK,_E|_C_BLACK,_R|_C_BLACK,_S|_C_BLACK,_E|_C_BLACK,_SPACE|_C_BLACK,_C|_C_BLACK,_T|_C_BLACK,_R|_C_BLACK,_L|_C_BLACK
DATA:5574                                         ; DATA XREF: RVS__PRINT_REVERSED_CTRL↑r
DATA:5574                                         ; "REVERSE CTRL"
DATA:5580 NGRVI:          .BYTE _N|_C_BLACK,_O|_C_BLACK,_SPACE|_C_BLACK,_G|_C_BLACK,_R|_C_BLACK,_A|_C_BLACK,_V|_C_BLACK,_I|_C_BLACK,_T|_C_BLACK,_Y|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:5580                                         ; DATA XREF: NGRV__PRINT_NO_GRAVITY↑r
DATA:5580                                         ; GRV__PRINT_GRAVITY↑r
DATA:5580                                         ; "NO GRAVITY   "
DATA:558D INTI:           .BYTE _I|_C_BLACK,_N|_C_BLACK,_T|_C_BLACK,_E|_C_BLACK,_R|_C_BLACK,_M|_C_BLACK,_E|_C_BLACK,_D|_C_BLACK,_I|_C_BLACK,_A|_C_BLACK,_T|_C_BLACK,_E|_C_BLACK
DATA:558D                                         ; DATA XREF: INT__PRINT_INTERMEDIATE↑r
DATA:558D                                         ; "INTERMEDIATE"
DATA:5599 RNKI:           .BYTE _R|_C_BLACK,_A|_C_BLACK,_N|_C_BLACK,_K|_C_BLACK,_COLON|_C_BLACK,_SPACE|_C_BLACK,_C|_C_BLACK,_L|_C_BLACK,_A|_C_BLACK,_S|_C_BLACK,_S|_C_BLACK
DATA:5599                                         ; DATA XREF: RNK__DISPLAY_RANK:loc_4B17↑r
DATA:5599                                         ; BLUE__PRINT_RANK_CLASS:_1↑r ...
DATA:5599                                         ; "RANK: CLASS"
DATA:55A4 DEMI:           .BYTE _B|_C_BLUE,_L|_C_BLUE,_U|_C_BLUE,_E|_C_BLUE,_SPACE|_C_BLACK,_M|_C_BLUE,_A|_C_BLUE,_X|_C_BLUE,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK
DATA:55A4                                         ; DATA XREF: RESET:loc_C36↑r
DATA:55A4                                         ; BLMX__PRINT_BLUE_MAX:_1↑t
DATA:55A4                 .BYTE _SPACE|_C_BLACK,_SPACE|_C_BLACK,_B|_C_LBLUE,_Y|_C_LBLUE,_SPACE|_C_BLACK,_B|_C_LBLUE,_O|_C_LBLUE,_B|_C_LBLUE,_SPACE|_C_BLACK,_P|_C_LBLUE,_O|_C_LBLUE,_L|_C_LBLUE,_I|_C_LBLUE,_N|_C_LBLUE,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK ; "BLUE MAX" / "  BY BOB POLIN" / "    (C)SYNSOFT 1983"
DATA:55A4                 .BYTE _SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_SPACE|_C_BLACK,_OPEN_BRACKET|_C_LBLUE,_C|_C_LBLUE,_CLOSE_BRACKET|_C_LBLUE,_S|_C_LBLUE,_Y|_C_LBLUE,_N|_C_LBLUE,_S|_C_LBLUE,_O|_C_LBLUE,_F|_C_LBLUE,_T|_C_LBLUE,_SPACE|_C_BLACK,_1|_C_LBLUE,_9|_C_LBLUE,_8|_C_LBLUE,_3|_C_LBLUE
DATA:55DF OPTI:           .BYTE _O|_C_BLACK,_P|_C_BLACK,_T|_C_BLACK,_I|_C_BLACK,_O|_C_BLACK,_N|_C_BLACK,_S|_C_BLACK
DATA:55DF                                         ; DATA XREF: CNSL__CONSOLE:_95↑r
DATA:55DF                                         ; "OPTIONS"
DATA:55E6 KMKZI:          .BYTE _K|_C_ORANGE,_A|_C_ORANGE,_M|_C_ORANGE,_I|_C_ORANGE,_K|_C_ORANGE,_A|_C_ORANGE,_Z|_C_ORANGE,_E|_C_ORANGE,_SPACE|_C_BLACK,_T|_C_ORANGE,_R|_C_ORANGE,_A|_C_ORANGE,_I|_C_ORANGE,_N|_C_ORANGE,_E|_C_ORANGE,_E|_C_ORANGE
DATA:55E6                                         ; DATA XREF: RNKX__PRINT_RANK_CLASS:_2↑r
DATA:55E6                                         ; "KAMIKAZE TRAINEE"
DATA:55F6 RSWI:           .BYTE _R|_C_ORANGE,_U|_C_ORANGE,_N|_C_ORANGE,_W|_C_ORANGE,_A|_C_ORANGE,_Y|_C_ORANGE,_SPACE|_C_BLACK,_S|_C_ORANGE,_W|_C_ORANGE,_E|_C_ORANGE,_E|_C_ORANGE,_P|_C_ORANGE,_E|_C_ORANGE,_R|_C_ORANGE
DATA:55F6                                         ; DATA XREF: RNKX__PRINT_RANK_CLASS:_1_1↑r
DATA:55F6                                         ; "RUNWAY SWEEPER"
DATA:5604 ACDI:           .BYTE _A|_C_ORANGE,_I|_C_ORANGE,_R|_C_ORANGE,_SPACE|_C_BLACK,_C|_C_ORANGE,_A|_C_ORANGE,_D|_C_ORANGE,_E|_C_ORANGE,_T|_C_ORANGE
DATA:5604                                         ; DATA XREF: RNKX__PRINT_RANK_CLASS:_1_0↑r
DATA:5604                                         ; "AIR CADET"
DATA:560D FTGI:           .BYTE _F|_C_BLACK,_L|_C_BLACK,_Y|_C_BLACK,_I|_C_BLACK,_N|_C_BLACK,_G|_C_BLACK,_SPACE|_C_BLACK,_T|_C_BLACK,_I|_C_BLACK,_G|_C_BLACK,_E|_C_BLACK,_R|_C_BLACK
DATA:560D                                         ; DATA XREF: RNKX__PRINT_RANK_CLASS:_1_2↑r
DATA:560D                                         ; "FLYING TIGER"
DATA:5619 SQLDI:          .BYTE _S|_C_BLACK,_Q|_C_BLACK,_U|_C_BLACK,_A|_C_BLACK,_D|_C_BLACK,_R|_C_BLACK,_O|_C_BLACK,_N|_C_BLACK,_SPACE|_C_BLACK,_L|_C_BLACK,_E|_C_BLACK,_A|_C_BLACK,_D|_C_BLACK,_E|_C_BLACK,_R|_C_BLACK
DATA:5619                                         ; DATA XREF: SQLD__PRINT_SQUADRON_LEADER:_1↑r
DATA:5619                                         ; "SQUADRON LEADER"
DATA:5628
DATA:5628 ; from here on, we again have unitialized variables
DATA:5628 AEG:            .BYTE   0,$6A,$AD,$52,$6A,$C9,$5A,$D0,$D1,$A9,$50,$8D,$52,$6A,$EE,$51
DATA:5628                                         ; DATA XREF: RESET+17↑w
DATA:5628                                         ; DFHNGR:loc_4982↑r
DATA:5628                 .BYTE $6A,$4C,  2,$26,$EE,$E0,  6,$60,$AD,$4C,  6,$F0,$10,$CE,$4C,  6 ; Backup of the hangar font characters
DATA:5628                 .BYTE $AD,$4C,  6,$F0,$10,$4A,$90,  6,$A9, $A,$8D,  6,$D2,$60,$A9,$19
DATA:5628                 .BYTE $8D,  6,$D2,$A9,$A4,$8D,  7,$D2,$60,$A5,$FD,$F0,$45,$C9,  2,$D0
DATA:5628                 .BYTE $EC,$AD,$A8,  6,$F0,$17,$AD,  4,  6,$4A,$90,$11,$20,$2E,$2F,$20
DATA:5628                 .BYTE $19,$2A,$AD,$40,  6,$C9,  5,$90,  3,$20,$C4,$2E,$60,$AD,$40,  6
DATA:5628                 .BYTE $C9,  2,$F0,$54,$C9,  3,$F0,$79,$C9,  4,$F0,  7,$C9,  5,$F0,  6
DATA:5628                 .BYTE $4C,$E3,$27,$4C,$58,$27,$20,$2E,$2F,$20,$66,$2E,$20,$C4,$2E,$4C
DATA:5628                 .BYTE $6E,$27,$AD, $A,$D2,$29,$1F,$D0,$3B,$8D,$A8,  6,$8D,$A5,  6,$AD
DATA:5628                 .BYTE $A6,  6,$D0,$30,$A9,$17,$8D,$36,  6,$AD, $A,$D2,$4A,$90,$16,$A9
DATA:5628                 .BYTE   2,$85,$FD,$8D,$40,  6,$A5,$B7,$C9,  3,$B0,$18,$A5,$14,$4A,$90
DATA:5628                 .BYTE $13,$EE,$A8,  6,$60,$4C,$E6,$20,$A5,$F0,$D0,  8,$CE,$36,  6,$D0
DATA:5628                 .BYTE   4,$EE,$40,  6,$60,$AD,$36,  6,$C9, $D,$90,$F8,$4A,$90,  9,$A9
DATA:5628                 .BYTE   0,$8D,$72,$6A,$8D,  7,$D2,$60,$A9,$B0,$8D,$72,$6A,$20,$E7,$25
DATA:5628                 .BYTE $60,$A0,$BA,$84,$C1,$84,$C2,$A2, $A,$BD,$D6,$52,$99,  9,$76,$88
DATA:5628                 .BYTE $CA,$D0,$F6,$A9, $C,$8D,$BC,$77,$A9,  4,$8D,$BD,$77,$A9,$10,$8D
DATA:5628                 .BYTE $BE,$77,$AD, $A,$D2,$29,$3F,  9,$18,$69,  6,$8D,$2F,  6,$AD, $A
DATA:5628                 .BYTE $D2,$29,$3F,$85,$C0,$8D,  2,$D0,$8D,  3,$D0,$EE,$40,  6,$A5,$C4
DATA:5628                 .BYTE $D0,  8,$A9,$7C,$8D,$C2,  2,$C6,$C4,$60,$A9,$2C,$8D,$C2,  2,$60
DATA:5628                 .BYTE $CE,$2F,  6,$D0,$11,$EE,$40,  6,$A4,$C2,$A2,  8,$BD,$E6,$52,$99
DATA:5628                 .BYTE   7,$77,$88,$CA,$D0,$F6,$A5,$FD
DATA:5770
DATA:5770 V_STAT:         .BYTE $C9,$FE,$F0       ; DATA XREF: PLAY_IT+7↑w
DATA:5770                                         ; _1__SOUND_TIMER_IRQ:_2↑r ...
DATA:5770                                         ; Note Status Channel 1-3
DATA:5773 DUR1:           .BYTE $10               ; DATA XREF: PLAY_IT+4↑w
DATA:5773                                         ; PLAY_NOTE+5↑w ...
DATA:5773                                         ; Duration Voice 1
DATA:5774 DUR2:           .BYTE $20               ; DATA XREF: PLAY_NOTE+71↑w
DATA:5774                                         ; PLAY_NOTE+74↑r ...
DATA:5774                                         ; Duration Voice 2
DATA:5775 DUR3:           .BYTE $D9               ; DATA XREF: PLAY_NOTE+DB↑w
DATA:5775                                         ; PLAY_NOTE+DE↑r ...
DATA:5775                                         ; Duration Voice 3
DATA:5776 VOL1:           .BYTE $1D               ; DATA XREF: PLAY_NOTE:_2_↑w
DATA:5776                                         ; PLAY_NOTE+5C↑r ...
DATA:5776                                         ; Volume Voice 1
DATA:5777 VOL2:           .BYTE $20               ; DATA XREF: PLAY_NOTE:_2__↑w
DATA:5777                                         ; PLAY_NOTE+C8↑r ...
DATA:5777                                         ; Volume Voice 2
DATA:5778 VOL3:           .BYTE $19               ; DATA XREF: PLAY_NOTE:_2↑w
DATA:5778                                         ; PLAY_NOTE+132↑r ...
DATA:5778                                         ; Volume Voice 3
DATA:5779 TIE:            .BYTE $2A,$20,  6       ; DATA XREF: PLAY_NOTE+F↑w
DATA:5779                                         ; PLAY_NOTE+3A↑w ...
DATA:577C TEMP0:          .BYTE $3A               ; DATA XREF: MULT+2↑w
DATA:577C                                         ; MULT+B↑r ...
DATA:577C                                         ; Playback tempo
DATA:577D                 .BYTE $AD,$A5,  6
DATA:5780
DATA:5780 ; this is the 3-channel game title music
DATA:5780 VOICE_1:        NOTE <SND_FREQ_52, $10> ; DATA XREF: PLAY_IT+D↑t
DATA:5780                                         ; PLAY_IT+11↑t
DATA:5780                 NOTE <SND_FREQ_43, $20>
DATA:5780                 NOTE <SND_FREQ_43, $20>
DATA:5780                 NOTE <SND_FREQ_43,   8>
DATA:5780                 NOTE <SND_FREQ_41,   8>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_38,   8>
DATA:5780                 NOTE <SND_FREQ_36, $10>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_41, $20>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_38,   8>
DATA:5780                 NOTE <SND_FREQ_39, $20>
DATA:5780                 NOTE <SND_FREQ_39, $10>
DATA:5780                 NOTE <SND_FREQ_52, $10>
DATA:5780                 NOTE <SND_FREQ_43,   8>
DATA:5780                 NOTE <SND_FREQ_41,   8>
DATA:5780                 NOTE <SND_FREQ_43,   8>
DATA:5780                 NOTE <SND_FREQ_41,   8>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_38,   8>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_38,   8>
DATA:5780                 NOTE <SND_FREQ_36, $10>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_39, $10>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_41,   8>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_48, $20>
DATA:5780                 NOTE <SND_FREQ_48, $10>
DATA:5780                 NOTE <SND_FREQ_52, $10>
DATA:5780                 NOTE <SND_FREQ_48, $10>
DATA:5780                 NOTE <SND_FREQ_52, $10>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_48, $10>
DATA:5780                 NOTE <SND_FREQ_36, $10>
DATA:5780                 NOTE <SND_FREQ_37,   8>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_48, $20>
DATA:5780                 NOTE <SND_FREQ_50, $10>
DATA:5780                 NOTE <SND_FREQ_50,   8>
DATA:5780                 NOTE <SND_FREQ_52,   8>
DATA:5780                 NOTE <SND_FREQ_52, $20>
DATA:5780                 NOTE <SND_FREQ_52, $10>
DATA:5780                 NOTE <SND_FREQ_48, $10>
DATA:5780                 NOTE <SND_FREQ_43, $20>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_43,   8>
DATA:5780                 NOTE <SND_FREQ_52,   8>
DATA:5780                 NOTE <SND_FREQ_50, $10>
DATA:5780                 NOTE <SND_FREQ_54, $10>
DATA:5780                 NOTE <SND_FREQ_15, $10>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_38, $10>
DATA:5780                 NOTE <SND_FREQ_38,   8>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_48, $20>
DATA:5780                 NOTE <SND_FREQ_15, $10>
DATA:5780                 NOTE <SND_FREQ_52, $10>
DATA:5780                 NOTE <SND_FREQ_36, $20>
DATA:5780                 NOTE <SND_FREQ_38, $20>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_43,   8>
DATA:5780                 NOTE <SND_FREQ_38,   8>
DATA:5780                 NOTE <SND_FREQ_41,   8>
DATA:5780                 NOTE <SND_FREQ_36, $10>
DATA:5780                 NOTE <SND_FREQ_38, $10>
DATA:5780                 NOTE <SND_FREQ_39, $20>
DATA:5780                 NOTE <SND_FREQ_41, $20>
DATA:5780                 NOTE <SND_FREQ_43, $40>
DATA:5780                 NOTE <SND_FREQ_39, $30>
DATA:5780                 NOTE <SND_FREQ_39, $10>
DATA:5780                 NOTE <SND_FREQ_38, $10>
DATA:5780                 NOTE <SND_FREQ_38, $10>
DATA:5780                 NOTE <SND_FREQ_15, $10>
DATA:5780                 NOTE <SND_FREQ_39, $10>
DATA:5780                 NOTE <SND_FREQ_38, $10>
DATA:5780                 NOTE <SND_FREQ_39, $10>
DATA:5780                 NOTE <SND_FREQ_41, $10>
DATA:5780                 NOTE <SND_FREQ_43, $10>
DATA:5780                 NOTE <SND_FREQ_48, $40>
DATA:5780                 NOTE <SND_FREQ_36, $20>
DATA:5780                 NOTE <SND_FREQ_38, $20>
DATA:5780                 NOTE <SND_FREQ_39,   8>
DATA:5780                 NOTE <SND_FREQ_43,   8>
DATA:5780                 NOTE <SND_FREQ_38,   8>
DATA:5780                 NOTE <SND_FREQ_41,   8>
DATA:5780                 NOTE <SND_FREQ_36, $10>
DATA:5780                 NOTE <SND_FREQ_38, $10>
DATA:5780                 NOTE <SND_FREQ_39, $20>
DATA:5780                 NOTE <SND_FREQ_41, $20>
DATA:5780                 NOTE <SND_FREQ_43, $40>
DATA:584A                 .BYTE $FF
DATA:584B VOICE_2:        NOTE <SND_FREQ_15, $10> ; DATA XREF: PLAY_IT+15↑t
DATA:584B                                         ; PLAY_IT+19↑t
DATA:584B                 NOTE <SND_FREQ_52, $20>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_54, $10>
DATA:584B                 NOTE <SND_FREQ_43, $20>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $20>
DATA:584B                 NOTE <SND_FREQ_48, $20>
DATA:584B                 NOTE <SND_FREQ_43, $20>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_52, $20>
DATA:584B                 NOTE <SND_FREQ_52, $20>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_53, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_52, $20>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_41, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_52, $20>
DATA:584B                 NOTE <SND_FREQ_53, $20>
DATA:584B                 NOTE <SND_FREQ_64, $20>
DATA:584B                 NOTE <SND_FREQ_59, $10>
DATA:584B                 NOTE <SND_FREQ_54, $10>
DATA:584B                 NOTE <SND_FREQ_52, $20>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_52,   8>
DATA:584B                 NOTE <SND_FREQ_59,   8>
DATA:584B                 NOTE <SND_FREQ_54, $10>
DATA:584B                 NOTE <SND_FREQ_54, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_50,   8>
DATA:584B                 NOTE <SND_FREQ_50,   8>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_54, $10>
DATA:584B                 NOTE <SND_FREQ_55, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_43, $20>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_48, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_48, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $20>
DATA:584B                 NOTE <SND_FREQ_48, $20>
DATA:584B                 NOTE <SND_FREQ_52, $40>
DATA:584B                 NOTE <SND_FREQ_43, $30>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_15, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_50, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_52, $10>
DATA:584B                 NOTE <SND_FREQ_43, $20>
DATA:584B                 NOTE <SND_FREQ_48, $20>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_48, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $10>
DATA:584B                 NOTE <SND_FREQ_43, $20>
DATA:584B                 NOTE <SND_FREQ_48, $20>
DATA:584B                 NOTE <SND_FREQ_55, $40>
DATA:58FB                 .BYTE $FF
DATA:58FC VOICE_3:        NOTE <SND_FREQ_15, $10> ; DATA XREF: PLAY_IT+1D↑t
DATA:58FC                                         ; PLAY_IT+21↑t
DATA:58FC                 NOTE <SND_FREQ_59, $10>
DATA:58FC                 NOTE <SND_FREQ_64, $10>
DATA:58FC                 NOTE <SND_FREQ_66, $20>
DATA:58FC                 NOTE <SND_FREQ_68, $10>
DATA:58FC                 NOTE <SND_FREQ_70, $10>
DATA:58FC                 NOTE <SND_FREQ_71, $10>
DATA:58FC                 NOTE <SND_FREQ_66, $10>
DATA:58FC                 NOTE <SND_FREQ_70, $10>
DATA:58FC                 NOTE <SND_FREQ_73, $10>
DATA:58FC                 NOTE <SND_FREQ_68, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $10>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $10>
DATA:58FC                 NOTE <SND_FREQ_91, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_64, $10>
DATA:58FC                 NOTE <SND_FREQ_64, $10>
DATA:58FC                 NOTE <SND_FREQ_59, $10>
DATA:58FC                 NOTE <SND_FREQ_64, $10>
DATA:58FC                 NOTE <SND_FREQ_66, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_73, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_68, $10>
DATA:58FC                 NOTE <SND_FREQ_73, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_68, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_69, $10>
DATA:58FC                 NOTE <SND_FREQ_68, $10>
DATA:58FC                 NOTE <SND_FREQ_80, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_73, $20>
DATA:58FC                 NOTE <SND_FREQ_73, $20>
DATA:58FC                 NOTE <SND_FREQ_84, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_87, $10>
DATA:58FC                 NOTE <SND_FREQ_89, $10>
DATA:58FC                 NOTE <SND_FREQ_91, $20>
DATA:58FC                 NOTE <SND_FREQ_91, $10>
DATA:58FC                 NOTE <SND_FREQ_91,   8>
DATA:58FC                 NOTE <SND_FREQ_87,   8>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_82, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_89, $10>
DATA:58FC                 NOTE <SND_FREQ_89,   8>
DATA:58FC                 NOTE <SND_FREQ_87,   8>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_85, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $20>
DATA:58FC                 NOTE <SND_FREQ_84, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_87, $10>
DATA:58FC                 NOTE <SND_FREQ_89,   8>
DATA:58FC                 NOTE <SND_FREQ_91,   8>
DATA:58FC                 NOTE <SND_FREQ_89, $10>
DATA:58FC                 NOTE <SND_FREQ_91, $10>
DATA:58FC                 NOTE <SND_FREQ_91, $10>
DATA:58FC                 NOTE <SND_FREQ_89, $10>
DATA:58FC                 NOTE <SND_FREQ_87, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $20>
DATA:58FC                 NOTE <SND_FREQ_84, $20>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_91,   8>
DATA:58FC                 NOTE <SND_FREQ_89,   8>
DATA:58FC                 NOTE <SND_FREQ_87, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $10>
DATA:58FC                 NOTE <SND_FREQ_75, $30>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_15, $10>
DATA:58FC                 NOTE <SND_FREQ_91, $10>
DATA:58FC                 NOTE <SND_FREQ_89, $10>
DATA:58FC                 NOTE <SND_FREQ_87, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_85, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $20>
DATA:58FC                 NOTE <SND_FREQ_84, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_87, $10>
DATA:58FC                 NOTE <SND_FREQ_89,   8>
DATA:58FC                 NOTE <SND_FREQ_91,   8>
DATA:58FC                 NOTE <SND_FREQ_89, $10>
DATA:58FC                 NOTE <SND_FREQ_91, $10>
DATA:58FC                 NOTE <SND_FREQ_91, $10>
DATA:58FC                 NOTE <SND_FREQ_89, $10>
DATA:58FC                 NOTE <SND_FREQ_87, $10>
DATA:58FC                 NOTE <SND_FREQ_86, $10>
DATA:58FC                 NOTE <SND_FREQ_84, $20>
DATA:58FC                 NOTE <SND_FREQ_84, $20>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_75,   8>
DATA:58FC                 NOTE <SND_FREQ_75,   8>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:58FC                 NOTE <SND_FREQ_75, $10>
DATA:59D2                 .BYTE $FF
DATA:59D3
DATA:59D3 ; This is garabage data generated by leftover data in the memory during the assembly phase:
DATA:59D3                 .BYTE   0,  0,  0,  0,  0,$C0,  2,$60,$CE,$59,  6,$AD, $A,$D2,$29,  3,$F0,$13,$C9,  1,$F0,$1A,$C9,  2,$F0,$21,$AD,$58,$6A,$D0,$EC,$A9
DATA:59D3                 .BYTE $A7,$8D,$58,$6A,$60,$AD,$55,$6A,$D0,$E1,$A9,$A6,$8D,$55,$6A,$60,$AD,$56,$6A,$D0,$D6,$A9,$A2,$8D,$56,$6A,$60,$AD,$57,$6A,$D0,$CB
DATA:59D3                 .BYTE $A9,$AD,$8D,$57,$6A,$60,$AC,$56,  6,$D0,$36,$A5,$C2,$E5,$F6,$30,$2F,$A5,$C0,$C9,$AA,$B0,$29,$AD, $A,$D2,$CD,$CA,  6,$B0,$21,$AD
DATA:59D3                 .BYTE $40,  6,$C9,  5,$D0,$1A,$A5,$C0,$18,$69,  6,$8D,$57,  6,$8D,  6,$D0,$A4,$C1,$C8,$C8,$8C,$56,  6,$A9,$30,$99,  0,$73,$8D,$48,  6
DATA:59D3                 .BYTE $60,$C0,$1E,$90,$24,$AD,$57,  6,$C9,$CD,$B0,$1D,$18,$69,  3,$8D,$57,  6,$8D,  6,$D0,$A9,  0,$99,  0,$73,$88,$88,$88,$8C,$56,  6
DATA:59D3                 .BYTE $A9,$30,$99,  0,$73,$20,$94,$29,$60,$A9,  0,$8D,$56,  6,$99,  0,$73,$A2,$FF,$8E,$48,  6,$60,$AC,$56,  6,$D0,$20,$A5,$C2,$C5,$F6
DATA:59D3                 .BYTE $B0,$F4,$AD, $A,$D2,$CD,$CA,  6,$B0,$EC,$A5,$C0,$E9,  2,$8D,$57,  6,$8D,  6,$D0,$A5,$C1,$69, $B,$A8,$4C,$48,$2A,$C0,$B9,$B0,$C9
DATA:59D3                 .BYTE $AD,$57,  6,$C9,$37,$90,$C2,$18,$E9,  2,$8D,$57,  6,$8D,  6,$D0,$A9,  0,$99,  0,$73,$C8,$C8,$C8,$C8,$4C,$70,$2A,$AD,$61,  6,$D0
DATA:59D3                 .BYTE   7,$60,$A9,  0,$8D,$61,  6,$60,$AD,$64,  6,$F0,  4,$CE,$64,  6,$60,$EE,$5D,  6,$AC,$5D,  6,$C0,$D2,$F0,$E7,$CE,$5E,  6,$AD,$5E
DATA:59D3                 .BYTE   6,$4A,$B0,  3,$CE,$5C,  6,$60,$A5,$BF,$D0,$FB,$AC,$5F,  6,$D0,$4B,$20,$E2,$35,$AE,$5C,  6,$E0,$B9,$B0,$37,$E0,$A1,$B0,$2D,$E0
DATA:59D3                 .BYTE $41,$90,$E4,$4C,$B5,$35,$A9,  0,$8D,$96,  6,$8E,  7,$D0,$8E,$63,  6,$8C,$5F,  6,$A9,$80,$99,  0,$73,$99,$FF,$72,$AD, $A,$D2,$29
DATA:59D3                 .BYTE  $F,$69, $F,$8D,$60,  6,$A9, $C,$8D,$AF,  6,$60,$AD, $A,$D2,$4A,$90,$D1,$8A,$38,$E9,$60,$8D,$5C,  6,$4C,$B5,$35,$AD,$96,  6,$F0
DATA:59D3                 .BYTE   7,$C9,  1,$D0, $F,$CE,$63,  6,$CE,$63,  6,$AD,$63,  6,$8D,  7,$D0,$4C,$7B,$2B,$C9,  2,$F0,$10,$C9,  4,$D0,  6,$EE,$63,  6,$4C
DATA:59D3                 .BYTE $5E,$2B,$AD,$5E,  6,$4A,$90,$E0,$AD,$60,  6,$F0,$5F,$CE,$60,  6,$D0,$21,$AD,$44,  6,$D0,  7,$A9,  2,$A2,$47,$20,$3A,$25,$A9,$19
DATA:59D3                 .BYTE $8D,$62,  6,$A9,$80,$99,$FE,$72,$99,$FC,$72,$4A,$99,$FF,$72,$99,$FD,$72,$60,$A9,  0,$99,  0,$73,$88,$99,  0,$73,$88,$8C,$5F,  6
DATA:59D3                 .BYTE $A9,$80,$99,  0,$73,$99,$FF,$72,$20,$FC,$2B,$60,$A9,  0,$99,  0,$73,$99,$FF,$72,$8D,$5F,  6,$99,$FE,$72,$99,$FD,$72,$99,$FC,$72
DATA:59D3                 .BYTE $A9,$3C,$2D,$A9,  6,$8D,$A9,  6,$8D, $C,$D0,$60,$CE,$62,  6,$F0,$DB,$AD,$5E,  6,$4A,$4A,$4A,$90,  4,$20,$FC,$2B,$60,$A9,$C0, $D
DATA:59D3                 .BYTE $A9,  6,$8D,$A9,  6,$8D, $C,$D0,$60,$AD, $B,$D0,$29
DATA:59D3 ; end of 'DATA'
DATA:59D3
CHBASE:5C00 *
CHBASE:5C00 *
CHBASE:5C00 * RAM FONT WITH THE LEVEL CHARACTERS
CHBASE:5C00 *
CHBASE:5C00 *
CHBASE:5C00 ; ===========================================================================
CHBASE:5C00
CHBASE:5C00 ; Segment type: Pure data
CHBASE:5C00                 ;.segment CHBASE
CHBASE:5C00                 * =  $5C00
CHBASE:5C00 __CHBAS:        .BYTE $55,$55,$55,$55,$55,$55,$55,$55
CHBASE:5C00                                         ; DATA XREF: RESET+CA↑t
CHBASE:5C08 ACG:            .BYTE $A9,$A9,$A5,$A5,$95,$95,$55,$55
CHBASE:5C08                                         ; DATA XREF: DFBLDG:_1↑r
CHBASE:5C08                                         ; $01: Water (top), Grass
CHBASE:5C10 ACH:            .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
CHBASE:5C10                                         ; DATA XREF: DFBLDG+8↑r
CHBASE:5C10                 .BYTE $FF,$FF,$FE,$FE,$FA,$FA,$EA,$EA ; $02: Water
CHBASE:5C10                 .BYTE $55,$55,$57,$57,$5F,$5F,$7F,$7F
CHBASE:5C10                 .BYTE $AA,$AA,$AA,$AA,$A9,$A5,$95,$55
CHBASE:5C10                 .BYTE $A9,$A5,$95,$55,$55,$55,$55,$55
CHBASE:5C10                 .BYTE $FF,$FF,$FF,$FF,$FF,$FE,$FA,$EA
CHBASE:5C10                 .BYTE $FF,$FE,$FA,$EA,$AA,$AA,$AA,$AA
CHBASE:5C10                 .BYTE $55,$55,$55,$55,$55,$57,$5F,$7F
CHBASE:5C10                 .BYTE $55,$57,$5F,$7F,$FF,$FF,$FF,$FF
CHBASE:5C10                 .BYTE $95,$95,$95,$95,$55,$55,$55,$55
CHBASE:5C10                 .BYTE $A9,$A9,$A9,$A9,$A5,$A5,$A5,$A5
CHBASE:5C10                 .BYTE $FA,$FA,$FA,$FA,$EA,$EA,$EA,$EA
CHBASE:5C10                 .BYTE $5F,$5F,$5F,$5F,$7E,$7E,$7E,$7E
CHBASE:5C10                 .BYTE $55,$55,$55,$55,$57,$57,$57,$57
CHBASE:5C10                 .BYTE $7F,$7F,$7F,$7F,$7E,$7E,$FE,$FE
CHBASE:5C10                 .BYTE $FC,$FC,$F1,$F1,$C5,$C5,$15,$15
CHBASE:5C90 ABJ:            .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
CHBASE:5C90                                         ; DATA XREF: ABK+F↑w
CHBASE:5C90                                         ; DFTNK+1D↑w
CHBASE:5C90                 .BYTE $54,$54,$53,$53,$4F,$4F,$3F,$3F ; $12: Runway, Road
CHBASE:5C90                 .BYTE $FF,$FF,$F0,$F3,$CF, $F,$FF,$FF
CHBASE:5CA8 ADS:            .BYTE $2C,$38,$2C,$38,$2C,$38,$2C,$38
CHBASE:5CA8                                         ; DATA XREF: RESET:X0↑r
CHBASE:5CA8                                         ; ADR↑w ...
CHBASE:5CA8                                         ; $15: Hangar (A)
CHBASE:5CB0 ADT:            .BYTE $54,$54,$50,$50,$40,$40, $E,$3B
CHBASE:5CB0                                         ; DATA XREF: ADR+3↑w
CHBASE:5CB0                                         ; $16: Hangar (B)
CHBASE:5CB8 ADU:            .BYTE   0,  0,  0,  0, $E,$BB,$EE,$BB
CHBASE:5CB8                                         ; DATA XREF: ADR+6↑w
CHBASE:5CB8                                         ; $17: Hangar (C)
CHBASE:5CC0 ADV:            .BYTE   0,  0,  0,  0,$E0,$BB,$EE,$BB
CHBASE:5CC0                                         ; DATA XREF: ADR+9↑w
CHBASE:5CC0                                         ; $18: Hangar (D)
CHBASE:5CC8 ADW:            .BYTE   0,  0,  0,  0,  0,  0,$E0,$B8
CHBASE:5CC8                                         ; DATA XREF: ADR+C↑w
CHBASE:5CC8                                         ; $19: Hangar (E)
CHBASE:5CD0 ADX:            .BYTE $EC,$B8,$E3,$B1,$C5,$85,$15,$15
CHBASE:5CD0                                         ; DATA XREF: ADR+F↑w
CHBASE:5CD0                                         ; $1A: Hangar (F)
CHBASE:5CD8 ADY:            .BYTE   0,  0,  2,  3, $E, $B,$2E,$3B
CHBASE:5CD8                                         ; DATA XREF: ADR+12↑w
CHBASE:5CD8                                         ; $1B: Hangar (G)
CHBASE:5CE0 AEE:            .BYTE $54,$54,$50,$50,$40,$40,  0,  0
CHBASE:5CE0                                         ; DATA XREF: ADR+24↑w
CHBASE:5CE0                                         ; $1C: Hangar (H)
CHBASE:5CE8 ADZ:            .BYTE $55,$55,$55,$55,$55,$55,$50,  0
CHBASE:5CE8                                         ; DATA XREF: ADR+15↑w
CHBASE:5CE8                                         ; $1D: Hangar (I)
CHBASE:5CF0 AEA:            .BYTE $55,$55,$55,$55,$50,  0,  0,  0
CHBASE:5CF0                                         ; DATA XREF: ADR+18↑w
CHBASE:5CF0                                         ; $1E: Hangar (J)
CHBASE:5CF8 AEB:            .BYTE $55,$55,$55,$55,  5,  0,  0,  0
CHBASE:5CF8                                         ; DATA XREF: ADR+1B↑w
CHBASE:5CF8                                         ; $1F: Hangar (K)
CHBASE:5D00 AEC:            .BYTE $55,$55,$55,$55,$55,$55,  5,  0
CHBASE:5D00                                         ; DATA XREF: ADR+1E↑w
CHBASE:5D00                 .BYTE $55,$55,$57,$53,$7F,$7D,$5F,$7F ; $20: Hangar (L)
CHBASE:5D00                 .BYTE $55,$55,$55,$54,$5F,$5D,$7C,$7F
CHBASE:5D00                 .BYTE $55,$55,$55,$15,$F5,$D5,$FD,$1D
CHBASE:5D00                 .BYTE $55,$55,$55,$D5,$F5,$75,$31,$FD
CHBASE:5D00                 .BYTE $CF,$FF,$F7,$7F,$7F,$5F,$5C,$54
CHBASE:5D00                 .BYTE $7F,$F3,$F5,$FC,$5F,$7F,$54,$54
CHBASE:5D00                 .BYTE $FD,$DD,$35,$F5,$F5,$D5,$55,$55
CHBASE:5D00                 .BYTE $F5,$3D,$DD,$75,$FD,$F5,$D5,$15
CHBASE:5D00                 .BYTE   0,  0,$CC,$30,$CC,$30,$CC,$30
CHBASE:5D00                 .BYTE $AA,$AA,$AA,$AA,  0,  0,$CC,  0
CHBASE:5D00                 .BYTE   0,  0,$CC,$33,$CC,$33,$CC,$33
CHBASE:5D00                 .BYTE   0,  0,$CC,$30,$CC,$30,$CC,$30
CHBASE:5D00                 .BYTE   0,$33,$CC,$33,$CC,$33,$CC,$33
CHBASE:5D00                 .BYTE $FF,$FF,$FF,$FF,  0,  0,$CC,$33
CHBASE:5D00                 .BYTE $CC,$33,$AA,$AA,$AA,$AA,$AA,$AA
CHBASE:5D00                 .BYTE $CD,$31,$C5,$35,$D5,$15,$55,$55
CHBASE:5D88 ADK:            .BYTE $51,$51,$51,$51,$40, $C,$34,  0
CHBASE:5D88                                         ; DATA XREF: B7+AE↑w
CHBASE:5D88                                         ; DFGN+5↑w
CHBASE:5D88                                         ; $31: Anti-Aircraft Battery
CHBASE:5D90                 .BYTE $CC,$33,$CC,$30,$CC,$30,$CC,$30
CHBASE:5D90                 .BYTE $55,$55,$55,$55,$55,$55,$55,$FF
CHBASE:5D90                 .BYTE $55,$55,$55,$55,$55,$55,$FF,$FF
CHBASE:5D90                 .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$55
CHBASE:5D90                 .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$55,$55
CHBASE:5D90                 .BYTE   0,  0,$CC,$30,$CC,$30,$CC,  0
CHBASE:5D90                 .BYTE   0,  0,$CC,$33,$CC,$33,$CC,  0
CHBASE:5D90                 .BYTE $CC,$33,$CC,$33,$CC,$33,$CC,$33
CHBASE:5D90                 .BYTE $AA,$AA,$A9,$A6,$AA,$AA,$AB,$AB
CHBASE:5D90                 .BYTE $9F,$6F,$B3,$B3,$CF,$FC, $C,$31
CHBASE:5D90                 .BYTE $AF,$A1,$B3,$B3,$CC,$FF,  0,  0
CHBASE:5D90                 .BYTE $31,$F2,$C9,$CA,$C9,$2A,$26,$AA
CHBASE:5D90                 .BYTE $57,$40,$CC,$13,$C0,$43,$50,$51
CHBASE:5DF8 ABQ:            .BYTE   0,  0,  0,  0,  0,  0,  0,  0
CHBASE:5DF8                                         ; DATA XREF: ABK+3↑w
CHBASE:5DF8                                         ; DFTNK+23↑w ...
CHBASE:5DF8                                         ; $3F: Black tile
CHBASE:5E00                 .BYTE $5D,$15,$15,$44,$55,$14,$45,$54
CHBASE:5E00                 .BYTE $4D,$C1,  1,  4,$41,  7,$31,$C5
CHBASE:5E00                 .BYTE $15,$15,$54,$51,$14,$51,$54,$45
CHBASE:5E00                 .BYTE $AE,$AB,$EA,$AE,$BA,$AB,$EA,$BB
CHBASE:5E00                 .BYTE $6B,$DA,$69,$AA,$69,$B7,$69,$96
CHBASE:5E28 ABE:            .BYTE $3F,$3F,$3F,  3,  3,  3,$3F,$3F
CHBASE:5E28                                         ; DATA XREF: ABK↑w
CHBASE:5E28                                         ; DFTNK+5↑w
CHBASE:5E28                                         ; $45:
CHBASE:5E30                 .BYTE $55,$55,$5D,$53,$7D,  0,$11,$40
CHBASE:5E30                 .BYTE $55,$55,$54,$11,$45,$C5,$11,  5
CHBASE:5E30                 .BYTE $55,$55,$55,$55,$55,$55,$55,$55
CHBASE:5E48 ABH:            .BYTE   3,  3, $F, $F,$3F,$3F,$FF,$FF
CHBASE:5E48                                         ; DATA XREF: ABK+9↑w
CHBASE:5E48                                         ; DFTNK+11↑w
CHBASE:5E48                                         ; $49:
CHBASE:5E50 ABI:            .BYTE $FC,$FC,$F1,$F1,$C5,$C5,$15,$15
CHBASE:5E50                                         ; DATA XREF: ABK+C↑w
CHBASE:5E50                                         ; DFTNK+17↑w
CHBASE:5E50                 .BYTE $57,$57,$5F,$5F,$7F,$7F,$FF,$FF ; $4A:
CHBASE:5E50                 .BYTE $FD,$FD,$D5,$D5,$55,$55,$55,$55
CHBASE:5E50                 .BYTE $FF,$FF,$FF,$FF,$FD,$FD,$D5,$D5
CHBASE:5E50                 .BYTE $5F,$5F,$FF,$FF,$FF,$FF,$FF,$FF
CHBASE:5E78 ABG:            .BYTE $55,$55,$55,$55,$5F,$5F,$FF,$FF
CHBASE:5E78                                         ; DATA XREF: ABK+6↑w
CHBASE:5E78                                         ; DFTNK+B↑w
CHBASE:5E78                 .BYTE $FF,$FF,$FF,$EF,$EF, $B,$83,$8F ; $4F:
CHBASE:5E78                 .BYTE $FF,$FF,$FF,$BF,$EF,$BB,$2E,$CB
CHBASE:5E78                 .BYTE $2F,$BB,$2E,$CB,$F2,$FC,$FF,$FF
CHBASE:5E78                 .BYTE $BB,$A8,$A0,  3, $F,$CF,$FF,$FF
CHBASE:5EA0 ABW:            .BYTE $A9,$A9,$A5,$A5,$95,$95,$55,$55
CHBASE:5EA0                                         ; DATA XREF: ABV↑w
CHBASE:5EA0                                         ; DFBLDG+5↑w
CHBASE:5EA0                                         ; $54:
CHBASE:5EA8 ACC:            .BYTE   0,  0,  0,  0,  0,  0,  0,  0
CHBASE:5EA8                                         ; DATA XREF: ABV+12↑w
CHBASE:5EA8                                         ; DFBLDG+29↑w
CHBASE:5EA8                                         ; $55:
CHBASE:5EB0 ABX:            .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
CHBASE:5EB0                                         ; DATA XREF: ABV+3↑w
CHBASE:5EB0                                         ; DFBLDG+B↑w
CHBASE:5EB0                                         ; $56:
CHBASE:5EB8 ACE:            .BYTE $AA,$AA,$BE,$82,$82,$82,$BE,$AA
CHBASE:5EB8                                         ; DATA XREF: ABV+18↑w
CHBASE:5EB8                                         ; DFBLDG+35↑w
CHBASE:5EB8                                         ; $57:
CHBASE:5EC0 ABY:            .BYTE   2,  2, $A, $A,$2A,$2A,$AA,$AA
CHBASE:5EC0                                         ; DATA XREF: ABV+6↑w
CHBASE:5EC0                                         ; DFBLDG+11↑w
CHBASE:5EC0                                         ; $58:
CHBASE:5EC8 ACD:            .BYTE $54,$54,$50,$50,$40,$40,  0,  0
CHBASE:5EC8                                         ; DATA XREF: ABV+15↑w
CHBASE:5EC8                                         ; DFBLDG+2F↑w
CHBASE:5EC8                                         ; $59:
CHBASE:5ED0 ABZ:            .BYTE $FD,$FD,$F5,$F5,$D5,$D5,$55,$55
CHBASE:5ED0                                         ; DATA XREF: ABV+9↑w
CHBASE:5ED0                                         ; DFBLDG+17↑w
CHBASE:5ED0                 .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; $5A:
CHBASE:5EE0 ACA:            .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
CHBASE:5EE0                                         ; DATA XREF: ABV+C↑w
CHBASE:5EE0                                         ; DFBLDG+1D↑w
CHBASE:5EE0                                         ; $5C:
CHBASE:5EE8 ACF:            .BYTE $FF,$FF,$FF,$C3,$C3,$C3,$FF,$FF
CHBASE:5EE8                                         ; DATA XREF: ABV+1B↑w
CHBASE:5EE8                                         ; DFBLDG+3B↑w
CHBASE:5EE8                                         ; $5D:
CHBASE:5EF0 ACB:            .BYTE   3,  3, $F, $F,$3F,$3F,$FF,$FF
CHBASE:5EF0                                         ; DATA XREF: ABV+F↑w
CHBASE:5EF0                                         ; DFBLDG+23↑w
CHBASE:5EF0                 .BYTE $20,$80,  2,$20,$88,  2,$88,$20 ; $5E:
CHBASE:5EF0                 .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
CHBASE:5F08 ACI:            .BYTE   2,  2, $A, $A,$2A,$2A,$AA,$AA
CHBASE:5F08                                         ; DATA XREF: DFBLDG+E↑r
CHBASE:5F08                 .BYTE $EC,$B8,$E0,$B0,$C0,$80,  0,  0 ; $60:
CHBASE:5F18 AEF:            .BYTE $EE,$BB,$EE,$BB,$EE,$BB,$EE,$BB ; $62:
CHBASE:5F18                 .BYTE $FF,$FF,$FF,$EB,$EB,$EB,$FF,$FF
CHBASE:5F18                 .BYTE $AA,$AB,$AE,$AB,$AE,$BB,$EE,$BB
CHBASE:5F18                 .BYTE $FC,$FC,$F0,$F0,$C0,$C0,  0,  0
CHBASE:5F18                 .BYTE $77,$DD,$77,$DD,$77,$DD,$77,$DD
CHBASE:5F18                 .BYTE $74,$DC,$70,$D0,$40,$C0,  0,  0
CHBASE:5F18                 .BYTE $AB,$AB,$AF,$AF,$BF,$BF,$FF,$FF
CHBASE:5F18                 .BYTE $77,$DD,$77,$E9,$E9,$E9,$77,$DD
CHBASE:5F18                 .BYTE $AB,$A9,$A7,$AD,$B7,$9D,$77,$DD
CHBASE:5F18                 .BYTE $FF,$FF,$FF,$FE,$FE,$FC,$FF,$FF
CHBASE:5F18                 .BYTE $EA,$88,$8B,$A3,$AF, $F,$FF,$FF
CHBASE:5F18                 .BYTE $FF,$FF,$FF,$FD,$FD,$FC,$FF,$FF
CHBASE:5F18                 .BYTE $D5,$44,$47,$53,$5F, $F,$FF,$FF
CHBASE:5F18                 .BYTE $59,$59,$59,$59,$6A,$AE,$B6,$AA
CHBASE:5F18                 .BYTE $55,$55,$95,$66,$59,$5B,$66,$5A
CHBASE:5F18                 .BYTE $55,$55,$75,$E5,$7D,$AA,$66,$A9
CHBASE:5F18                 .BYTE $5D,$5D,$5D,$5D,$7F,$7F,$7F,$7F
CHBASE:5F18                 .BYTE $FD,$FD,$F5,$F5,$D5,$D5,$55,$55
CHBASE:5F18                 .BYTE $2A,$EA,$2E,$AA,$CA,$AA,$2A,$CB
CHBASE:5F18                 .BYTE $FB,$A8,$AA,$A3,$AB,$BB,$AA,$A8
CHBASE:5F18                 .BYTE $B2,$8C,$88,$33,$AA,$33,$EC,$82
CHBASE:5F18                 .BYTE $88,$32,$E0, $B,$BE,$43,$2C,$CE
CHBASE:5F18                 .BYTE $30,$C3,$F0,  3,$CC,$F0,$30,$CC
CHBASE:5F18                 .BYTE $33,$CC,$C3,$30,  3,$83,$CC,  3
CHBASE:5F18                 .BYTE $CF,$30,$3C,$F3,$2F,$CF,$F3,$CF
CHBASE:5F18                 .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
CHBASE:5FE8 ABM:            .BYTE $55,$55,$55,$55,$5F,$5F,$FF,$FF
CHBASE:5FE8                                         ; DATA XREF: DFTNK+8↑r
CHBASE:5FE8                                         ; $7D:
CHBASE:5FF0 AED:            .BYTE   0,  0,  0,  0,  0,  0,  0,  0
CHBASE:5FF0                                         ; DATA XREF: ADR+21↑w
CHBASE:5FF0                                         ; DFHNGR+5↑w
CHBASE:5FF0                                         ; $7E: Hangar (M) Black
CHBASE:5FF8 ABS:            .BYTE $54,$54,$50,$50,$40,$40,  0,  0
CHBASE:5FF8                                         ; DATA XREF: ABK+12↑w
CHBASE:5FF8                                         ; DFTNK+29↑w
CHBASE:5FF8 ; end of 'CHBASE'                       ; $7F:
CHBASE:5FF8
SCREENRAM:6400 ANTIC screen memory
SCREENRAM:6400 ; ===========================================================================
SCREENRAM:6400
SCREENRAM:6400 ; Segment type: Uninitialized
SCREENRAM:6400                 ;.segment SCREENRAM
SCREENRAM:6400                 * =  $6400
SCREENRAM:6400 SC:             .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6400                                         ; DATA XREF: RESET+FC↑t
SCREENRAM:6400                                         ; RESET+101↑t ...
SCREENRAM:6400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; Screen memory
SCREENRAM:6400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6400                 .BYTE 0 ; (uninited)
SCREENRAM:6441 byte_6441:      .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6441                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6441                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6441                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6441                 .BYTE 0 ; (uninited)
SCREENRAM:6482 byte_6482:      .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6482                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6482                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6482                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6482                 .BYTE 0 ; (uninited)
SCREENRAM:64C3 byte_64C3:      .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:64C3                                         ; DATA XREF: CNSL__CONSOLE+44↑w
SCREENRAM:64C3                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:64C3                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:64C3                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:64C3                 .BYTE 0 ; (uninited)
SCREENRAM:6504                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6504                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6504                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6504                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6504                 .BYTE 0 ; (uninited)
SCREENRAM:6545                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6545                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6545                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6545                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6545                 .BYTE 0 ; (uninited)
SCREENRAM:6586                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6586                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6586                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6586                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6586                 .BYTE 0 ; (uninited)
SCREENRAM:65C7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:65C7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:65C7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:65C7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:65C7                 .BYTE 0 ; (uninited)
SCREENRAM:6608                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6608                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6608                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6608                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6608                 .BYTE 0 ; (uninited)
SCREENRAM:6649                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6649                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6649                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6649                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6649                 .BYTE 0 ; (uninited)
SCREENRAM:668A                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:668A                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:668A                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:668A                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:668A                 .BYTE 0 ; (uninited)
SCREENRAM:66CB                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:66CB                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:66CB                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:66CB                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:66CB                 .BYTE 0 ; (uninited)
SCREENRAM:670C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:670C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:670C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:670C                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:670C                 .BYTE 0 ; (uninited)
SCREENRAM:674D                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:674D                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:674D                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:674D                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:674D                 .BYTE 0 ; (uninited)
SCREENRAM:678E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:678E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:678E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:678E                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:678E                 .BYTE 0 ; (uninited)
SCREENRAM:67CF                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:67CF                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:67CF                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:67CF                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:67CF                 .BYTE 0 ; (uninited)
SCREENRAM:6810                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6810                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6810                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6810                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6810                 .BYTE 0 ; (uninited)
SCREENRAM:6851                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6851                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6851                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6851                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6851                 .BYTE 0 ; (uninited)
SCREENRAM:6892                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6892                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6892                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6892                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6892                 .BYTE 0 ; (uninited)
SCREENRAM:68D3                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:68D3                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:68D3                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:68D3                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:68D3                 .BYTE 0 ; (uninited)
SCREENRAM:6914                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6914                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6914                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6914                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6914                 .BYTE 0 ; (uninited)
SCREENRAM:6955                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6955                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6955                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6955                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6955                 .BYTE 0 ; (uninited)
SCREENRAM:6996                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6996                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6996                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6996                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6996                 .BYTE 0 ; (uninited)
SCREENRAM:69D7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:69D7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:69D7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:69D7                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:69D7                 .BYTE 0 ; (uninited)
SCREENRAM:6A18 SC_TOP_PLAYSCREEN:.BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6A18                                         ; DATA XREF: RESET+5F↑t
SCREENRAM:6A18                                         ; RESET+63↑t ...
SCREENRAM:6A18                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6A18                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6A46 SC_STATUS_LINE: CONTROL_DISPLAY <?>     ; DATA XREF: RESET:AFZ↑t
SCREENRAM:6A46                                         ; RESET+A8↑t ...
SCREENRAM:6A8E                 .BYTE 0,0 ; (uninited)
SCREENRAM:6A90 SC_STATUS_TITLE:.BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6A90                                         ; DATA XREF: RESET+9A↑t
SCREENRAM:6A90                                         ; RESET+9F↑t ...
SCREENRAM:6A90                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6A90                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6A90                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6A90                 .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8                 .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
SCREENRAM:6AD8 ; end of 'SCREENRAM'
SCREENRAM:6AD8
PMBASE:7000 ; PMBASE with ANTIC player missle graphics
PMBASE:7000 ; ===========================================================================
PMBASE:7000
PMBASE:7000 ; Segment type: Uninitialized
PMBASE:7000                 ;.segment PMBASE
PMBASE:7000                 * =  $7000
PMBASE:7000 PMBASE_:        .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                                         ; DATA XREF: RESET+21A↑t
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7000                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300 MISSLE:         .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                                         ; DATA XREF: TRIG__TRIGGER_MACHINE_GUN+34↑w
PMBASE:7300                                         ; TRIG__TRIGGER_MACHINE_GUN+51↑w ...
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7300                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400 P0:             .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                                         ; DATA XREF: PROP+56↑w
PMBASE:7400                                         ; PROP+66↑w ...
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; Player Plane (WHITE parts)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7400                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500 P1:             .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                                         ; DATA XREF: DRP1+6↑w
PMBASE:7500                                         ; DRP1+C↑w ...
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; Player Plane (BLACK parts)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7500                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600 P2:             .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                                         ; DATA XREF: DRP23:JB↑t
PMBASE:7600                                         ; L6:ON↑r ...
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; Enemy (first color)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7600                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700 P3:             .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                                         ; DATA XREF: DRP23+B7↑w
PMBASE:7700                                         ; L6+124↑r ...
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; Enemy (second color)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
PMBASE:7700 ; end of 'PMBASE'
PMBASE:7700
IO:D000 ; ===========================================================================
IO:D000
IO:D000 ; Segment type: Regular
IO:D000                 ;.segment IO
IO:D000                 * =  $D000
IO:D000 HPOSP0:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+228↑w
IO:D000                                         ; CE+A↑w ...
IO:D000                                         ; Player Plane (Horizontal Position – first color)
IO:D001 HPOSP1:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+22B↑w
IO:D001                                         ; CE+D↑w ...
IO:D001                                         ; Player Plane (Horizontal Position – second color)
IO:D002 HPOSP2:         .BYTE 0 ; (uninited)    ; DATA XREF: TURN+178↑w
IO:D002                                         ; DRP23+5A↑w ...
IO:D002                                         ; Enemy (Horizontal Position – first color)
IO:D003 HPOSP3:         .BYTE 0 ; (uninited)    ; DATA XREF: TURN+BC↑w
IO:D003                                         ; DRP23+5D↑w ...
IO:D003                                         ; Enemy (Horizontal Position – second color)
IO:D004 P0PF_HPOSM0:    .BYTE 0 ; (uninited)    ; DATA XREF: TURN+16C↑r
IO:D004                                         ; TRIG__TRIGGER_MACHINE_GUN+29↑w ...
IO:D004                                         ; Player Machine Gun Bullet (Horizontal Position)
IO:D005 P1PF_HPOSM1:    .BYTE 0 ; (uninited)    ; DATA XREF: CKCOL:L2↑r
IO:D005                                         ; PC+4↑w ...
IO:D005                                         ; Missile 1 Horizontal Position / Player 1 to Playfield Collision
IO:D006 P2PF_HPOSM2:    .BYTE 0 ; (uninited)    ; DATA XREF: TURN+BF↑w
IO:D006                                         ; TRIGB+28↑w ...
IO:D006                                         ; Missile 2 Horizontal Position / Player 2 to Playfield Collision
IO:D007 P3PF_HPOSM3:    .BYTE 0 ; (uninited)    ; DATA XREF: ZZ:SX↑w
IO:D007                                         ; FTNKGN-C4E↑w ...
IO:D007                                         ; Missile 3 Horizontal Position / Player 3 to Playfield Collision
IO:D008 M0PL:           .BYTE 0 ; (uninited)    ; DATA XREF: COLM02+C↑r
IO:D008                                         ; SHP23:_1↑r
IO:D008                                         ; Missle to Player 0 Collision
IO:D009 M1PL:           .BYTE 0 ; (uninited)    ; DATA XREF: BMBSHP+6↑r
IO:D009                                         ; BMCPTL:_1↑r ...
IO:D009                                         ; Missle to Player 1 Collision
IO:D00A M2PL_SIZEP2:    .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1D3↑w
IO:D00A                                         ; COLM20↑r ...
IO:D00A                                         ; Missle to Player 2 Collision / Player 2 Size
IO:D00B M3PL_SIZEP3:    .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1D6↑w
IO:D00B                                         ; COLM30↑r ...
IO:D00B                                         ; Missle to Player 3 Collision / Player 3 Size
IO:D00C SIZEM:          .BYTE 0 ; (uninited)    ; DATA XREF: RESET+1B9↑w
IO:D00C                                         ; SR+1C↑w ...
IO:D00C                                         ; Missle Size
IO:D00D P1PL:           .BYTE 0 ; (uninited)    ; DATA XREF: P0SHP↑r
IO:D00D                                         ; COLCPTL↑r
IO:D00D                                         ; Player Graphics Register 0
IO:D00E P2PL:           .BYTE 0 ; (uninited)    ; DATA XREF: COLP02↑r
IO:D00E                                         ; Player Graphics Register 1
IO:D00F                 ; 0 .BYTE uninited & unexplored
IO:D010                 ; 0 .BYTE uninited & unexplored
IO:D011                 ; 0 .BYTE uninited & unexplored
IO:D012                 ; 0 .BYTE uninited & unexplored ; Player-Missle Color 0
IO:D013                 ; 0 .BYTE uninited & unexplored ; Player-Missle Color 1
IO:D014                 ; 0 .BYTE uninited & unexplored ; Player-Missle Color 2
IO:D015                 ; 0 .BYTE uninited & unexplored ; Player-Missle Color 3
IO:D016                 .BYTE 0 ; (uninited)    ; Playfield Color 0
IO:D017 COLPF1:         .BYTE 0 ; (uninited)    ; DATA XREF: VDSLST_ROUTINE+19↑w
IO:D017                                         ; Playfield Color 1
IO:D018 COLPF2:         .BYTE 0 ; (uninited)    ; DATA XREF: VDSLST_ROUTINE+1E↑w
IO:D018                                         ; Playfield Color 2
IO:D019 COLPF3:         .BYTE 0 ; (uninited)    ; DATA XREF: VDSLST_ROUTINE+16↑w
IO:D019                                         ; Playfield Color 3
IO:D01A COLBK:          .BYTE 0 ; (uninited)    ; DATA XREF: VDSLST_ROUTINE+B↑w
IO:D01A                                         ; DLIR1__DLIST_DURING_MENU+6↑w
IO:D01A                                         ; Background Color
IO:D01B                 .BYTE 0,0 ; (uninited)
IO:D01D GRACTL:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+221↑w
IO:D01D                                         ; Graphics Control Register
IO:D01E HITCLR:         .BYTE 0 ; (uninited)    ; DATA XREF: EB+C3↑w
IO:D01E                                         ; TIMER+2↑w
IO:D01E                                         ; write to HITCLR clears all of the collision registers.
IO:D01F CONSOL:         .BYTE 0 ; (uninited)    ; DATA XREF: CNSL__CONSOLE↑r
IO:D01F                                         ; MENU__CHECK_KEYS↑r
IO:D01F                                         ; Console Switch Port
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D020                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D200 AUDF1:          .BYTE 0 ; (uninited)    ; DATA XREF: RESET+185↑w
IO:D200                                         ; EB+7D↑w ...
IO:D200                                         ; Audio 1 Frequency Register
IO:D201 AUDC1:          .BYTE 0 ; (uninited)    ; DATA XREF: EB+94↑w
IO:D201                                         ; TURN+F6↑w ...
IO:D201                                         ; Audio 1 Channel Control Register
IO:D202 AUDF2:          .BYTE 0 ; (uninited)    ; DATA XREF: PC+1F↑w
IO:D202                                         ; Y8+A↑w ...
IO:D202                                         ; Audio 2 Frequency Register
IO:D203 AUDC2:          .BYTE 0 ; (uninited)    ; DATA XREF: PC+27↑w
IO:D203                                         ; AFP+6↑w ...
IO:D203                                         ; Audio 2 Channel Control Register
IO:D204 AUDF3:          .BYTE 0 ; (uninited)    ; DATA XREF: EB+82↑w
IO:D204                                         ; XSND+F↑w ...
IO:D204                                         ; Audio 3 Frequency Register
IO:D205 AUDC3:          .BYTE 0 ; (uninited)    ; DATA XREF: XSND+34↑w
IO:D205                                         ; XXX+6↑w ...
IO:D205                                         ; Audio 3 Channel Control Register
IO:D206 AUDF4:          .BYTE 0 ; (uninited)    ; DATA XREF: REFUEL+3F↑w
IO:D206                                         ; REFUEL+4D↑w ...
IO:D206                                         ; Audio 4 Frequency Register
IO:D207 AUDC4:          .BYTE 0 ; (uninited)    ; DATA XREF: TURN+F9↑w
IO:D207                                         ; PLFWD+187↑w ...
IO:D207                                         ; Audio 4 Channel Control Register
IO:D208 AUDCTL:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+2A↑w
IO:D208                                         ; _1__SOUND_TIMER_IRQ+C↑w
IO:D208                                         ; Audio Control Register
IO:D209                 .BYTE 0 ; (uninited)
IO:D20A RANDOM:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+12B↑r
IO:D20A                                         ; RESET+15B↑r ...
IO:D20A                                         ; Random Number Generator
IO:D20B                 .BYTE 0,0,0,0 ; (uninited)
IO:D20F SKSTAT:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+2F↑w
IO:D20F                                         ; _1__SOUND_TIMER_IRQ+7↑w
IO:D20F                                         ; Serial Port control Register
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D210                 .BYTE 0,0 ; (uninited)
IO:D302 PACTL:          .BYTE 0 ; (uninited)    ; DATA XREF: BOOT_CONTINUE+48↑w
IO:D302                                         ; Port A Control Register
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D303                 .BYTE 0 ; (uninited)
IO:D404 HSCROL:         .BYTE 0 ; (uninited)    ; DATA XREF: VBIR__DEFERRED_VBL_DRAW+1D↑w
IO:D404                                         ; VBIR__DEFERRED_VBL_DRAW+43↑w ...
IO:D404                                         ; Horizontal Scroll Register
IO:D405 VSCROL:         .BYTE 0 ; (uninited)    ; DATA XREF: VBIR__DEFERRED_VBL_DRAW+21↑w
IO:D405                                         ; VBIR__DEFERRED_VBL_DRAW+47↑w
IO:D405                                         ; Vertical Scroll Register
IO:D406                 ; 0 .BYTE uninited & unexplored
IO:D407 PMBASE:         .BYTE 0 ; (uninited)    ; DATA XREF: RESET+21C↑w
IO:D407                                         ; Player-Missile Address Base Register
IO:D408                 ; 0 .BYTE uninited & unexplored
IO:D409 CHBASE:         .BYTE 0 ; (uninited)    ; DATA XREF: VDSLST_ROUTINE+E↑w
IO:D409                                         ; Character Address Base Register
IO:D40A WSYNC:          .BYTE 0 ; (uninited)    ; DATA XREF: VDSLST_ROUTINE+8↑w
IO:D40A                                         ; DLIR1__DLIST_DURING_MENU+3↑w
IO:D40A                                         ; Wait for Horizontal Blank Synchronisation
IO:D40B                 .BYTE 0,0,0 ; (uninited)
IO:D40E NMIEN:          .BYTE 0 ; (uninited)    ; DATA XREF: RESET+E5↑w
IO:D40E                                         ; EB+C0↑w ...
IO:D40E                                         ; $80: DL IRQ enabled, $40: VBL IRQ enabled
IO:D40F                 .BYTE 0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
IO:D410 ; end of 'IO'
IO:D410
ROM:D800 ; ===========================================================================
ROM:D800
ROM:D800 ; Segment type: Regular
ROM:D800                 ;.segment ROM
ROM:D800                 * =  $D800
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:D800                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E400 EDITRV:         .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; EDITOR
ROM:E410 SCRENV:         .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; TELEVISION SCREEN
ROM:E420 KEYBDV:         .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; KEYBOARD
ROM:E430 PRINTV:         .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; PRINTER
ROM:E440 CASETV:         .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited) ; CASSETTE
ROM:E450 DISKIW:         .BYTE 0,0,0 ; (uninited) ; DISK INITIALIZATION
ROM:E453 DSKINV:         .BYTE 0,0,0 ; (uninited) ; DISK INTERFACE
ROM:E456 CIOV:           .BYTE 0,0,0 ; (uninited) ; CENTRAL INPUT OUTPUT ROUTINE
ROM:E459 SIOV:           .BYTE 0,0,0 ; (uninited)
ROM:E459                                         ; CODE XREF: READ_BLOCK+B↑p
ROM:E459                                         ; SERIAL INPUT OUTPUT ROUTINE
ROM:E45C SETVBV:         .BYTE 0,0,0 ; (uninited) ; CODE XREF: EB+BB↑p
ROM:E45C                                         ; TIMER+9↑p ...
ROM:E45C                                         ; SET SYSTEM TIMERS ROUTINE
ROM:E45F SYSVBV:         .BYTE 0,0,0 ; (uninited) ; SYSTEM VERTICAL BLANK CALCULATIONS
ROM:E462 XITVBV:         .BYTE 0,0,0 ; (uninited) ; CODE XREF: XSND:PV↑j
ROM:E462                                         ; XSND+3F↑j
ROM:E462                                         ; DATA XREF: ...
ROM:E462                                         ; EXIT VERTICAL BLANK CALCULATIONS
ROM:E465 SIOINV:         .BYTE 0,0,0 ; (uninited) ; SERIAL, INPUT OUTPUT INITIALIZATION
ROM:E468 SENDEV:         .BYTE 0,0,0 ; (uninited) ; SEND ENABLE ROUTINE
ROM:E46B INTINV:         .BYTE 0,0,0 ; (uninited) ; INTERRUPT HANDLER INITIALIZATION
ROM:E46E CIOINV:         .BYTE 0,0,0 ; (uninited) ; CENTRAL INPUT OUTPUT INITIALIZATION
ROM:E471 BLKBDV:         .BYTE 0,0,0 ; (uninited) ; BLACKBOARD MODE
ROM:E474 WARMSV:         .BYTE 0,0,0 ; (uninited) ; WARM START ENTRY POINT
ROM:E477 COLDSV:         .BYTE 0,0,0 ; (uninited) ; COLD START ENTRY POINT
ROM:E47A RBLOKV:         .BYTE 0,0,0 ; (uninited) ; CASSETTE READ BLOCK ENTRY POINT VECTOR
ROM:E47D CSOPIV:         .BYTE 0,0,0 ; (uninited) ; CASSETTE OPEN FOR INPUT VECTOR
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:E480                 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
ROM:FFFC BRK:            .BYTE 0,0 ; (uninited)  ; DATA XREF: READ_BLOCK+10↑r
ROM:FFFE                 .BYTE 0,0 ; (uninited)
ROM:FFFE ; end of 'ROM'
ROM:FFFE
ROM:FFFE
ROM:FFFE                 .END
